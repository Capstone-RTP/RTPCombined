
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c854  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800ca14  0800ca14  0001ca14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf0  0800caf0  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800caf0  0800caf0  0001caf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800caf8  0800caf8  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caf8  0800caf8  0001caf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cafc  0800cafc  0001cafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800cb00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000330  0800ce30  00020330  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800ce30  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217b7  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e9  00000000  00000000  00041b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00044f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  000467e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004cde  00000000  00000000  00047f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da11  00000000  00000000  0004cc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a9f8  00000000  00000000  0006a677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018506f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef0  00000000  00000000  001850c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000330 	.word	0x20000330
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c9fc 	.word	0x0800c9fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000334 	.word	0x20000334
 80001fc:	0800c9fc 	.word	0x0800c9fc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f001 f90e 	bl	80017ca <HAL_Init>

  /* USER CODE BEGIN Init */

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 100);
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2320      	movs	r3, #32
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ba:	2200      	movs	r2, #0
 80005bc:	4990      	ldr	r1, [pc, #576]	; (8000800 <main+0x25c>)
 80005be:	4891      	ldr	r0, [pc, #580]	; (8000804 <main+0x260>)
 80005c0:	f000 fd81 	bl	80010c6 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 80005c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d2:	2200      	movs	r2, #0
 80005d4:	498c      	ldr	r1, [pc, #560]	; (8000808 <main+0x264>)
 80005d6:	488d      	ldr	r0, [pc, #564]	; (800080c <main+0x268>)
 80005d8:	f000 fd75 	bl	80010c6 <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 80005dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ea:	2208      	movs	r2, #8
 80005ec:	4988      	ldr	r1, [pc, #544]	; (8000810 <main+0x26c>)
 80005ee:	4889      	ldr	r0, [pc, #548]	; (8000814 <main+0x270>)
 80005f0:	f000 fd69 	bl	80010c6 <initStepper>

	//I2C assignment to TOF API
	Dev->I2cHandle = &hi2c2;
 80005f4:	4b88      	ldr	r3, [pc, #544]	; (8000818 <main+0x274>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a88      	ldr	r2, [pc, #544]	; (800081c <main+0x278>)
 80005fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80005fe:	4b86      	ldr	r3, [pc, #536]	; (8000818 <main+0x274>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2252      	movs	r2, #82	; 0x52
 8000604:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	// VL53L0X init for Single Measurement
	HAL_GPIO_WritePin(tofXSHUT_GPIO_Port, tofXSHUT_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060e:	4884      	ldr	r0, [pc, #528]	; (8000820 <main+0x27c>)
 8000610:	f001 fcd2 	bl	8001fb8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000614:	2014      	movs	r0, #20
 8000616:	f001 f94d 	bl	80018b4 <HAL_Delay>
	HAL_GPIO_WritePin(tofXSHUT_GPIO_Port,tofXSHUT_Pin, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000620:	487f      	ldr	r0, [pc, #508]	; (8000820 <main+0x27c>)
 8000622:	f001 fcc9 	bl	8001fb8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000626:	2014      	movs	r0, #20
 8000628:	f001 f944 	bl	80018b4 <HAL_Delay>

	VL53L0X_WaitDeviceBooted( Dev );
 800062c:	4b7a      	ldr	r3, [pc, #488]	; (8000818 <main+0x274>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f007 f837 	bl	80076a4 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000636:	4b78      	ldr	r3, [pc, #480]	; (8000818 <main+0x274>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fd4c 	bl	80070d8 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8000640:	4b75      	ldr	r3, [pc, #468]	; (8000818 <main+0x274>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f006 feab 	bl	80073a0 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800064a:	4b73      	ldr	r3, [pc, #460]	; (8000818 <main+0x274>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1d7a      	adds	r2, r7, #5
 8000650:	1db9      	adds	r1, r7, #6
 8000652:	4618      	mov	r0, r3
 8000654:	f007 fd46 	bl	80080e4 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000658:	4b6f      	ldr	r3, [pc, #444]	; (8000818 <main+0x274>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	1dfa      	adds	r2, r7, #7
 800065e:	f107 0108 	add.w	r1, r7, #8
 8000662:	4618      	mov	r0, r3
 8000664:	f008 f9cc 	bl	8008a00 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000668:	4b6b      	ldr	r3, [pc, #428]	; (8000818 <main+0x274>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 f8b6 	bl	80077e0 <VL53L0X_SetDeviceMode>
	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000674:	4b68      	ldr	r3, [pc, #416]	; (8000818 <main+0x274>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2201      	movs	r2, #1
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f007 fb2b 	bl	8007cd8 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000682:	4b65      	ldr	r3, [pc, #404]	; (8000818 <main+0x274>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2201      	movs	r2, #1
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f007 fb24 	bl	8007cd8 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000690:	4b61      	ldr	r3, [pc, #388]	; (8000818 <main+0x274>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f641 1299 	movw	r2, #6553	; 0x1999
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f007 fbcc 	bl	8007e38 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80006a0:	4b5d      	ldr	r3, [pc, #372]	; (8000818 <main+0x274>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fbc4 	bl	8007e38 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80006b0:	4b59      	ldr	r3, [pc, #356]	; (8000818 <main+0x274>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80006b8:	4618      	mov	r0, r3
 80006ba:	f007 f8ef 	bl	800789c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80006be:	4b56      	ldr	r3, [pc, #344]	; (8000818 <main+0x274>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2212      	movs	r2, #18
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f007 f90e 	bl	80078e8 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006cc:	4b52      	ldr	r3, [pc, #328]	; (8000818 <main+0x274>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	220e      	movs	r2, #14
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f007 f907 	bl	80078e8 <VL53L0X_SetVcselPulsePeriod>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f8b3 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 fb99 	bl	8000e14 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006e2:	f000 f9e1 	bl	8000aa8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006e6:	f000 facf 	bl	8000c88 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 80006ea:	f000 f93d 	bl	8000968 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80006ee:	f000 f8fb 	bl	80008e8 <MX_I2C2_Init>
  MX_TIM3_Init();
 80006f2:	f000 fa51 	bl	8000b98 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006f6:	f000 fb3f 	bl	8000d78 <MX_TIM5_Init>
  MX_TIM1_Init();
 80006fa:	f000 f981 	bl	8000a00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 80006fe:	4b40      	ldr	r3, [pc, #256]	; (8000800 <main+0x25c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	68da      	ldr	r2, [r3, #12]
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <main+0x25c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f042 0201 	orr.w	r2, r2, #1
 800070c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800070e:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <main+0x264>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <main+0x264>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f042 0201 	orr.w	r2, r2, #1
 800071c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800071e:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <main+0x26c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <main+0x26c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f042 0201 	orr.w	r2, r2, #1
 800072c:	60da      	str	r2, [r3, #12]

	//Enable UART Enable IT
	//	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 800072e:	483d      	ldr	r0, [pc, #244]	; (8000824 <main+0x280>)
 8000730:	f003 ff9e 	bl	8004670 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000738:	f001 f8bc 	bl	80018b4 <HAL_Delay>
	setTarget(&thetaMotor, 1000, 1);
 800073c:	2301      	movs	r3, #1
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	482e      	ldr	r0, [pc, #184]	; (8000804 <main+0x260>)
 800074a:	f000 fcee 	bl	800112a <setTarget>
	setTarget(&yMotor, 800, 1);
 800074e:	2301      	movs	r3, #1
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000756:	f04f 0300 	mov.w	r3, #0
 800075a:	482c      	ldr	r0, [pc, #176]	; (800080c <main+0x268>)
 800075c:	f000 fce5 	bl	800112a <setTarget>
	setTarget(&rMotor,500,1);
 8000760:	2301      	movs	r3, #1
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	4829      	ldr	r0, [pc, #164]	; (8000814 <main+0x270>)
 800076e:	f000 fcdc 	bl	800112a <setTarget>
	//
	//	MessageLen = sprintf((char*)Message, "Here 1 \n\r");
	//	HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
	//
	//	hx711_init(&loadCell, loadCLK_GPIO_Port, loadCLK_Pin, loadDATA_GPIO_Port, loadDATA_Pin, &htim5);
		MessageLen = sprintf((char*)Message, "Here 2 \n\r");
 8000772:	492d      	ldr	r1, [pc, #180]	; (8000828 <main+0x284>)
 8000774:	482d      	ldr	r0, [pc, #180]	; (800082c <main+0x288>)
 8000776:	f00b fcd9 	bl	800c12c <siprintf>
 800077a:	4603      	mov	r3, r0
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <main+0x28c>)
 8000780:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <main+0x28c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b29a      	uxth	r2, r3
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	4928      	ldr	r1, [pc, #160]	; (800082c <main+0x288>)
 800078c:	4829      	ldr	r0, [pc, #164]	; (8000834 <main+0x290>)
 800078e:	f005 fa47 	bl	8005c20 <HAL_UART_Transmit>
		//		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
		//
		//		if((HAL_GetTick()-timer>=5000) && (HAL_GetTick()-timer<=5180)){
		//			setTarget(&yMotor, 1000, 0);
		//		}
		timer = HAL_GetTick();
 8000792:	f001 f883 	bl	800189c <HAL_GetTick>
 8000796:	60f8      	str	r0, [r7, #12]
		VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <main+0x274>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4926      	ldr	r1, [pc, #152]	; (8000838 <main+0x294>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 ff42 	bl	8008628 <VL53L0X_PerformSingleRangingMeasurement>
		if(RangingData.RangeStatus == 0)
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <main+0x294>)
 80007a6:	7e1b      	ldrb	r3, [r3, #24]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f2      	bne.n	8000792 <main+0x1ee>
		{
			MessageLen = sprintf((char*)Message, "Measured distance: %i ", (int)RangingData.RangeMilliMeter);
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <main+0x294>)
 80007ae:	891b      	ldrh	r3, [r3, #8]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4922      	ldr	r1, [pc, #136]	; (800083c <main+0x298>)
 80007b4:	481d      	ldr	r0, [pc, #116]	; (800082c <main+0x288>)
 80007b6:	f00b fcb9 	bl	800c12c <siprintf>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <main+0x28c>)
 80007c0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <main+0x28c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	4918      	ldr	r1, [pc, #96]	; (800082c <main+0x288>)
 80007cc:	4819      	ldr	r0, [pc, #100]	; (8000834 <main+0x290>)
 80007ce:	f005 fa27 	bl	8005c20 <HAL_UART_Transmit>
			MessageLen = sprintf((char*)Message, " Measure Time: %d\n\r",(int)(HAL_GetTick()-timer));
 80007d2:	f001 f863 	bl	800189c <HAL_GetTick>
 80007d6:	4602      	mov	r2, r0
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4918      	ldr	r1, [pc, #96]	; (8000840 <main+0x29c>)
 80007e0:	4812      	ldr	r0, [pc, #72]	; (800082c <main+0x288>)
 80007e2:	f00b fca3 	bl	800c12c <siprintf>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <main+0x28c>)
 80007ec:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <main+0x28c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	490d      	ldr	r1, [pc, #52]	; (800082c <main+0x288>)
 80007f8:	480e      	ldr	r0, [pc, #56]	; (8000834 <main+0x290>)
 80007fa:	f005 fa11 	bl	8005c20 <HAL_UART_Transmit>
		timer = HAL_GetTick();
 80007fe:	e7c8      	b.n	8000792 <main+0x1ee>
 8000800:	200004c8 	.word	0x200004c8
 8000804:	200005b0 	.word	0x200005b0
 8000808:	2000047c 	.word	0x2000047c
 800080c:	200005e0 	.word	0x200005e0
 8000810:	20000514 	.word	0x20000514
 8000814:	20000610 	.word	0x20000610
 8000818:	20000000 	.word	0x20000000
 800081c:	2000034c 	.word	0x2000034c
 8000820:	48000c00 	.word	0x48000c00
 8000824:	20000560 	.word	0x20000560
 8000828:	0800ca14 	.word	0x0800ca14
 800082c:	20000640 	.word	0x20000640
 8000830:	20000680 	.word	0x20000680
 8000834:	200003a0 	.word	0x200003a0
 8000838:	20000684 	.word	0x20000684
 800083c:	0800ca20 	.word	0x0800ca20
 8000840:	0800ca38 	.word	0x0800ca38

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b098      	sub	sp, #96	; 0x60
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	2248      	movs	r2, #72	; 0x48
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f00b fc62 	bl	800c11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000866:	2000      	movs	r0, #0
 8000868:	f002 f968 	bl	8002b3c <HAL_PWREx_ControlVoltageScaling>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000872:	f000 fc23 	bl	80010bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000876:	2310      	movs	r3, #16
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000882:	2360      	movs	r3, #96	; 0x60
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800088a:	2301      	movs	r3, #1
 800088c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000892:	2332      	movs	r3, #50	; 0x32
 8000894:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800089a:	2302      	movs	r3, #2
 800089c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 f9fc 	bl	8002ca4 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008b2:	f000 fc03 	bl	80010bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2303      	movs	r3, #3
 80008bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2104      	movs	r1, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fe64 	bl	800359c <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008da:	f000 fbef 	bl	80010bc <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3760      	adds	r7, #96	; 0x60
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_I2C2_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MX_I2C2_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_I2C2_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <MX_I2C2_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_I2C2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_I2C2_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_I2C2_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2C2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <MX_I2C2_Init+0x74>)
 8000924:	f001 fb60 	bl	8001fe8 <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800092e:	f000 fbc5 	bl	80010bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_I2C2_Init+0x74>)
 8000936:	f002 f849 	bl	80029cc <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fbbc 	bl	80010bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_I2C2_Init+0x74>)
 8000948:	f002 f88b 	bl	8002a62 <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 fbb3 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000034c 	.word	0x2000034c
 8000960:	40005800 	.word	0x40005800
 8000964:	10c0ecff 	.word	0x10c0ecff

08000968 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_LPUART1_UART_Init+0x94>)
 8000970:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 80009b2:	f005 f8e5 	bl	8005b80 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 fb7e 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 80009c4:	f006 faa9 	bl	8006f1a <HAL_UARTEx_SetTxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ce:	f000 fb75 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 80009d6:	f006 fade 	bl	8006f96 <HAL_UARTEx_SetRxFifoThreshold>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e0:	f000 fb6c 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_LPUART1_UART_Init+0x90>)
 80009e6:	f006 fa5f 	bl	8006ea8 <HAL_UARTEx_DisableFifoMode>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f000 fb64 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200003a0 	.word	0x200003a0
 80009fc:	40008000 	.word	0x40008000

08000a00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <MX_TIM1_Init+0xa4>)
 8000a22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a4a:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a4c:	f003 fdb8 	bl	80045c0 <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a56:	f000 fb31 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a68:	f004 fac2 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a72:	f000 fb23 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_TIM1_Init+0xa0>)
 8000a88:	f004 ffd4 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a92:	f000 fb13 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000430 	.word	0x20000430
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000ae4:	2263      	movs	r2, #99	; 0x63
 8000ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000af0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b02:	4824      	ldr	r0, [pc, #144]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b04:	f003 fd5c 	bl	80045c0 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 fad5 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481d      	ldr	r0, [pc, #116]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b20:	f004 fa66 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b2a:	f000 fac7 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b2e:	4819      	ldr	r0, [pc, #100]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b30:	f003 fe2d 	bl	800478e <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b3a:	f000 fabf 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b4e:	f004 ff71 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b58:	f000 fab0 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5c:	2360      	movs	r3, #96	; 0x60
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000b60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b76:	f004 f927 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b80:	f000 fa9c 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM2_Init+0xec>)
 8000b86:	f000 fcd1 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3738      	adds	r7, #56	; 0x38
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000047c 	.word	0x2000047c

08000b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000bcc:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <MX_TIM3_Init+0xec>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000bd2:	2263      	movs	r2, #99	; 0x63
 8000bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000bde:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf0:	4823      	ldr	r0, [pc, #140]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000bf2:	f003 fce5 	bl	80045c0 <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bfc:	f000 fa5e 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481c      	ldr	r0, [pc, #112]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000c0e:	f004 f9ef 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c18:	f000 fa50 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c1c:	4818      	ldr	r0, [pc, #96]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000c1e:	f003 fdb6 	bl	800478e <HAL_TIM_PWM_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c28:	f000 fa48 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4811      	ldr	r0, [pc, #68]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000c3c:	f004 fefa 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c46:	f000 fa39 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000c4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000c64:	f004 f8b0 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c6e:	f000 fa25 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_TIM3_Init+0xe8>)
 8000c74:	f000 fc5a 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000c78:	bf00      	nop
 8000c7a:	3738      	adds	r7, #56	; 0x38
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200004c8 	.word	0x200004c8
 8000c84:	40000400 	.word	0x40000400

08000c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08e      	sub	sp, #56	; 0x38
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cbc:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MX_TIM4_Init+0xec>)
 8000cbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cc2:	2263      	movs	r2, #99	; 0x63
 8000cc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000ccc:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cce:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000cd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ce0:	4823      	ldr	r0, [pc, #140]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000ce2:	f003 fc6d 	bl	80045c0 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000cec:	f000 f9e6 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	481c      	ldr	r0, [pc, #112]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000cfe:	f004 f977 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d08:	f000 f9d8 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000d0e:	f003 fd3e 	bl	800478e <HAL_TIM_PWM_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d18:	f000 f9d0 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000d2c:	f004 fe82 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d36:	f000 f9c1 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3a:	2360      	movs	r3, #96	; 0x60
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2208      	movs	r2, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000d54:	f004 f838 	bl	8004dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d5e:	f000 f9ad 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM4_Init+0xe8>)
 8000d64:	f000 fbe2 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	; 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000514 	.word	0x20000514
 8000d74:	40000800 	.word	0x40000800

08000d78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000d98:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <MX_TIM5_Init+0x98>)
 8000d9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000d9e:	2263      	movs	r2, #99	; 0x63
 8000da0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000daa:	f04f 32ff 	mov.w	r2, #4294967295
 8000dae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000dbe:	f003 fbff 	bl	80045c0 <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000dc8:	f000 f978 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000dda:	f004 f909 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000de4:	f000 f96a 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_TIM5_Init+0x94>)
 8000df6:	f004 fe1d 	bl	8005a34 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e00:	f000 f95c 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000560 	.word	0x20000560
 8000e10:	40000c00 	.word	0x40000c00

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a3b      	ldr	r2, [pc, #236]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a35      	ldr	r2, [pc, #212]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a29      	ldr	r2, [pc, #164]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_GPIO_Init+0x108>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000ea2:	f001 feef 	bl	8002c84 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	21e0      	movs	r1, #224	; 0xe0
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f001 f883 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, loadCLK_Pin|tofXSHUT_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000eb8:	4819      	ldr	r0, [pc, #100]	; (8000f20 <MX_GPIO_Init+0x10c>)
 8000eba:	f001 f87d 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000ebe:	23e0      	movs	r3, #224	; 0xe0
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f000 fedc 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : loadCLK_Pin tofXSHUT_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin|tofXSHUT_Pin;
 8000edc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <MX_GPIO_Init+0x10c>)
 8000ef6:	f000 fecd 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 8000efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0x10c>)
 8000f10:	f000 fec0 	bl	8001c94 <HAL_GPIO_Init>

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	48000c00 	.word	0x48000c00

08000f24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f28:	b088      	sub	sp, #32
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	4a5c      	ldr	r2, [pc, #368]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d13b      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 8000f36:	4b5c      	ldr	r3, [pc, #368]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10d      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 8000f42:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f48:	1c51      	adds	r1, r2, #1
 8000f4a:	6139      	str	r1, [r7, #16]
 8000f4c:	f143 0300 	adc.w	r3, r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b55      	ldr	r3, [pc, #340]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000f58:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000f5c:	e012      	b.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000f5e:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d10c      	bne.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 8000f6a:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f6c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f70:	1e51      	subs	r1, r2, #1
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f7c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f80:	e9c3 1206 	strd	r1, r2, [r3, #24]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f90:	4299      	cmp	r1, r3
 8000f92:	bf08      	it	eq
 8000f94:	4290      	cmpeq	r0, r2
 8000f96:	d10a      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4842      	ldr	r0, [pc, #264]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f9c:	f003 fd5e 	bl	8004a5c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000fa0:	4840      	ldr	r0, [pc, #256]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000fa2:	f003 fbcd 	bl	8004740 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8000fa6:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000fa8:	2203      	movs	r2, #3
 8000faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d138      	bne.n	8001028 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10d      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fc4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fc8:	1c51      	adds	r1, r2, #1
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	f143 0300 	adc.w	r3, r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fd4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000fd8:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000fdc:	e00f      	b.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d109      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ff0:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000ff4:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ffa:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001000:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001006:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800100a:	4299      	cmp	r1, r3
 800100c:	bf08      	it	eq
 800100e:	4290      	cmpeq	r0, r2
 8001010:	d10a      	bne.n	8001028 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001012:	2100      	movs	r1, #0
 8001014:	4825      	ldr	r0, [pc, #148]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001016:	f003 fd21 	bl	8004a5c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 800101a:	4824      	ldr	r0, [pc, #144]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x188>)
 800101c:	f003 fb90 	bl	8004740 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001022:	2203      	movs	r2, #3
 8001024:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d134      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x176>
		if(rMotor.Status == RunningForward){
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b01      	cmp	r3, #1
 800103a:	d10a      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x12e>
			rMotor.CurrentPosition++;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800103e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001042:	f112 0801 	adds.w	r8, r2, #1
 8001046:	f143 0900 	adc.w	r9, r3, #0
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800104c:	e9c3 8906 	strd	r8, r9, [r3, #24]
 8001050:	e00e      	b.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if (rMotor.Status == RunningBackward){
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d108      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition--;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001060:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001064:	1e54      	subs	r4, r2, #1
 8001066:	f143 35ff 	adc.w	r5, r3, #4294967295
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800106c:	e9c3 4506 	strd	r4, r5, [r3, #24]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001072:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800107c:	4299      	cmp	r1, r3
 800107e:	bf08      	it	eq
 8001080:	4290      	cmpeq	r0, r2
 8001082:	d10a      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001084:	2108      	movs	r1, #8
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001088:	f003 fce8 	bl	8004a5c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800108e:	f003 fb57 	bl	8004740 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001094:	2203      	movs	r2, #3
 8001096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010a4:	200004c8 	.word	0x200004c8
 80010a8:	200005b0 	.word	0x200005b0
 80010ac:	2000047c 	.word	0x2000047c
 80010b0:	200005e0 	.word	0x200005e0
 80010b4:	20000514 	.word	0x20000514
 80010b8:	20000610 	.word	0x20000610

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x8>

080010c6 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	8b3a      	ldrh	r2, [r7, #24]
 80010ea:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	stepper->TargetPosition =0;
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Set status
	stepper->Status = Stopped;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2203      	movs	r2, #3
 8001112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	4619      	mov	r1, r3
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f841 	bl	80011a4 <setSpeed>
	//return stepper structure pointer
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 800112a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8001138:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00c      	beq.n	800115a <setTarget+0x30>
		stepper->TargetPosition+= increment;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800114a:	eb10 0802 	adds.w	r8, r0, r2
 800114e:	eb41 0903 	adc.w	r9, r1, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	e9c3 8908 	strd	r8, r9, [r3, #32]
 8001158:	e00a      	b.n	8001170 <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001164:	1a84      	subs	r4, r0, r2
 8001166:	eb61 0503 	sbc.w	r5, r1, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	e9c3 4508 	strd	r4, r5, [r3, #32]
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped){
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b03      	cmp	r3, #3
 8001180:	d107      	bne.n	8001192 <setTarget+0x68>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f003 fb5f 	bl	8004850 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 f828 	bl	80011e8 <setDirection>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	005a      	lsls	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4909      	ldr	r1, [pc, #36]	; (80011e4 <setSpeed+0x40>)
 80011c0:	fbb1 f2f2 	udiv	r2, r1, r2
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <setSpeed+0x40>)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3a01      	subs	r2, #1
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	000f4240 	.word	0x000f4240

080011e8 <setDirection>:

//set direction
void setDirection(stepper *stepper){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80011fc:	4290      	cmp	r0, r2
 80011fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8001202:	d20c      	bcs.n	800121e <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6898      	ldr	r0, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	899b      	ldrh	r3, [r3, #12]
 800120c:	2201      	movs	r2, #1
 800120e:	4619      	mov	r1, r3
 8001210:	f000 fed2 	bl	8001fb8 <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	else{
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 800121c:	e00b      	b.n	8001236 <setDirection+0x4e>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6898      	ldr	r0, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	899b      	ldrh	r3, [r3, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	f000 fec5 	bl	8001fb8 <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_MspInit+0x44>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_MspInit+0x44>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_MspInit+0x44>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x44>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x44>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x44>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0b0      	sub	sp, #192	; 0xc0
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2298      	movs	r2, #152	; 0x98
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00a ff37 	bl	800c11c <memset>
  if(hi2c->Instance==I2C2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a21      	ldr	r2, [pc, #132]	; (8001338 <HAL_I2C_MspInit+0xb0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d13a      	bne.n	800132e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fc27 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f7ff fef4 	bl	80010bc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_I2C_MspInit+0xb4>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a18      	ldr	r2, [pc, #96]	; (800133c <HAL_I2C_MspInit+0xb4>)
 80012da:	f043 0320 	orr.w	r3, r3, #32
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_I2C_MspInit+0xb4>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ec:	2303      	movs	r3, #3
 80012ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f2:	2312      	movs	r3, #18
 80012f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001304:	2304      	movs	r3, #4
 8001306:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800130a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800130e:	4619      	mov	r1, r3
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_I2C_MspInit+0xb8>)
 8001312:	f000 fcbf 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_I2C_MspInit+0xb4>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_I2C_MspInit+0xb4>)
 800131c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_I2C_MspInit+0xb4>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	37c0      	adds	r7, #192	; 0xc0
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40005800 	.word	0x40005800
 800133c:	40021000 	.word	0x40021000
 8001340:	48001400 	.word	0x48001400

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0b0      	sub	sp, #192	; 0xc0
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2298      	movs	r2, #152	; 0x98
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f00a fed9 	bl	800c11c <memset>
  if(huart->Instance==LPUART1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_UART_MspInit+0xc4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d145      	bne.n	8001400 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001374:	2320      	movs	r3, #32
 8001376:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001378:	2300      	movs	r3, #0
 800137a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fbc9 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800138c:	f7ff fe96 	bl	80010bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_UART_MspInit+0xc8>)
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	4a1d      	ldr	r2, [pc, #116]	; (800140c <HAL_UART_MspInit+0xc8>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_UART_MspInit+0xc8>)
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_UART_MspInit+0xc8>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_UART_MspInit+0xc8>)
 80013ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_UART_MspInit+0xc8>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80013c0:	f001 fc60 	bl	8002c84 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013de:	2308      	movs	r3, #8
 80013e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013e8:	4619      	mov	r1, r3
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_UART_MspInit+0xcc>)
 80013ec:	f000 fc52 	bl	8001c94 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2046      	movs	r0, #70	; 0x46
 80013f6:	f000 fb5c 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80013fa:	2046      	movs	r0, #70	; 0x46
 80013fc:	f000 fb75 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	37c0      	adds	r7, #192	; 0xc0
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40008000 	.word	0x40008000
 800140c:	40021000 	.word	0x40021000
 8001410:	48001800 	.word	0x48001800

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a3d      	ldr	r2, [pc, #244]	; (8001518 <HAL_TIM_Base_MspInit+0x104>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d114      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a3c      	ldr	r2, [pc, #240]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 800142c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	2018      	movs	r0, #24
 8001444:	f000 fb35 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001448:	2018      	movs	r0, #24
 800144a:	f000 fb4e 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800144e:	e05e      	b.n	800150e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001458:	d114      	bne.n	8001484 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	4a2f      	ldr	r2, [pc, #188]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6593      	str	r3, [r2, #88]	; 0x58
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	201c      	movs	r0, #28
 8001478:	f000 fb1b 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800147c:	201c      	movs	r0, #28
 800147e:	f000 fb34 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 8001482:	e044      	b.n	800150e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a25      	ldr	r2, [pc, #148]	; (8001520 <HAL_TIM_Base_MspInit+0x10c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d114      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	4a22      	ldr	r2, [pc, #136]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6593      	str	r3, [r2, #88]	; 0x58
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201d      	movs	r0, #29
 80014ac:	f000 fb01 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014b0:	201d      	movs	r0, #29
 80014b2:	f000 fb1a 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 80014b6:	e02a      	b.n	800150e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_TIM_Base_MspInit+0x110>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d114      	bne.n	80014ec <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201e      	movs	r0, #30
 80014e0:	f000 fae7 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014e4:	201e      	movs	r0, #30
 80014e6:	f000 fb00 	bl	8001aea <HAL_NVIC_EnableIRQ>
}
 80014ea:	e010      	b.n	800150e <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_TIM_Base_MspInit+0x114>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10b      	bne.n	800150e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_TIM_Base_MspInit+0x108>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	bf00      	nop
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40012c00 	.word	0x40012c00
 800151c:	40021000 	.word	0x40021000
 8001520:	40000400 	.word	0x40000400
 8001524:	40000800 	.word	0x40000800
 8001528:	40000c00 	.word	0x40000c00

0800152c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800154c:	d11d      	bne.n	800158a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001576:	2301      	movs	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001584:	f000 fb86 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001588:	e043      	b.n	8001612 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a24      	ldr	r2, [pc, #144]	; (8001620 <HAL_TIM_MspPostInit+0xf4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d11c      	bne.n	80015ce <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ac:	2308      	movs	r3, #8
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015bc:	2302      	movs	r3, #2
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4817      	ldr	r0, [pc, #92]	; (8001624 <HAL_TIM_MspPostInit+0xf8>)
 80015c8:	f000 fb64 	bl	8001c94 <HAL_GPIO_Init>
}
 80015cc:	e021      	b.n	8001612 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_TIM_MspPostInit+0xfc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d11c      	bne.n	8001612 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_TIM_MspPostInit+0xf0>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001602:	2302      	movs	r3, #2
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <HAL_TIM_MspPostInit+0x100>)
 800160e:	f000 fb41 	bl	8001c94 <HAL_GPIO_Init>
}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40000400 	.word	0x40000400
 8001624:	48001000 	.word	0x48001000
 8001628:	40000800 	.word	0x40000800
 800162c:	48000c00 	.word	0x48000c00

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 f8fa 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800168a:	f003 fa7d 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000430 	.word	0x20000430

08001698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <TIM2_IRQHandler+0x10>)
 800169e:	f003 fa73 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000047c 	.word	0x2000047c

080016ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM3_IRQHandler+0x10>)
 80016b2:	f003 fa69 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200004c8 	.word	0x200004c8

080016c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <TIM4_IRQHandler+0x10>)
 80016c6:	f003 fa5f 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000514 	.word	0x20000514

080016d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <LPUART1_IRQHandler+0x10>)
 80016da:	f004 fb37 	bl	8005d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200003a0 	.word	0x200003a0

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f00a fcc8 	bl	800c0ac <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20050000 	.word	0x20050000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000830 	.word	0x20000830
 8001750:	20000888 	.word	0x20000888

08001754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800177c:	f7ff ffea 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <LoopForever+0xe>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	; (80017c4 <LoopForever+0x16>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017a6:	f00a fc87 	bl	800c0b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017aa:	f7fe fefb 	bl	80005a4 <main>

080017ae <LoopForever>:

LoopForever:
    b LoopForever
 80017ae:	e7fe      	b.n	80017ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80017bc:	0800cb00 	.word	0x0800cb00
  ldr r2, =_sbss
 80017c0:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 80017c4:	20000888 	.word	0x20000888

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>

080017ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f961 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017da:	200f      	movs	r0, #15
 80017dc:	f000 f80e 	bl	80017fc <HAL_InitTick>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ec:	f7ff fd28 	bl	8001240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_InitTick+0x6c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_InitTick+0x70>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_InitTick+0x6c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f96d 	bl	8001b06 <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d809      	bhi.n	800184c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f937 	bl	8001ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_InitTick+0x74>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e007      	b.n	800185c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e004      	b.n	800185c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	e001      	b.n	800185c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000000c 	.word	0x2000000c
 800186c:	20000004 	.word	0x20000004
 8001870:	20000008 	.word	0x20000008

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	2000000c 	.word	0x2000000c
 8001898:	20000834 	.word	0x20000834

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000834 	.word	0x20000834

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000000c 	.word	0x2000000c

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff3e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff31 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d008      	beq.n	8001b48 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e040      	b.n	8001bca <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 020e 	bic.w	r2, r2, #14
 8001b56:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b66:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	f003 021c 	and.w	r2, r3, #28
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bb6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d005      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e047      	b.n	8001c8a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 020e 	bic.w	r2, r2, #14
 8001c08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f003 021c 	and.w	r2, r3, #28
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c46:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00c      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c68:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
    }
  }
  return status;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e166      	b.n	8001f72 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8158 	beq.w	8001f6c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_GPIO_Init+0x40>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 0201 	and.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d017      	beq.n	8001d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d123      	bne.n	8001dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0203 	and.w	r2, r3, #3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80b2 	beq.w	8001f6c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	4a60      	ldr	r2, [pc, #384]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6613      	str	r3, [r2, #96]	; 0x60
 8001e14:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e20:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4a:	d02b      	beq.n	8001ea4 <HAL_GPIO_Init+0x210>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d025      	beq.n	8001ea0 <HAL_GPIO_Init+0x20c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_GPIO_Init+0x308>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d01f      	beq.n	8001e9c <HAL_GPIO_Init+0x208>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_GPIO_Init+0x30c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d019      	beq.n	8001e98 <HAL_GPIO_Init+0x204>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x310>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_GPIO_Init+0x200>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x314>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <HAL_GPIO_Init+0x1fc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4d      	ldr	r2, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x318>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x1f8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x31c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_GPIO_Init+0x1f4>
 8001e84:	2307      	movs	r3, #7
 8001e86:	e00e      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e88:	2308      	movs	r3, #8
 8001e8a:	e00c      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	e00a      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e90:	2305      	movs	r3, #5
 8001e92:	e008      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e006      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e004      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	f002 0203 	and.w	r2, r2, #3
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	4093      	lsls	r3, r2
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb6:	4937      	ldr	r1, [pc, #220]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ee8:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f12:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f47f ae91 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000
 8001f98:	48000400 	.word	0x48000400
 8001f9c:	48000800 	.word	0x48000800
 8001fa0:	48000c00 	.word	0x48000c00
 8001fa4:	48001000 	.word	0x48001000
 8001fa8:	48001400 	.word	0x48001400
 8001fac:	48001800 	.word	0x48001800
 8001fb0:	48001c00 	.word	0x48001c00
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e081      	b.n	80020fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff f93a 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	; 0x24
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e006      	b.n	8002070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800206e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d104      	bne.n	8002082 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69d9      	ldr	r1, [r3, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	461a      	mov	r2, r3
 8002114:	460b      	mov	r3, r1
 8002116:	817b      	strh	r3, [r7, #10]
 8002118:	4613      	mov	r3, r2
 800211a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b20      	cmp	r3, #32
 8002126:	f040 80da 	bne.w	80022de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x30>
 8002134:	2302      	movs	r3, #2
 8002136:	e0d3      	b.n	80022e0 <HAL_I2C_Master_Transmit+0x1d8>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002140:	f7ff fbac 	bl	800189c <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2319      	movs	r3, #25
 800214c:	2201      	movs	r2, #1
 800214e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f9e6 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0be      	b.n	80022e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2221      	movs	r2, #33	; 0x21
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2210      	movs	r2, #16
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	893a      	ldrh	r2, [r7, #8]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	2bff      	cmp	r3, #255	; 0xff
 8002192:	d90e      	bls.n	80021b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	22ff      	movs	r2, #255	; 0xff
 8002198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	8979      	ldrh	r1, [r7, #10]
 80021a2:	4b51      	ldr	r3, [pc, #324]	; (80022e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fbdc 	bl	8002968 <I2C_TransferConfig>
 80021b0:	e06c      	b.n	800228c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	8979      	ldrh	r1, [r7, #10]
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fbcb 	bl	8002968 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021d2:	e05b      	b.n	800228c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	6a39      	ldr	r1, [r7, #32]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f9e3 	bl	80025a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e07b      	b.n	80022e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d034      	beq.n	800228c <HAL_I2C_Master_Transmit+0x184>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002226:	2b00      	cmp	r3, #0
 8002228:	d130      	bne.n	800228c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	2200      	movs	r2, #0
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f975 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e04d      	b.n	80022e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	2bff      	cmp	r3, #255	; 0xff
 800224c:	d90e      	bls.n	800226c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	b2da      	uxtb	r2, r3
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	2300      	movs	r3, #0
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fb7f 	bl	8002968 <I2C_TransferConfig>
 800226a:	e00f      	b.n	800228c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	b2da      	uxtb	r2, r3
 800227c:	8979      	ldrh	r1, [r7, #10]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fb6e 	bl	8002968 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d19e      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	6a39      	ldr	r1, [r7, #32]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f9c2 	bl	8002624 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e01a      	b.n	80022e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2220      	movs	r2, #32
 80022b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_I2C_Master_Transmit+0x1e4>)
 80022be:	400b      	ands	r3, r1
 80022c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2220      	movs	r2, #32
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80022de:	2302      	movs	r3, #2
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	80002000 	.word	0x80002000
 80022ec:	fe00e800 	.word	0xfe00e800

080022f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
 8002300:	4613      	mov	r3, r2
 8002302:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b20      	cmp	r3, #32
 800230e:	f040 80db 	bne.w	80024c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2C_Master_Receive+0x30>
 800231c:	2302      	movs	r3, #2
 800231e:	e0d4      	b.n	80024ca <HAL_I2C_Master_Receive+0x1da>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002328:	f7ff fab8 	bl	800189c <HAL_GetTick>
 800232c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2319      	movs	r3, #25
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f8f2 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0bf      	b.n	80024ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2222      	movs	r2, #34	; 0x22
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2210      	movs	r2, #16
 8002356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d90e      	bls.n	800239a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	4b52      	ldr	r3, [pc, #328]	; (80024d4 <HAL_I2C_Master_Receive+0x1e4>)
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fae8 	bl	8002968 <I2C_TransferConfig>
 8002398:	e06d      	b.n	8002476 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	8979      	ldrh	r1, [r7, #10]
 80023ac:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <HAL_I2C_Master_Receive+0x1e4>)
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fad7 	bl	8002968 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80023ba:	e05c      	b.n	8002476 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	6a39      	ldr	r1, [r7, #32]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f96b 	bl	800269c <I2C_WaitOnRXNEFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e07c      	b.n	80024ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d034      	beq.n	8002476 <HAL_I2C_Master_Receive+0x186>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	d130      	bne.n	8002476 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2200      	movs	r2, #0
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f880 	bl	8002524 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e04d      	b.n	80024ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2bff      	cmp	r3, #255	; 0xff
 8002436:	d90e      	bls.n	8002456 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	b2da      	uxtb	r2, r3
 8002444:	8979      	ldrh	r1, [r7, #10]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa8a 	bl	8002968 <I2C_TransferConfig>
 8002454:	e00f      	b.n	8002476 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	b2da      	uxtb	r2, r3
 8002466:	8979      	ldrh	r1, [r7, #10]
 8002468:	2300      	movs	r3, #0
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa79 	bl	8002968 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d19d      	bne.n	80023bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	6a39      	ldr	r1, [r7, #32]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 f8cd 	bl	8002624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01a      	b.n	80024ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2220      	movs	r2, #32
 800249a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_I2C_Master_Receive+0x1e8>)
 80024a8:	400b      	ands	r3, r1
 80024aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e000      	b.n	80024ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	80002400 	.word	0x80002400
 80024d8:	fe00e800 	.word	0xfe00e800

080024dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d103      	bne.n	80024fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d007      	beq.n	8002518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	619a      	str	r2, [r3, #24]
  }
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	e022      	b.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d01e      	beq.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7ff f9ad 	bl	800189c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e00f      	b.n	800259c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d0cd      	beq.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025b0:	e02c      	b.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f8ea 	bl	8002790 <I2C_IsErrorOccurred>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e02a      	b.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d01e      	beq.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7ff f965 	bl	800189c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d113      	bne.n	800260c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e007      	b.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d1cb      	bne.n	80025b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002630:	e028      	b.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8aa 	bl	8002790 <I2C_IsErrorOccurred>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e026      	b.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7ff f929 	bl	800189c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d113      	bne.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e007      	b.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b20      	cmp	r3, #32
 8002690:	d1cf      	bne.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026a8:	e064      	b.n	8002774 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f86e 	bl	8002790 <I2C_IsErrorOccurred>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e062      	b.n	8002784 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d138      	bne.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d105      	bne.n	80026e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e04e      	b.n	8002784 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d107      	bne.n	8002704 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2210      	movs	r2, #16
 80026fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2204      	movs	r2, #4
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
 8002702:	e002      	b.n	800270a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800271e:	400b      	ands	r3, r1
 8002720:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e022      	b.n	8002784 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7ff f8ad 	bl	800189c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e007      	b.n	8002784 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d193      	bne.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	fe00e800 	.word	0xfe00e800

08002790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d075      	beq.n	80028a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2210      	movs	r2, #16
 80027c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c4:	e056      	b.n	8002874 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d052      	beq.n	8002874 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7ff f865 	bl	800189c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <I2C_IsErrorOccurred+0x54>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d147      	bne.n	8002874 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002806:	d12e      	bne.n	8002866 <I2C_IsErrorOccurred+0xd6>
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280e:	d02a      	beq.n	8002866 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b20      	cmp	r3, #32
 8002814:	d027      	beq.n	8002866 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002824:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002826:	f7ff f839 	bl	800189c <HAL_GetTick>
 800282a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800282c:	e01b      	b.n	8002866 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800282e:	f7ff f835 	bl	800189c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b19      	cmp	r3, #25
 800283a:	d914      	bls.n	8002866 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d1dc      	bne.n	800282e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d003      	beq.n	800288a <I2C_IsErrorOccurred+0xfa>
 8002882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002886:	2b00      	cmp	r3, #0
 8002888:	d09d      	beq.n	80027c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800288a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2220      	movs	r2, #32
 8002898:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01c      	beq.n	8002958 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fddc 	bl	80024dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <I2C_IsErrorOccurred+0x1d4>)
 8002930:	400b      	ands	r3, r1
 8002932:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800295c:	4618      	mov	r0, r3
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	fe00e800 	.word	0xfe00e800

08002968 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	4613      	mov	r3, r2
 8002978:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002980:	7a7b      	ldrb	r3, [r7, #9]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002988:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	4313      	orrs	r3, r2
 8002992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002996:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	0d5b      	lsrs	r3, r3, #21
 80029a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <I2C_TransferConfig+0x60>)
 80029a8:	430b      	orrs	r3, r1
 80029aa:	43db      	mvns	r3, r3
 80029ac:	ea02 0103 	and.w	r1, r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	03ff63ff 	.word	0x03ff63ff

080029cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d138      	bne.n	8002a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e032      	b.n	8002a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	; 0x24
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6819      	ldr	r1, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	e000      	b.n	8002a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a54:	2302      	movs	r3, #2
  }
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d139      	bne.n	8002aec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e033      	b.n	8002aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2224      	movs	r2, #36	; 0x24
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0c:	d102      	bne.n	8002b14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b12:	e00b      	b.n	8002b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b22:	d102      	bne.n	8002b2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b28:	e000      	b.n	8002b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002b2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40007000 	.word	0x40007000

08002b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d141      	bne.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b4a:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b56:	d131      	bne.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5e:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b68:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b70:	4a41      	ldr	r2, [pc, #260]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2232      	movs	r2, #50	; 0x32
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	4a3f      	ldr	r2, [pc, #252]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	0c9b      	lsrs	r3, r3, #18
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8e:	e002      	b.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d102      	bne.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f2      	bne.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002baa:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	d158      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e057      	b.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc2:	4a2d      	ldr	r2, [pc, #180]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bcc:	e04d      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd4:	d141      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d131      	bne.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be4:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bea:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf4:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bfc:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2232      	movs	r2, #50	; 0x32
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	0c9b      	lsrs	r3, r3, #18
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1a:	e002      	b.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2e:	d102      	bne.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f2      	bne.n	8002c1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d112      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e011      	b.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c58:	e007      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	431bde83 	.word	0x431bde83

08002c84 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c92:	6053      	str	r3, [r2, #4]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40007000 	.word	0x40007000

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f000 bc68 	b.w	8003588 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4b97      	ldr	r3, [pc, #604]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc2:	4b95      	ldr	r3, [pc, #596]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80e6 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4c>
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	f040 808d 	bne.w	8002e02 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 8089 	bne.w	8002e02 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf0:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_RCC_OscConfig+0x66>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f000 bc3f 	b.w	8003588 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0e:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <HAL_RCC_OscConfig+0x80>
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d22:	e005      	b.n	8002d30 <HAL_RCC_OscConfig+0x8c>
 8002d24:	4b7c      	ldr	r3, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d224      	bcs.n	8002d7e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fe2d 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f000 bc1f 	b.w	8003588 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a72      	ldr	r2, [pc, #456]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b70      	ldr	r3, [pc, #448]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	496d      	ldr	r1, [pc, #436]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d68:	4b6b      	ldr	r3, [pc, #428]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	4968      	ldr	r1, [pc, #416]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	e025      	b.n	8002dca <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7e:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a65      	ldr	r2, [pc, #404]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	4960      	ldr	r1, [pc, #384]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9c:	4b5e      	ldr	r3, [pc, #376]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	495b      	ldr	r1, [pc, #364]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fdec 	bl	8003998 <RCC_SetFlashLatencyFromMSIRange>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e3de      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dca:	f000 fd21 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4950      	ldr	r1, [pc, #320]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	fa22 f303 	lsr.w	r3, r2, r3
 8002de6:	4a4e      	ldr	r2, [pc, #312]	; (8002f20 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dea:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fd04 	bl	80017fc <HAL_InitTick>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d052      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	e3c2      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d032      	beq.n	8002e70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e0a:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a42      	ldr	r2, [pc, #264]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fd41 	bl	800189c <HAL_GetTick>
 8002e1a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fd3d 	bl	800189c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e3ab      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e30:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3c:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e42:	f043 0308 	orr.w	r3, r3, #8
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	4930      	ldr	r1, [pc, #192]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	492b      	ldr	r1, [pc, #172]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
 8002e6e:	e01a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e70:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e76:	f023 0301 	bic.w	r3, r3, #1
 8002e7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fd0e 	bl	800189c <HAL_GetTick>
 8002e80:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e84:	f7fe fd0a 	bl	800189c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e378      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x1e0>
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d073      	beq.n	8002f9a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d10e      	bne.n	8002edc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d063      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2f4>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d15f      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e355      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x250>
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e025      	b.n	8002f40 <HAL_RCC_OscConfig+0x29c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efc:	d114      	bne.n	8002f28 <HAL_RCC_OscConfig+0x284>
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a02      	ldr	r2, [pc, #8]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e013      	b.n	8002f40 <HAL_RCC_OscConfig+0x29c>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	0800ca4c 	.word	0x0800ca4c
 8002f20:	20000004 	.word	0x20000004
 8002f24:	20000008 	.word	0x20000008
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a8e      	ldr	r2, [pc, #568]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b8c      	ldr	r3, [pc, #560]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a8b      	ldr	r2, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fca8 	bl	800189c <HAL_GetTick>
 8002f4c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe fca4 	bl	800189c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e312      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x2ac>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fc94 	bl	800189c <HAL_GetTick>
 8002f74:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe fc90 	bl	800189c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e2fe      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	4b77      	ldr	r3, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2d4>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d060      	beq.n	8003068 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x314>
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d119      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d116      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x32c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e2db      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	4962      	ldr	r1, [pc, #392]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe4:	e040      	b.n	8003068 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d023      	beq.n	8003036 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fee:	4b5e      	ldr	r3, [pc, #376]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5d      	ldr	r2, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fc4f 	bl	800189c <HAL_GetTick>
 8002ffe:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fc4b 	bl	800189c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e2b9      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003014:	4b54      	ldr	r3, [pc, #336]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	494e      	ldr	r1, [pc, #312]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	e018      	b.n	8003068 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a4b      	ldr	r2, [pc, #300]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fe fc2b 	bl	800189c <HAL_GetTick>
 8003046:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe fc27 	bl	800189c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e295      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8082 	beq.w	800317a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d05f      	beq.n	800313e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800307e:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003084:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	429a      	cmp	r2, r3
 8003092:	d037      	beq.n	8003104 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e26d      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01b      	beq.n	80030ee <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c6:	f7fe fbe9 	bl	800189c <HAL_GetTick>
 80030ca:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fe fbe5 	bl	800189c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b11      	cmp	r3, #17
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e253      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ef      	bne.n	80030ce <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80030ee:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f4:	f023 0210 	bic.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	491a      	ldr	r1, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fe fbc2 	bl	800189c <HAL_GetTick>
 8003118:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311c:	f7fe fbbe 	bl	800189c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b11      	cmp	r3, #17
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e22c      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ef      	beq.n	800311c <HAL_RCC_OscConfig+0x478>
 800313c:	e01d      	b.n	800317a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003144:	4a08      	ldr	r2, [pc, #32]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fe fba5 	bl	800189c <HAL_GetTick>
 8003152:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003156:	f7fe fba1 	bl	800189c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b11      	cmp	r3, #17
 8003162:	d903      	bls.n	800316c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e20f      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
 8003168:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316c:	4b83      	ldr	r3, [pc, #524]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ed      	bne.n	8003156 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80bd 	beq.w	8003302 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800318e:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10e      	bne.n	80031b8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b78      	ldr	r3, [pc, #480]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	4a77      	ldr	r2, [pc, #476]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6593      	str	r3, [r2, #88]	; 0x58
 80031a6:	4b75      	ldr	r3, [pc, #468]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b71      	ldr	r3, [pc, #452]	; (8003380 <HAL_RCC_OscConfig+0x6dc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d118      	bne.n	80031f6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b6e      	ldr	r3, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x6dc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6d      	ldr	r2, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x6dc>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d0:	f7fe fb64 	bl	800189c <HAL_GetTick>
 80031d4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe fb60 	bl	800189c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1ce      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x6dc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02c      	beq.n	800325c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	4959      	ldr	r1, [pc, #356]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003228:	4b54      	ldr	r3, [pc, #336]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a53      	ldr	r2, [pc, #332]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a4f      	ldr	r2, [pc, #316]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	e018      	b.n	800327c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800324a:	4b4c      	ldr	r3, [pc, #304]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325a:	e00f      	b.n	800327c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800325c:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a46      	ldr	r2, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a42      	ldr	r2, [pc, #264]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d016      	beq.n	80032b2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fb0a 	bl	800189c <HAL_GetTick>
 8003288:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fb06 	bl	800189c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e172      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ed      	beq.n	800328c <HAL_RCC_OscConfig+0x5e8>
 80032b0:	e01d      	b.n	80032ee <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe faf3 	bl	800189c <HAL_GetTick>
 80032b6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe faef 	bl	800189c <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e15b      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ed      	bne.n	80032ba <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80032de:	4b27      	ldr	r3, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80032e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	4a20      	ldr	r2, [pc, #128]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003300:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d041      	beq.n	8003392 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01c      	beq.n	8003350 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003318:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7fe fab9 	bl	800189c <HAL_GetTick>
 800332a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800332e:	f7fe fab5 	bl	800189c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e123      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0ef      	beq.n	800332e <HAL_RCC_OscConfig+0x68a>
 800334e:	e020      	b.n	8003392 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_RCC_OscConfig+0x6d8>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fe fa9c 	bl	800189c <HAL_GetTick>
 8003364:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003366:	e00d      	b.n	8003384 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003368:	f7fe fa98 	bl	800189c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d906      	bls.n	8003384 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e106      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003384:	4b82      	ldr	r3, [pc, #520]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ea      	bne.n	8003368 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80f5 	beq.w	8003586 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	f040 80cb 	bne.w	800353c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033a6:	4b7a      	ldr	r3, [pc, #488]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0203 	and.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d12c      	bne.n	8003414 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	3b01      	subs	r3, #1
 80033c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d123      	bne.n	8003414 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d11b      	bne.n	8003414 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d113      	bne.n	8003414 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	3b01      	subs	r3, #1
 80033fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d109      	bne.n	8003414 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	3b01      	subs	r3, #1
 800340e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d06d      	beq.n	80034f0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d068      	beq.n	80034ec <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800341a:	4b5d      	ldr	r3, [pc, #372]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003426:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0a8      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a55      	ldr	r2, [pc, #340]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800343c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003440:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003442:	f7fe fa2b 	bl	800189c <HAL_GetTick>
 8003446:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fa27 	bl	800189c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e095      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345c:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	4b49      	ldr	r3, [pc, #292]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4b49      	ldr	r3, [pc, #292]	; (8003594 <HAL_RCC_OscConfig+0x8f0>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003478:	3a01      	subs	r2, #1
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003482:	0212      	lsls	r2, r2, #8
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800348a:	0852      	lsrs	r2, r2, #1
 800348c:	3a01      	subs	r2, #1
 800348e:	0552      	lsls	r2, r2, #21
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003496:	0852      	lsrs	r2, r2, #1
 8003498:	3a01      	subs	r2, #1
 800349a:	0652      	lsls	r2, r2, #25
 800349c:	4311      	orrs	r1, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034a2:	06d2      	lsls	r2, r2, #27
 80034a4:	430a      	orrs	r2, r1
 80034a6:	493a      	ldr	r1, [pc, #232]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a37      	ldr	r2, [pc, #220]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4a34      	ldr	r2, [pc, #208]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034c4:	f7fe f9ea 	bl	800189c <HAL_GetTick>
 80034c8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe f9e6 	bl	800189c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e054      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ea:	e04c      	b.n	8003586 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e04b      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d144      	bne.n	8003586 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a23      	ldr	r2, [pc, #140]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800350e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003512:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003514:	f7fe f9c2 	bl	800189c <HAL_GetTick>
 8003518:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe f9be 	bl	800189c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e02c      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	4b18      	ldr	r3, [pc, #96]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x878>
 800353a:	e024      	b.n	8003586 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d01f      	beq.n	8003582 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fe f9a5 	bl	800189c <HAL_GetTick>
 8003552:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003556:	f7fe f9a1 	bl	800189c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e00f      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4905      	ldr	r1, [pc, #20]	; (8003590 <HAL_RCC_OscConfig+0x8ec>)
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <HAL_RCC_OscConfig+0x8f4>)
 800357c:	4013      	ands	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e001      	b.n	8003586 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3728      	adds	r7, #40	; 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	019d800c 	.word	0x019d800c
 8003598:	feeefffc 	.word	0xfeeefffc

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e11d      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b90      	ldr	r3, [pc, #576]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 020f 	bic.w	r2, r3, #15
 80035ca:	498b      	ldr	r1, [pc, #556]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b89      	ldr	r3, [pc, #548]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e105      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b81      	ldr	r3, [pc, #516]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d908      	bls.n	8003612 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b7e      	ldr	r3, [pc, #504]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	497b      	ldr	r1, [pc, #492]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d079      	beq.n	8003712 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d11e      	bne.n	8003664 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b75      	ldr	r3, [pc, #468]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0dc      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003636:	f000 fa09 	bl	8003a4c <RCC_GetSysClockFreqFromPLLSource>
 800363a:	4603      	mov	r3, r0
 800363c:	4a70      	ldr	r2, [pc, #448]	; (8003800 <HAL_RCC_ClockConfig+0x264>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d946      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003642:	4b6e      	ldr	r3, [pc, #440]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d140      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800364e:	4b6b      	ldr	r3, [pc, #428]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003656:	4a69      	ldr	r2, [pc, #420]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e035      	b.n	80036d0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d107      	bne.n	800367c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366c:	4b63      	ldr	r3, [pc, #396]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d115      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b9      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003684:	4b5d      	ldr	r3, [pc, #372]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0ad      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0a5      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80036a4:	f000 f8b4 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a55      	ldr	r2, [pc, #340]	; (8003800 <HAL_RCC_ClockConfig+0x264>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d90f      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036b0:	4b52      	ldr	r3, [pc, #328]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c4:	4a4d      	ldr	r2, [pc, #308]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 0203 	bic.w	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4947      	ldr	r1, [pc, #284]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e2:	f7fe f8db 	bl	800189c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	f7fe f8d7 	bl	800189c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e077      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 020c 	and.w	r2, r3, #12
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	429a      	cmp	r2, r3
 8003710:	d1eb      	bne.n	80036ea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	d105      	bne.n	8003724 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003718:	4b38      	ldr	r3, [pc, #224]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a37      	ldr	r2, [pc, #220]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800371e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003722:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373c:	429a      	cmp	r2, r3
 800373e:	d208      	bcs.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	492b      	ldr	r1, [pc, #172]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d210      	bcs.n	8003782 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 020f 	bic.w	r2, r3, #15
 8003768:	4923      	ldr	r1, [pc, #140]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_RCC_ClockConfig+0x25c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e036      	b.n	80037f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378e:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4918      	ldr	r1, [pc, #96]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4910      	ldr	r1, [pc, #64]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037c0:	f000 f826 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_RCC_ClockConfig+0x260>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <HAL_RCC_ClockConfig+0x268>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
 80037dc:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <HAL_RCC_ClockConfig+0x26c>)
 80037de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_RCC_ClockConfig+0x270>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe f809 	bl	80017fc <HAL_InitTick>
 80037ea:	4603      	mov	r3, r0
 80037ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40021000 	.word	0x40021000
 8003800:	04c4b400 	.word	0x04c4b400
 8003804:	0800ca4c 	.word	0x0800ca4c
 8003808:	20000004 	.word	0x20000004
 800380c:	20000008 	.word	0x20000008

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003828:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x34>
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d121      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d11e      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003850:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003860:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800386c:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_RCC_GetSysClockFreq+0x10c>)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10d      	bne.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003880:	e00a      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d102      	bne.n	800388e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <HAL_RCC_GetSysClockFreq+0x110>)
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e004      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d101      	bne.n	8003898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_RCC_GetSysClockFreq+0x114>)
 8003896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d134      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d003      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0xac>
 80038b4:	e005      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCC_GetSysClockFreq+0x110>)
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	e005      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_GetSysClockFreq+0x114>)
 80038be:	617b      	str	r3, [r7, #20]
      break;
 80038c0:	e002      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	617b      	str	r3, [r7, #20]
      break;
 80038c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3301      	adds	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	0e5b      	lsrs	r3, r3, #25
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	3301      	adds	r3, #1
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003908:	69bb      	ldr	r3, [r7, #24]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3724      	adds	r7, #36	; 0x24
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	0800ca64 	.word	0x0800ca64
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000004 	.word	0x20000004

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4904      	ldr	r1, [pc, #16]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	0800ca5c 	.word	0x0800ca5c

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003970:	f7ff ffda 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0adb      	lsrs	r3, r3, #11
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4904      	ldr	r1, [pc, #16]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	0800ca5c 	.word	0x0800ca5c

08003998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039b0:	f7ff f8a4 	bl	8002afc <HAL_PWREx_GetVoltageRange>
 80039b4:	6178      	str	r0, [r7, #20]
 80039b6:	e014      	b.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6593      	str	r3, [r2, #88]	; 0x58
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039d0:	f7ff f894 	bl	8002afc <HAL_PWREx_GetVoltageRange>
 80039d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d10b      	bne.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d913      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2ba0      	cmp	r3, #160	; 0xa0
 80039f4:	d902      	bls.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039f6:	2302      	movs	r3, #2
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e00d      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039fc:	2301      	movs	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e00a      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b7f      	cmp	r3, #127	; 0x7f
 8003a06:	d902      	bls.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a08:	2302      	movs	r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e004      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d101      	bne.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 020f 	bic.w	r2, r3, #15
 8003a20:	4909      	ldr	r1, [pc, #36]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a52:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d00b      	beq.n	8003a7a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d825      	bhi.n	8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d008      	beq.n	8003a80 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d11f      	bne.n	8003ab4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a76:	613b      	str	r3, [r7, #16]
    break;
 8003a78:	e01f      	b.n	8003aba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a7a:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a7c:	613b      	str	r3, [r7, #16]
    break;
 8003a7e:	e01c      	b.n	8003aba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e005      	b.n	8003aa8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab0:	613b      	str	r3, [r7, #16]
    break;
 8003ab2:	e002      	b.n	8003aba <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
    break;
 8003ab8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	fb03 f202 	mul.w	r2, r3, r2
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0e5b      	lsrs	r3, r3, #25
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003afa:	683b      	ldr	r3, [r7, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200
 8003b14:	0800ca64 	.word	0x0800ca64

08003b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b20:	2300      	movs	r3, #0
 8003b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d040      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b38:	2b80      	cmp	r3, #128	; 0x80
 8003b3a:	d02a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d825      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b40:	2b60      	cmp	r3, #96	; 0x60
 8003b42:	d026      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d821      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d006      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d81d      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d010      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b58:	e018      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b5a:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4a88      	ldr	r2, [pc, #544]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b66:	e015      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fb3e 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b78:	e00c      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fc29 	bl	80043d8 <RCCEx_PLLSAI2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8a:	e003      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	74fb      	strb	r3, [r7, #19]
      break;
 8003b90:	e000      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9a:	4b79      	ldr	r3, [pc, #484]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ba0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba8:	4975      	ldr	r1, [pc, #468]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bb0:	e001      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d047      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d030      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d82a      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd6:	d02a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bdc:	d824      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be8:	d81e      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf2:	d010      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bf4:	e018      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bf6:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c02:	e015      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 faf0 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c14:	e00c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fbdb 	bl	80043d8 <RCCEx_PLLSAI2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	74fb      	strb	r3, [r7, #19]
      break;
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c36:	4b52      	ldr	r3, [pc, #328]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	494e      	ldr	r1, [pc, #312]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c4c:	e001      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 809f 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c74:	2300      	movs	r3, #0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	4a40      	ldr	r2, [pc, #256]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
 8003c86:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c92:	2301      	movs	r3, #1
 8003c94:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c96:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3a      	ldr	r2, [pc, #232]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fdfb 	bl	800189c <HAL_GetTick>
 8003ca6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ca8:	e009      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fd fdf7 	bl	800189c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d902      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	74fb      	strb	r3, [r7, #19]
        break;
 8003cbc:	e005      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ef      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d15b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01f      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d019      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cfa:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d016      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fdb6 	bl	800189c <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d32:	e00b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd fdb2 	bl	800189c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d902      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	74fb      	strb	r3, [r7, #19]
            break;
 8003d4a:	e006      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0ec      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	74bb      	strb	r3, [r7, #18]
 8003d7e:	e005      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8c:	7c7b      	ldrb	r3, [r7, #17]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4ba0      	ldr	r3, [pc, #640]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	4a9f      	ldr	r2, [pc, #636]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003daa:	4b9a      	ldr	r3, [pc, #616]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	4996      	ldr	r1, [pc, #600]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dcc:	4b91      	ldr	r3, [pc, #580]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 020c 	bic.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	498e      	ldr	r1, [pc, #568]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dee:	4b89      	ldr	r3, [pc, #548]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	4985      	ldr	r1, [pc, #532]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e10:	4b80      	ldr	r3, [pc, #512]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	497d      	ldr	r1, [pc, #500]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e32:	4b78      	ldr	r3, [pc, #480]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	4974      	ldr	r1, [pc, #464]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e54:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	496c      	ldr	r1, [pc, #432]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e76:	4b67      	ldr	r3, [pc, #412]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e84:	4963      	ldr	r1, [pc, #396]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e98:	4b5e      	ldr	r3, [pc, #376]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea6:	495b      	ldr	r1, [pc, #364]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eba:	4b56      	ldr	r3, [pc, #344]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	4952      	ldr	r1, [pc, #328]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003edc:	4b4d      	ldr	r3, [pc, #308]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	494a      	ldr	r1, [pc, #296]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003efe:	4b45      	ldr	r3, [pc, #276]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	4941      	ldr	r1, [pc, #260]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f20:	4b3c      	ldr	r3, [pc, #240]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	4939      	ldr	r1, [pc, #228]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d028      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f42:	4b34      	ldr	r3, [pc, #208]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f50:	4930      	ldr	r1, [pc, #192]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f62:	4b2c      	ldr	r3, [pc, #176]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a2b      	ldr	r2, [pc, #172]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6c:	60d3      	str	r3, [r2, #12]
 8003f6e:	e011      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f935 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d04d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa8:	d108      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003faa:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fba:	e012      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc2:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fda:	490e      	ldr	r1, [pc, #56]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
 8003ff8:	e020      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004002:	d109      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a02      	ldr	r2, [pc, #8]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	60d3      	str	r3, [r2, #12]
 8004010:	e014      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004020:	d10c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f8e1 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d028      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004048:	4b68      	ldr	r3, [pc, #416]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004056:	4965      	ldr	r1, [pc, #404]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004066:	d106      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004068:	4b60      	ldr	r3, [pc, #384]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a5f      	ldr	r2, [pc, #380]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800406e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004072:	60d3      	str	r3, [r2, #12]
 8004074:	e011      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800407a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800407e:	d10c      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f8b2 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01e      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a6:	4b51      	ldr	r3, [pc, #324]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b6:	494d      	ldr	r1, [pc, #308]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2102      	movs	r1, #2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f88d 	bl	80041f0 <RCCEx_PLLSAI1_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040f0:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f6:	f023 0204 	bic.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004100:	493a      	ldr	r1, [pc, #232]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004114:	4b35      	ldr	r3, [pc, #212]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411a:	f023 0218 	bic.w	r2, r3, #24
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	4931      	ldr	r1, [pc, #196]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d035      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004138:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2b      	ldr	r2, [pc, #172]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004144:	f7fd fbaa 	bl	800189c <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800414a:	e009      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800414c:	f7fd fba6 	bl	800189c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	74fb      	strb	r3, [r7, #19]
        break;
 800415e:	e005      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004160:	4b22      	ldr	r3, [pc, #136]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ef      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d113      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004182:	491a      	ldr	r1, [pc, #104]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3320      	adds	r3, #32
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f921 	bl	80043d8 <RCCEx_PLLSAI2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	490a      	ldr	r1, [pc, #40]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d2:	d105      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000

080041f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041fe:	4b72      	ldr	r3, [pc, #456]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00e      	beq.n	8004228 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800420a:	4b6f      	ldr	r3, [pc, #444]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0203 	and.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d103      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
       ||
 800421e:	2b00      	cmp	r3, #0
 8004220:	d142      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
 8004226:	e03f      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d018      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x72>
 8004230:	2b03      	cmp	r3, #3
 8004232:	d825      	bhi.n	8004280 <RCCEx_PLLSAI1_Config+0x90>
 8004234:	2b01      	cmp	r3, #1
 8004236:	d002      	beq.n	800423e <RCCEx_PLLSAI1_Config+0x4e>
 8004238:	2b02      	cmp	r3, #2
 800423a:	d009      	beq.n	8004250 <RCCEx_PLLSAI1_Config+0x60>
 800423c:	e020      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800423e:	4b62      	ldr	r3, [pc, #392]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11d      	bne.n	8004286 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424e:	e01a      	b.n	8004286 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004250:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d116      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004260:	e013      	b.n	800428a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004262:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800426e:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800427e:	e006      	b.n	800428e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e004      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004286:	bf00      	nop
 8004288:	e002      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800428e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004296:	4b4c      	ldr	r3, [pc, #304]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4949      	ldr	r1, [pc, #292]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 8086 	bne.w	80043bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042b0:	4b45      	ldr	r3, [pc, #276]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a44      	ldr	r2, [pc, #272]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042bc:	f7fd faee 	bl	800189c <HAL_GetTick>
 80042c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c2:	e009      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c4:	f7fd faea 	bl	800189c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d902      	bls.n	80042d8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	73fb      	strb	r3, [r7, #15]
        break;
 80042d6:	e005      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042d8:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1ef      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d168      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d113      	bne.n	8004318 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f0:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6892      	ldr	r2, [r2, #8]
 80042fc:	0211      	lsls	r1, r2, #8
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68d2      	ldr	r2, [r2, #12]
 8004302:	06d2      	lsls	r2, r2, #27
 8004304:	4311      	orrs	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6852      	ldr	r2, [r2, #4]
 800430a:	3a01      	subs	r2, #1
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	430a      	orrs	r2, r1
 8004310:	492d      	ldr	r1, [pc, #180]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	610b      	str	r3, [r1, #16]
 8004316:	e02d      	b.n	8004374 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d115      	bne.n	800434a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800431e:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6892      	ldr	r2, [r2, #8]
 800432a:	0211      	lsls	r1, r2, #8
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6912      	ldr	r2, [r2, #16]
 8004330:	0852      	lsrs	r2, r2, #1
 8004332:	3a01      	subs	r2, #1
 8004334:	0552      	lsls	r2, r2, #21
 8004336:	4311      	orrs	r1, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6852      	ldr	r2, [r2, #4]
 800433c:	3a01      	subs	r2, #1
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	430a      	orrs	r2, r1
 8004342:	4921      	ldr	r1, [pc, #132]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004344:	4313      	orrs	r3, r2
 8004346:	610b      	str	r3, [r1, #16]
 8004348:	e014      	b.n	8004374 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434a:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	0211      	lsls	r1, r2, #8
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6952      	ldr	r2, [r2, #20]
 800435c:	0852      	lsrs	r2, r2, #1
 800435e:	3a01      	subs	r2, #1
 8004360:	0652      	lsls	r2, r2, #25
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6852      	ldr	r2, [r2, #4]
 8004368:	3a01      	subs	r2, #1
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	430a      	orrs	r2, r1
 800436e:	4916      	ldr	r1, [pc, #88]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004374:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800437a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800437e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004380:	f7fd fa8c 	bl	800189c <HAL_GetTick>
 8004384:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004386:	e009      	b.n	800439c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004388:	f7fd fa88 	bl	800189c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d902      	bls.n	800439c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	73fb      	strb	r3, [r7, #15]
          break;
 800439a:	e005      	b.n	80043a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ef      	beq.n	8004388 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	4904      	ldr	r1, [pc, #16]	; (80043c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	07ff800f 	.word	0x07ff800f
 80043d0:	ff9f800f 	.word	0xff9f800f
 80043d4:	f9ff800f 	.word	0xf9ff800f

080043d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043e6:	4b72      	ldr	r3, [pc, #456]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00e      	beq.n	8004410 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043f2:	4b6f      	ldr	r3, [pc, #444]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0203 	and.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d103      	bne.n	800440a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
       ||
 8004406:	2b00      	cmp	r3, #0
 8004408:	d142      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e03f      	b.n	8004490 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d018      	beq.n	800444a <RCCEx_PLLSAI2_Config+0x72>
 8004418:	2b03      	cmp	r3, #3
 800441a:	d825      	bhi.n	8004468 <RCCEx_PLLSAI2_Config+0x90>
 800441c:	2b01      	cmp	r3, #1
 800441e:	d002      	beq.n	8004426 <RCCEx_PLLSAI2_Config+0x4e>
 8004420:	2b02      	cmp	r3, #2
 8004422:	d009      	beq.n	8004438 <RCCEx_PLLSAI2_Config+0x60>
 8004424:	e020      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004426:	4b62      	ldr	r3, [pc, #392]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11d      	bne.n	800446e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004436:	e01a      	b.n	800446e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004438:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d116      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004448:	e013      	b.n	8004472 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800444a:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004456:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004466:	e006      	b.n	8004476 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e004      	b.n	8004478 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800446e:	bf00      	nop
 8004470:	e002      	b.n	8004478 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004476:	bf00      	nop
    }

    if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800447e:	4b4c      	ldr	r3, [pc, #304]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f023 0203 	bic.w	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4949      	ldr	r1, [pc, #292]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 8086 	bne.w	80045a4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004498:	4b45      	ldr	r3, [pc, #276]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a44      	ldr	r2, [pc, #272]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800449e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a4:	f7fd f9fa 	bl	800189c <HAL_GetTick>
 80044a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044aa:	e009      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044ac:	f7fd f9f6 	bl	800189c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d902      	bls.n	80044c0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	73fb      	strb	r3, [r7, #15]
        break;
 80044be:	e005      	b.n	80044cc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044c0:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ef      	bne.n	80044ac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d168      	bne.n	80045a4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d113      	bne.n	8004500 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80044de:	4013      	ands	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6892      	ldr	r2, [r2, #8]
 80044e4:	0211      	lsls	r1, r2, #8
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	06d2      	lsls	r2, r2, #27
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6852      	ldr	r2, [r2, #4]
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	430a      	orrs	r2, r1
 80044f8:	492d      	ldr	r1, [pc, #180]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	614b      	str	r3, [r1, #20]
 80044fe:	e02d      	b.n	800455c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d115      	bne.n	8004532 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6892      	ldr	r2, [r2, #8]
 8004512:	0211      	lsls	r1, r2, #8
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6912      	ldr	r2, [r2, #16]
 8004518:	0852      	lsrs	r2, r2, #1
 800451a:	3a01      	subs	r2, #1
 800451c:	0552      	lsls	r2, r2, #21
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6852      	ldr	r2, [r2, #4]
 8004524:	3a01      	subs	r2, #1
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	430a      	orrs	r2, r1
 800452a:	4921      	ldr	r1, [pc, #132]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	614b      	str	r3, [r1, #20]
 8004530:	e014      	b.n	800455c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004532:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	4b21      	ldr	r3, [pc, #132]	; (80045bc <RCCEx_PLLSAI2_Config+0x1e4>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	0211      	lsls	r1, r2, #8
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6952      	ldr	r2, [r2, #20]
 8004544:	0852      	lsrs	r2, r2, #1
 8004546:	3a01      	subs	r2, #1
 8004548:	0652      	lsls	r2, r2, #25
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6852      	ldr	r2, [r2, #4]
 8004550:	3a01      	subs	r2, #1
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	430a      	orrs	r2, r1
 8004556:	4916      	ldr	r1, [pc, #88]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fd f998 	bl	800189c <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800456e:	e009      	b.n	8004584 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004570:	f7fd f994 	bl	800189c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d902      	bls.n	8004584 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	73fb      	strb	r3, [r7, #15]
          break;
 8004582:	e005      	b.n	8004590 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ef      	beq.n	8004570 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	4904      	ldr	r1, [pc, #16]	; (80045b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	07ff800f 	.word	0x07ff800f
 80045b8:	ff9f800f 	.word	0xff9f800f
 80045bc:	f9ff800f 	.word	0xf9ff800f

080045c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e049      	b.n	8004666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fc ff14 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f000 fde8 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d001      	beq.n	8004688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e047      	b.n	8004718 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a23      	ldr	r2, [pc, #140]	; (8004724 <HAL_TIM_Base_Start+0xb4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01d      	beq.n	80046d6 <HAL_TIM_Base_Start+0x66>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d018      	beq.n	80046d6 <HAL_TIM_Base_Start+0x66>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <HAL_TIM_Base_Start+0xb8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_TIM_Base_Start+0x66>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <HAL_TIM_Base_Start+0xbc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00e      	beq.n	80046d6 <HAL_TIM_Base_Start+0x66>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <HAL_TIM_Base_Start+0xc0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d009      	beq.n	80046d6 <HAL_TIM_Base_Start+0x66>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_TIM_Base_Start+0xc4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_TIM_Base_Start+0x66>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_TIM_Base_Start+0xc8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d115      	bne.n	8004702 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <HAL_TIM_Base_Start+0xcc>)
 80046de:	4013      	ands	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d015      	beq.n	8004714 <HAL_TIM_Base_Start+0xa4>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ee:	d011      	beq.n	8004714 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	e008      	b.n	8004714 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e000      	b.n	8004716 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40013400 	.word	0x40013400
 8004738:	40014000 	.word	0x40014000
 800473c:	00010007 	.word	0x00010007

08004740 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10f      	bne.n	8004778 <HAL_TIM_Base_Stop+0x38>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	f240 4344 	movw	r3, #1092	; 0x444
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d107      	bne.n	8004778 <HAL_TIM_Base_Stop+0x38>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e049      	b.n	8004834 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f841 	bl	800483c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 fd01 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <HAL_TIM_PWM_Start+0x24>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e03c      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d109      	bne.n	800488e <HAL_TIM_PWM_Start+0x3e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	bf14      	ite	ne
 8004886:	2301      	movne	r3, #1
 8004888:	2300      	moveq	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e02f      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d109      	bne.n	80048a8 <HAL_TIM_PWM_Start+0x58>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e022      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d109      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x72>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e015      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d109      	bne.n	80048dc <HAL_TIM_PWM_Start+0x8c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e008      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e09c      	b.n	8004a30 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xb6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004904:	e023      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xc6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004914:	e01b      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xd6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004924:	e013      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xe6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004934:	e00b      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b10      	cmp	r3, #16
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0xf6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	e003      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2201      	movs	r2, #1
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f001 f846 	bl	80059e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a35      	ldr	r2, [pc, #212]	; (8004a38 <HAL_TIM_PWM_Start+0x1e8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <HAL_TIM_PWM_Start+0x1ec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a32      	ldr	r2, [pc, #200]	; (8004a40 <HAL_TIM_PWM_Start+0x1f0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a31      	ldr	r2, [pc, #196]	; (8004a44 <HAL_TIM_PWM_Start+0x1f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <HAL_TIM_PWM_Start+0x1f8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_TIM_PWM_Start+0x142>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_TIM_PWM_Start+0x144>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_TIM_PWM_Start+0x1e8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01d      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d018      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_TIM_PWM_Start+0x1fc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <HAL_TIM_PWM_Start+0x200>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1f      	ldr	r2, [pc, #124]	; (8004a54 <HAL_TIM_PWM_Start+0x204>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <HAL_TIM_PWM_Start+0x1ec>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_TIM_PWM_Start+0x1f0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d115      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <HAL_TIM_PWM_Start+0x208>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d015      	beq.n	8004a2c <HAL_TIM_PWM_Start+0x1dc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d011      	beq.n	8004a2c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	e008      	b.n	8004a2c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e000      	b.n	8004a2e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	00010007 	.word	0x00010007

08004a5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 ffba 	bl	80059e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3e      	ldr	r2, [pc, #248]	; (8004b74 <HAL_TIM_PWM_Stop+0x118>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_TIM_PWM_Stop+0x4a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <HAL_TIM_PWM_Stop+0x11c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIM_PWM_Stop+0x4a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3b      	ldr	r2, [pc, #236]	; (8004b7c <HAL_TIM_PWM_Stop+0x120>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIM_PWM_Stop+0x4a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <HAL_TIM_PWM_Stop+0x124>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIM_PWM_Stop+0x4a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_TIM_PWM_Stop+0x128>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_PWM_Stop+0x4e>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_TIM_PWM_Stop+0x50>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d017      	beq.n	8004ae0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10f      	bne.n	8004ae0 <HAL_TIM_PWM_Stop+0x84>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6a1a      	ldr	r2, [r3, #32]
 8004ac6:	f240 4344 	movw	r3, #1092	; 0x444
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_PWM_Stop+0x84>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <HAL_TIM_PWM_Stop+0xb4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	f240 4344 	movw	r3, #1092	; 0x444
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <HAL_TIM_PWM_Stop+0xb4>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <HAL_TIM_PWM_Stop+0xc4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1e:	e023      	b.n	8004b68 <HAL_TIM_PWM_Stop+0x10c>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d104      	bne.n	8004b30 <HAL_TIM_PWM_Stop+0xd4>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2e:	e01b      	b.n	8004b68 <HAL_TIM_PWM_Stop+0x10c>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d104      	bne.n	8004b40 <HAL_TIM_PWM_Stop+0xe4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b3e:	e013      	b.n	8004b68 <HAL_TIM_PWM_Stop+0x10c>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d104      	bne.n	8004b50 <HAL_TIM_PWM_Stop+0xf4>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b4e:	e00b      	b.n	8004b68 <HAL_TIM_PWM_Stop+0x10c>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d104      	bne.n	8004b60 <HAL_TIM_PWM_Stop+0x104>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b5e:	e003      	b.n	8004b68 <HAL_TIM_PWM_Stop+0x10c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40013400 	.word	0x40013400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800

08004b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0202 	mvn.w	r2, #2
 8004bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fae3 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fad5 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fae6 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0204 	mvn.w	r2, #4
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fab9 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 faab 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fabc 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0208 	mvn.w	r2, #8
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2204      	movs	r2, #4
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa8f 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa81 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa92 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b10      	cmp	r3, #16
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0210 	mvn.w	r2, #16
 8004cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fa65 	bl	8005196 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa57 	bl	8005182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa68 	bl	80051aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0201 	mvn.w	r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc f90c 	bl	8000f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b80      	cmp	r3, #128	; 0x80
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 ff10 	bl	8005b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	d10e      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 ff03 	bl	8005b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d10e      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fa16 	bl	80051be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d10e      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0220 	mvn.w	r2, #32
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fec3 	bl	8005b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e0ff      	b.n	8004fe6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b14      	cmp	r3, #20
 8004df2:	f200 80f0 	bhi.w	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e51 	.word	0x08004e51
 8004e00:	08004fd7 	.word	0x08004fd7
 8004e04:	08004fd7 	.word	0x08004fd7
 8004e08:	08004fd7 	.word	0x08004fd7
 8004e0c:	08004e91 	.word	0x08004e91
 8004e10:	08004fd7 	.word	0x08004fd7
 8004e14:	08004fd7 	.word	0x08004fd7
 8004e18:	08004fd7 	.word	0x08004fd7
 8004e1c:	08004ed3 	.word	0x08004ed3
 8004e20:	08004fd7 	.word	0x08004fd7
 8004e24:	08004fd7 	.word	0x08004fd7
 8004e28:	08004fd7 	.word	0x08004fd7
 8004e2c:	08004f13 	.word	0x08004f13
 8004e30:	08004fd7 	.word	0x08004fd7
 8004e34:	08004fd7 	.word	0x08004fd7
 8004e38:	08004fd7 	.word	0x08004fd7
 8004e3c:	08004f55 	.word	0x08004f55
 8004e40:	08004fd7 	.word	0x08004fd7
 8004e44:	08004fd7 	.word	0x08004fd7
 8004e48:	08004fd7 	.word	0x08004fd7
 8004e4c:	08004f95 	.word	0x08004f95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa56 	bl	8005308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6999      	ldr	r1, [r3, #24]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	619a      	str	r2, [r3, #24]
      break;
 8004e8e:	e0a5      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fac6 	bl	8005428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	021a      	lsls	r2, r3, #8
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	619a      	str	r2, [r3, #24]
      break;
 8004ed0:	e084      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fb2f 	bl	800553c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0208 	orr.w	r2, r2, #8
 8004eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0204 	bic.w	r2, r2, #4
 8004efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	61da      	str	r2, [r3, #28]
      break;
 8004f10:	e064      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fb97 	bl	800564c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	021a      	lsls	r2, r3, #8
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	61da      	str	r2, [r3, #28]
      break;
 8004f52:	e043      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fbe0 	bl	8005720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0208 	orr.w	r2, r2, #8
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0204 	bic.w	r2, r2, #4
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f92:	e023      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fc24 	bl	80057e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	021a      	lsls	r2, r3, #8
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fd4:	e002      	b.n	8004fdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop

08004ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIM_ConfigClockSource+0x1c>
 8005008:	2302      	movs	r3, #2
 800500a:	e0b6      	b.n	800517a <HAL_TIM_ConfigClockSource+0x18a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800502e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005048:	d03e      	beq.n	80050c8 <HAL_TIM_ConfigClockSource+0xd8>
 800504a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504e:	f200 8087 	bhi.w	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	f000 8086 	beq.w	8005166 <HAL_TIM_ConfigClockSource+0x176>
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505e:	d87f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005060:	2b70      	cmp	r3, #112	; 0x70
 8005062:	d01a      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xaa>
 8005064:	2b70      	cmp	r3, #112	; 0x70
 8005066:	d87b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d050      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x11e>
 800506c:	2b60      	cmp	r3, #96	; 0x60
 800506e:	d877      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005070:	2b50      	cmp	r3, #80	; 0x50
 8005072:	d03c      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xfe>
 8005074:	2b50      	cmp	r3, #80	; 0x50
 8005076:	d873      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d058      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x13e>
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d86f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d064      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15e>
 8005084:	2b30      	cmp	r3, #48	; 0x30
 8005086:	d86b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d060      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15e>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d867      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d05c      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15e>
 8005094:	2b10      	cmp	r3, #16
 8005096:	d05a      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15e>
 8005098:	e062      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f000 fc7d 	bl	80059a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	609a      	str	r2, [r3, #8]
      break;
 80050c6:	e04f      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6899      	ldr	r1, [r3, #8]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f000 fc66 	bl	80059a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ea:	609a      	str	r2, [r3, #8]
      break;
 80050ec:	e03c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fbda 	bl	80058b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2150      	movs	r1, #80	; 0x50
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fc33 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 800510c:	e02c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fbf9 	bl	8005912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2160      	movs	r1, #96	; 0x60
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fc23 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 800512c:	e01c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fbba 	bl	80058b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2140      	movs	r1, #64	; 0x40
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fc13 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 800514c:	e00c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 fc0a 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 800515e:	e003      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
      break;
 8005164:	e000      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a40      	ldr	r2, [pc, #256]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d00f      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <TIM_Base_SetConfig+0x118>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a3c      	ldr	r2, [pc, #240]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <TIM_Base_SetConfig+0x120>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d108      	bne.n	8005226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01f      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d01b      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2c      	ldr	r2, [pc, #176]	; (80052ec <TIM_Base_SetConfig+0x118>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d017      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <TIM_Base_SetConfig+0x11c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2a      	ldr	r2, [pc, #168]	; (80052f4 <TIM_Base_SetConfig+0x120>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a29      	ldr	r2, [pc, #164]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a28      	ldr	r2, [pc, #160]	; (80052fc <TIM_Base_SetConfig+0x128>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <TIM_Base_SetConfig+0x12c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a26      	ldr	r2, [pc, #152]	; (8005304 <TIM_Base_SetConfig+0x130>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <TIM_Base_SetConfig+0x114>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <TIM_Base_SetConfig+0x124>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a11      	ldr	r2, [pc, #68]	; (80052fc <TIM_Base_SetConfig+0x128>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a10      	ldr	r2, [pc, #64]	; (8005300 <TIM_Base_SetConfig+0x12c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0xf8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a0f      	ldr	r2, [pc, #60]	; (8005304 <TIM_Base_SetConfig+0x130>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	615a      	str	r2, [r3, #20]
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800

08005308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f023 0302 	bic.w	r3, r3, #2
 8005354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a2c      	ldr	r2, [pc, #176]	; (8005414 <TIM_OC1_SetConfig+0x10c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00f      	beq.n	8005388 <TIM_OC1_SetConfig+0x80>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <TIM_OC1_SetConfig+0x110>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_OC1_SetConfig+0x80>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a2a      	ldr	r2, [pc, #168]	; (800541c <TIM_OC1_SetConfig+0x114>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_OC1_SetConfig+0x80>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a29      	ldr	r2, [pc, #164]	; (8005420 <TIM_OC1_SetConfig+0x118>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_OC1_SetConfig+0x80>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a28      	ldr	r2, [pc, #160]	; (8005424 <TIM_OC1_SetConfig+0x11c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d10c      	bne.n	80053a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0308 	bic.w	r3, r3, #8
 800538e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <TIM_OC1_SetConfig+0x10c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_OC1_SetConfig+0xc2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <TIM_OC1_SetConfig+0x110>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_OC1_SetConfig+0xc2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a19      	ldr	r2, [pc, #100]	; (800541c <TIM_OC1_SetConfig+0x114>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_OC1_SetConfig+0xc2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <TIM_OC1_SetConfig+0x118>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_OC1_SetConfig+0xc2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a17      	ldr	r2, [pc, #92]	; (8005424 <TIM_OC1_SetConfig+0x11c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d111      	bne.n	80053ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	621a      	str	r2, [r3, #32]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40013400 	.word	0x40013400
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800

08005428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0210 	bic.w	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0320 	bic.w	r3, r3, #32
 8005476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a28      	ldr	r2, [pc, #160]	; (8005528 <TIM_OC2_SetConfig+0x100>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC2_SetConfig+0x6c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a27      	ldr	r2, [pc, #156]	; (800552c <TIM_OC2_SetConfig+0x104>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10d      	bne.n	80054b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <TIM_OC2_SetConfig+0x100>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00f      	beq.n	80054d8 <TIM_OC2_SetConfig+0xb0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a1c      	ldr	r2, [pc, #112]	; (800552c <TIM_OC2_SetConfig+0x104>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_OC2_SetConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <TIM_OC2_SetConfig+0x108>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_OC2_SetConfig+0xb0>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1a      	ldr	r2, [pc, #104]	; (8005534 <TIM_OC2_SetConfig+0x10c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC2_SetConfig+0xb0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a19      	ldr	r2, [pc, #100]	; (8005538 <TIM_OC2_SetConfig+0x110>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d113      	bne.n	8005500 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800

0800553c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0303 	bic.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <TIM_OC3_SetConfig+0xfc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC3_SetConfig+0x6a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a26      	ldr	r2, [pc, #152]	; (800563c <TIM_OC3_SetConfig+0x100>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10d      	bne.n	80055c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1c      	ldr	r2, [pc, #112]	; (8005638 <TIM_OC3_SetConfig+0xfc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00f      	beq.n	80055ea <TIM_OC3_SetConfig+0xae>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1b      	ldr	r2, [pc, #108]	; (800563c <TIM_OC3_SetConfig+0x100>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_OC3_SetConfig+0xae>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <TIM_OC3_SetConfig+0x104>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_OC3_SetConfig+0xae>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <TIM_OC3_SetConfig+0x108>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC3_SetConfig+0xae>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <TIM_OC3_SetConfig+0x10c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d113      	bne.n	8005612 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40013400 	.word	0x40013400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a18      	ldr	r2, [pc, #96]	; (800570c <TIM_OC4_SetConfig+0xc0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00f      	beq.n	80056d0 <TIM_OC4_SetConfig+0x84>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a17      	ldr	r2, [pc, #92]	; (8005710 <TIM_OC4_SetConfig+0xc4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_OC4_SetConfig+0x84>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a16      	ldr	r2, [pc, #88]	; (8005714 <TIM_OC4_SetConfig+0xc8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_OC4_SetConfig+0x84>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a15      	ldr	r2, [pc, #84]	; (8005718 <TIM_OC4_SetConfig+0xcc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC4_SetConfig+0x84>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a14      	ldr	r2, [pc, #80]	; (800571c <TIM_OC4_SetConfig+0xd0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d109      	bne.n	80056e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	019b      	lsls	r3, r3, #6
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40012c00 	.word	0x40012c00
 8005710:	40013400 	.word	0x40013400
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800

08005720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005764:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	041b      	lsls	r3, r3, #16
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <TIM_OC5_SetConfig+0xb4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00f      	beq.n	800579a <TIM_OC5_SetConfig+0x7a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <TIM_OC5_SetConfig+0xb8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00b      	beq.n	800579a <TIM_OC5_SetConfig+0x7a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <TIM_OC5_SetConfig+0xbc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <TIM_OC5_SetConfig+0x7a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a14      	ldr	r2, [pc, #80]	; (80057e0 <TIM_OC5_SetConfig+0xc0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_OC5_SetConfig+0x7a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <TIM_OC5_SetConfig+0xc4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d109      	bne.n	80057ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	621a      	str	r2, [r3, #32]
}
 80057c8:	bf00      	nop
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40013400 	.word	0x40013400
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800

080057e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800582e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	051b      	lsls	r3, r3, #20
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <TIM_OC6_SetConfig+0xb8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00f      	beq.n	8005864 <TIM_OC6_SetConfig+0x7c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <TIM_OC6_SetConfig+0xbc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00b      	beq.n	8005864 <TIM_OC6_SetConfig+0x7c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <TIM_OC6_SetConfig+0xc0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d007      	beq.n	8005864 <TIM_OC6_SetConfig+0x7c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a15      	ldr	r2, [pc, #84]	; (80058ac <TIM_OC6_SetConfig+0xc4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC6_SetConfig+0x7c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <TIM_OC6_SetConfig+0xc8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d109      	bne.n	8005878 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800

080058b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0201 	bic.w	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 030a 	bic.w	r3, r3, #10
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0210 	bic.w	r2, r3, #16
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800593c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	031b      	lsls	r3, r3, #12
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800594e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	f043 0307 	orr.w	r3, r3, #7
 8005994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2201      	movs	r2, #1
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1a      	ldr	r2, [r3, #32]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1a      	ldr	r2, [r3, #32]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e068      	b.n	8005b1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2e      	ldr	r2, [pc, #184]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a2d      	ldr	r2, [pc, #180]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01d      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d018      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10c      	bne.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40013400 	.word	0x40013400
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40014000 	.word	0x40014000

08005b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e042      	b.n	8005c18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7fb fbcd 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2224      	movs	r2, #36	; 0x24
 8005bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fbfa 	bl	80063bc <UART_SetConfig>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e022      	b.n	8005c18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 feea 	bl	80069b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 ff71 	bl	8006af8 <UART_CheckIdleState>
 8005c16:	4603      	mov	r3, r0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	; 0x28
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	f040 8083 	bne.w	8005d42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_UART_Transmit+0x28>
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e07b      	b.n	8005d44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Transmit+0x3a>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e074      	b.n	8005d44 <HAL_UART_Transmit+0x124>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2221      	movs	r2, #33	; 0x21
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c72:	f7fb fe13 	bl	800189c <HAL_GetTick>
 8005c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	88fa      	ldrh	r2, [r7, #6]
 8005c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d108      	bne.n	8005ca4 <HAL_UART_Transmit+0x84>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e003      	b.n	8005cac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005cb4:	e02c      	b.n	8005d10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 ff64 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e039      	b.n	8005d44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e007      	b.n	8005cfe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1cc      	bne.n	8005cb6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 ff31 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e006      	b.n	8005d44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b0ba      	sub	sp, #232	; 0xe8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d76:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d11b      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d015      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 82d6 	beq.w	8006362 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
      }
      return;
 8005dbe:	e2d0      	b.n	8006362 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 811f 	beq.w	8006008 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dce:	4b8b      	ldr	r3, [pc, #556]	; (8005ffc <HAL_UART_IRQHandler+0x2b0>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005dd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005dda:	4b89      	ldr	r3, [pc, #548]	; (8006000 <HAL_UART_IRQHandler+0x2b4>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8112 	beq.w	8006008 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d011      	beq.n	8005e14 <HAL_UART_IRQHandler+0xc8>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2201      	movs	r2, #1
 8005e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e0a:	f043 0201 	orr.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d011      	beq.n	8005e44 <HAL_UART_IRQHandler+0xf8>
 8005e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2202      	movs	r2, #2
 8005e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d011      	beq.n	8005e74 <HAL_UART_IRQHandler+0x128>
 8005e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2204      	movs	r2, #4
 8005e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e6a:	f043 0202 	orr.w	r2, r3, #2
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d017      	beq.n	8005eb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e90:	4b5a      	ldr	r3, [pc, #360]	; (8005ffc <HAL_UART_IRQHandler+0x2b0>)
 8005e92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00b      	beq.n	8005eb0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea6:	f043 0208 	orr.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d012      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x196>
 8005ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00c      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 823c 	beq.w	8006366 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d013      	beq.n	8005f22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d005      	beq.n	8005f46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04f      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fee9 	bl	8006d1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d141      	bne.n	8005fde <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1d9      	bne.n	8005f5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d013      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb2:	4a14      	ldr	r2, [pc, #80]	; (8006004 <HAL_UART_IRQHandler+0x2b8>)
 8005fb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fb fe0b 	bl	8001bd6 <HAL_DMA_Abort_IT>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d017      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00f      	b.n	8005ff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9da 	bl	8006390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e00b      	b.n	8005ff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9d6 	bl	8006390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e007      	b.n	8005ff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9d2 	bl	8006390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005ff4:	e1b7      	b.n	8006366 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff6:	bf00      	nop
    return;
 8005ff8:	e1b5      	b.n	8006366 <HAL_UART_IRQHandler+0x61a>
 8005ffa:	bf00      	nop
 8005ffc:	10000001 	.word	0x10000001
 8006000:	04000120 	.word	0x04000120
 8006004:	08006deb 	.word	0x08006deb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600c:	2b01      	cmp	r3, #1
 800600e:	f040 814a 	bne.w	80062a6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8143 	beq.w	80062a6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 813c 	beq.w	80062a6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2210      	movs	r2, #16
 8006034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	f040 80b5 	bne.w	80061b0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006052:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8187 	beq.w	800636a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006066:	429a      	cmp	r2, r3
 8006068:	f080 817f 	bcs.w	800636a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006072:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 8086 	bne.w	8006194 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800609c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1da      	bne.n	8006088 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e1      	bne.n	80060d2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3308      	adds	r3, #8
 8006114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800611e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e3      	bne.n	800610e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006164:	f023 0310 	bic.w	r3, r3, #16
 8006168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006176:	65bb      	str	r3, [r7, #88]	; 0x58
 8006178:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800617c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e4      	bne.n	8006154 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618e:	4618      	mov	r0, r3
 8006190:	f7fb fcc5 	bl	8001b1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f8fb 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ae:	e0dc      	b.n	800636a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80ce 	beq.w	800636e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80061d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 80c9 	beq.w	800636e <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006200:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800620c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e4      	bne.n	80061dc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3308      	adds	r3, #8
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	623b      	str	r3, [r7, #32]
   return(result);
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800623a:	633a      	str	r2, [r7, #48]	; 0x30
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e1      	bne.n	8006212 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0310 	bic.w	r3, r3, #16
 8006276:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	69b9      	ldr	r1, [r7, #24]
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	617b      	str	r3, [r7, #20]
   return(result);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e4      	bne.n	8006262 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f880 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062a4:	e063      	b.n	800636e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00e      	beq.n	80062d0 <HAL_UART_IRQHandler+0x584>
 80062b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d008      	beq.n	80062d0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fdcf 	bl	8006e6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062ce:	e051      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d014      	beq.n	8006306 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d03a      	beq.n	8006372 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
    }
    return;
 8006304:	e035      	b.n	8006372 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <HAL_UART_IRQHandler+0x5da>
 8006312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fd79 	bl	8006e16 <UART_EndTransmit_IT>
    return;
 8006324:	e026      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <HAL_UART_IRQHandler+0x5fa>
 8006332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006336:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fda8 	bl	8006e94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006344:	e016      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d010      	beq.n	8006374 <HAL_UART_IRQHandler+0x628>
 8006352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006356:	2b00      	cmp	r3, #0
 8006358:	da0c      	bge.n	8006374 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fd90 	bl	8006e80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006360:	e008      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
      return;
 8006362:	bf00      	nop
 8006364:	e006      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
    return;
 8006366:	bf00      	nop
 8006368:	e004      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
      return;
 800636a:	bf00      	nop
 800636c:	e002      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
      return;
 800636e:	bf00      	nop
 8006370:	e000      	b.n	8006374 <HAL_UART_IRQHandler+0x628>
    return;
 8006372:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006374:	37e8      	adds	r7, #232	; 0xe8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop

0800637c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c0:	b08c      	sub	sp, #48	; 0x30
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	431a      	orrs	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4baa      	ldr	r3, [pc, #680]	; (8006694 <UART_SetConfig+0x2d8>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f4:	430b      	orrs	r3, r1
 80063f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a9f      	ldr	r2, [pc, #636]	; (8006698 <UART_SetConfig+0x2dc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006424:	4313      	orrs	r3, r2
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006432:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800643c:	430b      	orrs	r3, r1
 800643e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	f023 010f 	bic.w	r1, r3, #15
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a90      	ldr	r2, [pc, #576]	; (800669c <UART_SetConfig+0x2e0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d125      	bne.n	80064ac <UART_SetConfig+0xf0>
 8006460:	4b8f      	ldr	r3, [pc, #572]	; (80066a0 <UART_SetConfig+0x2e4>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d81a      	bhi.n	80064a4 <UART_SetConfig+0xe8>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0xb8>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006485 	.word	0x08006485
 8006478:	08006495 	.word	0x08006495
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800649d 	.word	0x0800649d
 8006484:	2301      	movs	r3, #1
 8006486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648a:	e116      	b.n	80066ba <UART_SetConfig+0x2fe>
 800648c:	2302      	movs	r3, #2
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006492:	e112      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006494:	2304      	movs	r3, #4
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649a:	e10e      	b.n	80066ba <UART_SetConfig+0x2fe>
 800649c:	2308      	movs	r3, #8
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a2:	e10a      	b.n	80066ba <UART_SetConfig+0x2fe>
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064aa:	e106      	b.n	80066ba <UART_SetConfig+0x2fe>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a7c      	ldr	r2, [pc, #496]	; (80066a4 <UART_SetConfig+0x2e8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d138      	bne.n	8006528 <UART_SetConfig+0x16c>
 80064b6:	4b7a      	ldr	r3, [pc, #488]	; (80066a0 <UART_SetConfig+0x2e4>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064bc:	f003 030c 	and.w	r3, r3, #12
 80064c0:	2b0c      	cmp	r3, #12
 80064c2:	d82d      	bhi.n	8006520 <UART_SetConfig+0x164>
 80064c4:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <UART_SetConfig+0x110>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	08006501 	.word	0x08006501
 80064d0:	08006521 	.word	0x08006521
 80064d4:	08006521 	.word	0x08006521
 80064d8:	08006521 	.word	0x08006521
 80064dc:	08006511 	.word	0x08006511
 80064e0:	08006521 	.word	0x08006521
 80064e4:	08006521 	.word	0x08006521
 80064e8:	08006521 	.word	0x08006521
 80064ec:	08006509 	.word	0x08006509
 80064f0:	08006521 	.word	0x08006521
 80064f4:	08006521 	.word	0x08006521
 80064f8:	08006521 	.word	0x08006521
 80064fc:	08006519 	.word	0x08006519
 8006500:	2300      	movs	r3, #0
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006506:	e0d8      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006508:	2302      	movs	r3, #2
 800650a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650e:	e0d4      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006510:	2304      	movs	r3, #4
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006516:	e0d0      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006518:	2308      	movs	r3, #8
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651e:	e0cc      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006520:	2310      	movs	r3, #16
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e0c8      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a5e      	ldr	r2, [pc, #376]	; (80066a8 <UART_SetConfig+0x2ec>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d125      	bne.n	800657e <UART_SetConfig+0x1c2>
 8006532:	4b5b      	ldr	r3, [pc, #364]	; (80066a0 <UART_SetConfig+0x2e4>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d016      	beq.n	800656e <UART_SetConfig+0x1b2>
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d818      	bhi.n	8006576 <UART_SetConfig+0x1ba>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d00a      	beq.n	800655e <UART_SetConfig+0x1a2>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d814      	bhi.n	8006576 <UART_SetConfig+0x1ba>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <UART_SetConfig+0x19a>
 8006550:	2b10      	cmp	r3, #16
 8006552:	d008      	beq.n	8006566 <UART_SetConfig+0x1aa>
 8006554:	e00f      	b.n	8006576 <UART_SetConfig+0x1ba>
 8006556:	2300      	movs	r3, #0
 8006558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655c:	e0ad      	b.n	80066ba <UART_SetConfig+0x2fe>
 800655e:	2302      	movs	r3, #2
 8006560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006564:	e0a9      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006566:	2304      	movs	r3, #4
 8006568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656c:	e0a5      	b.n	80066ba <UART_SetConfig+0x2fe>
 800656e:	2308      	movs	r3, #8
 8006570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006574:	e0a1      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006576:	2310      	movs	r3, #16
 8006578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657c:	e09d      	b.n	80066ba <UART_SetConfig+0x2fe>
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a4a      	ldr	r2, [pc, #296]	; (80066ac <UART_SetConfig+0x2f0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d125      	bne.n	80065d4 <UART_SetConfig+0x218>
 8006588:	4b45      	ldr	r3, [pc, #276]	; (80066a0 <UART_SetConfig+0x2e4>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006592:	2bc0      	cmp	r3, #192	; 0xc0
 8006594:	d016      	beq.n	80065c4 <UART_SetConfig+0x208>
 8006596:	2bc0      	cmp	r3, #192	; 0xc0
 8006598:	d818      	bhi.n	80065cc <UART_SetConfig+0x210>
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d00a      	beq.n	80065b4 <UART_SetConfig+0x1f8>
 800659e:	2b80      	cmp	r3, #128	; 0x80
 80065a0:	d814      	bhi.n	80065cc <UART_SetConfig+0x210>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <UART_SetConfig+0x1f0>
 80065a6:	2b40      	cmp	r3, #64	; 0x40
 80065a8:	d008      	beq.n	80065bc <UART_SetConfig+0x200>
 80065aa:	e00f      	b.n	80065cc <UART_SetConfig+0x210>
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b2:	e082      	b.n	80066ba <UART_SetConfig+0x2fe>
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ba:	e07e      	b.n	80066ba <UART_SetConfig+0x2fe>
 80065bc:	2304      	movs	r3, #4
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e07a      	b.n	80066ba <UART_SetConfig+0x2fe>
 80065c4:	2308      	movs	r3, #8
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e076      	b.n	80066ba <UART_SetConfig+0x2fe>
 80065cc:	2310      	movs	r3, #16
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e072      	b.n	80066ba <UART_SetConfig+0x2fe>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a35      	ldr	r2, [pc, #212]	; (80066b0 <UART_SetConfig+0x2f4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d12a      	bne.n	8006634 <UART_SetConfig+0x278>
 80065de:	4b30      	ldr	r3, [pc, #192]	; (80066a0 <UART_SetConfig+0x2e4>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ec:	d01a      	beq.n	8006624 <UART_SetConfig+0x268>
 80065ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f2:	d81b      	bhi.n	800662c <UART_SetConfig+0x270>
 80065f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f8:	d00c      	beq.n	8006614 <UART_SetConfig+0x258>
 80065fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fe:	d815      	bhi.n	800662c <UART_SetConfig+0x270>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <UART_SetConfig+0x250>
 8006604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006608:	d008      	beq.n	800661c <UART_SetConfig+0x260>
 800660a:	e00f      	b.n	800662c <UART_SetConfig+0x270>
 800660c:	2300      	movs	r3, #0
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006612:	e052      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006614:	2302      	movs	r3, #2
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661a:	e04e      	b.n	80066ba <UART_SetConfig+0x2fe>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006622:	e04a      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662a:	e046      	b.n	80066ba <UART_SetConfig+0x2fe>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006632:	e042      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a17      	ldr	r2, [pc, #92]	; (8006698 <UART_SetConfig+0x2dc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d13a      	bne.n	80066b4 <UART_SetConfig+0x2f8>
 800663e:	4b18      	ldr	r3, [pc, #96]	; (80066a0 <UART_SetConfig+0x2e4>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800664c:	d01a      	beq.n	8006684 <UART_SetConfig+0x2c8>
 800664e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006652:	d81b      	bhi.n	800668c <UART_SetConfig+0x2d0>
 8006654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006658:	d00c      	beq.n	8006674 <UART_SetConfig+0x2b8>
 800665a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800665e:	d815      	bhi.n	800668c <UART_SetConfig+0x2d0>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <UART_SetConfig+0x2b0>
 8006664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006668:	d008      	beq.n	800667c <UART_SetConfig+0x2c0>
 800666a:	e00f      	b.n	800668c <UART_SetConfig+0x2d0>
 800666c:	2300      	movs	r3, #0
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006672:	e022      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006674:	2302      	movs	r3, #2
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667a:	e01e      	b.n	80066ba <UART_SetConfig+0x2fe>
 800667c:	2304      	movs	r3, #4
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006682:	e01a      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006684:	2308      	movs	r3, #8
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668a:	e016      	b.n	80066ba <UART_SetConfig+0x2fe>
 800668c:	2310      	movs	r3, #16
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006692:	e012      	b.n	80066ba <UART_SetConfig+0x2fe>
 8006694:	cfff69f3 	.word	0xcfff69f3
 8006698:	40008000 	.word	0x40008000
 800669c:	40013800 	.word	0x40013800
 80066a0:	40021000 	.word	0x40021000
 80066a4:	40004400 	.word	0x40004400
 80066a8:	40004800 	.word	0x40004800
 80066ac:	40004c00 	.word	0x40004c00
 80066b0:	40005000 	.word	0x40005000
 80066b4:	2310      	movs	r3, #16
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4aae      	ldr	r2, [pc, #696]	; (8006978 <UART_SetConfig+0x5bc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	f040 8097 	bne.w	80067f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d823      	bhi.n	8006716 <UART_SetConfig+0x35a>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0x318>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	08006717 	.word	0x08006717
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006717 	.word	0x08006717
 80066e4:	08006707 	.word	0x08006707
 80066e8:	08006717 	.word	0x08006717
 80066ec:	08006717 	.word	0x08006717
 80066f0:	08006717 	.word	0x08006717
 80066f4:	0800670f 	.word	0x0800670f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f8:	f7fd f922 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80066fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066fe:	e010      	b.n	8006722 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006700:	4b9e      	ldr	r3, [pc, #632]	; (800697c <UART_SetConfig+0x5c0>)
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006704:	e00d      	b.n	8006722 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006706:	f7fd f883 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 800670a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800670c:	e009      	b.n	8006722 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006714:	e005      	b.n	8006722 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006720:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8130 	beq.w	800698a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	4a94      	ldr	r2, [pc, #592]	; (8006980 <UART_SetConfig+0x5c4>)
 8006730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006734:	461a      	mov	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	fbb3 f3f2 	udiv	r3, r3, r2
 800673c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	429a      	cmp	r2, r3
 800674c:	d305      	bcc.n	800675a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	429a      	cmp	r2, r3
 8006758:	d903      	bls.n	8006762 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006760:	e113      	b.n	800698a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	2200      	movs	r2, #0
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	60fa      	str	r2, [r7, #12]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	4a84      	ldr	r2, [pc, #528]	; (8006980 <UART_SetConfig+0x5c4>)
 8006770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006774:	b29b      	uxth	r3, r3
 8006776:	2200      	movs	r2, #0
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006784:	f7f9 fd8c 	bl	80002a0 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4610      	mov	r0, r2
 800678e:	4619      	mov	r1, r3
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	020b      	lsls	r3, r1, #8
 800679a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800679e:	0202      	lsls	r2, r0, #8
 80067a0:	6979      	ldr	r1, [r7, #20]
 80067a2:	6849      	ldr	r1, [r1, #4]
 80067a4:	0849      	lsrs	r1, r1, #1
 80067a6:	2000      	movs	r0, #0
 80067a8:	460c      	mov	r4, r1
 80067aa:	4605      	mov	r5, r0
 80067ac:	eb12 0804 	adds.w	r8, r2, r4
 80067b0:	eb43 0905 	adc.w	r9, r3, r5
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	469a      	mov	sl, r3
 80067bc:	4693      	mov	fp, r2
 80067be:	4652      	mov	r2, sl
 80067c0:	465b      	mov	r3, fp
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7f9 fd6b 	bl	80002a0 <__aeabi_uldivmod>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4613      	mov	r3, r2
 80067d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d8:	d308      	bcc.n	80067ec <UART_SetConfig+0x430>
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e0:	d204      	bcs.n	80067ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a3a      	ldr	r2, [r7, #32]
 80067e8:	60da      	str	r2, [r3, #12]
 80067ea:	e0ce      	b.n	800698a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067f2:	e0ca      	b.n	800698a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fc:	d166      	bne.n	80068cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80067fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006802:	2b08      	cmp	r3, #8
 8006804:	d827      	bhi.n	8006856 <UART_SetConfig+0x49a>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x450>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006857 	.word	0x08006857
 800681c:	08006847 	.word	0x08006847
 8006820:	08006857 	.word	0x08006857
 8006824:	08006857 	.word	0x08006857
 8006828:	08006857 	.word	0x08006857
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fd f886 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8006834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006836:	e014      	b.n	8006862 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fd f898 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 800683c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800683e:	e010      	b.n	8006862 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b4e      	ldr	r3, [pc, #312]	; (800697c <UART_SetConfig+0x5c0>)
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006844:	e00d      	b.n	8006862 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fc ffe3 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 800684a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800684c:	e009      	b.n	8006862 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006854:	e005      	b.n	8006862 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8090 	beq.w	800698a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	4a44      	ldr	r2, [pc, #272]	; (8006980 <UART_SetConfig+0x5c4>)
 8006870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006874:	461a      	mov	r2, r3
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	fbb3 f3f2 	udiv	r3, r3, r2
 800687c:	005a      	lsls	r2, r3, #1
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	441a      	add	r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	fbb2 f3f3 	udiv	r3, r2, r3
 800688e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	2b0f      	cmp	r3, #15
 8006894:	d916      	bls.n	80068c4 <UART_SetConfig+0x508>
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689c:	d212      	bcs.n	80068c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f023 030f 	bic.w	r3, r3, #15
 80068a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	8bfb      	ldrh	r3, [r7, #30]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	8bfa      	ldrh	r2, [r7, #30]
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	e062      	b.n	800698a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068ca:	e05e      	b.n	800698a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d828      	bhi.n	8006926 <UART_SetConfig+0x56a>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <UART_SetConfig+0x520>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006911 	.word	0x08006911
 80068e8:	08006927 	.word	0x08006927
 80068ec:	08006917 	.word	0x08006917
 80068f0:	08006927 	.word	0x08006927
 80068f4:	08006927 	.word	0x08006927
 80068f8:	08006927 	.word	0x08006927
 80068fc:	0800691f 	.word	0x0800691f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006900:	f7fd f81e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8006904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006906:	e014      	b.n	8006932 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006908:	f7fd f830 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 800690c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800690e:	e010      	b.n	8006932 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <UART_SetConfig+0x5c0>)
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006914:	e00d      	b.n	8006932 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006916:	f7fc ff7b 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 800691a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800691c:	e009      	b.n	8006932 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006924:	e005      	b.n	8006932 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006930:	bf00      	nop
    }

    if (pclk != 0U)
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d028      	beq.n	800698a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	4a10      	ldr	r2, [pc, #64]	; (8006980 <UART_SetConfig+0x5c4>)
 800693e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006942:	461a      	mov	r2, r3
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	fbb3 f2f2 	udiv	r2, r3, r2
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	441a      	add	r2, r3
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	fbb2 f3f3 	udiv	r3, r2, r3
 800695a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	2b0f      	cmp	r3, #15
 8006960:	d910      	bls.n	8006984 <UART_SetConfig+0x5c8>
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006968:	d20c      	bcs.n	8006984 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	b29a      	uxth	r2, r3
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60da      	str	r2, [r3, #12]
 8006974:	e009      	b.n	800698a <UART_SetConfig+0x5ce>
 8006976:	bf00      	nop
 8006978:	40008000 	.word	0x40008000
 800697c:	00f42400 	.word	0x00f42400
 8006980:	0800ca94 	.word	0x0800ca94
      }
      else
      {
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2201      	movs	r2, #1
 800698e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2201      	movs	r2, #1
 8006996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2200      	movs	r2, #0
 800699e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2200      	movs	r2, #0
 80069a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3730      	adds	r7, #48	; 0x30
 80069ae:	46bd      	mov	sp, r7
 80069b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080069b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01a      	beq.n	8006aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab2:	d10a      	bne.n	8006aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b08:	f7fa fec8 	bl	800189c <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d10e      	bne.n	8006b3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f82f 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e025      	b.n	8006b86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d10e      	bne.n	8006b66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f819 	bl	8006b8e <UART_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e00f      	b.n	8006b86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b09c      	sub	sp, #112	; 0x70
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9e:	e0a9      	b.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	f000 80a5 	beq.w	8006cf4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006baa:	f7fa fe77 	bl	800189c <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d140      	bne.n	8006c42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006be0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006be4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e6      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c12:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e5      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e069      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d051      	beq.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5e:	d149      	bne.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e6      	bne.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	613b      	str	r3, [r7, #16]
   return(result);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cbc:	623a      	str	r2, [r7, #32]
 8006cbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	6a3a      	ldr	r2, [r7, #32]
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e5      	bne.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e010      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	bf0c      	ite	eq
 8006d04:	2301      	moveq	r3, #1
 8006d06:	2300      	movne	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	f43f af46 	beq.w	8006ba0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3770      	adds	r7, #112	; 0x70
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b095      	sub	sp, #84	; 0x54
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d44:	643b      	str	r3, [r7, #64]	; 0x40
 8006d46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e6      	bne.n	8006d26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e3      	bne.n	8006d58 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d118      	bne.n	8006dca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	647b      	str	r3, [r7, #68]	; 0x44
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006dde:	bf00      	nop
 8006de0:	3754      	adds	r7, #84	; 0x54
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff fac1 	bl	8006390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b088      	sub	sp, #32
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e6      	bne.n	8006e1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fa8c 	bl	800637c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e64:	bf00      	nop
 8006e66:	3720      	adds	r7, #32
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_UARTEx_DisableFifoMode+0x16>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e027      	b.n	8006f0e <HAL_UARTEx_DisableFifoMode+0x66>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	; 0x24
 8006eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006eec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e02d      	b.n	8006f8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2224      	movs	r2, #36	; 0x24
 8006f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f850 	bl	8007014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e02d      	b.n	800700a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2224      	movs	r2, #36	; 0x24
 8006fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0201 	bic.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f812 	bl	8007014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007020:	2b00      	cmp	r3, #0
 8007022:	d108      	bne.n	8007036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007034:	e031      	b.n	800709a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007036:	2308      	movs	r3, #8
 8007038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800703a:	2308      	movs	r3, #8
 800703c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	0e5b      	lsrs	r3, r3, #25
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	0f5b      	lsrs	r3, r3, #29
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	7b3a      	ldrb	r2, [r7, #12]
 8007062:	4911      	ldr	r1, [pc, #68]	; (80070a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007064:	5c8a      	ldrb	r2, [r1, r2]
 8007066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800706a:	7b3a      	ldrb	r2, [r7, #12]
 800706c:	490f      	ldr	r1, [pc, #60]	; (80070ac <UARTEx_SetNbDataToProcess+0x98>)
 800706e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007070:	fb93 f3f2 	sdiv	r3, r3, r2
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	7b7a      	ldrb	r2, [r7, #13]
 8007080:	4909      	ldr	r1, [pc, #36]	; (80070a8 <UARTEx_SetNbDataToProcess+0x94>)
 8007082:	5c8a      	ldrb	r2, [r1, r2]
 8007084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007088:	7b7a      	ldrb	r2, [r7, #13]
 800708a:	4908      	ldr	r1, [pc, #32]	; (80070ac <UARTEx_SetNbDataToProcess+0x98>)
 800708c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800708e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	0800caac 	.word	0x0800caac
 80070ac:	0800cab4 	.word	0x0800cab4

080070b0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 fcb2 	bl	8008a2a <VL53L0X_get_offset_calibration_data_micro_meter>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80070ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80070d8:	b5b0      	push	{r4, r5, r7, lr}
 80070da:	b096      	sub	sp, #88	; 0x58
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80070e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80070ee:	2200      	movs	r2, #0
 80070f0:	2188      	movs	r1, #136	; 0x88
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f004 feaa 	bl	800be4c <VL53L0X_WrByte>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800710c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007116:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a9e      	ldr	r2, [pc, #632]	; (8007398 <VL53L0X_DataInit+0x2c0>)
 800711e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a9d      	ldr	r2, [pc, #628]	; (800739c <VL53L0X_DataInit+0x2c4>)
 8007126:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007130:	f107 0310 	add.w	r3, r7, #16
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fac2 	bl	80076c0 <VL53L0X_GetDeviceParameters>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007142:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007146:	2b00      	cmp	r3, #0
 8007148:	d112      	bne.n	8007170 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800714a:	2300      	movs	r3, #0
 800714c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800714e:	2300      	movs	r3, #0
 8007150:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f103 0410 	add.w	r4, r3, #16
 8007158:	f107 0510 	add.w	r5, r7, #16
 800715c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800715e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800716c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2264      	movs	r2, #100	; 0x64
 8007174:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800717e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007188:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007192:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800719e:	2201      	movs	r2, #1
 80071a0:	2180      	movs	r1, #128	; 0x80
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f004 fe52 	bl	800be4c <VL53L0X_WrByte>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
 80071ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071b6:	2201      	movs	r2, #1
 80071b8:	21ff      	movs	r1, #255	; 0xff
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f004 fe46 	bl	800be4c <VL53L0X_WrByte>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80071ce:	2200      	movs	r2, #0
 80071d0:	2100      	movs	r1, #0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f004 fe3a 	bl	800be4c <VL53L0X_WrByte>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80071e6:	f107 030f 	add.w	r3, r7, #15
 80071ea:	461a      	mov	r2, r3
 80071ec:	2191      	movs	r1, #145	; 0x91
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f004 feae 	bl	800bf50 <VL53L0X_RdByte>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007202:	7bfa      	ldrb	r2, [r7, #15]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800720a:	2201      	movs	r2, #1
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f004 fe1c 	bl	800be4c <VL53L0X_WrByte>
 8007214:	4603      	mov	r3, r0
 8007216:	461a      	mov	r2, r3
 8007218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800721c:	4313      	orrs	r3, r2
 800721e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007222:	2200      	movs	r2, #0
 8007224:	21ff      	movs	r1, #255	; 0xff
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f004 fe10 	bl	800be4c <VL53L0X_WrByte>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007234:	4313      	orrs	r3, r2
 8007236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800723a:	2200      	movs	r2, #0
 800723c:	2180      	movs	r1, #128	; 0x80
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f004 fe04 	bl	800be4c <VL53L0X_WrByte>
 8007244:	4603      	mov	r3, r0
 8007246:	461a      	mov	r2, r3
 8007248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800724c:	4313      	orrs	r3, r2
 800724e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007252:	2300      	movs	r3, #0
 8007254:	653b      	str	r3, [r7, #80]	; 0x50
 8007256:	e014      	b.n	8007282 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007258:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800725c:	2b00      	cmp	r3, #0
 800725e:	d114      	bne.n	800728a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007262:	b29b      	uxth	r3, r3
 8007264:	2201      	movs	r2, #1
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fd35 	bl	8007cd8 <VL53L0X_SetLimitCheckEnable>
 800726e:	4603      	mov	r3, r0
 8007270:	461a      	mov	r2, r3
 8007272:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007276:	4313      	orrs	r3, r2
 8007278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800727c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727e:	3301      	adds	r3, #1
 8007280:	653b      	str	r3, [r7, #80]	; 0x50
 8007282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007284:	2b05      	cmp	r3, #5
 8007286:	dde7      	ble.n	8007258 <VL53L0X_DataInit+0x180>
 8007288:	e000      	b.n	800728c <VL53L0X_DataInit+0x1b4>
		else
			break;
 800728a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800728c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007294:	2200      	movs	r2, #0
 8007296:	2102      	movs	r1, #2
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fd1d 	bl	8007cd8 <VL53L0X_SetLimitCheckEnable>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80072a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d107      	bne.n	80072bc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80072ac:	2200      	movs	r2, #0
 80072ae:	2103      	movs	r1, #3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fd11 	bl	8007cd8 <VL53L0X_SetLimitCheckEnable>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80072bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d107      	bne.n	80072d4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80072c4:	2200      	movs	r2, #0
 80072c6:	2104      	movs	r1, #4
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fd05 	bl	8007cd8 <VL53L0X_SetLimitCheckEnable>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80072d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d107      	bne.n	80072ec <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80072dc:	2200      	movs	r2, #0
 80072de:	2105      	movs	r1, #5
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fcf9 	bl	8007cd8 <VL53L0X_SetLimitCheckEnable>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80072ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d108      	bne.n	8007306 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80072f4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80072f8:	2100      	movs	r1, #0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fd9c 	bl	8007e38 <VL53L0X_SetLimitCheckValue>
 8007300:	4603      	mov	r3, r0
 8007302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007306:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800730a:	2b00      	cmp	r3, #0
 800730c:	d108      	bne.n	8007320 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800730e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007312:	2101      	movs	r1, #1
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fd8f 	bl	8007e38 <VL53L0X_SetLimitCheckValue>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007320:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007324:	2b00      	cmp	r3, #0
 8007326:	d108      	bne.n	800733a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007328:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800732c:	2102      	movs	r1, #2
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fd82 	bl	8007e38 <VL53L0X_SetLimitCheckValue>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800733a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007342:	2200      	movs	r2, #0
 8007344:	2103      	movs	r1, #3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fd76 	bl	8007e38 <VL53L0X_SetLimitCheckValue>
 800734c:	4603      	mov	r3, r0
 800734e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007352:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10f      	bne.n	800737a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	22ff      	movs	r2, #255	; 0xff
 800735e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007362:	22ff      	movs	r2, #255	; 0xff
 8007364:	2101      	movs	r1, #1
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f004 fd70 	bl	800be4c <VL53L0X_WrByte>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800737a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800738a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800738e:	4618      	mov	r0, r3
 8007390:	3758      	adds	r7, #88	; 0x58
 8007392:	46bd      	mov	sp, r7
 8007394:	bdb0      	pop	{r4, r5, r7, pc}
 8007396:	bf00      	nop
 8007398:	00016b85 	.word	0x00016b85
 800739c:	000970a4 	.word	0x000970a4

080073a0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80073a0:	b5b0      	push	{r4, r5, r7, lr}
 80073a2:	b09e      	sub	sp, #120	; 0x78
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80073ae:	f107 031c 	add.w	r3, r7, #28
 80073b2:	2240      	movs	r2, #64	; 0x40
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f004 feb0 	bl	800c11c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80073dc:	2101      	movs	r1, #1
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f002 fa79 	bl	80098d6 <VL53L0X_get_info_from_device>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80073f0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80073f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80073fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007400:	2b01      	cmp	r3, #1
 8007402:	d80d      	bhi.n	8007420 <VL53L0X_StaticInit+0x80>
 8007404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007408:	2b01      	cmp	r3, #1
 800740a:	d102      	bne.n	8007412 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800740c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800740e:	2b20      	cmp	r3, #32
 8007410:	d806      	bhi.n	8007420 <VL53L0X_StaticInit+0x80>
 8007412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10e      	bne.n	8007438 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800741a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741c:	2b0c      	cmp	r3, #12
 800741e:	d90b      	bls.n	8007438 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007420:	f107 0218 	add.w	r2, r7, #24
 8007424:	f107 0314 	add.w	r3, r7, #20
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 fcf8 	bl	8008e20 <VL53L0X_perform_ref_spad_management>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007436:	e009      	b.n	800744c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743c:	461a      	mov	r2, r3
 800743e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fef9 	bl	8009238 <VL53L0X_set_reference_spads>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800744c:	4b94      	ldr	r3, [pc, #592]	; (80076a0 <VL53L0X_StaticInit+0x300>)
 800744e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007450:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10f      	bne.n	8007478 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800745e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007462:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007466:	2b00      	cmp	r3, #0
 8007468:	d104      	bne.n	8007474 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007470:	66bb      	str	r3, [r7, #104]	; 0x68
 8007472:	e001      	b.n	8007478 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007474:	4b8a      	ldr	r3, [pc, #552]	; (80076a0 <VL53L0X_StaticInit+0x300>)
 8007476:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007478:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007480:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f003 fdcc 	bl	800b020 <VL53L0X_load_tuning_settings>
 8007488:	4603      	mov	r3, r0
 800748a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800748e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007496:	2300      	movs	r3, #0
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	2304      	movs	r3, #4
 800749c:	2200      	movs	r2, #0
 800749e:	2100      	movs	r1, #0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 f8f1 	bl	8008688 <VL53L0X_SetGpioConfig>
 80074a6:	4603      	mov	r3, r0
 80074a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d121      	bne.n	80074f8 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80074b4:	2201      	movs	r2, #1
 80074b6:	21ff      	movs	r1, #255	; 0xff
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f004 fcc7 	bl	800be4c <VL53L0X_WrByte>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80074c4:	f107 031a 	add.w	r3, r7, #26
 80074c8:	461a      	mov	r2, r3
 80074ca:	2184      	movs	r1, #132	; 0x84
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f004 fd69 	bl	800bfa4 <VL53L0X_RdWord>
 80074d2:	4603      	mov	r3, r0
 80074d4:	461a      	mov	r2, r3
 80074d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80074da:	4313      	orrs	r3, r2
 80074dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80074e0:	2200      	movs	r2, #0
 80074e2:	21ff      	movs	r1, #255	; 0xff
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f004 fcb1 	bl	800be4c <VL53L0X_WrByte>
 80074ea:	4603      	mov	r3, r0
 80074ec:	461a      	mov	r2, r3
 80074ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007500:	8b7b      	ldrh	r3, [r7, #26]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	461a      	mov	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800750c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007514:	f107 031c 	add.w	r3, r7, #28
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8d0 	bl	80076c0 <VL53L0X_GetDeviceParameters>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007526:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800752a:	2b00      	cmp	r3, #0
 800752c:	d110      	bne.n	8007550 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800752e:	f107 0319 	add.w	r3, r7, #25
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f992 	bl	800785e <VL53L0X_GetFractionEnable>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007540:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007548:	7e7a      	ldrb	r2, [r7, #25]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007550:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10e      	bne.n	8007576 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 0410 	add.w	r4, r3, #16
 800755e:	f107 051c 	add.w	r5, r7, #28
 8007562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800756a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800756c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800756e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007576:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800757a:	2b00      	cmp	r3, #0
 800757c:	d111      	bne.n	80075a2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800757e:	f107 0319 	add.w	r3, r7, #25
 8007582:	461a      	mov	r2, r3
 8007584:	2101      	movs	r1, #1
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f004 fce2 	bl	800bf50 <VL53L0X_RdByte>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007592:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800759a:	7e7a      	ldrb	r2, [r7, #25]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80075a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80075aa:	2200      	movs	r2, #0
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f9ca 	bl	8007948 <VL53L0X_SetSequenceStepEnable>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80075ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d107      	bne.n	80075d2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80075c2:	2200      	movs	r2, #0
 80075c4:	2102      	movs	r1, #2
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9be 	bl	8007948 <VL53L0X_SetSequenceStepEnable>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80075d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2203      	movs	r2, #3
 80075de:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80075e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80075ea:	f107 0313 	add.w	r3, r7, #19
 80075ee:	461a      	mov	r2, r3
 80075f0:	2100      	movs	r1, #0
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f990 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007606:	7cfa      	ldrb	r2, [r7, #19]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800760e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007616:	f107 0313 	add.w	r3, r7, #19
 800761a:	461a      	mov	r2, r3
 800761c:	2101      	movs	r1, #1
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f97a 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800762a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007632:	7cfa      	ldrb	r2, [r7, #19]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800763a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007642:	f107 030c 	add.w	r3, r7, #12
 8007646:	461a      	mov	r2, r3
 8007648:	2103      	movs	r1, #3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f002 fec4 	bl	800a3d8 <get_sequence_step_timeout>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007656:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007666:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800766e:	f107 030c 	add.w	r3, r7, #12
 8007672:	461a      	mov	r2, r3
 8007674:	2104      	movs	r1, #4
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f002 feae 	bl	800a3d8 <get_sequence_step_timeout>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007682:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007686:	2b00      	cmp	r3, #0
 8007688:	d103      	bne.n	8007692 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007692:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007696:	4618      	mov	r0, r3
 8007698:	3770      	adds	r7, #112	; 0x70
 800769a:	46bd      	mov	sp, r7
 800769c:	bdb0      	pop	{r4, r5, r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000010 	.word	0x20000010

080076a4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80076ac:	239d      	movs	r3, #157	; 0x9d
 80076ae:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80076b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f8b0 	bl	8007838 <VL53L0X_GetDeviceMode>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80076dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d107      	bne.n	80076f4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa78 	bl	8007be0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80076f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d107      	bne.n	800771a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	3310      	adds	r3, #16
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 faae 	bl	8007c72 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800771a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d107      	bne.n	8007732 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	3314      	adds	r3, #20
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff fcc1 	bl	80070b0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d134      	bne.n	80077a4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	e02a      	b.n	8007796 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d12a      	bne.n	800779e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	b299      	uxth	r1, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	3308      	adds	r3, #8
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	4413      	add	r3, r2
 8007756:	3304      	adds	r3, #4
 8007758:	461a      	mov	r2, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fbce 	bl	8007efc <VL53L0X_GetLimitCheckValue>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4313      	orrs	r3, r2
 8007768:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800776a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d117      	bne.n	80077a2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	b299      	uxth	r1, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	3318      	adds	r3, #24
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	461a      	mov	r2, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fb35 	bl	8007df0 <VL53L0X_GetLimitCheckEnable>
 8007786:	4603      	mov	r3, r0
 8007788:	461a      	mov	r2, r3
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	4313      	orrs	r3, r2
 800778e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	3301      	adds	r3, #1
 8007794:	60bb      	str	r3, [r7, #8]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b05      	cmp	r3, #5
 800779a:	ddd1      	ble.n	8007740 <VL53L0X_GetDeviceParameters+0x80>
 800779c:	e002      	b.n	80077a4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80077a2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d107      	bne.n	80077bc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	333c      	adds	r3, #60	; 0x3c
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fc30 	bl	8008018 <VL53L0X_GetWrapAroundCheckEnable>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80077bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d107      	bne.n	80077d4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f879 	bl	80078c2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	2b15      	cmp	r3, #21
 80077f4:	bf8c      	ite	hi
 80077f6:	2201      	movhi	r2, #1
 80077f8:	2200      	movls	r2, #0
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	d10e      	bne.n	800781e <VL53L0X_SetDeviceMode+0x3e>
 8007800:	2201      	movs	r2, #1
 8007802:	409a      	lsls	r2, r3
 8007804:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <VL53L0X_SetDeviceMode+0x54>)
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	bf14      	ite	ne
 800780c:	2301      	movne	r3, #1
 800780e:	2300      	moveq	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	741a      	strb	r2, [r3, #16]
		break;
 800781c:	e001      	b.n	8007822 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800781e:	23f8      	movs	r3, #248	; 0xf8
 8007820:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	0030000b 	.word	0x0030000b

08007838 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	7c1a      	ldrb	r2, [r3, #16]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800784e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	2109      	movs	r1, #9
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f004 fb6d 	bl	800bf50 <VL53L0X_RdByte>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800787a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	b2da      	uxtb	r2, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f003 fa26 	bl	800acfe <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80078b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f003 faf3 	bl	800aebe <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80078dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
 80078f4:	4613      	mov	r3, r2
 80078f6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80078fc:	78ba      	ldrb	r2, [r7, #2]
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f002 ff3b 	bl	800a77e <VL53L0X_set_vcsel_pulse_period>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800790c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	460b      	mov	r3, r1
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800792a:	7afb      	ldrb	r3, [r7, #11]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f003 f9ad 	bl	800ac90 <VL53L0X_get_vcsel_pulse_period>
 8007936:	4603      	mov	r3, r0
 8007938:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800793a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	70fb      	strb	r3, [r7, #3]
 8007954:	4613      	mov	r3, r2
 8007956:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007958:	2300      	movs	r3, #0
 800795a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007964:	f107 030f 	add.w	r3, r7, #15
 8007968:	461a      	mov	r2, r3
 800796a:	2101      	movs	r1, #1
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f004 faef 	bl	800bf50 <VL53L0X_RdByte>
 8007972:	4603      	mov	r3, r0
 8007974:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800797a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d15a      	bne.n	8007a38 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007982:	78bb      	ldrb	r3, [r7, #2]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d12b      	bne.n	80079e0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	2b04      	cmp	r3, #4
 800798c:	d825      	bhi.n	80079da <VL53L0X_SetSequenceStepEnable+0x92>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079a9 	.word	0x080079a9
 8007998:	080079b3 	.word	0x080079b3
 800799c:	080079bd 	.word	0x080079bd
 80079a0:	080079c7 	.word	0x080079c7
 80079a4:	080079d1 	.word	0x080079d1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80079a8:	7dbb      	ldrb	r3, [r7, #22]
 80079aa:	f043 0310 	orr.w	r3, r3, #16
 80079ae:	75bb      	strb	r3, [r7, #22]
				break;
 80079b0:	e043      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80079b2:	7dbb      	ldrb	r3, [r7, #22]
 80079b4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80079b8:	75bb      	strb	r3, [r7, #22]
				break;
 80079ba:	e03e      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80079bc:	7dbb      	ldrb	r3, [r7, #22]
 80079be:	f043 0304 	orr.w	r3, r3, #4
 80079c2:	75bb      	strb	r3, [r7, #22]
				break;
 80079c4:	e039      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80079c6:	7dbb      	ldrb	r3, [r7, #22]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079cc:	75bb      	strb	r3, [r7, #22]
				break;
 80079ce:	e034      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80079d0:	7dbb      	ldrb	r3, [r7, #22]
 80079d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079d6:	75bb      	strb	r3, [r7, #22]
				break;
 80079d8:	e02f      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079da:	23fc      	movs	r3, #252	; 0xfc
 80079dc:	75fb      	strb	r3, [r7, #23]
 80079de:	e02c      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d825      	bhi.n	8007a32 <VL53L0X_SetSequenceStepEnable+0xea>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <VL53L0X_SetSequenceStepEnable+0xa4>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a01 	.word	0x08007a01
 80079f0:	08007a0b 	.word	0x08007a0b
 80079f4:	08007a15 	.word	0x08007a15
 80079f8:	08007a1f 	.word	0x08007a1f
 80079fc:	08007a29 	.word	0x08007a29
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007a00:	7dbb      	ldrb	r3, [r7, #22]
 8007a02:	f023 0310 	bic.w	r3, r3, #16
 8007a06:	75bb      	strb	r3, [r7, #22]
				break;
 8007a08:	e017      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007a0a:	7dbb      	ldrb	r3, [r7, #22]
 8007a0c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007a10:	75bb      	strb	r3, [r7, #22]
				break;
 8007a12:	e012      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007a14:	7dbb      	ldrb	r3, [r7, #22]
 8007a16:	f023 0304 	bic.w	r3, r3, #4
 8007a1a:	75bb      	strb	r3, [r7, #22]
				break;
 8007a1c:	e00d      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007a1e:	7dbb      	ldrb	r3, [r7, #22]
 8007a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a24:	75bb      	strb	r3, [r7, #22]
				break;
 8007a26:	e008      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007a28:	7dbb      	ldrb	r3, [r7, #22]
 8007a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2e:	75bb      	strb	r3, [r7, #22]
				break;
 8007a30:	e003      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a32:	23fc      	movs	r3, #252	; 0xfc
 8007a34:	75fb      	strb	r3, [r7, #23]
 8007a36:	e000      	b.n	8007a3a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007a38:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	7dba      	ldrb	r2, [r7, #22]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d01e      	beq.n	8007a80 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d107      	bne.n	8007a5a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007a4a:	7dbb      	ldrb	r3, [r7, #22]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2101      	movs	r1, #1
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f004 f9fb 	bl	800be4c <VL53L0X_WrByte>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7dba      	ldrb	r2, [r7, #22]
 8007a66:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007a78:	6939      	ldr	r1, [r7, #16]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff ff0e 	bl	800789c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	607b      	str	r3, [r7, #4]
 8007a96:	460b      	mov	r3, r1
 8007a98:	72fb      	strb	r3, [r7, #11]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d836      	bhi.n	8007b1c <sequence_step_enabled+0x90>
 8007aae:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <sequence_step_enabled+0x28>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007ac9 	.word	0x08007ac9
 8007ab8:	08007adb 	.word	0x08007adb
 8007abc:	08007aed 	.word	0x08007aed
 8007ac0:	08007aff 	.word	0x08007aff
 8007ac4:	08007b11 	.word	0x08007b11
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007ac8:	7abb      	ldrb	r3, [r7, #10]
 8007aca:	111b      	asrs	r3, r3, #4
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	701a      	strb	r2, [r3, #0]
		break;
 8007ad8:	e022      	b.n	8007b20 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007ada:	7abb      	ldrb	r3, [r7, #10]
 8007adc:	10db      	asrs	r3, r3, #3
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	701a      	strb	r2, [r3, #0]
		break;
 8007aea:	e019      	b.n	8007b20 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007aec:	7abb      	ldrb	r3, [r7, #10]
 8007aee:	109b      	asrs	r3, r3, #2
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	701a      	strb	r2, [r3, #0]
		break;
 8007afc:	e010      	b.n	8007b20 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007afe:	7abb      	ldrb	r3, [r7, #10]
 8007b00:	119b      	asrs	r3, r3, #6
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	701a      	strb	r2, [r3, #0]
		break;
 8007b0e:	e007      	b.n	8007b20 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007b10:	7abb      	ldrb	r3, [r7, #10]
 8007b12:	09db      	lsrs	r3, r3, #7
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	701a      	strb	r2, [r3, #0]
		break;
 8007b1a:	e001      	b.n	8007b20 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b1c:	23fc      	movs	r3, #252	; 0xfc
 8007b1e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007b42:	f107 030e 	add.w	r3, r7, #14
 8007b46:	461a      	mov	r2, r3
 8007b48:	2101      	movs	r1, #1
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f004 fa00 	bl	800bf50 <VL53L0X_RdByte>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d107      	bne.n	8007b6c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007b5c:	7bba      	ldrb	r2, [r7, #14]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2100      	movs	r1, #0
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff ff92 	bl	8007a8c <sequence_step_enabled>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d108      	bne.n	8007b86 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007b74:	7bba      	ldrb	r2, [r7, #14]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	3302      	adds	r3, #2
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff85 	bl	8007a8c <sequence_step_enabled>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d108      	bne.n	8007ba0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007b8e:	7bba      	ldrb	r2, [r7, #14]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	2102      	movs	r1, #2
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff ff78 	bl	8007a8c <sequence_step_enabled>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d108      	bne.n	8007bba <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007ba8:	7bba      	ldrb	r2, [r7, #14]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	3303      	adds	r3, #3
 8007bae:	2103      	movs	r1, #3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff ff6b 	bl	8007a8c <sequence_step_enabled>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d108      	bne.n	8007bd4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007bc2:	7bba      	ldrb	r2, [r7, #14]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	2104      	movs	r1, #4
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff ff5e 	bl	8007a8c <sequence_step_enabled>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007bee:	f107 030c 	add.w	r3, r7, #12
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	21f8      	movs	r1, #248	; 0xf8
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f004 f9d4 	bl	800bfa4 <VL53L0X_RdWord>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d108      	bne.n	8007c1a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007c08:	f107 0308 	add.w	r3, r7, #8
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2104      	movs	r1, #4
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f004 f9ff 	bl	800c014 <VL53L0X_RdDWord>
 8007c16:	4603      	mov	r3, r0
 8007c18:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10c      	bne.n	8007c3c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007c22:	89bb      	ldrh	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	89ba      	ldrh	r2, [r7, #12]
 8007c2c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7f1b      	ldrb	r3, [r3, #28]
 8007c5a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	7bba      	ldrb	r2, [r7, #14]
 8007c60:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007c80:	f107 030e 	add.w	r3, r7, #14
 8007c84:	461a      	mov	r2, r3
 8007c86:	2120      	movs	r1, #32
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f004 f98b 	bl	800bfa4 <VL53L0X_RdWord>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d118      	bne.n	8007ccc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007c9a:	89fb      	ldrh	r3, [r7, #14]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d109      	bne.n	8007cb4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	771a      	strb	r2, [r3, #28]
 8007cb2:	e00b      	b.n	8007ccc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007cb4:	89fb      	ldrh	r3, [r7, #14]
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	807b      	strh	r3, [r7, #2]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	d902      	bls.n	8007d04 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cfe:	23fc      	movs	r3, #252	; 0xfc
 8007d00:	75fb      	strb	r3, [r7, #23]
 8007d02:	e05b      	b.n	8007dbc <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007d04:	787b      	ldrb	r3, [r7, #1]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d106      	bne.n	8007d18 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007d12:	2301      	movs	r3, #1
 8007d14:	73bb      	strb	r3, [r7, #14]
 8007d16:	e00a      	b.n	8007d2e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007d18:	887b      	ldrh	r3, [r7, #2]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007d2e:	887b      	ldrh	r3, [r7, #2]
 8007d30:	2b05      	cmp	r3, #5
 8007d32:	d841      	bhi.n	8007db8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <VL53L0X_SetLimitCheckEnable+0x64>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d55 	.word	0x08007d55
 8007d40:	08007d5f 	.word	0x08007d5f
 8007d44:	08007d75 	.word	0x08007d75
 8007d48:	08007d7f 	.word	0x08007d7f
 8007d4c:	08007d89 	.word	0x08007d89
 8007d50:	08007da1 	.word	0x08007da1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7bfa      	ldrb	r2, [r7, #15]
 8007d58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007d5c:	e02e      	b.n	8007dbc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	2144      	movs	r1, #68	; 0x44
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f004 f893 	bl	800be94 <VL53L0X_WrWord>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]

			break;
 8007d72:	e023      	b.n	8007dbc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7bfa      	ldrb	r2, [r7, #15]
 8007d78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007d7c:	e01e      	b.n	8007dbc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	7bfa      	ldrb	r2, [r7, #15]
 8007d82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007d86:	e019      	b.n	8007dbc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007d8e:	7b7b      	ldrb	r3, [r7, #13]
 8007d90:	22fe      	movs	r2, #254	; 0xfe
 8007d92:	2160      	movs	r1, #96	; 0x60
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f004 f8a7 	bl	800bee8 <VL53L0X_UpdateByte>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007d9e:	e00d      	b.n	8007dbc <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007da6:	7b7b      	ldrb	r3, [r7, #13]
 8007da8:	22ef      	movs	r2, #239	; 0xef
 8007daa:	2160      	movs	r1, #96	; 0x60
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f004 f89b 	bl	800bee8 <VL53L0X_UpdateByte>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007db6:	e001      	b.n	8007dbc <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007db8:	23fc      	movs	r3, #252	; 0xfc
 8007dba:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10f      	bne.n	8007de4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007dc4:	787b      	ldrb	r3, [r7, #1]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007dca:	887b      	ldrh	r3, [r7, #2]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	4413      	add	r3, r2
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007dd6:	e005      	b.n	8007de4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007dd8:	887b      	ldrh	r3, [r7, #2]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007e02:	897b      	ldrh	r3, [r7, #10]
 8007e04:	2b05      	cmp	r3, #5
 8007e06:	d905      	bls.n	8007e14 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e08:	23fc      	movs	r3, #252	; 0xfc
 8007e0a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	e008      	b.n	8007e26 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e14:	897b      	ldrh	r3, [r7, #10]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e1e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7dba      	ldrb	r2, [r7, #22]
 8007e24:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
	...

08007e38 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	460b      	mov	r3, r1
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007e4a:	897b      	ldrh	r3, [r7, #10]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e54:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007e56:	7dbb      	ldrb	r3, [r7, #22]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d107      	bne.n	8007e6c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007e5c:	897b      	ldrh	r3, [r7, #10]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	330c      	adds	r3, #12
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	e040      	b.n	8007eee <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007e6c:	897b      	ldrh	r3, [r7, #10]
 8007e6e:	2b05      	cmp	r3, #5
 8007e70:	d830      	bhi.n	8007ed4 <VL53L0X_SetLimitCheckValue+0x9c>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <VL53L0X_SetLimitCheckValue+0x40>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e91 	.word	0x08007e91
 8007e7c:	08007e99 	.word	0x08007e99
 8007e80:	08007eaf 	.word	0x08007eaf
 8007e84:	08007eb7 	.word	0x08007eb7
 8007e88:	08007ebf 	.word	0x08007ebf
 8007e8c:	08007ebf 	.word	0x08007ebf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007e96:	e01f      	b.n	8007ed8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	2144      	movs	r1, #68	; 0x44
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f003 fff6 	bl	800be94 <VL53L0X_WrWord>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007eac:	e014      	b.n	8007ed8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007eb4:	e010      	b.n	8007ed8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007ebc:	e00c      	b.n	8007ed8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2164      	movs	r1, #100	; 0x64
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f003 ffe3 	bl	800be94 <VL53L0X_WrWord>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007ed2:	e001      	b.n	8007ed8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ed4:	23fc      	movs	r3, #252	; 0xfc
 8007ed6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ee0:	897b      	ldrh	r3, [r7, #10]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	460b      	mov	r3, r1
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007f12:	897b      	ldrh	r3, [r7, #10]
 8007f14:	2b05      	cmp	r3, #5
 8007f16:	d847      	bhi.n	8007fa8 <VL53L0X_GetLimitCheckValue+0xac>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <VL53L0X_GetLimitCheckValue+0x24>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f39 	.word	0x08007f39
 8007f24:	08007f45 	.word	0x08007f45
 8007f28:	08007f6b 	.word	0x08007f6b
 8007f2c:	08007f77 	.word	0x08007f77
 8007f30:	08007f83 	.word	0x08007f83
 8007f34:	08007f83 	.word	0x08007f83

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	77bb      	strb	r3, [r7, #30]
		break;
 8007f42:	e033      	b.n	8007fac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007f44:	f107 0316 	add.w	r3, r7, #22
 8007f48:	461a      	mov	r2, r3
 8007f4a:	2144      	movs	r1, #68	; 0x44
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f004 f829 	bl	800bfa4 <VL53L0X_RdWord>
 8007f52:	4603      	mov	r3, r0
 8007f54:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007f5e:	8afb      	ldrh	r3, [r7, #22]
 8007f60:	025b      	lsls	r3, r3, #9
 8007f62:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007f64:	2301      	movs	r3, #1
 8007f66:	77bb      	strb	r3, [r7, #30]
		break;
 8007f68:	e020      	b.n	8007fac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	77bb      	strb	r3, [r7, #30]
		break;
 8007f74:	e01a      	b.n	8007fac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	77bb      	strb	r3, [r7, #30]
		break;
 8007f80:	e014      	b.n	8007fac <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007f82:	f107 0316 	add.w	r3, r7, #22
 8007f86:	461a      	mov	r2, r3
 8007f88:	2164      	movs	r1, #100	; 0x64
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f004 f80a 	bl	800bfa4 <VL53L0X_RdWord>
 8007f90:	4603      	mov	r3, r0
 8007f92:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007f94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007f9c:	8afb      	ldrh	r3, [r7, #22]
 8007f9e:	025b      	lsls	r3, r3, #9
 8007fa0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	77bb      	strb	r3, [r7, #30]
		break;
 8007fa6:	e001      	b.n	8007fac <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fa8:	23fc      	movs	r3, #252	; 0xfc
 8007faa:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007fac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d12a      	bne.n	800800a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007fb4:	7fbb      	ldrb	r3, [r7, #30]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d124      	bne.n	8008004 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d110      	bne.n	8007fe2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007fc0:	897b      	ldrh	r3, [r7, #10]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007fd4:	897b      	ldrh	r3, [r7, #10]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007fe0:	e013      	b.n	800800a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007fe8:	897b      	ldrh	r3, [r7, #10]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	330c      	adds	r3, #12
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007ff6:	897b      	ldrh	r3, [r7, #10]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008002:	e002      	b.n	800800a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800800a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008026:	f107 030e 	add.w	r3, r7, #14
 800802a:	461a      	mov	r2, r3
 800802c:	2101      	movs	r1, #1
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f003 ff8e 	bl	800bf50 <VL53L0X_RdByte>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10e      	bne.n	800805e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008040:	7bba      	ldrb	r2, [r7, #14]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	b25b      	sxtb	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	da03      	bge.n	8008058 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2201      	movs	r2, #1
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e002      	b.n	800805e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800805e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781a      	ldrb	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008088:	f107 030e 	add.w	r3, r7, #14
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff fbd2 	bl	8007838 <VL53L0X_GetDeviceMode>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d107      	bne.n	80080b0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d104      	bne.n	80080b0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f898 	bl	80081dc <VL53L0X_StartMeasurement>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80080b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 fb3f 	bl	800973c <VL53L0X_measurement_poll_for_completion>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80080c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2203      	movs	r2, #3
 80080d4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80080d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80080f4:	2301      	movs	r3, #1
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f001 fae1 	bl	80096c2 <VL53L0X_perform_ref_calibration>
 8008100:	4603      	mov	r3, r0
 8008102:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008104:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800811c:	2300      	movs	r3, #0
 800811e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008126:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008128:	7dbb      	ldrb	r3, [r7, #22]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d005      	beq.n	800813a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800812e:	7dbb      	ldrb	r3, [r7, #22]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d002      	beq.n	800813a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008134:	7dbb      	ldrb	r3, [r7, #22]
 8008136:	2b03      	cmp	r3, #3
 8008138:	d147      	bne.n	80081ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	f107 0210 	add.w	r2, r7, #16
 8008142:	2101      	movs	r1, #1
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fbc3 	bl	80088d0 <VL53L0X_GetInterruptThresholds>
 800814a:	4603      	mov	r3, r0
 800814c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008154:	d803      	bhi.n	800815e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008156:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008158:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800815c:	d935      	bls.n	80081ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800815e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d131      	bne.n	80081ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800816c:	491a      	ldr	r1, [pc, #104]	; (80081d8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f002 ff56 	bl	800b020 <VL53L0X_load_tuning_settings>
 8008174:	4603      	mov	r3, r0
 8008176:	75fb      	strb	r3, [r7, #23]
 8008178:	e027      	b.n	80081ca <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800817a:	2204      	movs	r2, #4
 800817c:	21ff      	movs	r1, #255	; 0xff
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f003 fe64 	bl	800be4c <VL53L0X_WrByte>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	4313      	orrs	r3, r2
 800818c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800818e:	2200      	movs	r2, #0
 8008190:	2170      	movs	r1, #112	; 0x70
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f003 fe5a 	bl	800be4c <VL53L0X_WrByte>
 8008198:	4603      	mov	r3, r0
 800819a:	461a      	mov	r2, r3
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	4313      	orrs	r3, r2
 80081a0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80081a2:	2200      	movs	r2, #0
 80081a4:	21ff      	movs	r1, #255	; 0xff
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f003 fe50 	bl	800be4c <VL53L0X_WrByte>
 80081ac:	4603      	mov	r3, r0
 80081ae:	461a      	mov	r2, r3
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80081b6:	2200      	movs	r2, #0
 80081b8:	2180      	movs	r1, #128	; 0x80
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f003 fe46 	bl	800be4c <VL53L0X_WrByte>
 80081c0:	4603      	mov	r3, r0
 80081c2:	461a      	mov	r2, r3
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80081ca:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000104 	.word	0x20000104

080081dc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80081e8:	2301      	movs	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80081ec:	f107 030e 	add.w	r3, r7, #14
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff fb20 	bl	8007838 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80081f8:	2201      	movs	r2, #1
 80081fa:	2180      	movs	r1, #128	; 0x80
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f003 fe25 	bl	800be4c <VL53L0X_WrByte>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008206:	2201      	movs	r2, #1
 8008208:	21ff      	movs	r1, #255	; 0xff
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f003 fe1e 	bl	800be4c <VL53L0X_WrByte>
 8008210:	4603      	mov	r3, r0
 8008212:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f003 fe17 	bl	800be4c <VL53L0X_WrByte>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008228:	461a      	mov	r2, r3
 800822a:	2191      	movs	r1, #145	; 0x91
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f003 fe0d 	bl	800be4c <VL53L0X_WrByte>
 8008232:	4603      	mov	r3, r0
 8008234:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008236:	2201      	movs	r2, #1
 8008238:	2100      	movs	r1, #0
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f003 fe06 	bl	800be4c <VL53L0X_WrByte>
 8008240:	4603      	mov	r3, r0
 8008242:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008244:	2200      	movs	r2, #0
 8008246:	21ff      	movs	r1, #255	; 0xff
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f003 fdff 	bl	800be4c <VL53L0X_WrByte>
 800824e:	4603      	mov	r3, r0
 8008250:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008252:	2200      	movs	r2, #0
 8008254:	2180      	movs	r1, #128	; 0x80
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f003 fdf8 	bl	800be4c <VL53L0X_WrByte>
 800825c:	4603      	mov	r3, r0
 800825e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d054      	beq.n	8008310 <VL53L0X_StartMeasurement+0x134>
 8008266:	2b03      	cmp	r3, #3
 8008268:	dc6c      	bgt.n	8008344 <VL53L0X_StartMeasurement+0x168>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <VL53L0X_StartMeasurement+0x98>
 800826e:	2b01      	cmp	r3, #1
 8008270:	d034      	beq.n	80082dc <VL53L0X_StartMeasurement+0x100>
 8008272:	e067      	b.n	8008344 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008274:	2201      	movs	r2, #1
 8008276:	2100      	movs	r1, #0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f003 fde7 	bl	800be4c <VL53L0X_WrByte>
 800827e:	4603      	mov	r3, r0
 8008280:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d15d      	bne.n	800834a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008298:	f107 030d 	add.w	r3, r7, #13
 800829c:	461a      	mov	r2, r3
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f003 fe55 	bl	800bf50 <VL53L0X_RdByte>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	3301      	adds	r3, #1
 80082ae:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80082b0:	7b7a      	ldrb	r2, [r7, #13]
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	4013      	ands	r3, r2
 80082b6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80082b8:	7bfa      	ldrb	r2, [r7, #15]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d107      	bne.n	80082ce <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80082be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082cc:	d3e1      	bcc.n	8008292 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80082d4:	d339      	bcc.n	800834a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80082d6:	23f9      	movs	r3, #249	; 0xf9
 80082d8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80082da:	e036      	b.n	800834a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80082dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80082e4:	2101      	movs	r1, #1
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ff12 	bl	8008110 <VL53L0X_CheckAndLoadInterruptSettings>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80082f0:	2202      	movs	r2, #2
 80082f2:	2100      	movs	r1, #0
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f003 fda9 	bl	800be4c <VL53L0X_WrByte>
 80082fa:	4603      	mov	r3, r0
 80082fc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80082fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d123      	bne.n	800834e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2204      	movs	r2, #4
 800830a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800830e:	e01e      	b.n	800834e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008310:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008318:	2101      	movs	r1, #1
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff fef8 	bl	8008110 <VL53L0X_CheckAndLoadInterruptSettings>
 8008320:	4603      	mov	r3, r0
 8008322:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008324:	2204      	movs	r2, #4
 8008326:	2100      	movs	r1, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f003 fd8f 	bl	800be4c <VL53L0X_WrByte>
 800832e:	4603      	mov	r3, r0
 8008330:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8008332:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10b      	bne.n	8008352 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008342:	e006      	b.n	8008352 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008344:	23f8      	movs	r3, #248	; 0xf8
 8008346:	75fb      	strb	r3, [r7, #23]
 8008348:	e004      	b.n	8008354 <VL53L0X_StartMeasurement+0x178>
		break;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <VL53L0X_StartMeasurement+0x178>
		break;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <VL53L0X_StartMeasurement+0x178>
		break;
 8008352:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008354:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008374:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b04      	cmp	r3, #4
 800837a:	d112      	bne.n	80083a2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800837c:	f107 0308 	add.w	r3, r7, #8
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fb1a 	bl	80089bc <VL53L0X_GetInterruptMaskStatus>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b04      	cmp	r3, #4
 8008390:	d103      	bne.n	800839a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2201      	movs	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	e01c      	b.n	80083d4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e018      	b.n	80083d4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80083a2:	f107 030d 	add.w	r3, r7, #13
 80083a6:	461a      	mov	r2, r3
 80083a8:	2114      	movs	r1, #20
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f003 fdd0 	bl	800bf50 <VL53L0X_RdByte>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80083b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80083bc:	7b7b      	ldrb	r3, [r7, #13]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2201      	movs	r2, #1
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	e002      	b.n	80083d4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2200      	movs	r2, #0
 80083d2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80083e0:	b5b0      	push	{r4, r5, r7, lr}
 80083e2:	b096      	sub	sp, #88	; 0x58
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80083f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083f4:	230c      	movs	r3, #12
 80083f6:	2114      	movs	r1, #20
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f003 fcfb 	bl	800bdf4 <VL53L0X_ReadMulti>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008404:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 80d1 	bne.w	80085b0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800841a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800841e:	b29b      	uxth	r3, r3
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	b29a      	uxth	r2, r3
 8008424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008428:	b29b      	uxth	r3, r3
 800842a:	4413      	add	r3, r2
 800842c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2200      	movs	r2, #0
 8008434:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008436:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800843a:	b29b      	uxth	r3, r3
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	b29a      	uxth	r2, r3
 8008440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008444:	b29b      	uxth	r3, r3
 8008446:	4413      	add	r3, r2
 8008448:	b29b      	uxth	r3, r3
 800844a:	025b      	lsls	r3, r3, #9
 800844c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008452:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008454:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008458:	b29b      	uxth	r3, r3
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	b29a      	uxth	r2, r3
 800845e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008462:	b29b      	uxth	r3, r3
 8008464:	4413      	add	r3, r2
 8008466:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800846a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800846e:	025b      	lsls	r3, r3, #9
 8008470:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008476:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800847a:	b29b      	uxth	r3, r3
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	b29a      	uxth	r2, r3
 8008480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008484:	b29b      	uxth	r3, r3
 8008486:	4413      	add	r3, r2
 8008488:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008492:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008494:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80084a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80084aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80084ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80084b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084b4:	d046      	beq.n	8008544 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80084b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80084b8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80084c4:	4a57      	ldr	r2, [pc, #348]	; (8008624 <VL53L0X_GetRangingMeasurementData+0x244>)
 80084c6:	fb82 1203 	smull	r1, r2, r2, r3
 80084ca:	1192      	asrs	r2, r2, #6
 80084cc:	17db      	asrs	r3, r3, #31
 80084ce:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80084d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7f1b      	ldrb	r3, [r3, #28]
 80084de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80084e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d02c      	beq.n	8008544 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80084ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084ec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80084f0:	fb02 f303 	mul.w	r3, r2, r3
 80084f4:	121a      	asrs	r2, r3, #8
					<= 0) {
 80084f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d10d      	bne.n	8008518 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80084fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008504:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008508:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800850c:	e016      	b.n	800853c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800850e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008512:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008516:	e011      	b.n	800853c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008518:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800851c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800851e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008522:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008524:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008528:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800852c:	121b      	asrs	r3, r3, #8
 800852e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008532:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008534:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008538:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800853c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008540:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008544:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00d      	beq.n	8008568 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800854c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008550:	089b      	lsrs	r3, r3, #2
 8008552:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008558:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	019b      	lsls	r3, r3, #6
 8008560:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	75da      	strb	r2, [r3, #23]
 8008566:	e006      	b.n	8008576 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800856e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008576:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800857a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800857e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f003 f9e5 	bl	800b95c <VL53L0X_get_pal_range_status>
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800859a:	4313      	orrs	r3, r2
 800859c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80085a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80085a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80085b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d12f      	bne.n	8008618 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f107 040c 	add.w	r4, r7, #12
 80085be:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80085c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80085ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80085d2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80085d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80085e0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80085e6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80085ec:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80085f2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80085f8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80085fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008608:	f107 050c 	add.w	r5, r7, #12
 800860c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800860e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008618:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800861c:	4618      	mov	r0, r3
 800861e:	3750      	adds	r7, #80	; 0x50
 8008620:	46bd      	mov	sp, r7
 8008622:	bdb0      	pop	{r4, r5, r7, pc}
 8008624:	10624dd3 	.word	0x10624dd3

08008628 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff f8d1 	bl	80077e0 <VL53L0X_SetDeviceMode>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d104      	bne.n	8008654 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fd16 	bl	800807c <VL53L0X_PerformSingleMeasurement>
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d105      	bne.n	8008668 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff febe 	bl	80083e0 <VL53L0X_GetRangingMeasurementData>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d105      	bne.n	800867c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008670:	2100      	movs	r1, #0
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f962 	bl	800893c <VL53L0X_ClearInterruptMask>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800867c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	461a      	mov	r2, r3
 8008696:	4603      	mov	r3, r0
 8008698:	70fb      	strb	r3, [r7, #3]
 800869a:	460b      	mov	r3, r1
 800869c:	70bb      	strb	r3, [r7, #2]
 800869e:	4613      	mov	r3, r2
 80086a0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80086ac:	23f6      	movs	r3, #246	; 0xf6
 80086ae:	73fb      	strb	r3, [r7, #15]
 80086b0:	e107      	b.n	80088c2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80086b2:	78bb      	ldrb	r3, [r7, #2]
 80086b4:	2b14      	cmp	r3, #20
 80086b6:	d110      	bne.n	80086da <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80086b8:	7e3b      	ldrb	r3, [r7, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80086be:	2310      	movs	r3, #16
 80086c0:	73bb      	strb	r3, [r7, #14]
 80086c2:	e001      	b.n	80086c8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	461a      	mov	r2, r3
 80086cc:	2184      	movs	r1, #132	; 0x84
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f003 fbbc 	bl	800be4c <VL53L0X_WrByte>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]
 80086d8:	e0f3      	b.n	80088c2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80086da:	78bb      	ldrb	r3, [r7, #2]
 80086dc:	2b15      	cmp	r3, #21
 80086de:	f040 8097 	bne.w	8008810 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80086e2:	2201      	movs	r2, #1
 80086e4:	21ff      	movs	r1, #255	; 0xff
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f003 fbb0 	bl	800be4c <VL53L0X_WrByte>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f003 fba6 	bl	800be4c <VL53L0X_WrByte>
 8008700:	4603      	mov	r3, r0
 8008702:	461a      	mov	r2, r3
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4313      	orrs	r3, r2
 8008708:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800870a:	2200      	movs	r2, #0
 800870c:	21ff      	movs	r1, #255	; 0xff
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f003 fb9c 	bl	800be4c <VL53L0X_WrByte>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	4313      	orrs	r3, r2
 800871c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800871e:	2201      	movs	r2, #1
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f003 fb92 	bl	800be4c <VL53L0X_WrByte>
 8008728:	4603      	mov	r3, r0
 800872a:	461a      	mov	r2, r3
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	4313      	orrs	r3, r2
 8008730:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008732:	2202      	movs	r2, #2
 8008734:	2185      	movs	r1, #133	; 0x85
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f003 fb88 	bl	800be4c <VL53L0X_WrByte>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	4313      	orrs	r3, r2
 8008744:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008746:	2204      	movs	r2, #4
 8008748:	21ff      	movs	r1, #255	; 0xff
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f003 fb7e 	bl	800be4c <VL53L0X_WrByte>
 8008750:	4603      	mov	r3, r0
 8008752:	461a      	mov	r2, r3
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	4313      	orrs	r3, r2
 8008758:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800875a:	2200      	movs	r2, #0
 800875c:	21cd      	movs	r1, #205	; 0xcd
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f003 fb74 	bl	800be4c <VL53L0X_WrByte>
 8008764:	4603      	mov	r3, r0
 8008766:	461a      	mov	r2, r3
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4313      	orrs	r3, r2
 800876c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800876e:	2211      	movs	r2, #17
 8008770:	21cc      	movs	r1, #204	; 0xcc
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f003 fb6a 	bl	800be4c <VL53L0X_WrByte>
 8008778:	4603      	mov	r3, r0
 800877a:	461a      	mov	r2, r3
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	4313      	orrs	r3, r2
 8008780:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008782:	2207      	movs	r2, #7
 8008784:	21ff      	movs	r1, #255	; 0xff
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f003 fb60 	bl	800be4c <VL53L0X_WrByte>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	4313      	orrs	r3, r2
 8008794:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008796:	2200      	movs	r2, #0
 8008798:	21be      	movs	r1, #190	; 0xbe
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f003 fb56 	bl	800be4c <VL53L0X_WrByte>
 80087a0:	4603      	mov	r3, r0
 80087a2:	461a      	mov	r2, r3
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80087aa:	2206      	movs	r2, #6
 80087ac:	21ff      	movs	r1, #255	; 0xff
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f003 fb4c 	bl	800be4c <VL53L0X_WrByte>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80087be:	2209      	movs	r2, #9
 80087c0:	21cc      	movs	r1, #204	; 0xcc
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f003 fb42 	bl	800be4c <VL53L0X_WrByte>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80087d2:	2200      	movs	r2, #0
 80087d4:	21ff      	movs	r1, #255	; 0xff
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f003 fb38 	bl	800be4c <VL53L0X_WrByte>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80087e6:	2201      	movs	r2, #1
 80087e8:	21ff      	movs	r1, #255	; 0xff
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f003 fb2e 	bl	800be4c <VL53L0X_WrByte>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80087fa:	2200      	movs	r2, #0
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f003 fb24 	bl	800be4c <VL53L0X_WrByte>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4313      	orrs	r3, r2
 800880c:	73fb      	strb	r3, [r7, #15]
 800880e:	e058      	b.n	80088c2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d121      	bne.n	800885c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008818:	787b      	ldrb	r3, [r7, #1]
 800881a:	2b04      	cmp	r3, #4
 800881c:	d81b      	bhi.n	8008856 <VL53L0X_SetGpioConfig+0x1ce>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <VL53L0X_SetGpioConfig+0x19c>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008839 	.word	0x08008839
 8008828:	0800883f 	.word	0x0800883f
 800882c:	08008845 	.word	0x08008845
 8008830:	0800884b 	.word	0x0800884b
 8008834:	08008851 	.word	0x08008851
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]
				break;
 800883c:	e00f      	b.n	800885e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800883e:	2301      	movs	r3, #1
 8008840:	73bb      	strb	r3, [r7, #14]
				break;
 8008842:	e00c      	b.n	800885e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008844:	2302      	movs	r3, #2
 8008846:	73bb      	strb	r3, [r7, #14]
				break;
 8008848:	e009      	b.n	800885e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800884a:	2303      	movs	r3, #3
 800884c:	73bb      	strb	r3, [r7, #14]
				break;
 800884e:	e006      	b.n	800885e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008850:	2304      	movs	r3, #4
 8008852:	73bb      	strb	r3, [r7, #14]
				break;
 8008854:	e003      	b.n	800885e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008856:	23f5      	movs	r3, #245	; 0xf5
 8008858:	73fb      	strb	r3, [r7, #15]
 800885a:	e000      	b.n	800885e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800885c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800885e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	461a      	mov	r2, r3
 800886a:	210a      	movs	r1, #10
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f003 faed 	bl	800be4c <VL53L0X_WrByte>
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10f      	bne.n	800889e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800887e:	7e3b      	ldrb	r3, [r7, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	73bb      	strb	r3, [r7, #14]
 8008888:	e001      	b.n	800888e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800888a:	2310      	movs	r3, #16
 800888c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	22ef      	movs	r2, #239	; 0xef
 8008892:	2184      	movs	r1, #132	; 0x84
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f003 fb27 	bl	800bee8 <VL53L0X_UpdateByte>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800889e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d103      	bne.n	80088ae <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	787a      	ldrb	r2, [r7, #1]
 80088aa:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80088ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80088b6:	2100      	movs	r1, #0
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f83f 	bl	800893c <VL53L0X_ClearInterruptMask>
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop

080088d0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	607a      	str	r2, [r7, #4]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	460b      	mov	r3, r1
 80088de:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088e0:	2300      	movs	r3, #0
 80088e2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80088e4:	f107 0314 	add.w	r3, r7, #20
 80088e8:	461a      	mov	r2, r3
 80088ea:	210e      	movs	r1, #14
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f003 fb59 	bl	800bfa4 <VL53L0X_RdWord>
 80088f2:	4603      	mov	r3, r0
 80088f4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80088f6:	8abb      	ldrh	r3, [r7, #20]
 80088f8:	045b      	lsls	r3, r3, #17
 80088fa:	461a      	mov	r2, r3
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <VL53L0X_GetInterruptThresholds+0x68>)
 80088fe:	4013      	ands	r3, r2
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10f      	bne.n	800892c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800890c:	f107 0314 	add.w	r3, r7, #20
 8008910:	461a      	mov	r2, r3
 8008912:	210c      	movs	r1, #12
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f003 fb45 	bl	800bfa4 <VL53L0X_RdWord>
 800891a:	4603      	mov	r3, r0
 800891c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800891e:	8abb      	ldrh	r3, [r7, #20]
 8008920:	045b      	lsls	r3, r3, #17
 8008922:	461a      	mov	r2, r3
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <VL53L0X_GetInterruptThresholds+0x68>)
 8008926:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800892c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	1ffe0000 	.word	0x1ffe0000

0800893c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800894e:	2201      	movs	r2, #1
 8008950:	210b      	movs	r1, #11
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f003 fa7a 	bl	800be4c <VL53L0X_WrByte>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800895c:	2200      	movs	r2, #0
 800895e:	210b      	movs	r1, #11
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f003 fa73 	bl	800be4c <VL53L0X_WrByte>
 8008966:	4603      	mov	r3, r0
 8008968:	461a      	mov	r2, r3
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	4313      	orrs	r3, r2
 800896e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008970:	f107 030d 	add.w	r3, r7, #13
 8008974:	461a      	mov	r2, r3
 8008976:	2113      	movs	r1, #19
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f003 fae9 	bl	800bf50 <VL53L0X_RdByte>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	4313      	orrs	r3, r2
 8008986:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	3301      	adds	r3, #1
 800898c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800898e:	7b7b      	ldrb	r3, [r7, #13]
 8008990:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008994:	2b00      	cmp	r3, #0
 8008996:	d006      	beq.n	80089a6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d803      	bhi.n	80089a6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800899e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0d3      	beq.n	800894e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d901      	bls.n	80089b0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80089ac:	23f4      	movs	r3, #244	; 0xf4
 80089ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80089b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80089ca:	f107 030e 	add.w	r3, r7, #14
 80089ce:	461a      	mov	r2, r3
 80089d0:	2113      	movs	r1, #19
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f003 fabc 	bl	800bf50 <VL53L0X_RdByte>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	f003 0207 	and.w	r2, r3, #7
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	f003 0318 	and.w	r3, r3, #24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80089f0:	23fa      	movs	r3, #250	; 0xfa
 80089f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80089f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fa03 	bl	8008e20 <VL53L0X_perform_ref_spad_management>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008a38:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008a3c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a42:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008a44:	f107 0308 	add.w	r3, r7, #8
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2128      	movs	r1, #40	; 0x28
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f003 faa9 	bl	800bfa4 <VL53L0X_RdWord>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d11e      	bne.n	8008a9c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008a5e:	893b      	ldrh	r3, [r7, #8]
 8008a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008a68:	893b      	ldrh	r3, [r7, #8]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	dd0b      	ble.n	8008a8c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008a74:	893a      	ldrh	r2, [r7, #8]
 8008a76:	897b      	ldrh	r3, [r7, #10]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	b21b      	sxth	r3, r3
 8008a7e:	461a      	mov	r2, r3
					* 250;
 8008a80:	23fa      	movs	r3, #250	; 0xfa
 8008a82:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e007      	b.n	8008a9c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008a8c:	893b      	ldrh	r3, [r7, #8]
 8008a8e:	b21b      	sxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	23fa      	movs	r3, #250	; 0xfa
 8008a94:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b08b      	sub	sp, #44	; 0x2c
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ace:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ad8:	69b9      	ldr	r1, [r7, #24]
 8008ada:	fb01 f202 	mul.w	r2, r1, r2
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae6:	e030      	b.n	8008b4a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	4413      	add	r3, r2
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d11e      	bne.n	8008b3c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008afe:	7ffa      	ldrb	r2, [r7, #31]
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	fa42 f303 	asr.w	r3, r2, r3
 8008b06:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008b0c:	e016      	b.n	8008b3c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008b0e:	7ffb      	ldrb	r3, [r7, #31]
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <get_next_good_spad+0x88>
				success = 1;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	fb03 f202 	mul.w	r2, r3, r2
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	4413      	add	r3, r2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	601a      	str	r2, [r3, #0]
				break;
 8008b2e:	e009      	b.n	8008b44 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008b30:	7ffb      	ldrb	r3, [r7, #31]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008b3c:	6a3a      	ldr	r2, [r7, #32]
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d3e4      	bcc.n	8008b0e <get_next_good_spad+0x66>
				coarseIndex++) {
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	3301      	adds	r3, #1
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d202      	bcs.n	8008b58 <get_next_good_spad+0xb0>
 8008b52:	7fbb      	ldrb	r3, [r7, #30]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0c7      	beq.n	8008ae8 <get_next_good_spad+0x40>
		}
	}
}
 8008b58:	bf00      	nop
 8008b5a:	372c      	adds	r7, #44	; 0x2c
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	099b      	lsrs	r3, r3, #6
 8008b74:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008b76:	4a07      	ldr	r2, [pc, #28]	; (8008b94 <is_aperture+0x30>)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <is_aperture+0x22>
		isAperture = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	200002bc 	.word	0x200002bc

08008b98 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b089      	sub	sp, #36	; 0x24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008ba8:	2308      	movs	r3, #8
 8008baa:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bbe:	69b9      	ldr	r1, [r7, #24]
 8008bc0:	fb01 f202 	mul.w	r2, r1, r2
 8008bc4:	1a9b      	subs	r3, r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d302      	bcc.n	8008bd6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008bd0:	23ce      	movs	r3, #206	; 0xce
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e010      	b.n	8008bf8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	4413      	add	r3, r2
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b25a      	sxtb	r2, r3
 8008be0:	2101      	movs	r1, #1
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	fa01 f303 	lsl.w	r3, r1, r3
 8008be8:	b25b      	sxtb	r3, r3
 8008bea:	4313      	orrs	r3, r2
 8008bec:	b259      	sxtb	r1, r3
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	b2ca      	uxtb	r2, r1
 8008bf6:	701a      	strb	r2, [r3, #0]

	return status;
 8008bf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3724      	adds	r7, #36	; 0x24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008c12:	2306      	movs	r3, #6
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	21b0      	movs	r1, #176	; 0xb0
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f003 f8bb 	bl	800bd94 <VL53L0X_WriteMulti>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008c38:	2306      	movs	r3, #6
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	21b0      	movs	r1, #176	; 0xb0
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f003 f8d8 	bl	800bdf4 <VL53L0X_ReadMulti>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08c      	sub	sp, #48	; 0x30
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	607a      	str	r2, [r7, #4]
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	460b      	mov	r3, r1
 8008c62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c70:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008c72:	2300      	movs	r3, #0
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c76:	e02b      	b.n	8008cd0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008c78:	f107 031c 	add.w	r3, r7, #28
 8008c7c:	6a3a      	ldr	r2, [r7, #32]
 8008c7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff ff11 	bl	8008aa8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8c:	d103      	bne.n	8008c96 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008c8e:	23ce      	movs	r3, #206	; 0xce
 8008c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008c94:	e020      	b.n	8008cd8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9c:	4413      	add	r3, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff ff60 	bl	8008b64 <is_aperture>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	7afb      	ldrb	r3, [r7, #11]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d003      	beq.n	8008cb6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008cae:	23ce      	movs	r3, #206	; 0xce
 8008cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008cb4:	e010      	b.n	8008cd8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008cba:	6a3a      	ldr	r2, [r7, #32]
 8008cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cbe:	6838      	ldr	r0, [r7, #0]
 8008cc0:	f7ff ff6a 	bl	8008b98 <enable_spad_bit>
		currentSpad++;
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	3301      	adds	r3, #1
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d3cf      	bcc.n	8008c78 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cda:	6a3a      	ldr	r2, [r7, #32]
 8008cdc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008cde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff ff8d 	bl	8008c08 <set_ref_spad_map>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008cf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d121      	bne.n	8008d40 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	4619      	mov	r1, r3
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f7ff ff93 	bl	8008c2e <get_ref_spad_map>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008d12:	e011      	b.n	8008d38 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	4413      	add	r3, r2
 8008d1a:	781a      	ldrb	r2, [r3, #0]
 8008d1c:	f107 0114 	add.w	r1, r7, #20
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	440b      	add	r3, r1
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d003      	beq.n	8008d32 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008d2a:	23ce      	movs	r3, #206	; 0xce
 8008d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008d30:	e006      	b.n	8008d40 <enable_ref_spads+0xec>
			}
			i++;
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	3301      	adds	r3, #1
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3e9      	bcc.n	8008d14 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008d40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3730      	adds	r7, #48	; 0x30
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08a      	sub	sp, #40	; 0x28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d107      	bne.n	8008d84 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008d74:	22c0      	movs	r2, #192	; 0xc0
 8008d76:	2101      	movs	r1, #1
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f003 f867 	bl	800be4c <VL53L0X_WrByte>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008d84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d108      	bne.n	8008d9e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff fc48 	bl	8008628 <VL53L0X_PerformSingleRangingMeasurement>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008d9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d107      	bne.n	8008db6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008da6:	2201      	movs	r2, #1
 8008da8:	21ff      	movs	r1, #255	; 0xff
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f003 f84e 	bl	800be4c <VL53L0X_WrByte>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008db6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d107      	bne.n	8008dce <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	21b6      	movs	r1, #182	; 0xb6
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f003 f8ee 	bl	800bfa4 <VL53L0X_RdWord>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d107      	bne.n	8008de6 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	21ff      	movs	r1, #255	; 0xff
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f003 f836 	bl	800be4c <VL53L0X_WrByte>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008de6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d112      	bne.n	8008e14 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008dee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008df2:	461a      	mov	r2, r3
 8008df4:	2101      	movs	r1, #1
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f003 f828 	bl	800be4c <VL53L0X_WrByte>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008e02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008e14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3728      	adds	r7, #40	; 0x28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b09d      	sub	sp, #116	; 0x74
 8008e24:	af06      	add	r7, sp, #24
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008e32:	23b4      	movs	r3, #180	; 0xb4
 8008e34:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008e3c:	232c      	movs	r3, #44	; 0x2c
 8008e3e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008e4c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008e50:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008e5a:	2306      	movs	r3, #6
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008e84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008e86:	2300      	movs	r3, #0
 8008e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e8a:	e009      	b.n	8008ea0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d3f1      	bcc.n	8008e8c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	21ff      	movs	r1, #255	; 0xff
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f002 ffcd 	bl	800be4c <VL53L0X_WrByte>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008eb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d107      	bne.n	8008ed0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	214f      	movs	r1, #79	; 0x4f
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f002 ffc1 	bl	800be4c <VL53L0X_WrByte>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008ed0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d107      	bne.n	8008ee8 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008ed8:	222c      	movs	r2, #44	; 0x2c
 8008eda:	214e      	movs	r1, #78	; 0x4e
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f002 ffb5 	bl	800be4c <VL53L0X_WrByte>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008ee8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d107      	bne.n	8008f00 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	21ff      	movs	r1, #255	; 0xff
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f002 ffa9 	bl	800be4c <VL53L0X_WrByte>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008f00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d109      	bne.n	8008f1c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008f08:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	21b6      	movs	r1, #182	; 0xb6
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f002 ff9b 	bl	800be4c <VL53L0X_WrByte>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008f1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d107      	bne.n	8008f34 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008f24:	2200      	movs	r2, #0
 8008f26:	2180      	movs	r1, #128	; 0x80
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f002 ff8f 	bl	800be4c <VL53L0X_WrByte>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008f34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008f3c:	f107 0210 	add.w	r2, r7, #16
 8008f40:	f107 0111 	add.w	r1, r7, #17
 8008f44:	2300      	movs	r3, #0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fbbb 	bl	80096c2 <VL53L0X_perform_ref_calibration>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008f52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d121      	bne.n	8008f9e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f60:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f68:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008f76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008f7a:	f107 0218 	add.w	r2, r7, #24
 8008f7e:	9204      	str	r2, [sp, #16]
 8008f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f82:	9203      	str	r2, [sp, #12]
 8008f84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f86:	9202      	str	r2, [sp, #8]
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	4623      	mov	r3, r4
 8008f90:	4602      	mov	r2, r0
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fe5e 	bl	8008c54 <enable_ref_spads>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d174      	bne.n	8009090 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008faa:	f107 0312 	add.w	r3, r7, #18
 8008fae:	4619      	mov	r1, r3
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f7ff fecb 	bl	8008d4c <perform_ref_signal_measurement>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008fbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d161      	bne.n	8009088 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008fc4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008fc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d25d      	bcs.n	8009088 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008fcc:	2300      	movs	r3, #0
 8008fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fd0:	e009      	b.n	8008fe6 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d3f1      	bcc.n	8008fd2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008fee:	e002      	b.n	8008ff6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008ff6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ffc:	4413      	add	r3, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff fdb0 	bl	8008b64 <is_aperture>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800900a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	429a      	cmp	r2, r3
 8009010:	d3ee      	bcc.n	8008ff0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009012:	2301      	movs	r3, #1
 8009014:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009018:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009026:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800902a:	f107 0218 	add.w	r2, r7, #24
 800902e:	9204      	str	r2, [sp, #16]
 8009030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009032:	9203      	str	r2, [sp, #12]
 8009034:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009036:	9202      	str	r2, [sp, #8]
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	4623      	mov	r3, r4
 8009040:	4602      	mov	r2, r0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fe06 	bl	8008c54 <enable_ref_spads>
 8009048:	4603      	mov	r3, r0
 800904a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800904e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009052:	2b00      	cmp	r3, #0
 8009054:	d11b      	bne.n	800908e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800905a:	f107 0312 	add.w	r3, r7, #18
 800905e:	4619      	mov	r1, r3
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff fe73 	bl	8008d4c <perform_ref_signal_measurement>
 8009066:	4603      	mov	r3, r0
 8009068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800906c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10c      	bne.n	800908e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009074:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009076:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009078:	429a      	cmp	r2, r3
 800907a:	d208      	bcs.n	800908e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800907c:	2301      	movs	r3, #1
 800907e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009086:	e002      	b.n	800908e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800908c:	e000      	b.n	8009090 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800908e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009090:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 80af 	bne.w	80091f8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800909a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800909c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800909e:	429a      	cmp	r2, r3
 80090a0:	f240 80aa 	bls.w	80091f8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80090a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80090aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ac:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80090b4:	f107 031c 	add.w	r3, r7, #28
 80090b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090ba:	4618      	mov	r0, r3
 80090bc:	f003 f820 	bl	800c100 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80090c0:	8a7b      	ldrh	r3, [r7, #18]
 80090c2:	461a      	mov	r2, r3
 80090c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfb8      	it	lt
 80090cc:	425b      	neglt	r3, r3
 80090ce:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80090d6:	e086      	b.n	80091e6 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80090de:	f107 0314 	add.w	r3, r7, #20
 80090e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090e6:	f7ff fcdf 	bl	8008aa8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d103      	bne.n	80090fa <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80090f2:	23ce      	movs	r3, #206	; 0xce
 80090f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80090f8:	e07e      	b.n	80091f8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80090fa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4413      	add	r3, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff fd2e 	bl	8008b64 <is_aperture>
 8009108:	4603      	mov	r3, r0
 800910a:	461a      	mov	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910e:	4293      	cmp	r3, r2
 8009110:	d003      	beq.n	800911a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009118:	e06e      	b.n	80091f8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800911a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911c:	3301      	adds	r3, #1
 800911e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800912a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800912c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff fd32 	bl	8008b98 <enable_spad_bit>
 8009134:	4603      	mov	r3, r0
 8009136:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800913a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10c      	bne.n	800915c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009144:	3301      	adds	r3, #1
 8009146:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800914e:	4619      	mov	r1, r3
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7ff fd59 	bl	8008c08 <set_ref_spad_map>
 8009156:	4603      	mov	r3, r0
 8009158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800915c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009160:	2b00      	cmp	r3, #0
 8009162:	d146      	bne.n	80091f2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009164:	f107 0312 	add.w	r3, r7, #18
 8009168:	4619      	mov	r1, r3
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff fdee 	bl	8008d4c <perform_ref_signal_measurement>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009176:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800917a:	2b00      	cmp	r3, #0
 800917c:	d13b      	bne.n	80091f6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800917e:	8a7b      	ldrh	r3, [r7, #18]
 8009180:	461a      	mov	r2, r3
 8009182:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfb8      	it	lt
 800918a:	425b      	neglt	r3, r3
 800918c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800918e:	8a7b      	ldrh	r3, [r7, #18]
 8009190:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009192:	429a      	cmp	r2, r3
 8009194:	d21c      	bcs.n	80091d0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800919a:	429a      	cmp	r2, r3
 800919c:	d914      	bls.n	80091c8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800919e:	f107 031c 	add.w	r3, r7, #28
 80091a2:	4619      	mov	r1, r3
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7ff fd2f 	bl	8008c08 <set_ref_spad_map>
 80091aa:	4603      	mov	r3, r0
 80091ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80091b6:	f107 011c 	add.w	r1, r7, #28
 80091ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 ff9f 	bl	800c100 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80091c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c4:	3b01      	subs	r3, #1
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80091c8:	2301      	movs	r3, #1
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ce:	e00a      	b.n	80091e6 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80091da:	f107 031c 	add.w	r3, r7, #28
 80091de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e0:	4618      	mov	r0, r3
 80091e2:	f002 ff8d 	bl	800c100 <memcpy>
		while (!complete) {
 80091e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f43f af74 	beq.w	80090d8 <VL53L0X_perform_ref_spad_management+0x2b8>
 80091f0:	e002      	b.n	80091f8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80091f2:	bf00      	nop
 80091f4:	e000      	b.n	80091f8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80091f6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80091f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d115      	bne.n	800922c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009204:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800920c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	b2da      	uxtb	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	781a      	ldrb	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800922c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009230:	4618      	mov	r0, r3
 8009232:	375c      	adds	r7, #92	; 0x5c
 8009234:	46bd      	mov	sp, r7
 8009236:	bd90      	pop	{r4, r7, pc}

08009238 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b093      	sub	sp, #76	; 0x4c
 800923c:	af06      	add	r7, sp, #24
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009246:	2300      	movs	r3, #0
 8009248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800924c:	2300      	movs	r3, #0
 800924e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009250:	23b4      	movs	r3, #180	; 0xb4
 8009252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009256:	2306      	movs	r3, #6
 8009258:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800925a:	232c      	movs	r3, #44	; 0x2c
 800925c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800925e:	2201      	movs	r2, #1
 8009260:	21ff      	movs	r1, #255	; 0xff
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f002 fdf2 	bl	800be4c <VL53L0X_WrByte>
 8009268:	4603      	mov	r3, r0
 800926a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800926e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009272:	2b00      	cmp	r3, #0
 8009274:	d107      	bne.n	8009286 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009276:	2200      	movs	r2, #0
 8009278:	214f      	movs	r1, #79	; 0x4f
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f002 fde6 	bl	800be4c <VL53L0X_WrByte>
 8009280:	4603      	mov	r3, r0
 8009282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009286:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800928a:	2b00      	cmp	r3, #0
 800928c:	d107      	bne.n	800929e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800928e:	222c      	movs	r2, #44	; 0x2c
 8009290:	214e      	movs	r1, #78	; 0x4e
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f002 fdda 	bl	800be4c <VL53L0X_WrByte>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800929e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d107      	bne.n	80092b6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092a6:	2200      	movs	r2, #0
 80092a8:	21ff      	movs	r1, #255	; 0xff
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f002 fdce 	bl	800be4c <VL53L0X_WrByte>
 80092b0:	4603      	mov	r3, r0
 80092b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80092b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80092be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092c2:	461a      	mov	r2, r3
 80092c4:	21b6      	movs	r1, #182	; 0xb6
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f002 fdc0 	bl	800be4c <VL53L0X_WrByte>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80092d2:	2300      	movs	r3, #0
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
 80092d6:	e009      	b.n	80092ec <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	4413      	add	r3, r2
 80092de:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	3301      	adds	r3, #1
 80092ea:	627b      	str	r3, [r7, #36]	; 0x24
 80092ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d3f1      	bcc.n	80092d8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80092fa:	e002      	b.n	8009302 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	3301      	adds	r3, #1
 8009300:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009302:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	4413      	add	r3, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff fc2a 	bl	8008b64 <is_aperture>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d103      	bne.n	800931e <VL53L0X_set_reference_spads+0xe6>
 8009316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	429a      	cmp	r2, r3
 800931c:	d3ee      	bcc.n	80092fc <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800932a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800932e:	79f9      	ldrb	r1, [r7, #7]
 8009330:	f107 0214 	add.w	r2, r7, #20
 8009334:	9204      	str	r2, [sp, #16]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	9203      	str	r2, [sp, #12]
 800933a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933c:	9202      	str	r2, [sp, #8]
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	4623      	mov	r3, r4
 8009346:	4602      	mov	r2, r0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fc83 	bl	8008c54 <enable_ref_spads>
 800934e:	4603      	mov	r3, r0
 8009350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009354:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10c      	bne.n	8009376 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	79fa      	ldrb	r2, [r7, #7]
 8009372:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009376:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800937a:	4618      	mov	r0, r3
 800937c:	3734      	adds	r7, #52	; 0x34
 800937e:	46bd      	mov	sp, r7
 8009380:	bd90      	pop	{r4, r7, pc}

08009382 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800939a:	78fb      	ldrb	r3, [r7, #3]
 800939c:	f043 0301 	orr.w	r3, r3, #1
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	461a      	mov	r2, r3
 80093a4:	2100      	movs	r1, #0
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f002 fd50 	bl	800be4c <VL53L0X_WrByte>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80093b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d104      	bne.n	80093c2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f9bf 	bl	800973c <VL53L0X_measurement_poll_for_completion>
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80093ca:	2100      	movs	r1, #0
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff fab5 	bl	800893c <VL53L0X_ClearInterruptMask>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80093de:	2200      	movs	r2, #0
 80093e0:	2100      	movs	r1, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f002 fd32 	bl	800be4c <VL53L0X_WrByte>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]

	return Status;
 80093ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	461a      	mov	r2, r3
 8009406:	4603      	mov	r3, r0
 8009408:	70fb      	strb	r3, [r7, #3]
 800940a:	460b      	mov	r3, r1
 800940c:	70bb      	strb	r3, [r7, #2]
 800940e:	4613      	mov	r3, r2
 8009410:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800941a:	2201      	movs	r2, #1
 800941c:	21ff      	movs	r1, #255	; 0xff
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f002 fd14 	bl	800be4c <VL53L0X_WrByte>
 8009424:	4603      	mov	r3, r0
 8009426:	461a      	mov	r2, r3
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4313      	orrs	r3, r2
 800942c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800942e:	2200      	movs	r2, #0
 8009430:	2100      	movs	r1, #0
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f002 fd0a 	bl	800be4c <VL53L0X_WrByte>
 8009438:	4603      	mov	r3, r0
 800943a:	461a      	mov	r2, r3
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4313      	orrs	r3, r2
 8009440:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009442:	2200      	movs	r2, #0
 8009444:	21ff      	movs	r1, #255	; 0xff
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f002 fd00 	bl	800be4c <VL53L0X_WrByte>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	4313      	orrs	r3, r2
 8009454:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009456:	78fb      	ldrb	r3, [r7, #3]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01e      	beq.n	800949a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800945c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d009      	beq.n	8009478 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	21cb      	movs	r1, #203	; 0xcb
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f002 fd71 	bl	800bf50 <VL53L0X_RdByte>
 800946e:	4603      	mov	r3, r0
 8009470:	461a      	mov	r2, r3
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	4313      	orrs	r3, r2
 8009476:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	d02a      	beq.n	80094d6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009480:	f107 030e 	add.w	r3, r7, #14
 8009484:	461a      	mov	r2, r3
 8009486:	21ee      	movs	r1, #238	; 0xee
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f002 fd61 	bl	800bf50 <VL53L0X_RdByte>
 800948e:	4603      	mov	r3, r0
 8009490:	461a      	mov	r2, r3
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	4313      	orrs	r3, r2
 8009496:	73fb      	strb	r3, [r7, #15]
 8009498:	e01d      	b.n	80094d6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800949a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80094a2:	78bb      	ldrb	r3, [r7, #2]
 80094a4:	461a      	mov	r2, r3
 80094a6:	21cb      	movs	r1, #203	; 0xcb
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f002 fccf 	bl	800be4c <VL53L0X_WrByte>
 80094ae:	4603      	mov	r3, r0
 80094b0:	461a      	mov	r2, r3
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80094b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00a      	beq.n	80094d6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80094c0:	787b      	ldrb	r3, [r7, #1]
 80094c2:	2280      	movs	r2, #128	; 0x80
 80094c4:	21ee      	movs	r1, #238	; 0xee
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f002 fd0e 	bl	800bee8 <VL53L0X_UpdateByte>
 80094cc:	4603      	mov	r3, r0
 80094ce:	461a      	mov	r2, r3
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80094d6:	2201      	movs	r2, #1
 80094d8:	21ff      	movs	r1, #255	; 0xff
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f002 fcb6 	bl	800be4c <VL53L0X_WrByte>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80094ea:	2201      	movs	r2, #1
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f002 fcac 	bl	800be4c <VL53L0X_WrByte>
 80094f4:	4603      	mov	r3, r0
 80094f6:	461a      	mov	r2, r3
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094fe:	2200      	movs	r2, #0
 8009500:	21ff      	movs	r1, #255	; 0xff
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f002 fca2 	bl	800be4c <VL53L0X_WrByte>
 8009508:	4603      	mov	r3, r0
 800950a:	461a      	mov	r2, r3
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	4313      	orrs	r3, r2
 8009510:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	f023 0310 	bic.w	r3, r3, #16
 8009518:	b2da      	uxtb	r2, r3
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	701a      	strb	r2, [r3, #0]

	return Status;
 800951e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b08a      	sub	sp, #40	; 0x28
 800952e:	af04      	add	r7, sp, #16
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	4611      	mov	r1, r2
 8009536:	461a      	mov	r2, r3
 8009538:	460b      	mov	r3, r1
 800953a:	71fb      	strb	r3, [r7, #7]
 800953c:	4613      	mov	r3, r2
 800953e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009540:	2300      	movs	r3, #0
 8009542:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009554:	79bb      	ldrb	r3, [r7, #6]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009560:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009562:	2201      	movs	r2, #1
 8009564:	2101      	movs	r1, #1
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f002 fc70 	bl	800be4c <VL53L0X_WrByte>
 800956c:	4603      	mov	r3, r0
 800956e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d105      	bne.n	8009584 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009578:	2140      	movs	r1, #64	; 0x40
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7ff ff01 	bl	8009382 <VL53L0X_perform_single_ref_calibration>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d115      	bne.n	80095b8 <VL53L0X_perform_vhv_calibration+0x8e>
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d112      	bne.n	80095b8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009592:	7d39      	ldrb	r1, [r7, #20]
 8009594:	7d7a      	ldrb	r2, [r7, #21]
 8009596:	2300      	movs	r3, #0
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	2301      	movs	r3, #1
 800959c:	9302      	str	r3, [sp, #8]
 800959e:	f107 0313 	add.w	r3, r7, #19
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	460b      	mov	r3, r1
 80095aa:	2101      	movs	r1, #1
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7ff ff23 	bl	80093f8 <VL53L0X_ref_calibration_io>
 80095b2:	4603      	mov	r3, r0
 80095b4:	75fb      	strb	r3, [r7, #23]
 80095b6:	e002      	b.n	80095be <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80095be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d112      	bne.n	80095ec <VL53L0X_perform_vhv_calibration+0xc2>
 80095c6:	79bb      	ldrb	r3, [r7, #6]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00f      	beq.n	80095ec <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80095cc:	7dbb      	ldrb	r3, [r7, #22]
 80095ce:	461a      	mov	r2, r3
 80095d0:	2101      	movs	r1, #1
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f002 fc3a 	bl	800be4c <VL53L0X_WrByte>
 80095d8:	4603      	mov	r3, r0
 80095da:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80095dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d103      	bne.n	80095ec <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	7dba      	ldrb	r2, [r7, #22]
 80095e8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80095ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	; 0x28
 80095fc:	af04      	add	r7, sp, #16
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4611      	mov	r1, r2
 8009604:	461a      	mov	r2, r3
 8009606:	460b      	mov	r3, r1
 8009608:	71fb      	strb	r3, [r7, #7]
 800960a:	4613      	mov	r3, r2
 800960c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800961e:	79bb      	ldrb	r3, [r7, #6]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800962a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800962c:	2202      	movs	r2, #2
 800962e:	2101      	movs	r1, #1
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f002 fc0b 	bl	800be4c <VL53L0X_WrByte>
 8009636:	4603      	mov	r3, r0
 8009638:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800963a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d105      	bne.n	800964e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009642:	2100      	movs	r1, #0
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff fe9c 	bl	8009382 <VL53L0X_perform_single_ref_calibration>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800964e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d115      	bne.n	8009682 <VL53L0X_perform_phase_calibration+0x8a>
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d112      	bne.n	8009682 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800965c:	7d39      	ldrb	r1, [r7, #20]
 800965e:	7d7a      	ldrb	r2, [r7, #21]
 8009660:	2301      	movs	r3, #1
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	2300      	movs	r3, #0
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	f107 0313 	add.w	r3, r7, #19
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	460b      	mov	r3, r1
 8009674:	2101      	movs	r1, #1
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7ff febe 	bl	80093f8 <VL53L0X_ref_calibration_io>
 800967c:	4603      	mov	r3, r0
 800967e:	75fb      	strb	r3, [r7, #23]
 8009680:	e002      	b.n	8009688 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2200      	movs	r2, #0
 8009686:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d112      	bne.n	80096b6 <VL53L0X_perform_phase_calibration+0xbe>
 8009690:	79bb      	ldrb	r3, [r7, #6]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00f      	beq.n	80096b6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009696:	7dbb      	ldrb	r3, [r7, #22]
 8009698:	461a      	mov	r2, r3
 800969a:	2101      	movs	r1, #1
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f002 fbd5 	bl	800be4c <VL53L0X_WrByte>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80096a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d103      	bne.n	80096b6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	7dba      	ldrb	r2, [r7, #22]
 80096b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80096b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80096de:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80096e0:	78fa      	ldrb	r2, [r7, #3]
 80096e2:	2300      	movs	r3, #0
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff ff1f 	bl	800952a <VL53L0X_perform_vhv_calibration>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80096f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d107      	bne.n	8009708 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	2300      	movs	r3, #0
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7ff ff7a 	bl	80095f8 <VL53L0X_perform_phase_calibration>
 8009704:	4603      	mov	r3, r0
 8009706:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10f      	bne.n	8009730 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009710:	7dbb      	ldrb	r3, [r7, #22]
 8009712:	461a      	mov	r2, r3
 8009714:	2101      	movs	r1, #1
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f002 fb98 	bl	800be4c <VL53L0X_WrByte>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d103      	bne.n	8009730 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	7dba      	ldrb	r2, [r7, #22]
 800972c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009744:	2300      	movs	r3, #0
 8009746:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009750:	f107 030f 	add.w	r3, r7, #15
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7fe fe02 	bl	8008360 <VL53L0X_GetMeasurementDataReady>
 800975c:	4603      	mov	r3, r0
 800975e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009760:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d110      	bne.n	800978a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d00f      	beq.n	800978e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	3301      	adds	r3, #1
 8009772:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800977a:	d302      	bcc.n	8009782 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800977c:	23f9      	movs	r3, #249	; 0xf9
 800977e:	75fb      	strb	r3, [r7, #23]
			break;
 8009780:	e006      	b.n	8009790 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f002 fc82 	bl	800c08c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009788:	e7e2      	b.n	8009750 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800978a:	bf00      	nop
 800978c:	e000      	b.n	8009790 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800978e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009790:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	3301      	adds	r3, #1
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b085      	sub	sp, #20
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	4603      	mov	r3, r0
 80097ca:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80097f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097f8:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80097fa:	e002      	b.n	8009802 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	089b      	lsrs	r3, r3, #2
 8009800:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	429a      	cmp	r2, r3
 8009808:	d8f8      	bhi.n	80097fc <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800980a:	e017      	b.n	800983c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4413      	add	r3, r2
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d30b      	bcc.n	8009830 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	4413      	add	r3, r2
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	4413      	add	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	e002      	b.n	8009836 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	085b      	lsrs	r3, r3, #1
 8009834:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	089b      	lsrs	r3, r3, #2
 800983a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1e4      	bne.n	800980c <VL53L0X_isqrt+0x24>
	}

	return res;
 8009842:	68fb      	ldr	r3, [r7, #12]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800985c:	2200      	movs	r2, #0
 800985e:	2183      	movs	r1, #131	; 0x83
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f002 faf3 	bl	800be4c <VL53L0X_WrByte>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	4313      	orrs	r3, r2
 800986e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d11e      	bne.n	80098b6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800987c:	f107 030f 	add.w	r3, r7, #15
 8009880:	461a      	mov	r2, r3
 8009882:	2183      	movs	r1, #131	; 0x83
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f002 fb63 	bl	800bf50 <VL53L0X_RdByte>
 800988a:	4603      	mov	r3, r0
 800988c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <VL53L0X_device_read_strobe+0x5a>
 8009894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	3301      	adds	r3, #1
 80098a0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80098a8:	d3e8      	bcc.n	800987c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80098b0:	d301      	bcc.n	80098b6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80098b2:	23f9      	movs	r3, #249	; 0xf9
 80098b4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80098b6:	2201      	movs	r2, #1
 80098b8:	2183      	movs	r1, #131	; 0x83
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f002 fac6 	bl	800be4c <VL53L0X_WrByte>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461a      	mov	r2, r3
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80098ca:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b098      	sub	sp, #96	; 0x60
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009906:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800990a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800991e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009922:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009926:	2b07      	cmp	r3, #7
 8009928:	f000 8408 	beq.w	800a13c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800992c:	2201      	movs	r2, #1
 800992e:	2180      	movs	r1, #128	; 0x80
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f002 fa8b 	bl	800be4c <VL53L0X_WrByte>
 8009936:	4603      	mov	r3, r0
 8009938:	461a      	mov	r2, r3
 800993a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800993e:	4313      	orrs	r3, r2
 8009940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009944:	2201      	movs	r2, #1
 8009946:	21ff      	movs	r1, #255	; 0xff
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f002 fa7f 	bl	800be4c <VL53L0X_WrByte>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009956:	4313      	orrs	r3, r2
 8009958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800995c:	2200      	movs	r2, #0
 800995e:	2100      	movs	r1, #0
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f002 fa73 	bl	800be4c <VL53L0X_WrByte>
 8009966:	4603      	mov	r3, r0
 8009968:	461a      	mov	r2, r3
 800996a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800996e:	4313      	orrs	r3, r2
 8009970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009974:	2206      	movs	r2, #6
 8009976:	21ff      	movs	r1, #255	; 0xff
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f002 fa67 	bl	800be4c <VL53L0X_WrByte>
 800997e:	4603      	mov	r3, r0
 8009980:	461a      	mov	r2, r3
 8009982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009986:	4313      	orrs	r3, r2
 8009988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800998c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009990:	461a      	mov	r2, r3
 8009992:	2183      	movs	r1, #131	; 0x83
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f002 fadb 	bl	800bf50 <VL53L0X_RdByte>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099a2:	4313      	orrs	r3, r2
 80099a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80099a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099ac:	f043 0304 	orr.w	r3, r3, #4
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	2183      	movs	r1, #131	; 0x83
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f002 fa48 	bl	800be4c <VL53L0X_WrByte>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099c4:	4313      	orrs	r3, r2
 80099c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80099ca:	2207      	movs	r2, #7
 80099cc:	21ff      	movs	r1, #255	; 0xff
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f002 fa3c 	bl	800be4c <VL53L0X_WrByte>
 80099d4:	4603      	mov	r3, r0
 80099d6:	461a      	mov	r2, r3
 80099d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099dc:	4313      	orrs	r3, r2
 80099de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80099e2:	2201      	movs	r2, #1
 80099e4:	2181      	movs	r1, #129	; 0x81
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f002 fa30 	bl	800be4c <VL53L0X_WrByte>
 80099ec:	4603      	mov	r3, r0
 80099ee:	461a      	mov	r2, r3
 80099f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099f4:	4313      	orrs	r3, r2
 80099f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f002 fb46 	bl	800c08c <VL53L0X_PollingDelay>
 8009a00:	4603      	mov	r3, r0
 8009a02:	461a      	mov	r2, r3
 8009a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009a0e:	2201      	movs	r2, #1
 8009a10:	2180      	movs	r1, #128	; 0x80
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f002 fa1a 	bl	800be4c <VL53L0X_WrByte>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a20:	4313      	orrs	r3, r2
 8009a22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009a26:	78fb      	ldrb	r3, [r7, #3]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8098 	beq.w	8009b62 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009a32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a36:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 8091 	bne.w	8009b62 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009a40:	226b      	movs	r2, #107	; 0x6b
 8009a42:	2194      	movs	r1, #148	; 0x94
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f002 fa01 	bl	800be4c <VL53L0X_WrByte>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff fef9 	bl	8009850 <VL53L0X_device_read_strobe>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	461a      	mov	r2, r3
 8009a62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a70:	461a      	mov	r2, r3
 8009a72:	2190      	movs	r1, #144	; 0x90
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f002 facd 	bl	800c014 <VL53L0X_RdDWord>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a82:	4313      	orrs	r3, r2
 8009a84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a92:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	0bdb      	lsrs	r3, r3, #15
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009aa4:	2224      	movs	r2, #36	; 0x24
 8009aa6:	2194      	movs	r1, #148	; 0x94
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f002 f9cf 	bl	800be4c <VL53L0X_WrByte>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fec7 	bl	8009850 <VL53L0X_device_read_strobe>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aca:	4313      	orrs	r3, r2
 8009acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2190      	movs	r1, #144	; 0x90
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f002 fa9b 	bl	800c014 <VL53L0X_RdDWord>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	0e1b      	lsrs	r3, r3, #24
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	0c1b      	lsrs	r3, r3, #16
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	0a1b      	lsrs	r3, r3, #8
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009b0a:	2225      	movs	r2, #37	; 0x25
 8009b0c:	2194      	movs	r1, #148	; 0x94
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f002 f99c 	bl	800be4c <VL53L0X_WrByte>
 8009b14:	4603      	mov	r3, r0
 8009b16:	461a      	mov	r2, r3
 8009b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff fe94 	bl	8009850 <VL53L0X_device_read_strobe>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b30:	4313      	orrs	r3, r2
 8009b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2190      	movs	r1, #144	; 0x90
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f002 fa68 	bl	800c014 <VL53L0X_RdDWord>
 8009b44:	4603      	mov	r3, r0
 8009b46:	461a      	mov	r2, r3
 8009b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	0e1b      	lsrs	r3, r3, #24
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	f003 0302 	and.w	r3, r3, #2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 8189 	beq.w	8009e80 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b72:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f040 8182 	bne.w	8009e80 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	2194      	movs	r1, #148	; 0x94
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f002 f963 	bl	800be4c <VL53L0X_WrByte>
 8009b86:	4603      	mov	r3, r0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff fe5b 	bl	8009850 <VL53L0X_device_read_strobe>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009ba8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009bac:	461a      	mov	r2, r3
 8009bae:	2190      	movs	r1, #144	; 0x90
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f002 f9cd 	bl	800bf50 <VL53L0X_RdByte>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009bc4:	227b      	movs	r2, #123	; 0x7b
 8009bc6:	2194      	movs	r1, #148	; 0x94
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f002 f93f 	bl	800be4c <VL53L0X_WrByte>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff fe37 	bl	8009850 <VL53L0X_device_read_strobe>
 8009be2:	4603      	mov	r3, r0
 8009be4:	461a      	mov	r2, r3
 8009be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bea:	4313      	orrs	r3, r2
 8009bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009bf0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2190      	movs	r1, #144	; 0x90
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f002 f9a9 	bl	800bf50 <VL53L0X_RdByte>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	461a      	mov	r2, r3
 8009c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009c0c:	2277      	movs	r2, #119	; 0x77
 8009c0e:	2194      	movs	r1, #148	; 0x94
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f002 f91b 	bl	800be4c <VL53L0X_WrByte>
 8009c16:	4603      	mov	r3, r0
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff fe13 	bl	8009850 <VL53L0X_device_read_strobe>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c32:	4313      	orrs	r3, r2
 8009c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2190      	movs	r1, #144	; 0x90
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f002 f9e7 	bl	800c014 <VL53L0X_RdDWord>
 8009c46:	4603      	mov	r3, r0
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	0e5b      	lsrs	r3, r3, #25
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	0c9b      	lsrs	r3, r3, #18
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	0adb      	lsrs	r3, r3, #11
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	091b      	lsrs	r3, r3, #4
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009c9e:	2278      	movs	r2, #120	; 0x78
 8009ca0:	2194      	movs	r1, #148	; 0x94
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f002 f8d2 	bl	800be4c <VL53L0X_WrByte>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff fdca 	bl	8009850 <VL53L0X_device_read_strobe>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cce:	461a      	mov	r2, r3
 8009cd0:	2190      	movs	r1, #144	; 0x90
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f002 f99e 	bl	800c014 <VL53L0X_RdDWord>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	0f5b      	lsrs	r3, r3, #29
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf0:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009cf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cf6:	4413      	add	r3, r2
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	0d9b      	lsrs	r3, r3, #22
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	0bdb      	lsrs	r3, r3, #15
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	019b      	lsls	r3, r3, #6
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009d46:	2279      	movs	r2, #121	; 0x79
 8009d48:	2194      	movs	r1, #148	; 0x94
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f002 f87e 	bl	800be4c <VL53L0X_WrByte>
 8009d50:	4603      	mov	r3, r0
 8009d52:	461a      	mov	r2, r3
 8009d54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fd76 	bl	8009850 <VL53L0X_device_read_strobe>
 8009d64:	4603      	mov	r3, r0
 8009d66:	461a      	mov	r2, r3
 8009d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d76:	461a      	mov	r2, r3
 8009d78:	2190      	movs	r1, #144	; 0x90
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f002 f94a 	bl	800c014 <VL53L0X_RdDWord>
 8009d80:	4603      	mov	r3, r0
 8009d82:	461a      	mov	r2, r3
 8009d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	0e9b      	lsrs	r3, r3, #26
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d98:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009d9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d9e:	4413      	add	r3, r2
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	0cdb      	lsrs	r3, r3, #19
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	0b1b      	lsrs	r3, r3, #12
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	095b      	lsrs	r3, r3, #5
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009de0:	227a      	movs	r2, #122	; 0x7a
 8009de2:	2194      	movs	r1, #148	; 0x94
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f002 f831 	bl	800be4c <VL53L0X_WrByte>
 8009dea:	4603      	mov	r3, r0
 8009dec:	461a      	mov	r2, r3
 8009dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009df2:	4313      	orrs	r3, r2
 8009df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff fd29 	bl	8009850 <VL53L0X_device_read_strobe>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	461a      	mov	r2, r3
 8009e02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e06:	4313      	orrs	r3, r2
 8009e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e10:	461a      	mov	r2, r3
 8009e12:	2190      	movs	r1, #144	; 0x90
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f002 f8fd 	bl	800c014 <VL53L0X_RdDWord>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e22:	4313      	orrs	r3, r2
 8009e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	0f9b      	lsrs	r3, r3, #30
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e32:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009e34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e38:	4413      	add	r3, r2
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e40:	0ddb      	lsrs	r3, r3, #23
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	0c1b      	lsrs	r3, r3, #16
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	0a5b      	lsrs	r3, r3, #9
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	089b      	lsrs	r3, r3, #2
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80f1 	beq.w	800a06e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009e8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e90:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f040 80ea 	bne.w	800a06e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009e9a:	227b      	movs	r2, #123	; 0x7b
 8009e9c:	2194      	movs	r1, #148	; 0x94
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f001 ffd4 	bl	800be4c <VL53L0X_WrByte>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eac:	4313      	orrs	r3, r2
 8009eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff fccc 	bl	8009850 <VL53L0X_device_read_strobe>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eca:	461a      	mov	r2, r3
 8009ecc:	2190      	movs	r1, #144	; 0x90
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f002 f8a0 	bl	800c014 <VL53L0X_RdDWord>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009edc:	4313      	orrs	r3, r2
 8009ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009ee2:	227c      	movs	r2, #124	; 0x7c
 8009ee4:	2194      	movs	r1, #148	; 0x94
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f001 ffb0 	bl	800be4c <VL53L0X_WrByte>
 8009eec:	4603      	mov	r3, r0
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff fca8 	bl	8009850 <VL53L0X_device_read_strobe>
 8009f00:	4603      	mov	r3, r0
 8009f02:	461a      	mov	r2, r3
 8009f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f12:	461a      	mov	r2, r3
 8009f14:	2190      	movs	r1, #144	; 0x90
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f002 f87c 	bl	800c014 <VL53L0X_RdDWord>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f24:	4313      	orrs	r3, r2
 8009f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009f2a:	2273      	movs	r2, #115	; 0x73
 8009f2c:	2194      	movs	r1, #148	; 0x94
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f001 ff8c 	bl	800be4c <VL53L0X_WrByte>
 8009f34:	4603      	mov	r3, r0
 8009f36:	461a      	mov	r2, r3
 8009f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff fc84 	bl	8009850 <VL53L0X_device_read_strobe>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f50:	4313      	orrs	r3, r2
 8009f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2190      	movs	r1, #144	; 0x90
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f002 f858 	bl	800c014 <VL53L0X_RdDWord>
 8009f64:	4603      	mov	r3, r0
 8009f66:	461a      	mov	r2, r3
 8009f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009f7a:	2274      	movs	r2, #116	; 0x74
 8009f7c:	2194      	movs	r1, #148	; 0x94
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 ff64 	bl	800be4c <VL53L0X_WrByte>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461a      	mov	r2, r3
 8009f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff fc5c 	bl	8009850 <VL53L0X_device_read_strobe>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009faa:	461a      	mov	r2, r3
 8009fac:	2190      	movs	r1, #144	; 0x90
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f002 f830 	bl	800c014 <VL53L0X_RdDWord>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009fc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009fcc:	2275      	movs	r2, #117	; 0x75
 8009fce:	2194      	movs	r1, #148	; 0x94
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 ff3b 	bl	800be4c <VL53L0X_WrByte>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	461a      	mov	r2, r3
 8009fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff fc33 	bl	8009850 <VL53L0X_device_read_strobe>
 8009fea:	4603      	mov	r3, r0
 8009fec:	461a      	mov	r2, r3
 8009fee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	2190      	movs	r1, #144	; 0x90
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f002 f807 	bl	800c014 <VL53L0X_RdDWord>
 800a006:	4603      	mov	r3, r0
 800a008:	461a      	mov	r2, r3
 800a00a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a00e:	4313      	orrs	r3, r2
 800a010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a018:	b29b      	uxth	r3, r3
 800a01a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a01c:	2276      	movs	r2, #118	; 0x76
 800a01e:	2194      	movs	r1, #148	; 0x94
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f001 ff13 	bl	800be4c <VL53L0X_WrByte>
 800a026:	4603      	mov	r3, r0
 800a028:	461a      	mov	r2, r3
 800a02a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a02e:	4313      	orrs	r3, r2
 800a030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7ff fc0b 	bl	8009850 <VL53L0X_device_read_strobe>
 800a03a:	4603      	mov	r3, r0
 800a03c:	461a      	mov	r2, r3
 800a03e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a042:	4313      	orrs	r3, r2
 800a044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a04c:	461a      	mov	r2, r3
 800a04e:	2190      	movs	r1, #144	; 0x90
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 ffdf 	bl	800c014 <VL53L0X_RdDWord>
 800a056:	4603      	mov	r3, r0
 800a058:	461a      	mov	r2, r3
 800a05a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a05e:	4313      	orrs	r3, r2
 800a060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a06a:	4313      	orrs	r3, r2
 800a06c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a06e:	2200      	movs	r2, #0
 800a070:	2181      	movs	r1, #129	; 0x81
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 feea 	bl	800be4c <VL53L0X_WrByte>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a080:	4313      	orrs	r3, r2
 800a082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a086:	2206      	movs	r2, #6
 800a088:	21ff      	movs	r1, #255	; 0xff
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 fede 	bl	800be4c <VL53L0X_WrByte>
 800a090:	4603      	mov	r3, r0
 800a092:	461a      	mov	r2, r3
 800a094:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a098:	4313      	orrs	r3, r2
 800a09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a09e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	2183      	movs	r1, #131	; 0x83
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 ff52 	bl	800bf50 <VL53L0X_RdByte>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a0ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0be:	f023 0304 	bic.w	r3, r3, #4
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	2183      	movs	r1, #131	; 0x83
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 febf 	bl	800be4c <VL53L0X_WrByte>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a0dc:	2201      	movs	r2, #1
 800a0de:	21ff      	movs	r1, #255	; 0xff
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 feb3 	bl	800be4c <VL53L0X_WrByte>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fea7 	bl	800be4c <VL53L0X_WrByte>
 800a0fe:	4603      	mov	r3, r0
 800a100:	461a      	mov	r2, r3
 800a102:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a106:	4313      	orrs	r3, r2
 800a108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a10c:	2200      	movs	r2, #0
 800a10e:	21ff      	movs	r1, #255	; 0xff
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 fe9b 	bl	800be4c <VL53L0X_WrByte>
 800a116:	4603      	mov	r3, r0
 800a118:	461a      	mov	r2, r3
 800a11a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a11e:	4313      	orrs	r3, r2
 800a120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a124:	2200      	movs	r2, #0
 800a126:	2180      	movs	r1, #128	; 0x80
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 fe8f 	bl	800be4c <VL53L0X_WrByte>
 800a12e:	4603      	mov	r3, r0
 800a130:	461a      	mov	r2, r3
 800a132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a136:	4313      	orrs	r3, r2
 800a138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a13c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a140:	2b00      	cmp	r3, #0
 800a142:	f040 808f 	bne.w	800a264 <VL53L0X_get_info_from_device+0x98e>
 800a146:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a14a:	2b07      	cmp	r3, #7
 800a14c:	f000 808a 	beq.w	800a264 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d024      	beq.n	800a1a4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a15a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a15e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a162:	2b00      	cmp	r3, #0
 800a164:	d11e      	bne.n	800a1a4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a16c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a176:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a17a:	2300      	movs	r3, #0
 800a17c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a17e:	e00e      	b.n	800a19e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a180:	f107 0208 	add.w	r2, r7, #8
 800a184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a186:	4413      	add	r3, r2
 800a188:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a18e:	4413      	add	r3, r2
 800a190:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a194:	460a      	mov	r2, r1
 800a196:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a19a:	3301      	adds	r3, #1
 800a19c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a0:	2b05      	cmp	r3, #5
 800a1a2:	dded      	ble.n	800a180 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d018      	beq.n	800a1e0 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a1ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a1b2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d112      	bne.n	800a1e0 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1c4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	33f3      	adds	r3, #243	; 0xf3
 800a1d2:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a1d4:	f107 0310 	add.w	r3, r7, #16
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1dc:	f001 ffc6 	bl	800c16c <strcpy>

		}

		if (((option & 4) == 4) &&
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d030      	beq.n	800a24c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a1ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a1ee:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d12a      	bne.n	800a24c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a208:	025b      	lsls	r3, r3, #9
 800a20a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a210:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d011      	beq.n	800a244 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a22a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a22e:	fb02 f303 	mul.w	r3, r2, r3
 800a232:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a234:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a238:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a23c:	425b      	negs	r3, r3
 800a23e:	b29b      	uxth	r3, r3
 800a240:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a244:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a24c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	4313      	orrs	r3, r2
 800a254:	b2db      	uxtb	r3, r3
 800a256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a25a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a264:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3760      	adds	r7, #96	; 0x60
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a27c:	f240 6277 	movw	r2, #1655	; 0x677
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a288:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a28c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	fb02 f303 	mul.w	r3, r2, r3
 800a29c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a29e:	68bb      	ldr	r3, [r7, #8]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d017      	beq.n	800a2f6 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a2cc:	e005      	b.n	800a2da <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	085b      	lsrs	r3, r3, #1
 800a2d2:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a2d4:	89fb      	ldrh	r3, [r7, #14]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1f4      	bne.n	800a2ce <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a2e4:	89fb      	ldrh	r3, [r7, #14]
 800a2e6:	021b      	lsls	r3, r3, #8
 800a2e8:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a2f2:	4413      	add	r3, r2
 800a2f4:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a2f6:	8afb      	ldrh	r3, [r7, #22]

}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a312:	88fb      	ldrh	r3, [r7, #6]
 800a314:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a316:	88fa      	ldrh	r2, [r7, #6]
 800a318:	0a12      	lsrs	r2, r2, #8
 800a31a:	b292      	uxth	r2, r2
 800a31c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a31e:	3301      	adds	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a322:	68fb      	ldr	r3, [r7, #12]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	4619      	mov	r1, r3
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f7ff ff92 	bl	800a270 <VL53L0X_calc_macro_period_ps>
 800a34c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a354:	4a0a      	ldr	r2, [pc, #40]	; (800a380 <VL53L0X_calc_timeout_mclks+0x50>)
 800a356:	fba2 2303 	umull	r2, r3, r2, r3
 800a35a:	099b      	lsrs	r3, r3, #6
 800a35c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a364:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	085b      	lsrs	r3, r3, #1
 800a36c:	441a      	add	r2, r3
	timeout_period_mclks =
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	fbb2 f3f3 	udiv	r3, r2, r3
 800a374:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a376:	69fb      	ldr	r3, [r7, #28]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3720      	adds	r7, #32
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	10624dd3 	.word	0x10624dd3

0800a384 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	807b      	strh	r3, [r7, #2]
 800a390:	4613      	mov	r3, r2
 800a392:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a398:	787b      	ldrb	r3, [r7, #1]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff ff67 	bl	800a270 <VL53L0X_calc_macro_period_ps>
 800a3a2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a3aa:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <VL53L0X_calc_timeout_us+0x50>)
 800a3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b0:	099b      	lsrs	r3, r3, #6
 800a3b2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a3b4:	887b      	ldrh	r3, [r7, #2]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	fb02 f303 	mul.w	r3, r2, r3
 800a3bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a3c0:	4a04      	ldr	r2, [pc, #16]	; (800a3d4 <VL53L0X_calc_timeout_us+0x50>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	099b      	lsrs	r3, r3, #6
 800a3c8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a3ca:	697b      	ldr	r3, [r7, #20]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	10624dd3 	.word	0x10624dd3

0800a3d8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08c      	sub	sp, #48	; 0x30
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a3fe:	7afb      	ldrb	r3, [r7, #11]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <get_sequence_step_timeout+0x38>
 800a404:	7afb      	ldrb	r3, [r7, #11]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d002      	beq.n	800a410 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a40a:	7afb      	ldrb	r3, [r7, #11]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d128      	bne.n	800a462 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a410:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a414:	461a      	mov	r2, r3
 800a416:	2100      	movs	r1, #0
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7fd fa7d 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a41e:	4603      	mov	r3, r0
 800a420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a424:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d109      	bne.n	800a440 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a42c:	f107 0320 	add.w	r3, r7, #32
 800a430:	461a      	mov	r2, r3
 800a432:	2146      	movs	r1, #70	; 0x46
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f001 fd8b 	bl	800bf50 <VL53L0X_RdByte>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a440:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a444:	b29b      	uxth	r3, r3
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff ff5c 	bl	800a304 <VL53L0X_decode_timeout>
 800a44c:	4603      	mov	r3, r0
 800a44e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a450:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a454:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a456:	4619      	mov	r1, r3
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f7ff ff93 	bl	800a384 <VL53L0X_calc_timeout_us>
 800a45e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a460:	e092      	b.n	800a588 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	2b03      	cmp	r3, #3
 800a466:	d135      	bne.n	800a4d4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a468:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a46c:	461a      	mov	r2, r3
 800a46e:	2100      	movs	r1, #0
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7fd fa51 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a476:	4603      	mov	r3, r0
 800a478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a47c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a480:	2b00      	cmp	r3, #0
 800a482:	f040 8081 	bne.w	800a588 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a486:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a48a:	461a      	mov	r2, r3
 800a48c:	2100      	movs	r1, #0
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7fd fa42 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a494:	4603      	mov	r3, r0
 800a496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a49a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d109      	bne.n	800a4b6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a4a2:	f107 031e 	add.w	r3, r7, #30
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2151      	movs	r1, #81	; 0x51
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f001 fd7a 	bl	800bfa4 <VL53L0X_RdWord>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a4b6:	8bfb      	ldrh	r3, [r7, #30]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7ff ff23 	bl	800a304 <VL53L0X_decode_timeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a4c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a4c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff ff5a 	bl	800a384 <VL53L0X_calc_timeout_us>
 800a4d0:	62b8      	str	r0, [r7, #40]	; 0x28
 800a4d2:	e059      	b.n	800a588 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d156      	bne.n	800a588 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a4da:	f107 0314 	add.w	r3, r7, #20
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7fd fb25 	bl	8007b30 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01d      	beq.n	800a52c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a4f0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7fd fa0d 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a4fe:	4603      	mov	r3, r0
 800a500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a504:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10f      	bne.n	800a52c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a50c:	f107 031e 	add.w	r3, r7, #30
 800a510:	461a      	mov	r2, r3
 800a512:	2151      	movs	r1, #81	; 0x51
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f001 fd45 	bl	800bfa4 <VL53L0X_RdWord>
 800a51a:	4603      	mov	r3, r0
 800a51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a520:	8bfb      	ldrh	r3, [r7, #30]
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff feee 	bl	800a304 <VL53L0X_decode_timeout>
 800a528:	4603      	mov	r3, r0
 800a52a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a52c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a530:	2b00      	cmp	r3, #0
 800a532:	d109      	bne.n	800a548 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a534:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a538:	461a      	mov	r2, r3
 800a53a:	2101      	movs	r1, #1
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7fd f9eb 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a542:	4603      	mov	r3, r0
 800a544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10f      	bne.n	800a570 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a550:	f107 031c 	add.w	r3, r7, #28
 800a554:	461a      	mov	r2, r3
 800a556:	2171      	movs	r1, #113	; 0x71
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f001 fd23 	bl	800bfa4 <VL53L0X_RdWord>
 800a55e:	4603      	mov	r3, r0
 800a560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a564:	8bbb      	ldrh	r3, [r7, #28]
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fecc 	bl	800a304 <VL53L0X_decode_timeout>
 800a56c:	4603      	mov	r3, r0
 800a56e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a570:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a578:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a57e:	4619      	mov	r1, r3
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7ff feff 	bl	800a384 <VL53L0X_calc_timeout_us>
 800a586:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a58c:	601a      	str	r2, [r3, #0]

	return Status;
 800a58e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a592:	4618      	mov	r0, r3
 800a594:	3730      	adds	r7, #48	; 0x30
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b08a      	sub	sp, #40	; 0x28
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a5ae:	7afb      	ldrb	r3, [r7, #11]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <set_sequence_step_timeout+0x26>
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d002      	beq.n	800a5c0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a5ba:	7afb      	ldrb	r3, [r7, #11]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d138      	bne.n	800a632 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a5c0:	f107 031b 	add.w	r3, r7, #27
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7fd f9a5 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a5d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d11a      	bne.n	800a612 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a5dc:	7efb      	ldrb	r3, [r7, #27]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	6879      	ldr	r1, [r7, #4]
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f7ff fea4 	bl	800a330 <VL53L0X_calc_timeout_mclks>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a5ec:	8bbb      	ldrh	r3, [r7, #28]
 800a5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5f2:	d903      	bls.n	800a5fc <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a5f4:	23ff      	movs	r3, #255	; 0xff
 800a5f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a5fa:	e004      	b.n	800a606 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a5fc:	8bbb      	ldrh	r3, [r7, #28]
 800a5fe:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a600:	3b01      	subs	r3, #1
 800a602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a616:	2b00      	cmp	r3, #0
 800a618:	f040 80ab 	bne.w	800a772 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a61c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a620:	461a      	mov	r2, r3
 800a622:	2146      	movs	r1, #70	; 0x46
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f001 fc11 	bl	800be4c <VL53L0X_WrByte>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a630:	e09f      	b.n	800a772 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a632:	7afb      	ldrb	r3, [r7, #11]
 800a634:	2b03      	cmp	r3, #3
 800a636:	d135      	bne.n	800a6a4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d11b      	bne.n	800a678 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a640:	f107 031b 	add.w	r3, r7, #27
 800a644:	461a      	mov	r2, r3
 800a646:	2100      	movs	r1, #0
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7fd f965 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a654:	7efb      	ldrb	r3, [r7, #27]
 800a656:	461a      	mov	r2, r3
 800a658:	6879      	ldr	r1, [r7, #4]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff fe68 	bl	800a330 <VL53L0X_calc_timeout_mclks>
 800a660:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a662:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a666:	4618      	mov	r0, r3
 800a668:	f7ff fe20 	bl	800a2ac <VL53L0X_encode_timeout>
 800a66c:	4603      	mov	r3, r0
 800a66e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a670:	8b3a      	ldrh	r2, [r7, #24]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d108      	bne.n	800a692 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a680:	8b3b      	ldrh	r3, [r7, #24]
 800a682:	461a      	mov	r2, r3
 800a684:	2151      	movs	r1, #81	; 0x51
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f001 fc04 	bl	800be94 <VL53L0X_WrWord>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a696:	2b00      	cmp	r3, #0
 800a698:	d16b      	bne.n	800a772 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a6a2:	e066      	b.n	800a772 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a6a4:	7afb      	ldrb	r3, [r7, #11]
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d160      	bne.n	800a76c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a6aa:	f107 0310 	add.w	r3, r7, #16
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f7fd fa3d 	bl	8007b30 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a6ba:	7cfb      	ldrb	r3, [r7, #19]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01d      	beq.n	800a6fc <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a6c0:	f107 031b 	add.w	r3, r7, #27
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f7fd f925 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10f      	bne.n	800a6fc <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a6dc:	f107 0318 	add.w	r3, r7, #24
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	2151      	movs	r1, #81	; 0x51
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f001 fc5d 	bl	800bfa4 <VL53L0X_RdWord>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a6f0:	8b3b      	ldrh	r3, [r7, #24]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff fe06 	bl	800a304 <VL53L0X_decode_timeout>
 800a6f8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a6fa:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a6fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a700:	2b00      	cmp	r3, #0
 800a702:	d109      	bne.n	800a718 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a704:	f107 031b 	add.w	r3, r7, #27
 800a708:	461a      	mov	r2, r3
 800a70a:	2101      	movs	r1, #1
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7fd f903 	bl	8007918 <VL53L0X_GetVcselPulsePeriod>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d128      	bne.n	800a772 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a720:	7efb      	ldrb	r3, [r7, #27]
 800a722:	461a      	mov	r2, r3
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff fe02 	bl	800a330 <VL53L0X_calc_timeout_mclks>
 800a72c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a730:	6a3a      	ldr	r2, [r7, #32]
 800a732:	4413      	add	r3, r2
 800a734:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a736:	6a38      	ldr	r0, [r7, #32]
 800a738:	f7ff fdb8 	bl	800a2ac <VL53L0X_encode_timeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a744:	2b00      	cmp	r3, #0
 800a746:	d108      	bne.n	800a75a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a748:	8bfb      	ldrh	r3, [r7, #30]
 800a74a:	461a      	mov	r2, r3
 800a74c:	2171      	movs	r1, #113	; 0x71
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f001 fba0 	bl	800be94 <VL53L0X_WrWord>
 800a754:	4603      	mov	r3, r0
 800a756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a75a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d107      	bne.n	800a772 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a76a:	e002      	b.n	800a772 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a76c:	23fc      	movs	r3, #252	; 0xfc
 800a76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a776:	4618      	mov	r0, r3
 800a778:	3728      	adds	r7, #40	; 0x28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b08a      	sub	sp, #40	; 0x28
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	70fb      	strb	r3, [r7, #3]
 800a78a:	4613      	mov	r3, r2
 800a78c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a78e:	2300      	movs	r3, #0
 800a790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a794:	230c      	movs	r3, #12
 800a796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a79a:	2312      	movs	r3, #18
 800a79c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a7a6:	230e      	movs	r3, #14
 800a7a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a7b0:	78bb      	ldrb	r3, [r7, #2]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7bc:	23fc      	movs	r3, #252	; 0xfc
 800a7be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7c2:	e020      	b.n	800a806 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10d      	bne.n	800a7e6 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a7ca:	78ba      	ldrb	r2, [r7, #2]
 800a7cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d304      	bcc.n	800a7de <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a7d4:	78ba      	ldrb	r2, [r7, #2]
 800a7d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d903      	bls.n	800a7e6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7de:	23fc      	movs	r3, #252	; 0xfc
 800a7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7e4:	e00f      	b.n	800a806 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d10c      	bne.n	800a806 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a7ec:	78ba      	ldrb	r2, [r7, #2]
 800a7ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d304      	bcc.n	800a800 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a7f6:	78ba      	ldrb	r2, [r7, #2]
 800a7f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d902      	bls.n	800a806 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a800:	23fc      	movs	r3, #252	; 0xfc
 800a802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a806:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d002      	beq.n	800a814 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a80e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a812:	e239      	b.n	800ac88 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d150      	bne.n	800a8bc <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a81a:	78bb      	ldrb	r3, [r7, #2]
 800a81c:	2b0c      	cmp	r3, #12
 800a81e:	d110      	bne.n	800a842 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a820:	2218      	movs	r2, #24
 800a822:	2157      	movs	r1, #87	; 0x57
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fb11 	bl	800be4c <VL53L0X_WrByte>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a830:	2208      	movs	r2, #8
 800a832:	2156      	movs	r1, #86	; 0x56
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f001 fb09 	bl	800be4c <VL53L0X_WrByte>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a840:	e17f      	b.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a842:	78bb      	ldrb	r3, [r7, #2]
 800a844:	2b0e      	cmp	r3, #14
 800a846:	d110      	bne.n	800a86a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a848:	2230      	movs	r2, #48	; 0x30
 800a84a:	2157      	movs	r1, #87	; 0x57
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f001 fafd 	bl	800be4c <VL53L0X_WrByte>
 800a852:	4603      	mov	r3, r0
 800a854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a858:	2208      	movs	r2, #8
 800a85a:	2156      	movs	r1, #86	; 0x56
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 faf5 	bl	800be4c <VL53L0X_WrByte>
 800a862:	4603      	mov	r3, r0
 800a864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a868:	e16b      	b.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a86a:	78bb      	ldrb	r3, [r7, #2]
 800a86c:	2b10      	cmp	r3, #16
 800a86e:	d110      	bne.n	800a892 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a870:	2240      	movs	r2, #64	; 0x40
 800a872:	2157      	movs	r1, #87	; 0x57
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f001 fae9 	bl	800be4c <VL53L0X_WrByte>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a880:	2208      	movs	r2, #8
 800a882:	2156      	movs	r1, #86	; 0x56
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f001 fae1 	bl	800be4c <VL53L0X_WrByte>
 800a88a:	4603      	mov	r3, r0
 800a88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a890:	e157      	b.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a892:	78bb      	ldrb	r3, [r7, #2]
 800a894:	2b12      	cmp	r3, #18
 800a896:	f040 8154 	bne.w	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a89a:	2250      	movs	r2, #80	; 0x50
 800a89c:	2157      	movs	r1, #87	; 0x57
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fad4 	bl	800be4c <VL53L0X_WrByte>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a8aa:	2208      	movs	r2, #8
 800a8ac:	2156      	movs	r1, #86	; 0x56
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f001 facc 	bl	800be4c <VL53L0X_WrByte>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8ba:	e142      	b.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	f040 813f 	bne.w	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a8c4:	78bb      	ldrb	r3, [r7, #2]
 800a8c6:	2b08      	cmp	r3, #8
 800a8c8:	d14c      	bne.n	800a964 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	2148      	movs	r1, #72	; 0x48
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 fabc 	bl	800be4c <VL53L0X_WrByte>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a8da:	2208      	movs	r2, #8
 800a8dc:	2147      	movs	r1, #71	; 0x47
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f001 fab4 	bl	800be4c <VL53L0X_WrByte>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	2132      	movs	r1, #50	; 0x32
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f001 faac 	bl	800be4c <VL53L0X_WrByte>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a902:	220c      	movs	r2, #12
 800a904:	2130      	movs	r1, #48	; 0x30
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 faa0 	bl	800be4c <VL53L0X_WrByte>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a914:	4313      	orrs	r3, r2
 800a916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a91a:	2201      	movs	r2, #1
 800a91c:	21ff      	movs	r1, #255	; 0xff
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 fa94 	bl	800be4c <VL53L0X_WrByte>
 800a924:	4603      	mov	r3, r0
 800a926:	461a      	mov	r2, r3
 800a928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a92c:	4313      	orrs	r3, r2
 800a92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a932:	2230      	movs	r2, #48	; 0x30
 800a934:	2130      	movs	r1, #48	; 0x30
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f001 fa88 	bl	800be4c <VL53L0X_WrByte>
 800a93c:	4603      	mov	r3, r0
 800a93e:	461a      	mov	r2, r3
 800a940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a944:	4313      	orrs	r3, r2
 800a946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a94a:	2200      	movs	r2, #0
 800a94c:	21ff      	movs	r1, #255	; 0xff
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 fa7c 	bl	800be4c <VL53L0X_WrByte>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a95c:	4313      	orrs	r3, r2
 800a95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a962:	e0ee      	b.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a964:	78bb      	ldrb	r3, [r7, #2]
 800a966:	2b0a      	cmp	r3, #10
 800a968:	d14c      	bne.n	800aa04 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a96a:	2228      	movs	r2, #40	; 0x28
 800a96c:	2148      	movs	r1, #72	; 0x48
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f001 fa6c 	bl	800be4c <VL53L0X_WrByte>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a97a:	2208      	movs	r2, #8
 800a97c:	2147      	movs	r1, #71	; 0x47
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 fa64 	bl	800be4c <VL53L0X_WrByte>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a98a:	2203      	movs	r2, #3
 800a98c:	2132      	movs	r1, #50	; 0x32
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 fa5c 	bl	800be4c <VL53L0X_WrByte>
 800a994:	4603      	mov	r3, r0
 800a996:	461a      	mov	r2, r3
 800a998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a99c:	4313      	orrs	r3, r2
 800a99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a9a2:	2209      	movs	r2, #9
 800a9a4:	2130      	movs	r1, #48	; 0x30
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f001 fa50 	bl	800be4c <VL53L0X_WrByte>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	21ff      	movs	r1, #255	; 0xff
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 fa44 	bl	800be4c <VL53L0X_WrByte>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	2130      	movs	r1, #48	; 0x30
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f001 fa38 	bl	800be4c <VL53L0X_WrByte>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	461a      	mov	r2, r3
 800a9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	21ff      	movs	r1, #255	; 0xff
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 fa2c 	bl	800be4c <VL53L0X_WrByte>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa02:	e09e      	b.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800aa04:	78bb      	ldrb	r3, [r7, #2]
 800aa06:	2b0c      	cmp	r3, #12
 800aa08:	d14c      	bne.n	800aaa4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800aa0a:	2238      	movs	r2, #56	; 0x38
 800aa0c:	2148      	movs	r1, #72	; 0x48
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fa1c 	bl	800be4c <VL53L0X_WrByte>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	2147      	movs	r1, #71	; 0x47
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f001 fa14 	bl	800be4c <VL53L0X_WrByte>
 800aa24:	4603      	mov	r3, r0
 800aa26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aa2a:	2203      	movs	r2, #3
 800aa2c:	2132      	movs	r1, #50	; 0x32
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 fa0c 	bl	800be4c <VL53L0X_WrByte>
 800aa34:	4603      	mov	r3, r0
 800aa36:	461a      	mov	r2, r3
 800aa38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aa42:	2208      	movs	r2, #8
 800aa44:	2130      	movs	r1, #48	; 0x30
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 fa00 	bl	800be4c <VL53L0X_WrByte>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa54:	4313      	orrs	r3, r2
 800aa56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	21ff      	movs	r1, #255	; 0xff
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 f9f4 	bl	800be4c <VL53L0X_WrByte>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800aa72:	2220      	movs	r2, #32
 800aa74:	2130      	movs	r1, #48	; 0x30
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f001 f9e8 	bl	800be4c <VL53L0X_WrByte>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa84:	4313      	orrs	r3, r2
 800aa86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	21ff      	movs	r1, #255	; 0xff
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 f9dc 	bl	800be4c <VL53L0X_WrByte>
 800aa94:	4603      	mov	r3, r0
 800aa96:	461a      	mov	r2, r3
 800aa98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aaa2:	e04e      	b.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800aaa4:	78bb      	ldrb	r3, [r7, #2]
 800aaa6:	2b0e      	cmp	r3, #14
 800aaa8:	d14b      	bne.n	800ab42 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800aaaa:	2248      	movs	r2, #72	; 0x48
 800aaac:	2148      	movs	r1, #72	; 0x48
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 f9cc 	bl	800be4c <VL53L0X_WrByte>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800aaba:	2208      	movs	r2, #8
 800aabc:	2147      	movs	r1, #71	; 0x47
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f001 f9c4 	bl	800be4c <VL53L0X_WrByte>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aaca:	2203      	movs	r2, #3
 800aacc:	2132      	movs	r1, #50	; 0x32
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f001 f9bc 	bl	800be4c <VL53L0X_WrByte>
 800aad4:	4603      	mov	r3, r0
 800aad6:	461a      	mov	r2, r3
 800aad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aadc:	4313      	orrs	r3, r2
 800aade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aae2:	2207      	movs	r2, #7
 800aae4:	2130      	movs	r1, #48	; 0x30
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f001 f9b0 	bl	800be4c <VL53L0X_WrByte>
 800aaec:	4603      	mov	r3, r0
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aafa:	2201      	movs	r2, #1
 800aafc:	21ff      	movs	r1, #255	; 0xff
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f001 f9a4 	bl	800be4c <VL53L0X_WrByte>
 800ab04:	4603      	mov	r3, r0
 800ab06:	461a      	mov	r2, r3
 800ab08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ab12:	2220      	movs	r2, #32
 800ab14:	2130      	movs	r1, #48	; 0x30
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 f998 	bl	800be4c <VL53L0X_WrByte>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab24:	4313      	orrs	r3, r2
 800ab26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	21ff      	movs	r1, #255	; 0xff
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f001 f98c 	bl	800be4c <VL53L0X_WrByte>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800ab42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d17f      	bne.n	800ac4a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ab4a:	78bb      	ldrb	r3, [r7, #2]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe fe38 	bl	80097c2 <VL53L0X_encode_vcsel_period>
 800ab52:	4603      	mov	r3, r0
 800ab54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ab58:	78fb      	ldrb	r3, [r7, #3]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d045      	beq.n	800abee <VL53L0X_set_vcsel_pulse_period+0x470>
 800ab62:	e06e      	b.n	800ac42 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ab64:	f107 0314 	add.w	r3, r7, #20
 800ab68:	461a      	mov	r2, r3
 800ab6a:	2103      	movs	r1, #3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fc33 	bl	800a3d8 <get_sequence_step_timeout>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ab78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d109      	bne.n	800ab94 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ab80:	f107 0310 	add.w	r3, r7, #16
 800ab84:	461a      	mov	r2, r3
 800ab86:	2102      	movs	r1, #2
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fc25 	bl	800a3d8 <get_sequence_step_timeout>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ab94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d109      	bne.n	800abb0 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ab9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aba0:	461a      	mov	r2, r3
 800aba2:	2150      	movs	r1, #80	; 0x50
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 f951 	bl	800be4c <VL53L0X_WrByte>
 800abaa:	4603      	mov	r3, r0
 800abac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800abb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d108      	bne.n	800abca <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	461a      	mov	r2, r3
 800abbc:	2103      	movs	r1, #3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff fceb 	bl	800a59a <set_sequence_step_timeout>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800abca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d108      	bne.n	800abe4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	461a      	mov	r2, r3
 800abd6:	2102      	movs	r1, #2
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff fcde 	bl	800a59a <set_sequence_step_timeout>
 800abde:	4603      	mov	r3, r0
 800abe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	78ba      	ldrb	r2, [r7, #2]
 800abe8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800abec:	e02e      	b.n	800ac4c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800abee:	f107 0318 	add.w	r3, r7, #24
 800abf2:	461a      	mov	r2, r3
 800abf4:	2104      	movs	r1, #4
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff fbee 	bl	800a3d8 <get_sequence_step_timeout>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ac02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d109      	bne.n	800ac1e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ac0a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac0e:	461a      	mov	r2, r3
 800ac10:	2170      	movs	r1, #112	; 0x70
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f001 f91a 	bl	800be4c <VL53L0X_WrByte>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ac1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d108      	bne.n	800ac38 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	2104      	movs	r1, #4
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff fcb4 	bl	800a59a <set_sequence_step_timeout>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	78ba      	ldrb	r2, [r7, #2]
 800ac3c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ac40:	e004      	b.n	800ac4c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac42:	23fc      	movs	r3, #252	; 0xfc
 800ac44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac48:	e000      	b.n	800ac4c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ac4a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ac4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d109      	bne.n	800ac68 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ac5a:	69f9      	ldr	r1, [r7, #28]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7fc fe1d 	bl	800789c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ac68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d109      	bne.n	800ac84 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ac70:	f107 010f 	add.w	r1, r7, #15
 800ac74:	2301      	movs	r3, #1
 800ac76:	2200      	movs	r2, #0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7fe fcbd 	bl	80095f8 <VL53L0X_perform_phase_calibration>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ac84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3728      	adds	r7, #40	; 0x28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <VL53L0X_get_vcsel_pulse_period+0x1e>
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d00a      	beq.n	800acc2 <VL53L0X_get_vcsel_pulse_period+0x32>
 800acac:	e013      	b.n	800acd6 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800acae:	f107 0316 	add.w	r3, r7, #22
 800acb2:	461a      	mov	r2, r3
 800acb4:	2150      	movs	r1, #80	; 0x50
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f001 f94a 	bl	800bf50 <VL53L0X_RdByte>
 800acbc:	4603      	mov	r3, r0
 800acbe:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800acc0:	e00b      	b.n	800acda <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800acc2:	f107 0316 	add.w	r3, r7, #22
 800acc6:	461a      	mov	r2, r3
 800acc8:	2170      	movs	r1, #112	; 0x70
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f001 f940 	bl	800bf50 <VL53L0X_RdByte>
 800acd0:	4603      	mov	r3, r0
 800acd2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800acd4:	e001      	b.n	800acda <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acd6:	23fc      	movs	r3, #252	; 0xfc
 800acd8:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800acda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d107      	bne.n	800acf2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ace2:	7dbb      	ldrb	r3, [r7, #22]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe fd59 	bl	800979c <VL53L0X_decode_vcsel_period>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	701a      	strb	r2, [r3, #0]

	return Status;
 800acf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b092      	sub	sp, #72	; 0x48
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ad0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ad12:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ad14:	f240 7376 	movw	r3, #1910	; 0x776
 800ad18:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ad1a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ad20:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ad24:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ad26:	f240 234e 	movw	r3, #590	; 0x24e
 800ad2a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ad2c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ad32:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ad36:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ad38:	f240 2326 	movw	r3, #550	; 0x226
 800ad3c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ad42:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ad46:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	6a3b      	ldr	r3, [r7, #32]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d205      	bcs.n	800ad60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad54:	23fc      	movs	r3, #252	; 0xfc
 800ad56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ad5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad5e:	e0aa      	b.n	800aeb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ad60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ad6c:	f107 0314 	add.w	r3, r7, #20
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7fc fedc 	bl	8007b30 <VL53L0X_GetSequenceStepEnables>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ad7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d15b      	bne.n	800ae3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ad86:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d105      	bne.n	800ad98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ad8c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ad92:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d052      	beq.n	800ae3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ad98:	f107 0310 	add.w	r3, r7, #16
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	2102      	movs	r1, #2
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff fb19 	bl	800a3d8 <get_sequence_step_timeout>
 800ada6:	4603      	mov	r3, r0
 800ada8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800adac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800adb4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800adb8:	e07d      	b.n	800aeb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800adba:	7d3b      	ldrb	r3, [r7, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00f      	beq.n	800ade0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800adc0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800adc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adc4:	4413      	add	r3, r2
 800adc6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800adc8:	69fa      	ldr	r2, [r7, #28]
 800adca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adcc:	429a      	cmp	r2, r3
 800adce:	d204      	bcs.n	800adda <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800add0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	643b      	str	r3, [r7, #64]	; 0x40
 800add8:	e002      	b.n	800ade0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800adda:	23fc      	movs	r3, #252	; 0xfc
 800addc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ade0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ade8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800adec:	e063      	b.n	800aeb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800adee:	7dbb      	ldrb	r3, [r7, #22]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d011      	beq.n	800ae18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf8:	4413      	add	r3, r2
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800adfe:	69fa      	ldr	r2, [r7, #28]
 800ae00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d204      	bcs.n	800ae10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ae06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae0e:	e016      	b.n	800ae3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae10:	23fc      	movs	r3, #252	; 0xfc
 800ae12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae16:	e012      	b.n	800ae3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ae18:	7d7b      	ldrb	r3, [r7, #21]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00f      	beq.n	800ae3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae22:	4413      	add	r3, r2
 800ae24:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ae26:	69fa      	ldr	r2, [r7, #28]
 800ae28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d204      	bcs.n	800ae38 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ae2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	643b      	str	r3, [r7, #64]	; 0x40
 800ae36:	e002      	b.n	800ae3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae38:	23fc      	movs	r3, #252	; 0xfc
 800ae3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ae3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ae46:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae4a:	e034      	b.n	800aeb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d019      	beq.n	800ae86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	461a      	mov	r2, r3
 800ae58:	2103      	movs	r1, #3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff fabc 	bl	800a3d8 <get_sequence_step_timeout>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae6a:	4413      	add	r3, r2
 800ae6c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d204      	bcs.n	800ae80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ae76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ae7e:	e002      	b.n	800ae86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae80:	23fc      	movs	r3, #252	; 0xfc
 800ae82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800ae86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d111      	bne.n	800aeb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800ae8e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00e      	beq.n	800aeb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800ae94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800ae9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae9e:	2104      	movs	r1, #4
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fb7a 	bl	800a59a <set_sequence_step_timeout>
 800aea6:	4603      	mov	r3, r0
 800aea8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800aeb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3748      	adds	r7, #72	; 0x48
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b090      	sub	sp, #64	; 0x40
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800aece:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800aed2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800aed4:	f240 7376 	movw	r3, #1910	; 0x776
 800aed8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800aeda:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800aede:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800aee0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aee4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800aee6:	f240 234e 	movw	r3, #590	; 0x24e
 800aeea:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800aeec:	f240 23b2 	movw	r3, #690	; 0x2b2
 800aef0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800aef2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800aef8:	f240 2326 	movw	r3, #550	; 0x226
 800aefc:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800af02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af06:	441a      	add	r2, r3
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800af0c:	f107 0318 	add.w	r3, r7, #24
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7fc fe0c 	bl	8007b30 <VL53L0X_GetSequenceStepEnables>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800af1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800af26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af2a:	e075      	b.n	800b018 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800af2c:	7e3b      	ldrb	r3, [r7, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d105      	bne.n	800af3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800af32:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800af34:	2b00      	cmp	r3, #0
 800af36:	d102      	bne.n	800af3e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800af38:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d030      	beq.n	800afa0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800af3e:	f107 0310 	add.w	r3, r7, #16
 800af42:	461a      	mov	r2, r3
 800af44:	2102      	movs	r1, #2
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff fa46 	bl	800a3d8 <get_sequence_step_timeout>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800af52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af56:	2b00      	cmp	r3, #0
 800af58:	d122      	bne.n	800afa0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800af5a:	7e3b      	ldrb	r3, [r7, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d007      	beq.n	800af70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800af64:	6939      	ldr	r1, [r7, #16]
 800af66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af68:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800af6a:	441a      	add	r2, r3
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800af70:	7ebb      	ldrb	r3, [r7, #26]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d009      	beq.n	800af8a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800af7a:	6939      	ldr	r1, [r7, #16]
 800af7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7e:	440b      	add	r3, r1
 800af80:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800af82:	441a      	add	r2, r3
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	e00a      	b.n	800afa0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800af8a:	7e7b      	ldrb	r3, [r7, #25]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d007      	beq.n	800afa0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800af94:	6939      	ldr	r1, [r7, #16]
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800af9a:	441a      	add	r2, r3
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800afa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d114      	bne.n	800afd2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800afa8:	7efb      	ldrb	r3, [r7, #27]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d011      	beq.n	800afd2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800afae:	f107 030c 	add.w	r3, r7, #12
 800afb2:	461a      	mov	r2, r3
 800afb4:	2103      	movs	r1, #3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff fa0e 	bl	800a3d8 <get_sequence_step_timeout>
 800afbc:	4603      	mov	r3, r0
 800afbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800afc6:	68f9      	ldr	r1, [r7, #12]
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800afcc:	441a      	add	r2, r3
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800afd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d114      	bne.n	800b004 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800afda:	7f3b      	ldrb	r3, [r7, #28]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d011      	beq.n	800b004 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800afe0:	f107 0314 	add.w	r3, r7, #20
 800afe4:	461a      	mov	r2, r3
 800afe6:	2104      	movs	r1, #4
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff f9f5 	bl	800a3d8 <get_sequence_step_timeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800aff8:	6979      	ldr	r1, [r7, #20]
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800affe:	441a      	add	r2, r3
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b004:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d103      	bne.n	800b014 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3740      	adds	r7, #64	; 0x40
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b032:	e0c6      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	4413      	add	r3, r2
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	3301      	adds	r3, #1
 800b042:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b044:	7cfb      	ldrb	r3, [r7, #19]
 800b046:	2bff      	cmp	r3, #255	; 0xff
 800b048:	f040 808d 	bne.w	800b166 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	4413      	add	r3, r2
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	747b      	strb	r3, [r7, #17]
			Index++;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	3301      	adds	r3, #1
 800b05a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b05c:	7c7b      	ldrb	r3, [r7, #17]
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d87e      	bhi.n	800b160 <VL53L0X_load_tuning_settings+0x140>
 800b062:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <VL53L0X_load_tuning_settings+0x48>)
 800b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b068:	0800b079 	.word	0x0800b079
 800b06c:	0800b0b3 	.word	0x0800b0b3
 800b070:	0800b0ed 	.word	0x0800b0ed
 800b074:	0800b127 	.word	0x0800b127
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	4413      	add	r3, r2
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	743b      	strb	r3, [r7, #16]
				Index++;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	3301      	adds	r3, #1
 800b086:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	4413      	add	r3, r2
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	3301      	adds	r3, #1
 800b096:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b098:	7c3b      	ldrb	r3, [r7, #16]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	4413      	add	r3, r2
 800b0a6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	89ba      	ldrh	r2, [r7, #12]
 800b0ac:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b0b0:	e087      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	743b      	strb	r3, [r7, #16]
				Index++;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b0d2:	7c3b      	ldrb	r3, [r7, #16]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	021b      	lsls	r3, r3, #8
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4413      	add	r3, r2
 800b0e0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	89ba      	ldrh	r2, [r7, #12]
 800b0e6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b0ea:	e06a      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	743b      	strb	r3, [r7, #16]
				Index++;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	4413      	add	r3, r2
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	3301      	adds	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b10c:	7c3b      	ldrb	r3, [r7, #16]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	b29a      	uxth	r2, r3
 800b114:	7bfb      	ldrb	r3, [r7, #15]
 800b116:	b29b      	uxth	r3, r3
 800b118:	4413      	add	r3, r2
 800b11a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	89ba      	ldrh	r2, [r7, #12]
 800b120:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b124:	e04d      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	4413      	add	r3, r2
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	743b      	strb	r3, [r7, #16]
				Index++;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	3301      	adds	r3, #1
 800b134:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	4413      	add	r3, r2
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	3301      	adds	r3, #1
 800b144:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b146:	7c3b      	ldrb	r3, [r7, #16]
 800b148:	b29b      	uxth	r3, r3
 800b14a:	021b      	lsls	r3, r3, #8
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	b29b      	uxth	r3, r3
 800b152:	4413      	add	r3, r2
 800b154:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	89ba      	ldrh	r2, [r7, #12]
 800b15a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b15e:	e030      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b160:	23fc      	movs	r3, #252	; 0xfc
 800b162:	77fb      	strb	r3, [r7, #31]
 800b164:	e02d      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b166:	7cfb      	ldrb	r3, [r7, #19]
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d828      	bhi.n	800b1be <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	4413      	add	r3, r2
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	3301      	adds	r3, #1
 800b17a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b17c:	2300      	movs	r3, #0
 800b17e:	61bb      	str	r3, [r7, #24]
 800b180:	e00f      	b.n	800b1a2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	4413      	add	r3, r2
 800b188:	7819      	ldrb	r1, [r3, #0]
 800b18a:	f107 0208 	add.w	r2, r7, #8
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	4413      	add	r3, r2
 800b192:	460a      	mov	r2, r1
 800b194:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	3301      	adds	r3, #1
 800b19a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	61bb      	str	r3, [r7, #24]
 800b1a2:	7cfb      	ldrb	r3, [r7, #19]
 800b1a4:	69ba      	ldr	r2, [r7, #24]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	dbeb      	blt.n	800b182 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b1aa:	7cfb      	ldrb	r3, [r7, #19]
 800b1ac:	f107 0208 	add.w	r2, r7, #8
 800b1b0:	7cb9      	ldrb	r1, [r7, #18]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fdee 	bl	800bd94 <VL53L0X_WriteMulti>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	77fb      	strb	r3, [r7, #31]
 800b1bc:	e001      	b.n	800b1c2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1be:	23fc      	movs	r3, #252	; 0xfc
 800b1c0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d004      	beq.n	800b1d8 <VL53L0X_load_tuning_settings+0x1b8>
 800b1ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f43f af2e 	beq.w	800b034 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b1d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3720      	adds	r7, #32
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b088      	sub	sp, #32
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b1fa:	f107 0313 	add.w	r3, r7, #19
 800b1fe:	4619      	mov	r1, r3
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7fc fd21 	bl	8007c48 <VL53L0X_GetXTalkCompensationEnable>
 800b206:	4603      	mov	r3, r0
 800b208:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b20a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d111      	bne.n	800b236 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b212:	7cfb      	ldrb	r3, [r7, #19]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00e      	beq.n	800b236 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a1b      	ldr	r3, [r3, #32]
 800b21c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	8a9b      	ldrh	r3, [r3, #20]
 800b222:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	fb02 f303 	mul.w	r3, r2, r3
 800b22a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	3380      	adds	r3, #128	; 0x80
 800b230:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b236:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3720      	adds	r7, #32
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b086      	sub	sp, #24
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b24e:	2300      	movs	r3, #0
 800b250:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b25a:	f107 0310 	add.w	r3, r7, #16
 800b25e:	461a      	mov	r2, r3
 800b260:	68b9      	ldr	r1, [r7, #8]
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f7ff ffbe 	bl	800b1e4 <VL53L0X_get_total_xtalk_rate>
 800b268:	4603      	mov	r3, r0
 800b26a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d105      	bne.n	800b280 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	441a      	add	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	601a      	str	r2, [r3, #0]

	return Status;
 800b280:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b09a      	sub	sp, #104	; 0x68
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b29a:	2312      	movs	r3, #18
 800b29c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b29e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2a2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b2a4:	2342      	movs	r3, #66	; 0x42
 800b2a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b2a8:	2306      	movs	r3, #6
 800b2aa:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b2ac:	2307      	movs	r3, #7
 800b2ae:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800b2bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b2c4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ca:	fb02 f303 	mul.w	r3, r2, r3
 800b2ce:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d2:	3380      	adds	r3, #128	; 0x80
 800b2d4:	0a1b      	lsrs	r3, r3, #8
 800b2d6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2dc:	fb02 f303 	mul.w	r3, r2, r3
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d01a      	beq.n	800b322 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	029b      	lsls	r3, r3, #10
 800b2f0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2f8:	4413      	add	r3, r2
 800b2fa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b2fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	fbb2 f3f3 	udiv	r3, r2, r3
 800b304:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b306:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b308:	4613      	mov	r3, r2
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	4413      	add	r3, r2
 800b30e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b312:	fb03 f303 	mul.w	r3, r3, r3
 800b316:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b31a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b31e:	0c1b      	lsrs	r3, r3, #16
 800b320:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b326:	fb02 f303 	mul.w	r3, r2, r3
 800b32a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b332:	0c1b      	lsrs	r3, r3, #16
 800b334:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	fb03 f303 	mul.w	r3, r3, r3
 800b33c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b33e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b340:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b344:	0c1b      	lsrs	r3, r3, #16
 800b346:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b34a:	085a      	lsrs	r2, r3, #1
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	441a      	add	r2, r3
 800b350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b352:	fbb2 f3f3 	udiv	r3, r2, r3
 800b356:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b35c:	fb02 f303 	mul.w	r3, r2, r3
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b368:	d302      	bcc.n	800b370 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b36a:	4b54      	ldr	r3, [pc, #336]	; (800b4bc <VL53L0X_calc_dmax+0x230>)
 800b36c:	663b      	str	r3, [r7, #96]	; 0x60
 800b36e:	e015      	b.n	800b39c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b372:	085a      	lsrs	r2, r3, #1
 800b374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b376:	441a      	add	r2, r3
 800b378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b382:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b384:	fb02 f303 	mul.w	r3, r2, r3
 800b388:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b38a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b38c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b390:	0c1b      	lsrs	r3, r3, #16
 800b392:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b396:	fb03 f303 	mul.w	r3, r3, r3
 800b39a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39e:	039b      	lsls	r3, r3, #14
 800b3a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b3a4:	4a46      	ldr	r2, [pc, #280]	; (800b4c0 <VL53L0X_calc_dmax+0x234>)
 800b3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3aa:	099b      	lsrs	r3, r3, #6
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	fb03 f303 	mul.w	r3, r3, r3
 800b3b4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b8:	fb03 f303 	mul.w	r3, r3, r3
 800b3bc:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	091b      	lsrs	r3, r3, #4
 800b3c4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	4413      	add	r3, r2
 800b3d6:	011b      	lsls	r3, r3, #4
 800b3d8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b3e0:	0b9b      	lsrs	r3, r3, #14
 800b3e2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b3e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3e8:	4413      	add	r3, r2
 800b3ea:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3ee:	085b      	lsrs	r3, r3, #1
 800b3f0:	69ba      	ldr	r2, [r7, #24]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b3f6:	69ba      	ldr	r2, [r7, #24]
 800b3f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3fe:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	039b      	lsls	r3, r3, #14
 800b404:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	085b      	lsrs	r3, r3, #1
 800b40a:	69ba      	ldr	r2, [r7, #24]
 800b40c:	4413      	add	r3, r2
 800b40e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	fbb2 f3f3 	udiv	r3, r2, r3
 800b418:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b41e:	fb02 f303 	mul.w	r3, r2, r3
 800b422:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b42a:	4a25      	ldr	r2, [pc, #148]	; (800b4c0 <VL53L0X_calc_dmax+0x234>)
 800b42c:	fba2 2303 	umull	r2, r3, r2, r3
 800b430:	099b      	lsrs	r3, r3, #6
 800b432:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b440:	4a1f      	ldr	r2, [pc, #124]	; (800b4c0 <VL53L0X_calc_dmax+0x234>)
 800b442:	fba2 2303 	umull	r2, r3, r2, r3
 800b446:	099b      	lsrs	r3, r3, #6
 800b448:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b44c:	3380      	adds	r3, #128	; 0x80
 800b44e:	0a1b      	lsrs	r3, r3, #8
 800b450:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d008      	beq.n	800b46a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	085a      	lsrs	r2, r3, #1
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	441a      	add	r2, r3
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	fbb2 f3f3 	udiv	r3, r2, r3
 800b466:	65bb      	str	r3, [r7, #88]	; 0x58
 800b468:	e001      	b.n	800b46e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b46e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b470:	f7fe f9ba 	bl	80097e8 <VL53L0X_isqrt>
 800b474:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d008      	beq.n	800b48e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	085a      	lsrs	r2, r3, #1
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	441a      	add	r2, r3
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	fbb2 f3f3 	udiv	r3, r2, r3
 800b48a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b48c:	e001      	b.n	800b492 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b492:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b494:	f7fe f9a8 	bl	80097e8 <VL53L0X_isqrt>
 800b498:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b49a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d902      	bls.n	800b4ae <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b4a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4ac:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b4ae:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3768      	adds	r7, #104	; 0x68
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	fff00000 	.word	0xfff00000
 800b4c0:	10624dd3 	.word	0x10624dd3

0800b4c4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b0b4      	sub	sp, #208	; 0xd0
 800b4c8:	af04      	add	r7, sp, #16
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b4d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b4d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b4da:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b4de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b4e2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b4e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b4ea:	f241 235c 	movw	r3, #4700	; 0x125c
 800b4ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b4f2:	4b9e      	ldr	r3, [pc, #632]	; (800b76c <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b4f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b4f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b4fc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b4fe:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b506:	fbb2 f3f3 	udiv	r3, r2, r3
 800b50a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b50c:	4b98      	ldr	r3, [pc, #608]	; (800b770 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b50e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b514:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b516:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b51a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b51c:	f240 6377 	movw	r3, #1655	; 0x677
 800b520:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b522:	2300      	movs	r3, #0
 800b524:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b536:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b53a:	0c1b      	lsrs	r3, r3, #16
 800b53c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b544:	f107 0310 	add.w	r3, r7, #16
 800b548:	461a      	mov	r2, r3
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff fe78 	bl	800b242 <VL53L0X_get_total_signal_rate>
 800b552:	4603      	mov	r3, r0
 800b554:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b558:	f107 0314 	add.w	r3, r7, #20
 800b55c:	461a      	mov	r2, r3
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f7ff fe3f 	bl	800b1e4 <VL53L0X_get_total_xtalk_rate>
 800b566:	4603      	mov	r3, r0
 800b568:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b572:	fb02 f303 	mul.w	r3, r2, r3
 800b576:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b57a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b588:	fb02 f303 	mul.w	r3, r2, r3
 800b58c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b590:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b596:	429a      	cmp	r2, r3
 800b598:	d902      	bls.n	800b5a0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b59a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b59c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b5a0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d168      	bne.n	800b67a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b5ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b5b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b5bc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7fe feb2 	bl	800a330 <VL53L0X_calc_timeout_mclks>
 800b5cc:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b5d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b5de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b5e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7fe fe9f 	bl	800a330 <VL53L0X_calc_timeout_mclks>
 800b5f2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b5fa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b5fe:	2b08      	cmp	r3, #8
 800b600:	d102      	bne.n	800b608 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b602:	2302      	movs	r3, #2
 800b604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b60c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b60e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b612:	fb02 f303 	mul.w	r3, r2, r3
 800b616:	02db      	lsls	r3, r3, #11
 800b618:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b61c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b620:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b624:	4a53      	ldr	r2, [pc, #332]	; (800b774 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b626:	fba2 2303 	umull	r2, r3, r2, r3
 800b62a:	099b      	lsrs	r3, r3, #6
 800b62c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b630:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b634:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b636:	fb02 f303 	mul.w	r3, r2, r3
 800b63a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b63e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b642:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b646:	4a4b      	ldr	r2, [pc, #300]	; (800b774 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b648:	fba2 2303 	umull	r2, r3, r2, r3
 800b64c:	099b      	lsrs	r3, r3, #6
 800b64e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3380      	adds	r3, #128	; 0x80
 800b656:	0a1b      	lsrs	r3, r3, #8
 800b658:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b660:	fb02 f303 	mul.w	r3, r2, r3
 800b664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b66c:	3380      	adds	r3, #128	; 0x80
 800b66e:	0a1b      	lsrs	r3, r3, #8
 800b670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	021b      	lsls	r3, r3, #8
 800b678:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b67a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d002      	beq.n	800b688 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b682:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b686:	e15e      	b.n	800b946 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10c      	bne.n	800b6a8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b694:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b69c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	e14c      	b.n	800b942 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b6a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d102      	bne.n	800b6b6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b6b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6ba:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6be:	041a      	lsls	r2, r3, #16
 800b6c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b6ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b6ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d902      	bls.n	800b6da <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b6da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b6de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b6e2:	fb02 f303 	mul.w	r3, r2, r3
 800b6e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b6ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe f876 	bl	80097e8 <VL53L0X_isqrt>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	891b      	ldrh	r3, [r3, #8]
 800b706:	461a      	mov	r2, r3
 800b708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b70a:	fb02 f303 	mul.w	r3, r2, r3
 800b70e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b712:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b718:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b71a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b71c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b720:	4a14      	ldr	r2, [pc, #80]	; (800b774 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b722:	fba2 2303 	umull	r2, r3, r2, r3
 800b726:	099b      	lsrs	r3, r3, #6
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b72a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b72c:	041b      	lsls	r3, r3, #16
 800b72e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b732:	4a10      	ldr	r2, [pc, #64]	; (800b774 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b734:	fba2 2303 	umull	r2, r3, r2, r3
 800b738:	099b      	lsrs	r3, r3, #6
 800b73a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73e:	021b      	lsls	r3, r3, #8
 800b740:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bfb8      	it	lt
 800b74e:	425b      	neglt	r3, r3
 800b750:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	021b      	lsls	r3, r3, #8
 800b756:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	7e1b      	ldrb	r3, [r3, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b768:	e033      	b.n	800b7d2 <VL53L0X_calc_sigma_estimate+0x30e>
 800b76a:	bf00      	nop
 800b76c:	028f87ae 	.word	0x028f87ae
 800b770:	0006999a 	.word	0x0006999a
 800b774:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b77a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b788:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b78c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b790:	fb02 f303 	mul.w	r3, r2, r3
 800b794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b798:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b79c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b79e:	4413      	add	r3, r2
 800b7a0:	0c1b      	lsrs	r3, r3, #16
 800b7a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b7a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7aa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b7ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b7b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7b6:	085b      	lsrs	r3, r3, #1
 800b7b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b7bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7c0:	fb03 f303 	mul.w	r3, r3, r3
 800b7c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b7c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7cc:	0b9b      	lsrs	r3, r3, #14
 800b7ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b7d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7d8:	fb02 f303 	mul.w	r3, r2, r3
 800b7dc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b7e4:	0c1b      	lsrs	r3, r3, #16
 800b7e6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	fb03 f303 	mul.w	r3, r3, r3
 800b7ee:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b7f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b7fc:	0c1b      	lsrs	r3, r3, #16
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	fb03 f303 	mul.w	r3, r3, r3
 800b806:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	4413      	add	r3, r2
 800b80e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b812:	f7fd ffe9 	bl	80097e8 <VL53L0X_isqrt>
 800b816:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	041b      	lsls	r3, r3, #16
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	3332      	adds	r3, #50	; 0x32
 800b822:	4a4b      	ldr	r2, [pc, #300]	; (800b950 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b824:	fba2 2303 	umull	r2, r3, r2, r3
 800b828:	095a      	lsrs	r2, r3, #5
 800b82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b838:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b83c:	fb02 f303 	mul.w	r3, r2, r3
 800b840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b848:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b84c:	3308      	adds	r3, #8
 800b84e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b856:	4a3f      	ldr	r2, [pc, #252]	; (800b954 <VL53L0X_calc_sigma_estimate+0x490>)
 800b858:	fba2 2303 	umull	r2, r3, r2, r3
 800b85c:	0b5b      	lsrs	r3, r3, #13
 800b85e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b868:	429a      	cmp	r2, r3
 800b86a:	d902      	bls.n	800b872 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b86c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b86e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b872:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b880:	4a35      	ldr	r2, [pc, #212]	; (800b958 <VL53L0X_calc_sigma_estimate+0x494>)
 800b882:	fba2 2303 	umull	r2, r3, r2, r3
 800b886:	099b      	lsrs	r3, r3, #6
 800b888:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b88e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b892:	441a      	add	r2, r3
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fd ffa4 	bl	80097e8 <VL53L0X_isqrt>
 800b8a0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	021b      	lsls	r3, r3, #8
 800b8a6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b8ae:	4a2a      	ldr	r2, [pc, #168]	; (800b958 <VL53L0X_calc_sigma_estimate+0x494>)
 800b8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b4:	099b      	lsrs	r3, r3, #6
 800b8b6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b8b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8bc:	fb03 f303 	mul.w	r3, r3, r3
 800b8c0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	fb03 f303 	mul.w	r3, r3, r3
 800b8c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ce:	4413      	add	r3, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fd ff89 	bl	80097e8 <VL53L0X_isqrt>
 800b8d6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8de:	fb02 f303 	mul.w	r3, r2, r3
 800b8e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b8e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d009      	beq.n	800b900 <VL53L0X_calc_sigma_estimate+0x43c>
 800b8ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <VL53L0X_calc_sigma_estimate+0x43c>
 800b8f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b8f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d903      	bls.n	800b908 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b90e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b91a:	6939      	ldr	r1, [r7, #16]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b924:	9302      	str	r3, [sp, #8]
 800b926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b92a:	9301      	str	r3, [sp, #4]
 800b92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7ff fca8 	bl	800b28c <VL53L0X_calc_dmax>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b942:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b946:	4618      	mov	r0, r3
 800b948:	37c0      	adds	r7, #192	; 0xc0
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	51eb851f 	.word	0x51eb851f
 800b954:	d1b71759 	.word	0xd1b71759
 800b958:	10624dd3 	.word	0x10624dd3

0800b95c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b090      	sub	sp, #64	; 0x40
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	607a      	str	r2, [r7, #4]
 800b966:	461a      	mov	r2, r3
 800b968:	460b      	mov	r3, r1
 800b96a:	72fb      	strb	r3, [r7, #11]
 800b96c:	4613      	mov	r3, r2
 800b96e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b970:	2300      	movs	r3, #0
 800b972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b9ae:	7afb      	ldrb	r3, [r7, #11]
 800b9b0:	10db      	asrs	r3, r3, #3
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 030f 	and.w	r3, r3, #15
 800b9b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b9bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d017      	beq.n	800b9f4 <VL53L0X_get_pal_range_status+0x98>
 800b9c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d013      	beq.n	800b9f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b9cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9d0:	2b07      	cmp	r3, #7
 800b9d2:	d00f      	beq.n	800b9f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b9d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9d8:	2b0c      	cmp	r3, #12
 800b9da:	d00b      	beq.n	800b9f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b9dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9e0:	2b0d      	cmp	r3, #13
 800b9e2:	d007      	beq.n	800b9f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b9e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9e8:	2b0e      	cmp	r3, #14
 800b9ea:	d003      	beq.n	800b9f4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b9ec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9f0:	2b0f      	cmp	r3, #15
 800b9f2:	d103      	bne.n	800b9fc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b9fa:	e002      	b.n	800ba02 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ba02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d109      	bne.n	800ba1e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ba0a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ba0e:	461a      	mov	r2, r3
 800ba10:	2100      	movs	r1, #0
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7fc f9ec 	bl	8007df0 <VL53L0X_GetLimitCheckEnable>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800ba1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d02e      	beq.n	800ba84 <VL53L0X_get_pal_range_status+0x128>
 800ba26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d12a      	bne.n	800ba84 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800ba2e:	f107 0310 	add.w	r3, r7, #16
 800ba32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ba36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f7ff fd43 	bl	800b4c4 <VL53L0X_calc_sigma_estimate>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800ba44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d103      	bne.n	800ba54 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba52:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ba54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d113      	bne.n	800ba84 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ba5c:	f107 0320 	add.w	r3, r7, #32
 800ba60:	461a      	mov	r2, r3
 800ba62:	2100      	movs	r1, #0
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7fc fa49 	bl	8007efc <VL53L0X_GetLimitCheckValue>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ba70:	6a3b      	ldr	r3, [r7, #32]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d006      	beq.n	800ba84 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ba76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba78:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d902      	bls.n	800ba84 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ba84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d109      	bne.n	800baa0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ba8c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ba90:	461a      	mov	r2, r3
 800ba92:	2102      	movs	r1, #2
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f7fc f9ab 	bl	8007df0 <VL53L0X_GetLimitCheckEnable>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800baa0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d044      	beq.n	800bb32 <VL53L0X_get_pal_range_status+0x1d6>
 800baa8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800baac:	2b00      	cmp	r3, #0
 800baae:	d140      	bne.n	800bb32 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bab0:	f107 031c 	add.w	r3, r7, #28
 800bab4:	461a      	mov	r2, r3
 800bab6:	2102      	movs	r1, #2
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7fc fa1f 	bl	8007efc <VL53L0X_GetLimitCheckValue>
 800babe:	4603      	mov	r3, r0
 800bac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800bac4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d107      	bne.n	800badc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bacc:	2201      	movs	r2, #1
 800bace:	21ff      	movs	r1, #255	; 0xff
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f000 f9bb 	bl	800be4c <VL53L0X_WrByte>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800badc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d109      	bne.n	800baf8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800bae4:	f107 0316 	add.w	r3, r7, #22
 800bae8:	461a      	mov	r2, r3
 800baea:	21b6      	movs	r1, #182	; 0xb6
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f000 fa59 	bl	800bfa4 <VL53L0X_RdWord>
 800baf2:	4603      	mov	r3, r0
 800baf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800baf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d107      	bne.n	800bb10 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bb00:	2200      	movs	r2, #0
 800bb02:	21ff      	movs	r1, #255	; 0xff
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f9a1 	bl	800be4c <VL53L0X_WrByte>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800bb10:	8afb      	ldrh	r3, [r7, #22]
 800bb12:	025b      	lsls	r3, r3, #9
 800bb14:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb1a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d006      	beq.n	800bb32 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800bb24:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800bb26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d902      	bls.n	800bb32 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bb32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d109      	bne.n	800bb4e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bb3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb3e:	461a      	mov	r2, r3
 800bb40:	2103      	movs	r1, #3
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f7fc f954 	bl	8007df0 <VL53L0X_GetLimitCheckEnable>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800bb4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d023      	beq.n	800bb9e <VL53L0X_get_pal_range_status+0x242>
 800bb56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d11f      	bne.n	800bb9e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800bb5e:	893b      	ldrh	r3, [r7, #8]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d102      	bne.n	800bb6a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
 800bb68:	e005      	b.n	800bb76 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	021a      	lsls	r2, r3, #8
 800bb6e:	893b      	ldrh	r3, [r7, #8]
 800bb70:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb74:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bb76:	f107 0318 	add.w	r3, r7, #24
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	2103      	movs	r1, #3
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f7fc f9bc 	bl	8007efc <VL53L0X_GetLimitCheckValue>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d006      	beq.n	800bb9e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800bb90:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800bb92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d202      	bcs.n	800bb9e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d14a      	bne.n	800bc3c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800bba6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d103      	bne.n	800bbb6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800bbae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb0:	22ff      	movs	r2, #255	; 0xff
 800bbb2:	701a      	strb	r2, [r3, #0]
 800bbb4:	e042      	b.n	800bc3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bbb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d007      	beq.n	800bbce <VL53L0X_get_pal_range_status+0x272>
 800bbbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d003      	beq.n	800bbce <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800bbc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d103      	bne.n	800bbd6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bbce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd0:	2205      	movs	r2, #5
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	e032      	b.n	800bc3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bbd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbda:	2b06      	cmp	r3, #6
 800bbdc:	d003      	beq.n	800bbe6 <VL53L0X_get_pal_range_status+0x28a>
 800bbde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbe2:	2b09      	cmp	r3, #9
 800bbe4:	d103      	bne.n	800bbee <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bbe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe8:	2204      	movs	r2, #4
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e026      	b.n	800bc3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bbee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbf2:	2b08      	cmp	r3, #8
 800bbf4:	d007      	beq.n	800bc06 <VL53L0X_get_pal_range_status+0x2aa>
 800bbf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbfa:	2b0a      	cmp	r3, #10
 800bbfc:	d003      	beq.n	800bc06 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800bbfe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d103      	bne.n	800bc0e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc08:	2203      	movs	r2, #3
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	e016      	b.n	800bc3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800bc0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc12:	2b04      	cmp	r3, #4
 800bc14:	d003      	beq.n	800bc1e <VL53L0X_get_pal_range_status+0x2c2>
 800bc16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d103      	bne.n	800bc26 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc20:	2202      	movs	r2, #2
 800bc22:	701a      	strb	r2, [r3, #0]
 800bc24:	e00a      	b.n	800bc3c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800bc26:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d103      	bne.n	800bc36 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bc2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc30:	2201      	movs	r2, #1
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	e002      	b.n	800bc3c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800bc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bc44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc46:	2200      	movs	r2, #0
 800bc48:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bc4a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bc4e:	461a      	mov	r2, r3
 800bc50:	2101      	movs	r1, #1
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f7fc f8cc 	bl	8007df0 <VL53L0X_GetLimitCheckEnable>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bc5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d14f      	bne.n	800bd06 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bc66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <VL53L0X_get_pal_range_status+0x31a>
 800bc6e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d103      	bne.n	800bc7e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800bc76:	2301      	movs	r3, #1
 800bc78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc7c:	e002      	b.n	800bc84 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bc8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bc8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc92:	2b04      	cmp	r3, #4
 800bc94:	d003      	beq.n	800bc9e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bc96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d103      	bne.n	800bca6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca4:	e002      	b.n	800bcac <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bcb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bcb6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <VL53L0X_get_pal_range_status+0x36a>
 800bcbe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d103      	bne.n	800bcce <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bccc:	e002      	b.n	800bcd4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bcda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bcde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <VL53L0X_get_pal_range_status+0x392>
 800bce6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d103      	bne.n	800bcf6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf4:	e002      	b.n	800bcfc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3740      	adds	r7, #64	; 0x40
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b088      	sub	sp, #32
 800bd16:	af02      	add	r7, sp, #8
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	330a      	adds	r3, #10
 800bd22:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bd30:	b299      	uxth	r1, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	f7f6 f9e3 	bl	8002108 <HAL_I2C_Master_Transmit>
 800bd42:	4603      	mov	r3, r0
 800bd44:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bd46:	693b      	ldr	r3, [r7, #16]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b088      	sub	sp, #32
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	330a      	adds	r3, #10
 800bd60:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800bd6e:	f043 0301 	orr.w	r3, r3, #1
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	b299      	uxth	r1, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	f7f6 fab5 	bl	80022f0 <HAL_I2C_Master_Receive>
 800bd86:	4603      	mov	r3, r0
 800bd88:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bd8a:	693b      	ldr	r3, [r7, #16]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	607a      	str	r2, [r7, #4]
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	460b      	mov	r3, r1
 800bda2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bda4:	2300      	movs	r3, #0
 800bda6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2b3f      	cmp	r3, #63	; 0x3f
 800bdac:	d902      	bls.n	800bdb4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800bdae:	f06f 0303 	mvn.w	r3, #3
 800bdb2:	e016      	b.n	800bde2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800bdb4:	4a0d      	ldr	r2, [pc, #52]	; (800bdec <VL53L0X_WriteMulti+0x58>)
 800bdb6:	7afb      	ldrb	r3, [r7, #11]
 800bdb8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	480c      	ldr	r0, [pc, #48]	; (800bdf0 <VL53L0X_WriteMulti+0x5c>)
 800bdc0:	f000 f99e 	bl	800c100 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4908      	ldr	r1, [pc, #32]	; (800bdec <VL53L0X_WriteMulti+0x58>)
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f7ff ffa0 	bl	800bd12 <_I2CWrite>
 800bdd2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d001      	beq.n	800bdde <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bdda:	23ec      	movs	r3, #236	; 0xec
 800bddc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bdde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20000838 	.word	0x20000838
 800bdf0:	20000839 	.word	0x20000839

0800bdf4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	607a      	str	r2, [r7, #4]
 800bdfe:	603b      	str	r3, [r7, #0]
 800be00:	460b      	mov	r3, r1
 800be02:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be04:	2300      	movs	r3, #0
 800be06:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800be08:	f107 030b 	add.w	r3, r7, #11
 800be0c:	2201      	movs	r2, #1
 800be0e:	4619      	mov	r1, r3
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff ff7e 	bl	800bd12 <_I2CWrite>
 800be16:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be1e:	23ec      	movs	r3, #236	; 0xec
 800be20:	75fb      	strb	r3, [r7, #23]
        goto done;
 800be22:	e00c      	b.n	800be3e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f7ff ff91 	bl	800bd50 <_I2CRead>
 800be2e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be36:	23ec      	movs	r3, #236	; 0xec
 800be38:	75fb      	strb	r3, [r7, #23]
 800be3a:	e000      	b.n	800be3e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800be3c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800be3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
	...

0800be4c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
 800be58:	4613      	mov	r3, r2
 800be5a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800be60:	4a0b      	ldr	r2, [pc, #44]	; (800be90 <VL53L0X_WrByte+0x44>)
 800be62:	78fb      	ldrb	r3, [r7, #3]
 800be64:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800be66:	4a0a      	ldr	r2, [pc, #40]	; (800be90 <VL53L0X_WrByte+0x44>)
 800be68:	78bb      	ldrb	r3, [r7, #2]
 800be6a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800be6c:	2202      	movs	r2, #2
 800be6e:	4908      	ldr	r1, [pc, #32]	; (800be90 <VL53L0X_WrByte+0x44>)
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff ff4e 	bl	800bd12 <_I2CWrite>
 800be76:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be7e:	23ec      	movs	r3, #236	; 0xec
 800be80:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800be82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000838 	.word	0x20000838

0800be94 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	460b      	mov	r3, r1
 800be9e:	70fb      	strb	r3, [r7, #3]
 800bea0:	4613      	mov	r3, r2
 800bea2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bea8:	4a0e      	ldr	r2, [pc, #56]	; (800bee4 <VL53L0X_WrWord+0x50>)
 800beaa:	78fb      	ldrb	r3, [r7, #3]
 800beac:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800beae:	883b      	ldrh	r3, [r7, #0]
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	4b0b      	ldr	r3, [pc, #44]	; (800bee4 <VL53L0X_WrWord+0x50>)
 800beb8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800beba:	883b      	ldrh	r3, [r7, #0]
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <VL53L0X_WrWord+0x50>)
 800bec0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bec2:	2203      	movs	r2, #3
 800bec4:	4907      	ldr	r1, [pc, #28]	; (800bee4 <VL53L0X_WrWord+0x50>)
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7ff ff23 	bl	800bd12 <_I2CWrite>
 800becc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bed4:	23ec      	movs	r3, #236	; 0xec
 800bed6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	20000838 	.word	0x20000838

0800bee8 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	4608      	mov	r0, r1
 800bef2:	4611      	mov	r1, r2
 800bef4:	461a      	mov	r2, r3
 800bef6:	4603      	mov	r3, r0
 800bef8:	70fb      	strb	r3, [r7, #3]
 800befa:	460b      	mov	r3, r1
 800befc:	70bb      	strb	r3, [r7, #2]
 800befe:	4613      	mov	r3, r2
 800bf00:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bf06:	f107 020e 	add.w	r2, r7, #14
 800bf0a:	78fb      	ldrb	r3, [r7, #3]
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f81e 	bl	800bf50 <VL53L0X_RdByte>
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bf18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d110      	bne.n	800bf42 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bf20:	7bba      	ldrb	r2, [r7, #14]
 800bf22:	78bb      	ldrb	r3, [r7, #2]
 800bf24:	4013      	ands	r3, r2
 800bf26:	b2da      	uxtb	r2, r3
 800bf28:	787b      	ldrb	r3, [r7, #1]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bf30:	7bba      	ldrb	r2, [r7, #14]
 800bf32:	78fb      	ldrb	r3, [r7, #3]
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff ff88 	bl	800be4c <VL53L0X_WrByte>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73fb      	strb	r3, [r7, #15]
 800bf40:	e000      	b.n	800bf44 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bf42:	bf00      	nop
done:
    return Status;
 800bf44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	607a      	str	r2, [r7, #4]
 800bf5c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bf62:	f107 030b 	add.w	r3, r7, #11
 800bf66:	2201      	movs	r2, #1
 800bf68:	4619      	mov	r1, r3
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f7ff fed1 	bl	800bd12 <_I2CWrite>
 800bf70:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf78:	23ec      	movs	r3, #236	; 0xec
 800bf7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bf7c:	e00c      	b.n	800bf98 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bf7e:	2201      	movs	r2, #1
 800bf80:	6879      	ldr	r1, [r7, #4]
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f7ff fee4 	bl	800bd50 <_I2CRead>
 800bf88:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf90:	23ec      	movs	r3, #236	; 0xec
 800bf92:	75fb      	strb	r3, [r7, #23]
 800bf94:	e000      	b.n	800bf98 <VL53L0X_RdByte+0x48>
    }
done:
 800bf96:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bf98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	460b      	mov	r3, r1
 800bfae:	607a      	str	r2, [r7, #4]
 800bfb0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bfb6:	f107 030b 	add.w	r3, r7, #11
 800bfba:	2201      	movs	r2, #1
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f7ff fea7 	bl	800bd12 <_I2CWrite>
 800bfc4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bfcc:	23ec      	movs	r3, #236	; 0xec
 800bfce:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bfd0:	e017      	b.n	800c002 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	490e      	ldr	r1, [pc, #56]	; (800c010 <VL53L0X_RdWord+0x6c>)
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff feba 	bl	800bd50 <_I2CRead>
 800bfdc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bfe4:	23ec      	movs	r3, #236	; 0xec
 800bfe6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bfe8:	e00b      	b.n	800c002 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bfea:	4b09      	ldr	r3, [pc, #36]	; (800c010 <VL53L0X_RdWord+0x6c>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	021b      	lsls	r3, r3, #8
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	4b06      	ldr	r3, [pc, #24]	; (800c010 <VL53L0X_RdWord+0x6c>)
 800bff6:	785b      	ldrb	r3, [r3, #1]
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	4413      	add	r3, r2
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800c002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20000838 	.word	0x20000838

0800c014 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	460b      	mov	r3, r1
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c022:	2300      	movs	r3, #0
 800c024:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c026:	f107 030b 	add.w	r3, r7, #11
 800c02a:	2201      	movs	r2, #1
 800c02c:	4619      	mov	r1, r3
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7ff fe6f 	bl	800bd12 <_I2CWrite>
 800c034:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c03c:	23ec      	movs	r3, #236	; 0xec
 800c03e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c040:	e01b      	b.n	800c07a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c042:	2204      	movs	r2, #4
 800c044:	4910      	ldr	r1, [pc, #64]	; (800c088 <VL53L0X_RdDWord+0x74>)
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f7ff fe82 	bl	800bd50 <_I2CRead>
 800c04c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c054:	23ec      	movs	r3, #236	; 0xec
 800c056:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c058:	e00f      	b.n	800c07a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c05a:	4b0b      	ldr	r3, [pc, #44]	; (800c088 <VL53L0X_RdDWord+0x74>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	061a      	lsls	r2, r3, #24
 800c060:	4b09      	ldr	r3, [pc, #36]	; (800c088 <VL53L0X_RdDWord+0x74>)
 800c062:	785b      	ldrb	r3, [r3, #1]
 800c064:	041b      	lsls	r3, r3, #16
 800c066:	441a      	add	r2, r3
 800c068:	4b07      	ldr	r3, [pc, #28]	; (800c088 <VL53L0X_RdDWord+0x74>)
 800c06a:	789b      	ldrb	r3, [r3, #2]
 800c06c:	021b      	lsls	r3, r3, #8
 800c06e:	4413      	add	r3, r2
 800c070:	4a05      	ldr	r2, [pc, #20]	; (800c088 <VL53L0X_RdDWord+0x74>)
 800c072:	78d2      	ldrb	r2, [r2, #3]
 800c074:	441a      	add	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800c07a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20000838 	.word	0x20000838

0800c08c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c094:	2300      	movs	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c098:	2002      	movs	r0, #2
 800c09a:	f7f5 fc0b 	bl	80018b4 <HAL_Delay>
    return status;
 800c09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
	...

0800c0ac <__errno>:
 800c0ac:	4b01      	ldr	r3, [pc, #4]	; (800c0b4 <__errno+0x8>)
 800c0ae:	6818      	ldr	r0, [r3, #0]
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	200002cc 	.word	0x200002cc

0800c0b8 <__libc_init_array>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	4d0d      	ldr	r5, [pc, #52]	; (800c0f0 <__libc_init_array+0x38>)
 800c0bc:	4c0d      	ldr	r4, [pc, #52]	; (800c0f4 <__libc_init_array+0x3c>)
 800c0be:	1b64      	subs	r4, r4, r5
 800c0c0:	10a4      	asrs	r4, r4, #2
 800c0c2:	2600      	movs	r6, #0
 800c0c4:	42a6      	cmp	r6, r4
 800c0c6:	d109      	bne.n	800c0dc <__libc_init_array+0x24>
 800c0c8:	4d0b      	ldr	r5, [pc, #44]	; (800c0f8 <__libc_init_array+0x40>)
 800c0ca:	4c0c      	ldr	r4, [pc, #48]	; (800c0fc <__libc_init_array+0x44>)
 800c0cc:	f000 fc96 	bl	800c9fc <_init>
 800c0d0:	1b64      	subs	r4, r4, r5
 800c0d2:	10a4      	asrs	r4, r4, #2
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	42a6      	cmp	r6, r4
 800c0d8:	d105      	bne.n	800c0e6 <__libc_init_array+0x2e>
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e0:	4798      	blx	r3
 800c0e2:	3601      	adds	r6, #1
 800c0e4:	e7ee      	b.n	800c0c4 <__libc_init_array+0xc>
 800c0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ea:	4798      	blx	r3
 800c0ec:	3601      	adds	r6, #1
 800c0ee:	e7f2      	b.n	800c0d6 <__libc_init_array+0x1e>
 800c0f0:	0800caf8 	.word	0x0800caf8
 800c0f4:	0800caf8 	.word	0x0800caf8
 800c0f8:	0800caf8 	.word	0x0800caf8
 800c0fc:	0800cafc 	.word	0x0800cafc

0800c100 <memcpy>:
 800c100:	440a      	add	r2, r1
 800c102:	4291      	cmp	r1, r2
 800c104:	f100 33ff 	add.w	r3, r0, #4294967295
 800c108:	d100      	bne.n	800c10c <memcpy+0xc>
 800c10a:	4770      	bx	lr
 800c10c:	b510      	push	{r4, lr}
 800c10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c116:	4291      	cmp	r1, r2
 800c118:	d1f9      	bne.n	800c10e <memcpy+0xe>
 800c11a:	bd10      	pop	{r4, pc}

0800c11c <memset>:
 800c11c:	4402      	add	r2, r0
 800c11e:	4603      	mov	r3, r0
 800c120:	4293      	cmp	r3, r2
 800c122:	d100      	bne.n	800c126 <memset+0xa>
 800c124:	4770      	bx	lr
 800c126:	f803 1b01 	strb.w	r1, [r3], #1
 800c12a:	e7f9      	b.n	800c120 <memset+0x4>

0800c12c <siprintf>:
 800c12c:	b40e      	push	{r1, r2, r3}
 800c12e:	b500      	push	{lr}
 800c130:	b09c      	sub	sp, #112	; 0x70
 800c132:	ab1d      	add	r3, sp, #116	; 0x74
 800c134:	9002      	str	r0, [sp, #8]
 800c136:	9006      	str	r0, [sp, #24]
 800c138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c13c:	4809      	ldr	r0, [pc, #36]	; (800c164 <siprintf+0x38>)
 800c13e:	9107      	str	r1, [sp, #28]
 800c140:	9104      	str	r1, [sp, #16]
 800c142:	4909      	ldr	r1, [pc, #36]	; (800c168 <siprintf+0x3c>)
 800c144:	f853 2b04 	ldr.w	r2, [r3], #4
 800c148:	9105      	str	r1, [sp, #20]
 800c14a:	6800      	ldr	r0, [r0, #0]
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	a902      	add	r1, sp, #8
 800c150:	f000 f870 	bl	800c234 <_svfiprintf_r>
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	b01c      	add	sp, #112	; 0x70
 800c15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c160:	b003      	add	sp, #12
 800c162:	4770      	bx	lr
 800c164:	200002cc 	.word	0x200002cc
 800c168:	ffff0208 	.word	0xffff0208

0800c16c <strcpy>:
 800c16c:	4603      	mov	r3, r0
 800c16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c172:	f803 2b01 	strb.w	r2, [r3], #1
 800c176:	2a00      	cmp	r2, #0
 800c178:	d1f9      	bne.n	800c16e <strcpy+0x2>
 800c17a:	4770      	bx	lr

0800c17c <__ssputs_r>:
 800c17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c180:	688e      	ldr	r6, [r1, #8]
 800c182:	429e      	cmp	r6, r3
 800c184:	4682      	mov	sl, r0
 800c186:	460c      	mov	r4, r1
 800c188:	4690      	mov	r8, r2
 800c18a:	461f      	mov	r7, r3
 800c18c:	d838      	bhi.n	800c200 <__ssputs_r+0x84>
 800c18e:	898a      	ldrh	r2, [r1, #12]
 800c190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c194:	d032      	beq.n	800c1fc <__ssputs_r+0x80>
 800c196:	6825      	ldr	r5, [r4, #0]
 800c198:	6909      	ldr	r1, [r1, #16]
 800c19a:	eba5 0901 	sub.w	r9, r5, r1
 800c19e:	6965      	ldr	r5, [r4, #20]
 800c1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	444b      	add	r3, r9
 800c1ac:	106d      	asrs	r5, r5, #1
 800c1ae:	429d      	cmp	r5, r3
 800c1b0:	bf38      	it	cc
 800c1b2:	461d      	movcc	r5, r3
 800c1b4:	0553      	lsls	r3, r2, #21
 800c1b6:	d531      	bpl.n	800c21c <__ssputs_r+0xa0>
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	f000 fb55 	bl	800c868 <_malloc_r>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	b950      	cbnz	r0, 800c1d8 <__ssputs_r+0x5c>
 800c1c2:	230c      	movs	r3, #12
 800c1c4:	f8ca 3000 	str.w	r3, [sl]
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d8:	6921      	ldr	r1, [r4, #16]
 800c1da:	464a      	mov	r2, r9
 800c1dc:	f7ff ff90 	bl	800c100 <memcpy>
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ea:	81a3      	strh	r3, [r4, #12]
 800c1ec:	6126      	str	r6, [r4, #16]
 800c1ee:	6165      	str	r5, [r4, #20]
 800c1f0:	444e      	add	r6, r9
 800c1f2:	eba5 0509 	sub.w	r5, r5, r9
 800c1f6:	6026      	str	r6, [r4, #0]
 800c1f8:	60a5      	str	r5, [r4, #8]
 800c1fa:	463e      	mov	r6, r7
 800c1fc:	42be      	cmp	r6, r7
 800c1fe:	d900      	bls.n	800c202 <__ssputs_r+0x86>
 800c200:	463e      	mov	r6, r7
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	4632      	mov	r2, r6
 800c206:	4641      	mov	r1, r8
 800c208:	f000 faa8 	bl	800c75c <memmove>
 800c20c:	68a3      	ldr	r3, [r4, #8]
 800c20e:	1b9b      	subs	r3, r3, r6
 800c210:	60a3      	str	r3, [r4, #8]
 800c212:	6823      	ldr	r3, [r4, #0]
 800c214:	4433      	add	r3, r6
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	2000      	movs	r0, #0
 800c21a:	e7db      	b.n	800c1d4 <__ssputs_r+0x58>
 800c21c:	462a      	mov	r2, r5
 800c21e:	f000 fb97 	bl	800c950 <_realloc_r>
 800c222:	4606      	mov	r6, r0
 800c224:	2800      	cmp	r0, #0
 800c226:	d1e1      	bne.n	800c1ec <__ssputs_r+0x70>
 800c228:	6921      	ldr	r1, [r4, #16]
 800c22a:	4650      	mov	r0, sl
 800c22c:	f000 fab0 	bl	800c790 <_free_r>
 800c230:	e7c7      	b.n	800c1c2 <__ssputs_r+0x46>
	...

0800c234 <_svfiprintf_r>:
 800c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	4698      	mov	r8, r3
 800c23a:	898b      	ldrh	r3, [r1, #12]
 800c23c:	061b      	lsls	r3, r3, #24
 800c23e:	b09d      	sub	sp, #116	; 0x74
 800c240:	4607      	mov	r7, r0
 800c242:	460d      	mov	r5, r1
 800c244:	4614      	mov	r4, r2
 800c246:	d50e      	bpl.n	800c266 <_svfiprintf_r+0x32>
 800c248:	690b      	ldr	r3, [r1, #16]
 800c24a:	b963      	cbnz	r3, 800c266 <_svfiprintf_r+0x32>
 800c24c:	2140      	movs	r1, #64	; 0x40
 800c24e:	f000 fb0b 	bl	800c868 <_malloc_r>
 800c252:	6028      	str	r0, [r5, #0]
 800c254:	6128      	str	r0, [r5, #16]
 800c256:	b920      	cbnz	r0, 800c262 <_svfiprintf_r+0x2e>
 800c258:	230c      	movs	r3, #12
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	e0d1      	b.n	800c406 <_svfiprintf_r+0x1d2>
 800c262:	2340      	movs	r3, #64	; 0x40
 800c264:	616b      	str	r3, [r5, #20]
 800c266:	2300      	movs	r3, #0
 800c268:	9309      	str	r3, [sp, #36]	; 0x24
 800c26a:	2320      	movs	r3, #32
 800c26c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c270:	f8cd 800c 	str.w	r8, [sp, #12]
 800c274:	2330      	movs	r3, #48	; 0x30
 800c276:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c420 <_svfiprintf_r+0x1ec>
 800c27a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c27e:	f04f 0901 	mov.w	r9, #1
 800c282:	4623      	mov	r3, r4
 800c284:	469a      	mov	sl, r3
 800c286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c28a:	b10a      	cbz	r2, 800c290 <_svfiprintf_r+0x5c>
 800c28c:	2a25      	cmp	r2, #37	; 0x25
 800c28e:	d1f9      	bne.n	800c284 <_svfiprintf_r+0x50>
 800c290:	ebba 0b04 	subs.w	fp, sl, r4
 800c294:	d00b      	beq.n	800c2ae <_svfiprintf_r+0x7a>
 800c296:	465b      	mov	r3, fp
 800c298:	4622      	mov	r2, r4
 800c29a:	4629      	mov	r1, r5
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff ff6d 	bl	800c17c <__ssputs_r>
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	f000 80aa 	beq.w	800c3fc <_svfiprintf_r+0x1c8>
 800c2a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2aa:	445a      	add	r2, fp
 800c2ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f000 80a2 	beq.w	800c3fc <_svfiprintf_r+0x1c8>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c2be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2c2:	f10a 0a01 	add.w	sl, sl, #1
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	9307      	str	r3, [sp, #28]
 800c2ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c2d0:	4654      	mov	r4, sl
 800c2d2:	2205      	movs	r2, #5
 800c2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d8:	4851      	ldr	r0, [pc, #324]	; (800c420 <_svfiprintf_r+0x1ec>)
 800c2da:	f7f3 ff91 	bl	8000200 <memchr>
 800c2de:	9a04      	ldr	r2, [sp, #16]
 800c2e0:	b9d8      	cbnz	r0, 800c31a <_svfiprintf_r+0xe6>
 800c2e2:	06d0      	lsls	r0, r2, #27
 800c2e4:	bf44      	itt	mi
 800c2e6:	2320      	movmi	r3, #32
 800c2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ec:	0711      	lsls	r1, r2, #28
 800c2ee:	bf44      	itt	mi
 800c2f0:	232b      	movmi	r3, #43	; 0x2b
 800c2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c2fc:	d015      	beq.n	800c32a <_svfiprintf_r+0xf6>
 800c2fe:	9a07      	ldr	r2, [sp, #28]
 800c300:	4654      	mov	r4, sl
 800c302:	2000      	movs	r0, #0
 800c304:	f04f 0c0a 	mov.w	ip, #10
 800c308:	4621      	mov	r1, r4
 800c30a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c30e:	3b30      	subs	r3, #48	; 0x30
 800c310:	2b09      	cmp	r3, #9
 800c312:	d94e      	bls.n	800c3b2 <_svfiprintf_r+0x17e>
 800c314:	b1b0      	cbz	r0, 800c344 <_svfiprintf_r+0x110>
 800c316:	9207      	str	r2, [sp, #28]
 800c318:	e014      	b.n	800c344 <_svfiprintf_r+0x110>
 800c31a:	eba0 0308 	sub.w	r3, r0, r8
 800c31e:	fa09 f303 	lsl.w	r3, r9, r3
 800c322:	4313      	orrs	r3, r2
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	46a2      	mov	sl, r4
 800c328:	e7d2      	b.n	800c2d0 <_svfiprintf_r+0x9c>
 800c32a:	9b03      	ldr	r3, [sp, #12]
 800c32c:	1d19      	adds	r1, r3, #4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	9103      	str	r1, [sp, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfbb      	ittet	lt
 800c336:	425b      	neglt	r3, r3
 800c338:	f042 0202 	orrlt.w	r2, r2, #2
 800c33c:	9307      	strge	r3, [sp, #28]
 800c33e:	9307      	strlt	r3, [sp, #28]
 800c340:	bfb8      	it	lt
 800c342:	9204      	strlt	r2, [sp, #16]
 800c344:	7823      	ldrb	r3, [r4, #0]
 800c346:	2b2e      	cmp	r3, #46	; 0x2e
 800c348:	d10c      	bne.n	800c364 <_svfiprintf_r+0x130>
 800c34a:	7863      	ldrb	r3, [r4, #1]
 800c34c:	2b2a      	cmp	r3, #42	; 0x2a
 800c34e:	d135      	bne.n	800c3bc <_svfiprintf_r+0x188>
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	1d1a      	adds	r2, r3, #4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	9203      	str	r2, [sp, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	bfb8      	it	lt
 800c35c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c360:	3402      	adds	r4, #2
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c430 <_svfiprintf_r+0x1fc>
 800c368:	7821      	ldrb	r1, [r4, #0]
 800c36a:	2203      	movs	r2, #3
 800c36c:	4650      	mov	r0, sl
 800c36e:	f7f3 ff47 	bl	8000200 <memchr>
 800c372:	b140      	cbz	r0, 800c386 <_svfiprintf_r+0x152>
 800c374:	2340      	movs	r3, #64	; 0x40
 800c376:	eba0 000a 	sub.w	r0, r0, sl
 800c37a:	fa03 f000 	lsl.w	r0, r3, r0
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	4303      	orrs	r3, r0
 800c382:	3401      	adds	r4, #1
 800c384:	9304      	str	r3, [sp, #16]
 800c386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c38a:	4826      	ldr	r0, [pc, #152]	; (800c424 <_svfiprintf_r+0x1f0>)
 800c38c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c390:	2206      	movs	r2, #6
 800c392:	f7f3 ff35 	bl	8000200 <memchr>
 800c396:	2800      	cmp	r0, #0
 800c398:	d038      	beq.n	800c40c <_svfiprintf_r+0x1d8>
 800c39a:	4b23      	ldr	r3, [pc, #140]	; (800c428 <_svfiprintf_r+0x1f4>)
 800c39c:	bb1b      	cbnz	r3, 800c3e6 <_svfiprintf_r+0x1b2>
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	3307      	adds	r3, #7
 800c3a2:	f023 0307 	bic.w	r3, r3, #7
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	9303      	str	r3, [sp, #12]
 800c3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ac:	4433      	add	r3, r6
 800c3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b0:	e767      	b.n	800c282 <_svfiprintf_r+0x4e>
 800c3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	e7a5      	b.n	800c308 <_svfiprintf_r+0xd4>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	3401      	adds	r4, #1
 800c3c0:	9305      	str	r3, [sp, #20]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	f04f 0c0a 	mov.w	ip, #10
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ce:	3a30      	subs	r2, #48	; 0x30
 800c3d0:	2a09      	cmp	r2, #9
 800c3d2:	d903      	bls.n	800c3dc <_svfiprintf_r+0x1a8>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d0c5      	beq.n	800c364 <_svfiprintf_r+0x130>
 800c3d8:	9105      	str	r1, [sp, #20]
 800c3da:	e7c3      	b.n	800c364 <_svfiprintf_r+0x130>
 800c3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e7f0      	b.n	800c3c8 <_svfiprintf_r+0x194>
 800c3e6:	ab03      	add	r3, sp, #12
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	462a      	mov	r2, r5
 800c3ec:	4b0f      	ldr	r3, [pc, #60]	; (800c42c <_svfiprintf_r+0x1f8>)
 800c3ee:	a904      	add	r1, sp, #16
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	f3af 8000 	nop.w
 800c3f6:	1c42      	adds	r2, r0, #1
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	d1d6      	bne.n	800c3aa <_svfiprintf_r+0x176>
 800c3fc:	89ab      	ldrh	r3, [r5, #12]
 800c3fe:	065b      	lsls	r3, r3, #25
 800c400:	f53f af2c 	bmi.w	800c25c <_svfiprintf_r+0x28>
 800c404:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c406:	b01d      	add	sp, #116	; 0x74
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	ab03      	add	r3, sp, #12
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	462a      	mov	r2, r5
 800c412:	4b06      	ldr	r3, [pc, #24]	; (800c42c <_svfiprintf_r+0x1f8>)
 800c414:	a904      	add	r1, sp, #16
 800c416:	4638      	mov	r0, r7
 800c418:	f000 f87a 	bl	800c510 <_printf_i>
 800c41c:	e7eb      	b.n	800c3f6 <_svfiprintf_r+0x1c2>
 800c41e:	bf00      	nop
 800c420:	0800cabc 	.word	0x0800cabc
 800c424:	0800cac6 	.word	0x0800cac6
 800c428:	00000000 	.word	0x00000000
 800c42c:	0800c17d 	.word	0x0800c17d
 800c430:	0800cac2 	.word	0x0800cac2

0800c434 <_printf_common>:
 800c434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	4616      	mov	r6, r2
 800c43a:	4699      	mov	r9, r3
 800c43c:	688a      	ldr	r2, [r1, #8]
 800c43e:	690b      	ldr	r3, [r1, #16]
 800c440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c444:	4293      	cmp	r3, r2
 800c446:	bfb8      	it	lt
 800c448:	4613      	movlt	r3, r2
 800c44a:	6033      	str	r3, [r6, #0]
 800c44c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c450:	4607      	mov	r7, r0
 800c452:	460c      	mov	r4, r1
 800c454:	b10a      	cbz	r2, 800c45a <_printf_common+0x26>
 800c456:	3301      	adds	r3, #1
 800c458:	6033      	str	r3, [r6, #0]
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	0699      	lsls	r1, r3, #26
 800c45e:	bf42      	ittt	mi
 800c460:	6833      	ldrmi	r3, [r6, #0]
 800c462:	3302      	addmi	r3, #2
 800c464:	6033      	strmi	r3, [r6, #0]
 800c466:	6825      	ldr	r5, [r4, #0]
 800c468:	f015 0506 	ands.w	r5, r5, #6
 800c46c:	d106      	bne.n	800c47c <_printf_common+0x48>
 800c46e:	f104 0a19 	add.w	sl, r4, #25
 800c472:	68e3      	ldr	r3, [r4, #12]
 800c474:	6832      	ldr	r2, [r6, #0]
 800c476:	1a9b      	subs	r3, r3, r2
 800c478:	42ab      	cmp	r3, r5
 800c47a:	dc26      	bgt.n	800c4ca <_printf_common+0x96>
 800c47c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c480:	1e13      	subs	r3, r2, #0
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	bf18      	it	ne
 800c486:	2301      	movne	r3, #1
 800c488:	0692      	lsls	r2, r2, #26
 800c48a:	d42b      	bmi.n	800c4e4 <_printf_common+0xb0>
 800c48c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c490:	4649      	mov	r1, r9
 800c492:	4638      	mov	r0, r7
 800c494:	47c0      	blx	r8
 800c496:	3001      	adds	r0, #1
 800c498:	d01e      	beq.n	800c4d8 <_printf_common+0xa4>
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	68e5      	ldr	r5, [r4, #12]
 800c49e:	6832      	ldr	r2, [r6, #0]
 800c4a0:	f003 0306 	and.w	r3, r3, #6
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	bf08      	it	eq
 800c4a8:	1aad      	subeq	r5, r5, r2
 800c4aa:	68a3      	ldr	r3, [r4, #8]
 800c4ac:	6922      	ldr	r2, [r4, #16]
 800c4ae:	bf0c      	ite	eq
 800c4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4b4:	2500      	movne	r5, #0
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	bfc4      	itt	gt
 800c4ba:	1a9b      	subgt	r3, r3, r2
 800c4bc:	18ed      	addgt	r5, r5, r3
 800c4be:	2600      	movs	r6, #0
 800c4c0:	341a      	adds	r4, #26
 800c4c2:	42b5      	cmp	r5, r6
 800c4c4:	d11a      	bne.n	800c4fc <_printf_common+0xc8>
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	e008      	b.n	800c4dc <_printf_common+0xa8>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	47c0      	blx	r8
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	d103      	bne.n	800c4e0 <_printf_common+0xac>
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e0:	3501      	adds	r5, #1
 800c4e2:	e7c6      	b.n	800c472 <_printf_common+0x3e>
 800c4e4:	18e1      	adds	r1, r4, r3
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	2030      	movs	r0, #48	; 0x30
 800c4ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4ee:	4422      	add	r2, r4
 800c4f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4f8:	3302      	adds	r3, #2
 800c4fa:	e7c7      	b.n	800c48c <_printf_common+0x58>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	4622      	mov	r2, r4
 800c500:	4649      	mov	r1, r9
 800c502:	4638      	mov	r0, r7
 800c504:	47c0      	blx	r8
 800c506:	3001      	adds	r0, #1
 800c508:	d0e6      	beq.n	800c4d8 <_printf_common+0xa4>
 800c50a:	3601      	adds	r6, #1
 800c50c:	e7d9      	b.n	800c4c2 <_printf_common+0x8e>
	...

0800c510 <_printf_i>:
 800c510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c514:	7e0f      	ldrb	r7, [r1, #24]
 800c516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c518:	2f78      	cmp	r7, #120	; 0x78
 800c51a:	4691      	mov	r9, r2
 800c51c:	4680      	mov	r8, r0
 800c51e:	460c      	mov	r4, r1
 800c520:	469a      	mov	sl, r3
 800c522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c526:	d807      	bhi.n	800c538 <_printf_i+0x28>
 800c528:	2f62      	cmp	r7, #98	; 0x62
 800c52a:	d80a      	bhi.n	800c542 <_printf_i+0x32>
 800c52c:	2f00      	cmp	r7, #0
 800c52e:	f000 80d8 	beq.w	800c6e2 <_printf_i+0x1d2>
 800c532:	2f58      	cmp	r7, #88	; 0x58
 800c534:	f000 80a3 	beq.w	800c67e <_printf_i+0x16e>
 800c538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c53c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c540:	e03a      	b.n	800c5b8 <_printf_i+0xa8>
 800c542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c546:	2b15      	cmp	r3, #21
 800c548:	d8f6      	bhi.n	800c538 <_printf_i+0x28>
 800c54a:	a101      	add	r1, pc, #4	; (adr r1, 800c550 <_printf_i+0x40>)
 800c54c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c550:	0800c5a9 	.word	0x0800c5a9
 800c554:	0800c5bd 	.word	0x0800c5bd
 800c558:	0800c539 	.word	0x0800c539
 800c55c:	0800c539 	.word	0x0800c539
 800c560:	0800c539 	.word	0x0800c539
 800c564:	0800c539 	.word	0x0800c539
 800c568:	0800c5bd 	.word	0x0800c5bd
 800c56c:	0800c539 	.word	0x0800c539
 800c570:	0800c539 	.word	0x0800c539
 800c574:	0800c539 	.word	0x0800c539
 800c578:	0800c539 	.word	0x0800c539
 800c57c:	0800c6c9 	.word	0x0800c6c9
 800c580:	0800c5ed 	.word	0x0800c5ed
 800c584:	0800c6ab 	.word	0x0800c6ab
 800c588:	0800c539 	.word	0x0800c539
 800c58c:	0800c539 	.word	0x0800c539
 800c590:	0800c6eb 	.word	0x0800c6eb
 800c594:	0800c539 	.word	0x0800c539
 800c598:	0800c5ed 	.word	0x0800c5ed
 800c59c:	0800c539 	.word	0x0800c539
 800c5a0:	0800c539 	.word	0x0800c539
 800c5a4:	0800c6b3 	.word	0x0800c6b3
 800c5a8:	682b      	ldr	r3, [r5, #0]
 800c5aa:	1d1a      	adds	r2, r3, #4
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	602a      	str	r2, [r5, #0]
 800c5b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e0a3      	b.n	800c704 <_printf_i+0x1f4>
 800c5bc:	6820      	ldr	r0, [r4, #0]
 800c5be:	6829      	ldr	r1, [r5, #0]
 800c5c0:	0606      	lsls	r6, r0, #24
 800c5c2:	f101 0304 	add.w	r3, r1, #4
 800c5c6:	d50a      	bpl.n	800c5de <_printf_i+0xce>
 800c5c8:	680e      	ldr	r6, [r1, #0]
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	da03      	bge.n	800c5d8 <_printf_i+0xc8>
 800c5d0:	232d      	movs	r3, #45	; 0x2d
 800c5d2:	4276      	negs	r6, r6
 800c5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d8:	485e      	ldr	r0, [pc, #376]	; (800c754 <_printf_i+0x244>)
 800c5da:	230a      	movs	r3, #10
 800c5dc:	e019      	b.n	800c612 <_printf_i+0x102>
 800c5de:	680e      	ldr	r6, [r1, #0]
 800c5e0:	602b      	str	r3, [r5, #0]
 800c5e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5e6:	bf18      	it	ne
 800c5e8:	b236      	sxthne	r6, r6
 800c5ea:	e7ef      	b.n	800c5cc <_printf_i+0xbc>
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	6820      	ldr	r0, [r4, #0]
 800c5f0:	1d19      	adds	r1, r3, #4
 800c5f2:	6029      	str	r1, [r5, #0]
 800c5f4:	0601      	lsls	r1, r0, #24
 800c5f6:	d501      	bpl.n	800c5fc <_printf_i+0xec>
 800c5f8:	681e      	ldr	r6, [r3, #0]
 800c5fa:	e002      	b.n	800c602 <_printf_i+0xf2>
 800c5fc:	0646      	lsls	r6, r0, #25
 800c5fe:	d5fb      	bpl.n	800c5f8 <_printf_i+0xe8>
 800c600:	881e      	ldrh	r6, [r3, #0]
 800c602:	4854      	ldr	r0, [pc, #336]	; (800c754 <_printf_i+0x244>)
 800c604:	2f6f      	cmp	r7, #111	; 0x6f
 800c606:	bf0c      	ite	eq
 800c608:	2308      	moveq	r3, #8
 800c60a:	230a      	movne	r3, #10
 800c60c:	2100      	movs	r1, #0
 800c60e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c612:	6865      	ldr	r5, [r4, #4]
 800c614:	60a5      	str	r5, [r4, #8]
 800c616:	2d00      	cmp	r5, #0
 800c618:	bfa2      	ittt	ge
 800c61a:	6821      	ldrge	r1, [r4, #0]
 800c61c:	f021 0104 	bicge.w	r1, r1, #4
 800c620:	6021      	strge	r1, [r4, #0]
 800c622:	b90e      	cbnz	r6, 800c628 <_printf_i+0x118>
 800c624:	2d00      	cmp	r5, #0
 800c626:	d04d      	beq.n	800c6c4 <_printf_i+0x1b4>
 800c628:	4615      	mov	r5, r2
 800c62a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c62e:	fb03 6711 	mls	r7, r3, r1, r6
 800c632:	5dc7      	ldrb	r7, [r0, r7]
 800c634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c638:	4637      	mov	r7, r6
 800c63a:	42bb      	cmp	r3, r7
 800c63c:	460e      	mov	r6, r1
 800c63e:	d9f4      	bls.n	800c62a <_printf_i+0x11a>
 800c640:	2b08      	cmp	r3, #8
 800c642:	d10b      	bne.n	800c65c <_printf_i+0x14c>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	07de      	lsls	r6, r3, #31
 800c648:	d508      	bpl.n	800c65c <_printf_i+0x14c>
 800c64a:	6923      	ldr	r3, [r4, #16]
 800c64c:	6861      	ldr	r1, [r4, #4]
 800c64e:	4299      	cmp	r1, r3
 800c650:	bfde      	ittt	le
 800c652:	2330      	movle	r3, #48	; 0x30
 800c654:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c65c:	1b52      	subs	r2, r2, r5
 800c65e:	6122      	str	r2, [r4, #16]
 800c660:	f8cd a000 	str.w	sl, [sp]
 800c664:	464b      	mov	r3, r9
 800c666:	aa03      	add	r2, sp, #12
 800c668:	4621      	mov	r1, r4
 800c66a:	4640      	mov	r0, r8
 800c66c:	f7ff fee2 	bl	800c434 <_printf_common>
 800c670:	3001      	adds	r0, #1
 800c672:	d14c      	bne.n	800c70e <_printf_i+0x1fe>
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	b004      	add	sp, #16
 800c67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67e:	4835      	ldr	r0, [pc, #212]	; (800c754 <_printf_i+0x244>)
 800c680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c684:	6829      	ldr	r1, [r5, #0]
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	f851 6b04 	ldr.w	r6, [r1], #4
 800c68c:	6029      	str	r1, [r5, #0]
 800c68e:	061d      	lsls	r5, r3, #24
 800c690:	d514      	bpl.n	800c6bc <_printf_i+0x1ac>
 800c692:	07df      	lsls	r7, r3, #31
 800c694:	bf44      	itt	mi
 800c696:	f043 0320 	orrmi.w	r3, r3, #32
 800c69a:	6023      	strmi	r3, [r4, #0]
 800c69c:	b91e      	cbnz	r6, 800c6a6 <_printf_i+0x196>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	f023 0320 	bic.w	r3, r3, #32
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	2310      	movs	r3, #16
 800c6a8:	e7b0      	b.n	800c60c <_printf_i+0xfc>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	f043 0320 	orr.w	r3, r3, #32
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	2378      	movs	r3, #120	; 0x78
 800c6b4:	4828      	ldr	r0, [pc, #160]	; (800c758 <_printf_i+0x248>)
 800c6b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6ba:	e7e3      	b.n	800c684 <_printf_i+0x174>
 800c6bc:	0659      	lsls	r1, r3, #25
 800c6be:	bf48      	it	mi
 800c6c0:	b2b6      	uxthmi	r6, r6
 800c6c2:	e7e6      	b.n	800c692 <_printf_i+0x182>
 800c6c4:	4615      	mov	r5, r2
 800c6c6:	e7bb      	b.n	800c640 <_printf_i+0x130>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	6826      	ldr	r6, [r4, #0]
 800c6cc:	6961      	ldr	r1, [r4, #20]
 800c6ce:	1d18      	adds	r0, r3, #4
 800c6d0:	6028      	str	r0, [r5, #0]
 800c6d2:	0635      	lsls	r5, r6, #24
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	d501      	bpl.n	800c6dc <_printf_i+0x1cc>
 800c6d8:	6019      	str	r1, [r3, #0]
 800c6da:	e002      	b.n	800c6e2 <_printf_i+0x1d2>
 800c6dc:	0670      	lsls	r0, r6, #25
 800c6de:	d5fb      	bpl.n	800c6d8 <_printf_i+0x1c8>
 800c6e0:	8019      	strh	r1, [r3, #0]
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	6123      	str	r3, [r4, #16]
 800c6e6:	4615      	mov	r5, r2
 800c6e8:	e7ba      	b.n	800c660 <_printf_i+0x150>
 800c6ea:	682b      	ldr	r3, [r5, #0]
 800c6ec:	1d1a      	adds	r2, r3, #4
 800c6ee:	602a      	str	r2, [r5, #0]
 800c6f0:	681d      	ldr	r5, [r3, #0]
 800c6f2:	6862      	ldr	r2, [r4, #4]
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f7f3 fd82 	bl	8000200 <memchr>
 800c6fc:	b108      	cbz	r0, 800c702 <_printf_i+0x1f2>
 800c6fe:	1b40      	subs	r0, r0, r5
 800c700:	6060      	str	r0, [r4, #4]
 800c702:	6863      	ldr	r3, [r4, #4]
 800c704:	6123      	str	r3, [r4, #16]
 800c706:	2300      	movs	r3, #0
 800c708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c70c:	e7a8      	b.n	800c660 <_printf_i+0x150>
 800c70e:	6923      	ldr	r3, [r4, #16]
 800c710:	462a      	mov	r2, r5
 800c712:	4649      	mov	r1, r9
 800c714:	4640      	mov	r0, r8
 800c716:	47d0      	blx	sl
 800c718:	3001      	adds	r0, #1
 800c71a:	d0ab      	beq.n	800c674 <_printf_i+0x164>
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	079b      	lsls	r3, r3, #30
 800c720:	d413      	bmi.n	800c74a <_printf_i+0x23a>
 800c722:	68e0      	ldr	r0, [r4, #12]
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	4298      	cmp	r0, r3
 800c728:	bfb8      	it	lt
 800c72a:	4618      	movlt	r0, r3
 800c72c:	e7a4      	b.n	800c678 <_printf_i+0x168>
 800c72e:	2301      	movs	r3, #1
 800c730:	4632      	mov	r2, r6
 800c732:	4649      	mov	r1, r9
 800c734:	4640      	mov	r0, r8
 800c736:	47d0      	blx	sl
 800c738:	3001      	adds	r0, #1
 800c73a:	d09b      	beq.n	800c674 <_printf_i+0x164>
 800c73c:	3501      	adds	r5, #1
 800c73e:	68e3      	ldr	r3, [r4, #12]
 800c740:	9903      	ldr	r1, [sp, #12]
 800c742:	1a5b      	subs	r3, r3, r1
 800c744:	42ab      	cmp	r3, r5
 800c746:	dcf2      	bgt.n	800c72e <_printf_i+0x21e>
 800c748:	e7eb      	b.n	800c722 <_printf_i+0x212>
 800c74a:	2500      	movs	r5, #0
 800c74c:	f104 0619 	add.w	r6, r4, #25
 800c750:	e7f5      	b.n	800c73e <_printf_i+0x22e>
 800c752:	bf00      	nop
 800c754:	0800cacd 	.word	0x0800cacd
 800c758:	0800cade 	.word	0x0800cade

0800c75c <memmove>:
 800c75c:	4288      	cmp	r0, r1
 800c75e:	b510      	push	{r4, lr}
 800c760:	eb01 0402 	add.w	r4, r1, r2
 800c764:	d902      	bls.n	800c76c <memmove+0x10>
 800c766:	4284      	cmp	r4, r0
 800c768:	4623      	mov	r3, r4
 800c76a:	d807      	bhi.n	800c77c <memmove+0x20>
 800c76c:	1e43      	subs	r3, r0, #1
 800c76e:	42a1      	cmp	r1, r4
 800c770:	d008      	beq.n	800c784 <memmove+0x28>
 800c772:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c77a:	e7f8      	b.n	800c76e <memmove+0x12>
 800c77c:	4402      	add	r2, r0
 800c77e:	4601      	mov	r1, r0
 800c780:	428a      	cmp	r2, r1
 800c782:	d100      	bne.n	800c786 <memmove+0x2a>
 800c784:	bd10      	pop	{r4, pc}
 800c786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c78a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c78e:	e7f7      	b.n	800c780 <memmove+0x24>

0800c790 <_free_r>:
 800c790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c792:	2900      	cmp	r1, #0
 800c794:	d044      	beq.n	800c820 <_free_r+0x90>
 800c796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c79a:	9001      	str	r0, [sp, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f1a1 0404 	sub.w	r4, r1, #4
 800c7a2:	bfb8      	it	lt
 800c7a4:	18e4      	addlt	r4, r4, r3
 800c7a6:	f000 f913 	bl	800c9d0 <__malloc_lock>
 800c7aa:	4a1e      	ldr	r2, [pc, #120]	; (800c824 <_free_r+0x94>)
 800c7ac:	9801      	ldr	r0, [sp, #4]
 800c7ae:	6813      	ldr	r3, [r2, #0]
 800c7b0:	b933      	cbnz	r3, 800c7c0 <_free_r+0x30>
 800c7b2:	6063      	str	r3, [r4, #4]
 800c7b4:	6014      	str	r4, [r2, #0]
 800c7b6:	b003      	add	sp, #12
 800c7b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7bc:	f000 b90e 	b.w	800c9dc <__malloc_unlock>
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	d908      	bls.n	800c7d6 <_free_r+0x46>
 800c7c4:	6825      	ldr	r5, [r4, #0]
 800c7c6:	1961      	adds	r1, r4, r5
 800c7c8:	428b      	cmp	r3, r1
 800c7ca:	bf01      	itttt	eq
 800c7cc:	6819      	ldreq	r1, [r3, #0]
 800c7ce:	685b      	ldreq	r3, [r3, #4]
 800c7d0:	1949      	addeq	r1, r1, r5
 800c7d2:	6021      	streq	r1, [r4, #0]
 800c7d4:	e7ed      	b.n	800c7b2 <_free_r+0x22>
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	b10b      	cbz	r3, 800c7e0 <_free_r+0x50>
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	d9fa      	bls.n	800c7d6 <_free_r+0x46>
 800c7e0:	6811      	ldr	r1, [r2, #0]
 800c7e2:	1855      	adds	r5, r2, r1
 800c7e4:	42a5      	cmp	r5, r4
 800c7e6:	d10b      	bne.n	800c800 <_free_r+0x70>
 800c7e8:	6824      	ldr	r4, [r4, #0]
 800c7ea:	4421      	add	r1, r4
 800c7ec:	1854      	adds	r4, r2, r1
 800c7ee:	42a3      	cmp	r3, r4
 800c7f0:	6011      	str	r1, [r2, #0]
 800c7f2:	d1e0      	bne.n	800c7b6 <_free_r+0x26>
 800c7f4:	681c      	ldr	r4, [r3, #0]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	6053      	str	r3, [r2, #4]
 800c7fa:	4421      	add	r1, r4
 800c7fc:	6011      	str	r1, [r2, #0]
 800c7fe:	e7da      	b.n	800c7b6 <_free_r+0x26>
 800c800:	d902      	bls.n	800c808 <_free_r+0x78>
 800c802:	230c      	movs	r3, #12
 800c804:	6003      	str	r3, [r0, #0]
 800c806:	e7d6      	b.n	800c7b6 <_free_r+0x26>
 800c808:	6825      	ldr	r5, [r4, #0]
 800c80a:	1961      	adds	r1, r4, r5
 800c80c:	428b      	cmp	r3, r1
 800c80e:	bf04      	itt	eq
 800c810:	6819      	ldreq	r1, [r3, #0]
 800c812:	685b      	ldreq	r3, [r3, #4]
 800c814:	6063      	str	r3, [r4, #4]
 800c816:	bf04      	itt	eq
 800c818:	1949      	addeq	r1, r1, r5
 800c81a:	6021      	streq	r1, [r4, #0]
 800c81c:	6054      	str	r4, [r2, #4]
 800c81e:	e7ca      	b.n	800c7b6 <_free_r+0x26>
 800c820:	b003      	add	sp, #12
 800c822:	bd30      	pop	{r4, r5, pc}
 800c824:	20000878 	.word	0x20000878

0800c828 <sbrk_aligned>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	4e0e      	ldr	r6, [pc, #56]	; (800c864 <sbrk_aligned+0x3c>)
 800c82c:	460c      	mov	r4, r1
 800c82e:	6831      	ldr	r1, [r6, #0]
 800c830:	4605      	mov	r5, r0
 800c832:	b911      	cbnz	r1, 800c83a <sbrk_aligned+0x12>
 800c834:	f000 f8bc 	bl	800c9b0 <_sbrk_r>
 800c838:	6030      	str	r0, [r6, #0]
 800c83a:	4621      	mov	r1, r4
 800c83c:	4628      	mov	r0, r5
 800c83e:	f000 f8b7 	bl	800c9b0 <_sbrk_r>
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	d00a      	beq.n	800c85c <sbrk_aligned+0x34>
 800c846:	1cc4      	adds	r4, r0, #3
 800c848:	f024 0403 	bic.w	r4, r4, #3
 800c84c:	42a0      	cmp	r0, r4
 800c84e:	d007      	beq.n	800c860 <sbrk_aligned+0x38>
 800c850:	1a21      	subs	r1, r4, r0
 800c852:	4628      	mov	r0, r5
 800c854:	f000 f8ac 	bl	800c9b0 <_sbrk_r>
 800c858:	3001      	adds	r0, #1
 800c85a:	d101      	bne.n	800c860 <sbrk_aligned+0x38>
 800c85c:	f04f 34ff 	mov.w	r4, #4294967295
 800c860:	4620      	mov	r0, r4
 800c862:	bd70      	pop	{r4, r5, r6, pc}
 800c864:	2000087c 	.word	0x2000087c

0800c868 <_malloc_r>:
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86c:	1ccd      	adds	r5, r1, #3
 800c86e:	f025 0503 	bic.w	r5, r5, #3
 800c872:	3508      	adds	r5, #8
 800c874:	2d0c      	cmp	r5, #12
 800c876:	bf38      	it	cc
 800c878:	250c      	movcc	r5, #12
 800c87a:	2d00      	cmp	r5, #0
 800c87c:	4607      	mov	r7, r0
 800c87e:	db01      	blt.n	800c884 <_malloc_r+0x1c>
 800c880:	42a9      	cmp	r1, r5
 800c882:	d905      	bls.n	800c890 <_malloc_r+0x28>
 800c884:	230c      	movs	r3, #12
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	2600      	movs	r6, #0
 800c88a:	4630      	mov	r0, r6
 800c88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c890:	4e2e      	ldr	r6, [pc, #184]	; (800c94c <_malloc_r+0xe4>)
 800c892:	f000 f89d 	bl	800c9d0 <__malloc_lock>
 800c896:	6833      	ldr	r3, [r6, #0]
 800c898:	461c      	mov	r4, r3
 800c89a:	bb34      	cbnz	r4, 800c8ea <_malloc_r+0x82>
 800c89c:	4629      	mov	r1, r5
 800c89e:	4638      	mov	r0, r7
 800c8a0:	f7ff ffc2 	bl	800c828 <sbrk_aligned>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	d14d      	bne.n	800c946 <_malloc_r+0xde>
 800c8aa:	6834      	ldr	r4, [r6, #0]
 800c8ac:	4626      	mov	r6, r4
 800c8ae:	2e00      	cmp	r6, #0
 800c8b0:	d140      	bne.n	800c934 <_malloc_r+0xcc>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	eb04 0803 	add.w	r8, r4, r3
 800c8bc:	f000 f878 	bl	800c9b0 <_sbrk_r>
 800c8c0:	4580      	cmp	r8, r0
 800c8c2:	d13a      	bne.n	800c93a <_malloc_r+0xd2>
 800c8c4:	6821      	ldr	r1, [r4, #0]
 800c8c6:	3503      	adds	r5, #3
 800c8c8:	1a6d      	subs	r5, r5, r1
 800c8ca:	f025 0503 	bic.w	r5, r5, #3
 800c8ce:	3508      	adds	r5, #8
 800c8d0:	2d0c      	cmp	r5, #12
 800c8d2:	bf38      	it	cc
 800c8d4:	250c      	movcc	r5, #12
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f7ff ffa5 	bl	800c828 <sbrk_aligned>
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d02b      	beq.n	800c93a <_malloc_r+0xd2>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	442b      	add	r3, r5
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	e00e      	b.n	800c908 <_malloc_r+0xa0>
 800c8ea:	6822      	ldr	r2, [r4, #0]
 800c8ec:	1b52      	subs	r2, r2, r5
 800c8ee:	d41e      	bmi.n	800c92e <_malloc_r+0xc6>
 800c8f0:	2a0b      	cmp	r2, #11
 800c8f2:	d916      	bls.n	800c922 <_malloc_r+0xba>
 800c8f4:	1961      	adds	r1, r4, r5
 800c8f6:	42a3      	cmp	r3, r4
 800c8f8:	6025      	str	r5, [r4, #0]
 800c8fa:	bf18      	it	ne
 800c8fc:	6059      	strne	r1, [r3, #4]
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	bf08      	it	eq
 800c902:	6031      	streq	r1, [r6, #0]
 800c904:	5162      	str	r2, [r4, r5]
 800c906:	604b      	str	r3, [r1, #4]
 800c908:	4638      	mov	r0, r7
 800c90a:	f104 060b 	add.w	r6, r4, #11
 800c90e:	f000 f865 	bl	800c9dc <__malloc_unlock>
 800c912:	f026 0607 	bic.w	r6, r6, #7
 800c916:	1d23      	adds	r3, r4, #4
 800c918:	1af2      	subs	r2, r6, r3
 800c91a:	d0b6      	beq.n	800c88a <_malloc_r+0x22>
 800c91c:	1b9b      	subs	r3, r3, r6
 800c91e:	50a3      	str	r3, [r4, r2]
 800c920:	e7b3      	b.n	800c88a <_malloc_r+0x22>
 800c922:	6862      	ldr	r2, [r4, #4]
 800c924:	42a3      	cmp	r3, r4
 800c926:	bf0c      	ite	eq
 800c928:	6032      	streq	r2, [r6, #0]
 800c92a:	605a      	strne	r2, [r3, #4]
 800c92c:	e7ec      	b.n	800c908 <_malloc_r+0xa0>
 800c92e:	4623      	mov	r3, r4
 800c930:	6864      	ldr	r4, [r4, #4]
 800c932:	e7b2      	b.n	800c89a <_malloc_r+0x32>
 800c934:	4634      	mov	r4, r6
 800c936:	6876      	ldr	r6, [r6, #4]
 800c938:	e7b9      	b.n	800c8ae <_malloc_r+0x46>
 800c93a:	230c      	movs	r3, #12
 800c93c:	603b      	str	r3, [r7, #0]
 800c93e:	4638      	mov	r0, r7
 800c940:	f000 f84c 	bl	800c9dc <__malloc_unlock>
 800c944:	e7a1      	b.n	800c88a <_malloc_r+0x22>
 800c946:	6025      	str	r5, [r4, #0]
 800c948:	e7de      	b.n	800c908 <_malloc_r+0xa0>
 800c94a:	bf00      	nop
 800c94c:	20000878 	.word	0x20000878

0800c950 <_realloc_r>:
 800c950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c954:	4680      	mov	r8, r0
 800c956:	4614      	mov	r4, r2
 800c958:	460e      	mov	r6, r1
 800c95a:	b921      	cbnz	r1, 800c966 <_realloc_r+0x16>
 800c95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c960:	4611      	mov	r1, r2
 800c962:	f7ff bf81 	b.w	800c868 <_malloc_r>
 800c966:	b92a      	cbnz	r2, 800c974 <_realloc_r+0x24>
 800c968:	f7ff ff12 	bl	800c790 <_free_r>
 800c96c:	4625      	mov	r5, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	f000 f838 	bl	800c9e8 <_malloc_usable_size_r>
 800c978:	4284      	cmp	r4, r0
 800c97a:	4607      	mov	r7, r0
 800c97c:	d802      	bhi.n	800c984 <_realloc_r+0x34>
 800c97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c982:	d812      	bhi.n	800c9aa <_realloc_r+0x5a>
 800c984:	4621      	mov	r1, r4
 800c986:	4640      	mov	r0, r8
 800c988:	f7ff ff6e 	bl	800c868 <_malloc_r>
 800c98c:	4605      	mov	r5, r0
 800c98e:	2800      	cmp	r0, #0
 800c990:	d0ed      	beq.n	800c96e <_realloc_r+0x1e>
 800c992:	42bc      	cmp	r4, r7
 800c994:	4622      	mov	r2, r4
 800c996:	4631      	mov	r1, r6
 800c998:	bf28      	it	cs
 800c99a:	463a      	movcs	r2, r7
 800c99c:	f7ff fbb0 	bl	800c100 <memcpy>
 800c9a0:	4631      	mov	r1, r6
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	f7ff fef4 	bl	800c790 <_free_r>
 800c9a8:	e7e1      	b.n	800c96e <_realloc_r+0x1e>
 800c9aa:	4635      	mov	r5, r6
 800c9ac:	e7df      	b.n	800c96e <_realloc_r+0x1e>
	...

0800c9b0 <_sbrk_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4d06      	ldr	r5, [pc, #24]	; (800c9cc <_sbrk_r+0x1c>)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	f7f4 fe94 	bl	80016e8 <_sbrk>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_sbrk_r+0x1a>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_sbrk_r+0x1a>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20000880 	.word	0x20000880

0800c9d0 <__malloc_lock>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	; (800c9d8 <__malloc_lock+0x8>)
 800c9d2:	f000 b811 	b.w	800c9f8 <__retarget_lock_acquire_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	20000884 	.word	0x20000884

0800c9dc <__malloc_unlock>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	; (800c9e4 <__malloc_unlock+0x8>)
 800c9de:	f000 b80c 	b.w	800c9fa <__retarget_lock_release_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	20000884 	.word	0x20000884

0800c9e8 <_malloc_usable_size_r>:
 800c9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ec:	1f18      	subs	r0, r3, #4
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	bfbc      	itt	lt
 800c9f2:	580b      	ldrlt	r3, [r1, r0]
 800c9f4:	18c0      	addlt	r0, r0, r3
 800c9f6:	4770      	bx	lr

0800c9f8 <__retarget_lock_acquire_recursive>:
 800c9f8:	4770      	bx	lr

0800c9fa <__retarget_lock_release_recursive>:
 800c9fa:	4770      	bx	lr

0800c9fc <_init>:
 800c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fe:	bf00      	nop
 800ca00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca02:	bc08      	pop	{r3}
 800ca04:	469e      	mov	lr, r3
 800ca06:	4770      	bx	lr

0800ca08 <_fini>:
 800ca08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0a:	bf00      	nop
 800ca0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca0e:	bc08      	pop	{r3}
 800ca10:	469e      	mov	lr, r3
 800ca12:	4770      	bx	lr
