
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba0c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800bbcc  0800bbcc  0001bbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bca4  0800bca4  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800bca4  0800bca4  0001bca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcac  0800bcac  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcac  0800bcac  0001bcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcb0  0800bcb0  0001bcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800bcb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000330  0800bfe4  00020330  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800bfe4  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020909  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003207  00000000  00000000  00040c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00043e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  000456a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e294  00000000  00000000  00046d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca6b  00000000  00000000  0007502c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a58e  00000000  00000000  00091a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ac025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c00  00000000  00000000  001ac078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000330 	.word	0x20000330
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bbb4 	.word	0x0800bbb4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000334 	.word	0x20000334
 80001fc:	0800bbb4 	.word	0x0800bbb4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005aa:	f000 ff92 	bl	80014d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ae:	f000 f8fb 	bl	80007a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005b2:	f000 fb73 	bl	8000c9c <MX_GPIO_Init>
	MX_TIM1_Init();
 80005b6:	f000 f9d5 	bl	8000964 <MX_TIM1_Init>
	MX_TIM2_Init();
 80005ba:	f000 fa7f 	bl	8000abc <MX_TIM2_Init>
	MX_TIM4_Init();
 80005be:	f000 faf5 	bl	8000bac <MX_TIM4_Init>
	MX_LPUART1_UART_Init();
 80005c2:	f000 f983 	bl	80008cc <MX_LPUART1_UART_Init>
	MX_I2C2_Init();
 80005c6:	f000 f941 	bl	800084c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 80005ca:	4b6a      	ldr	r3, [pc, #424]	; (8000774 <main+0x1d0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	4b68      	ldr	r3, [pc, #416]	; (8000774 <main+0x1d0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f042 0201 	orr.w	r2, r2, #1
 80005d8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80005da:	4b67      	ldr	r3, [pc, #412]	; (8000778 <main+0x1d4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68da      	ldr	r2, [r3, #12]
 80005e0:	4b65      	ldr	r3, [pc, #404]	; (8000778 <main+0x1d4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f042 0201 	orr.w	r2, r2, #1
 80005e8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80005ea:	4b64      	ldr	r3, [pc, #400]	; (800077c <main+0x1d8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68da      	ldr	r2, [r3, #12]
 80005f0:	4b62      	ldr	r3, [pc, #392]	; (800077c <main+0x1d8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f042 0201 	orr.w	r2, r2, #1
 80005f8:	60da      	str	r2, [r3, #12]

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim1, TIM_CHANNEL_4, thetaDir_GPIO_Port, thetaDir_Pin, 800);
 80005fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2320      	movs	r3, #32
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000608:	220c      	movs	r2, #12
 800060a:	495a      	ldr	r1, [pc, #360]	; (8000774 <main+0x1d0>)
 800060c:	485c      	ldr	r0, [pc, #368]	; (8000780 <main+0x1dc>)
 800060e:	f000 fc92 	bl	8000f36 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 600);
 8000612:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000620:	2200      	movs	r2, #0
 8000622:	4955      	ldr	r1, [pc, #340]	; (8000778 <main+0x1d4>)
 8000624:	4857      	ldr	r0, [pc, #348]	; (8000784 <main+0x1e0>)
 8000626:	f000 fc86 	bl	8000f36 <initStepper>
	initStepper(&thetaMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 800);
 800062a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000638:	2208      	movs	r2, #8
 800063a:	4950      	ldr	r1, [pc, #320]	; (800077c <main+0x1d8>)
 800063c:	4850      	ldr	r0, [pc, #320]	; (8000780 <main+0x1dc>)
 800063e:	f000 fc7a 	bl	8000f36 <initStepper>

	//I2C assignment to TOF API
	Dev->I2cHandle = &hi2c2;
 8000642:	4b51      	ldr	r3, [pc, #324]	; (8000788 <main+0x1e4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a51      	ldr	r2, [pc, #324]	; (800078c <main+0x1e8>)
 8000648:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 800064c:	4b4e      	ldr	r3, [pc, #312]	; (8000788 <main+0x1e4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2252      	movs	r2, #82	; 0x52
 8000652:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	// VL53L0X init for Single Measurement
	VL53L0X_WaitDeviceBooted( Dev );
 8000656:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <main+0x1e4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f006 f8fe 	bl	800685c <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000660:	4b49      	ldr	r3, [pc, #292]	; (8000788 <main+0x1e4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f005 fe13 	bl	8006290 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 800066a:	4b47      	ldr	r3, [pc, #284]	; (8000788 <main+0x1e4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f005 ff72 	bl	8006558 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000674:	4b44      	ldr	r3, [pc, #272]	; (8000788 <main+0x1e4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	1d7a      	adds	r2, r7, #5
 800067a:	1db9      	adds	r1, r7, #6
 800067c:	4618      	mov	r0, r3
 800067e:	f006 fe0d 	bl	800729c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000682:	4b41      	ldr	r3, [pc, #260]	; (8000788 <main+0x1e4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1dfa      	adds	r2, r7, #7
 8000688:	f107 0108 	add.w	r1, r7, #8
 800068c:	4618      	mov	r0, r3
 800068e:	f007 fa93 	bl	8007bb8 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <main+0x1e4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f006 f97d 	bl	8006998 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800069e:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <main+0x1e4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2201      	movs	r2, #1
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fbf2 	bl	8006e90 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <main+0x1e4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f006 fbeb 	bl	8006e90 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <main+0x1e4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f641 1299 	movw	r2, #6553	; 0x1999
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fc93 	bl	8006ff0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <main+0x1e4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f006 fc8b 	bl	8006ff0 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 25000);
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <main+0x1e4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 f9b6 	bl	8006a54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <main+0x1e4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2212      	movs	r2, #18
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 f9d5 	bl	8006aa0 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <main+0x1e4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	220e      	movs	r2, #14
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f006 f9ce 	bl	8006aa0 <VL53L0X_SetVcselPulsePeriod>
		//		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
		//
		//		if((HAL_GetTick()-timer>=5000) && (HAL_GetTick()-timer<=5180)){
		//			setTarget(&yMotor, 1000, 0);
		//		}
		timer = HAL_GetTick();
 8000704:	f000 ff4e 	bl	80015a4 <HAL_GetTick>
 8000708:	60f8      	str	r0, [r7, #12]
		VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <main+0x1e4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4920      	ldr	r1, [pc, #128]	; (8000790 <main+0x1ec>)
 8000710:	4618      	mov	r0, r3
 8000712:	f007 f865 	bl	80077e0 <VL53L0X_PerformSingleRangingMeasurement>
		  if(RangingData.RangeStatus == 0)
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <main+0x1ec>)
 8000718:	7e1b      	ldrb	r3, [r3, #24]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f2      	bne.n	8000704 <main+0x160>
		  {
			  MessageLen = sprintf((char*)Message, "Measured distance: %i ", RangingData.RangeMilliMeter);
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <main+0x1ec>)
 8000720:	891b      	ldrh	r3, [r3, #8]
 8000722:	461a      	mov	r2, r3
 8000724:	491b      	ldr	r1, [pc, #108]	; (8000794 <main+0x1f0>)
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <main+0x1f4>)
 8000728:	f00a fddc 	bl	800b2e4 <siprintf>
 800072c:	4603      	mov	r3, r0
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <main+0x1f8>)
 8000732:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <main+0x1f8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b29a      	uxth	r2, r3
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	4916      	ldr	r1, [pc, #88]	; (8000798 <main+0x1f4>)
 800073e:	4818      	ldr	r0, [pc, #96]	; (80007a0 <main+0x1fc>)
 8000740:	f004 ff48 	bl	80055d4 <HAL_UART_Transmit>
			  MessageLen = sprintf((char*)Message, " Measure Time: %d\n\r",(int)(HAL_GetTick()-timer));
 8000744:	f000 ff2e 	bl	80015a4 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	461a      	mov	r2, r3
 8000750:	4914      	ldr	r1, [pc, #80]	; (80007a4 <main+0x200>)
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <main+0x1f4>)
 8000754:	f00a fdc6 	bl	800b2e4 <siprintf>
 8000758:	4603      	mov	r3, r0
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <main+0x1f8>)
 800075e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <main+0x1f8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b29a      	uxth	r2, r3
 8000766:	2364      	movs	r3, #100	; 0x64
 8000768:	490b      	ldr	r1, [pc, #44]	; (8000798 <main+0x1f4>)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <main+0x1fc>)
 800076c:	f004 ff32 	bl	80055d4 <HAL_UART_Transmit>
		timer = HAL_GetTick();
 8000770:	e7c8      	b.n	8000704 <main+0x160>
 8000772:	bf00      	nop
 8000774:	20000430 	.word	0x20000430
 8000778:	2000047c 	.word	0x2000047c
 800077c:	200004c8 	.word	0x200004c8
 8000780:	20000518 	.word	0x20000518
 8000784:	20000548 	.word	0x20000548
 8000788:	20000000 	.word	0x20000000
 800078c:	2000034c 	.word	0x2000034c
 8000790:	200005ec 	.word	0x200005ec
 8000794:	0800bbcc 	.word	0x0800bbcc
 8000798:	200005a8 	.word	0x200005a8
 800079c:	200005e8 	.word	0x200005e8
 80007a0:	200003a0 	.word	0x200003a0
 80007a4:	0800bbe4 	.word	0x0800bbe4

080007a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b098      	sub	sp, #96	; 0x60
 80007ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2248      	movs	r2, #72	; 0x48
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a fd8c 	bl	800b2d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 ff80 	bl	80026d0 <HAL_PWREx_ControlVoltageScaling>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x32>
	{
		Error_Handler();
 80007d6:	f000 fba9 	bl	8000f2c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007da:	2310      	movs	r3, #16
 80007dc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007ee:	2301      	movs	r3, #1
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 50;
 80007f6:	2332      	movs	r3, #50	; 0x32
 80007f8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fe:	2302      	movs	r3, #2
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	4618      	mov	r0, r3
 800080c:	f002 f814 	bl	8002838 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000816:	f000 fb89 	bl	8000f2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fc7c 	bl	8003130 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800083e:	f000 fb75 	bl	8000f2c <Error_Handler>
	}
}
 8000842:	bf00      	nop
 8000844:	3760      	adds	r7, #96	; 0x60
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10C0ECFF;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f001 f978 	bl	8001b7c <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8000892:	f000 fb4b 	bl	8000f2c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f001 fe61 	bl	8002560 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80008a4:	f000 fb42 	bl	8000f2c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f001 fea3 	bl	80025f6 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80008b6:	f000 fb39 	bl	8000f2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000034c 	.word	0x2000034c
 80008c4:	40005800 	.word	0x40005800
 80008c8:	10c0ecff 	.word	0x10c0ecff

080008cc <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008d2:	4a23      	ldr	r2, [pc, #140]	; (8000960 <MX_LPUART1_UART_Init+0x94>)
 80008d4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 8000916:	f004 fe0d 	bl	8005534 <HAL_UART_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler();
 8000920:	f000 fb04 	bl	8000f2c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 8000928:	f005 fbd4 	bl	80060d4 <HAL_UARTEx_SetTxFifoThreshold>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_LPUART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000932:	f000 fafb 	bl	8000f2c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4808      	ldr	r0, [pc, #32]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 800093a:	f005 fc09 	bl	8006150 <HAL_UARTEx_SetRxFifoThreshold>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_LPUART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000944:	f000 faf2 	bl	8000f2c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_LPUART1_UART_Init+0x90>)
 800094a:	f005 fb8a 	bl	8006062 <HAL_UARTEx_DisableFifoMode>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000954:	f000 faea 	bl	8000f2c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200003a0 	.word	0x200003a0
 8000960:	40008000 	.word	0x40008000

08000964 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09a      	sub	sp, #104	; 0x68
 8000968:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]
 8000996:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	222c      	movs	r2, #44	; 0x2c
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f00a fc98 	bl	800b2d4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009a6:	4a44      	ldr	r2, [pc, #272]	; (8000ab8 <MX_TIM1_Init+0x154>)
 80009a8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100-1;
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009ac:	2263      	movs	r2, #99	; 0x63
 80009ae:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1250-1;
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80009bc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d0:	4838      	ldr	r0, [pc, #224]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009d2:	f003 fbbf 	bl	8004154 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80009dc:	f000 faa6 	bl	8000f2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ea:	4619      	mov	r1, r3
 80009ec:	4831      	ldr	r0, [pc, #196]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009ee:	f003 ff5b 	bl	80048a8 <HAL_TIM_ConfigClockSource>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80009f8:	f000 fa98 	bl	8000f2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009fc:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <MX_TIM1_Init+0x150>)
 80009fe:	f003 fc27 	bl	8004250 <HAL_TIM_PWM_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000a08:	f000 fa90 	bl	8000f2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <MX_TIM1_Init+0x150>)
 8000a20:	f004 fc64 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8000a2a:	f000 fa7f 	bl	8000f2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 500;
 8000a32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <MX_TIM1_Init+0x150>)
 8000a52:	f003 fe15 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0xfc>
	{
		Error_Handler();
 8000a5c:	f000 fa66 	bl	8000f2c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <MX_TIM1_Init+0x150>)
 8000a96:	f004 fcb1 	bl	80053fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x140>
	{
		Error_Handler();
 8000aa0:	f000 fa44 	bl	8000f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MX_TIM1_Init+0x150>)
 8000aa6:	f000 fbd9 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000aaa:	bf00      	nop
 8000aac:	3768      	adds	r7, #104	; 0x68
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000430 	.word	0x20000430
 8000ab8:	40012c00 	.word	0x40012c00

08000abc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100-1;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000af8:	2263      	movs	r2, #99	; 0x63
 8000afa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1250-1;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b04:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b08:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b16:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b18:	f003 fb1c 	bl	8004154 <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000b22:	f000 fa03 	bl	8000f2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b30:	4619      	mov	r1, r3
 8000b32:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b34:	f003 feb8 	bl	80048a8 <HAL_TIM_ConfigClockSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8000b3e:	f000 f9f5 	bl	8000f2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b42:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b44:	f003 fb84 	bl	8004250 <HAL_TIM_PWM_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000b4e:	f000 f9ed 	bl	8000f2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b62:	f004 fbc3 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000b6c:	f000 f9de 	bl	8000f2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000b74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b78:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b8a:	f003 fd79 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8000b94:	f000 f9ca 	bl	8000f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MX_TIM2_Init+0xec>)
 8000b9a:	f000 fb5f 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000b9e:	bf00      	nop
 8000ba0:	3738      	adds	r7, #56	; 0x38
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000047c 	.word	0x2000047c

08000bac <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000be0:	4a2d      	ldr	r2, [pc, #180]	; (8000c98 <MX_TIM4_Init+0xec>)
 8000be2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100-1;
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000be6:	2263      	movs	r2, #99	; 0x63
 8000be8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1250-1;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000bf2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000bf6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c04:	4823      	ldr	r0, [pc, #140]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000c06:	f003 faa5 	bl	8004154 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x68>
	{
		Error_Handler();
 8000c10:	f000 f98c 	bl	8000f2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481c      	ldr	r0, [pc, #112]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000c22:	f003 fe41 	bl	80048a8 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM4_Init+0x84>
	{
		Error_Handler();
 8000c2c:	f000 f97e 	bl	8000f2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c30:	4818      	ldr	r0, [pc, #96]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000c32:	f003 fb0d 	bl	8004250 <HAL_TIM_PWM_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM4_Init+0x94>
	{
		Error_Handler();
 8000c3c:	f000 f976 	bl	8000f2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4811      	ldr	r0, [pc, #68]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000c50:	f004 fb4c 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM4_Init+0xb2>
	{
		Error_Handler();
 8000c5a:	f000 f967 	bl	8000f2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000c62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c66:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	2208      	movs	r2, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000c78:	f003 fd02 	bl	8004680 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM4_Init+0xda>
	{
		Error_Handler();
 8000c82:	f000 f953 	bl	8000f2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM4_Init+0xe8>)
 8000c88:	f000 fae8 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000c8c:	bf00      	nop
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200004c8 	.word	0x200004c8
 8000c98:	40000800 	.word	0x40000800

08000c9c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000cb8:	f043 0320 	orr.w	r3, r3, #32
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_GPIO_Init+0xc4>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
	HAL_PWREx_EnableVddIO2();
 8000d2a:	f001 fd75 	bl	8002818 <HAL_PWREx_EnableVddIO2>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	21e0      	movs	r1, #224	; 0xe0
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f000 ff09 	bl	8001b4c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
	GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000d3a:	23e0      	movs	r3, #224	; 0xe0
 8000d3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f000 fd68 	bl	8001828 <HAL_GPIO_Init>

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d68:	b088      	sub	sp, #32
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim1){
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	4a64      	ldr	r2, [pc, #400]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d144      	bne.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x9c>
		if(thetaMotor.Status == RunningForward){
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d11a      	bne.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x54>
			thetaMotor.CurrentPosition++;
 8000d82:	4b61      	ldr	r3, [pc, #388]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000d88:	f112 0801 	adds.w	r8, r2, #1
 8000d8c:	f143 0900 	adc.w	r9, r3, #0
 8000d90:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d92:	e9c3 8906 	strd	r8, r9, [r3, #24]
			MessageLen = sprintf((char*)Message, "here2");
 8000d96:	495d      	ldr	r1, [pc, #372]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000d98:	485d      	ldr	r0, [pc, #372]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000d9a:	f00a faa3 	bl	800b2e4 <siprintf>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b5c      	ldr	r3, [pc, #368]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000da4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 8000da6:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	4958      	ldr	r1, [pc, #352]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000db0:	4859      	ldr	r0, [pc, #356]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000db2:	f004 fc0f 	bl	80055d4 <HAL_UART_Transmit>
 8000db6:	e00e      	b.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x72>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000db8:	4b53      	ldr	r3, [pc, #332]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d108      	bne.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x72>
			thetaMotor.CurrentPosition--;
 8000dc4:	4b50      	ldr	r3, [pc, #320]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dc6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000dca:	1e54      	subs	r4, r2, #1
 8000dcc:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dd2:	e9c3 4506 	strd	r4, r5, [r3, #24]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dd8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000ddc:	4b4a      	ldr	r3, [pc, #296]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000de2:	4299      	cmp	r1, r3
 8000de4:	bf08      	it	eq
 8000de6:	4290      	cmpeq	r0, r2
 8000de8:	d10a      	bne.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x9c>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000dea:	2104      	movs	r1, #4
 8000dec:	484b      	ldr	r0, [pc, #300]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000dee:	f003 fa91 	bl	8004314 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000df2:	484a      	ldr	r0, [pc, #296]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000df4:	f003 fa05 	bl	8004202 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13b      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x11c>
		if(yMotor.Status == RunningForward){
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10d      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0xcc>
			yMotor.CurrentPosition++;
 8000e14:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e16:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e1a:	1c51      	adds	r1, r2, #1
 8000e1c:	6139      	str	r1, [r7, #16]
 8000e1e:	f143 0300 	adc.w	r3, r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e2a:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000e2e:	e012      	b.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}
		else if (yMotor.Status == RunningBackward){
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d10c      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0xf2>
			yMotor.CurrentPosition--;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e42:	1e51      	subs	r1, r2, #1
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e52:	e9c3 1206 	strd	r1, r2, [r3, #24]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e58:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e62:	4299      	cmp	r1, r3
 8000e64:	bf08      	it	eq
 8000e66:	4290      	cmpeq	r0, r2
 8000e68:	d10a      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	482b      	ldr	r0, [pc, #172]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e6e:	f003 fa51 	bl	8004314 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000e72:	482a      	ldr	r0, [pc, #168]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e74:	f003 f9c5 	bl	8004202 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d138      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x196>
		if(rMotor.Status == RunningForward){
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10d      	bne.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition++;
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000e96:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e9a:	1c51      	adds	r1, r2, #1
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	f143 0300 	adc.w	r3, r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ea6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000eaa:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000eae:	e00f      	b.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		}
		else if (rMotor.Status == RunningBackward){
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d109      	bne.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x16c>
			rMotor.CurrentPosition--;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ebe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ec2:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000ec6:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ecc:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ed2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000edc:	4299      	cmp	r1, r3
 8000ede:	bf08      	it	eq
 8000ee0:	4290      	cmpeq	r0, r2
 8000ee2:	d10a      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x196>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000ee8:	f003 fa14 	bl	8004314 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000eee:	f003 f988 	bl	8004202 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f04:	20000430 	.word	0x20000430
 8000f08:	20000518 	.word	0x20000518
 8000f0c:	0800bbf8 	.word	0x0800bbf8
 8000f10:	200005a8 	.word	0x200005a8
 8000f14:	200005e8 	.word	0x200005e8
 8000f18:	200003a0 	.word	0x200003a0
 8000f1c:	2000047c 	.word	0x2000047c
 8000f20:	20000548 	.word	0x20000548
 8000f24:	200004c8 	.word	0x200004c8
 8000f28:	20000578 	.word	0x20000578

08000f2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>

08000f36 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	8b3a      	ldrh	r2, [r7, #24]
 8000f5a:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 8000f62:	68f9      	ldr	r1, [r7, #12]
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	f04f 0300 	mov.w	r3, #0
 8000f6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	stepper->TargetPosition =0;
 8000f70:	68f9      	ldr	r1, [r7, #12]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Set status
	stepper->Status = Stopped;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2203      	movs	r2, #3
 8000f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f000 f805 	bl	8000f9c <setSpeed>
	//return stepper structure pointer
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <setSpeed>:
	//setDirection
	//if stepper isn't running, run and set direction

}

void setSpeed (stepper * stepper, uint32_t speed){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	005a      	lsls	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4909      	ldr	r1, [pc, #36]	; (8000fdc <setSpeed+0x40>)
 8000fb8:	fbb1 f2f2 	udiv	r2, r1, r2
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <setSpeed+0x40>)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3a01      	subs	r2, #1
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	000f4240 	.word	0x000f4240

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <HAL_MspInit+0x44>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_MspInit+0x44>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6593      	str	r3, [r2, #88]	; 0x58
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_MspInit+0x44>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0b0      	sub	sp, #192	; 0xc0
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2298      	movs	r2, #152	; 0x98
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00a f943 	bl	800b2d4 <memset>
  if(hi2c->Instance==I2C2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <HAL_I2C_MspInit+0xb0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d13a      	bne.n	80010ce <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fb21 	bl	80036ac <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001070:	f7ff ff5c 	bl	8000f2c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_I2C_MspInit+0xb4>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_I2C_MspInit+0xb4>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_I2C_MspInit+0xb4>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800108c:	2303      	movs	r3, #3
 800108e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001092:	2312      	movs	r3, #18
 8001094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010a4:	2304      	movs	r3, #4
 80010a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010ae:	4619      	mov	r1, r3
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <HAL_I2C_MspInit+0xb8>)
 80010b2:	f000 fbb9 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_I2C_MspInit+0xb4>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_I2C_MspInit+0xb4>)
 80010bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_I2C_MspInit+0xb4>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	37c0      	adds	r7, #192	; 0xc0
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40005800 	.word	0x40005800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48001400 	.word	0x48001400

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0b0      	sub	sp, #192	; 0xc0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2298      	movs	r2, #152	; 0x98
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f00a f8e5 	bl	800b2d4 <memset>
  if(huart->Instance==LPUART1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a22      	ldr	r2, [pc, #136]	; (8001198 <HAL_UART_MspInit+0xb4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d13d      	bne.n	8001190 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001114:	2320      	movs	r3, #32
 8001116:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fac3 	bl	80036ac <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800112c:	f7ff fefe 	bl	8000f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_UART_MspInit+0xb8>)
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_UART_MspInit+0xb8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_UART_MspInit+0xb8>)
 800113e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_UART_MspInit+0xb8>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_UART_MspInit+0xb8>)
 800114e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_UART_MspInit+0xb8>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001160:	f001 fb5a 	bl	8002818 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001164:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800117e:	2308      	movs	r3, #8
 8001180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_UART_MspInit+0xbc>)
 800118c:	f000 fb4c 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	37c0      	adds	r7, #192	; 0xc0
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40008000 	.word	0x40008000
 800119c:	40021000 	.word	0x40021000
 80011a0:	48001800 	.word	0x48001800

080011a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_TIM_Base_MspInit+0xac>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d114      	bne.n	80011e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	4a26      	ldr	r2, [pc, #152]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 80011bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011c0:	6613      	str	r3, [r2, #96]	; 0x60
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2019      	movs	r0, #25
 80011d4:	f000 faf1 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011d8:	2019      	movs	r0, #25
 80011da:	f000 fb0a 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011de:	e032      	b.n	8001246 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d114      	bne.n	8001214 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201c      	movs	r0, #28
 8001208:	f000 fad7 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800120c:	201c      	movs	r0, #28
 800120e:	f000 faf0 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 8001212:	e018      	b.n	8001246 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_TIM_Base_MspInit+0xb4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d113      	bne.n	8001246 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6593      	str	r3, [r2, #88]	; 0x58
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_TIM_Base_MspInit+0xb0>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	201e      	movs	r0, #30
 800123c:	f000 fabd 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001240:	201e      	movs	r0, #30
 8001242:	f000 fad6 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40012c00 	.word	0x40012c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40000800 	.word	0x40000800

0800125c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a34      	ldr	r2, [pc, #208]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d11d      	bne.n	80012ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4828      	ldr	r0, [pc, #160]	; (8001354 <HAL_TIM_MspPostInit+0xf8>)
 80012b4:	f000 fab8 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012b8:	e044      	b.n	8001344 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c2:	d11d      	bne.n	8001300 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	4a21      	ldr	r2, [pc, #132]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ec:	2301      	movs	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fa:	f000 fa95 	bl	8001828 <HAL_GPIO_Init>
}
 80012fe:	e021      	b.n	8001344 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_TIM_MspPostInit+0xfc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11c      	bne.n	8001344 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001334:	2302      	movs	r3, #2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <HAL_TIM_MspPostInit+0x100>)
 8001340:	f000 fa72 	bl	8001828 <HAL_GPIO_Init>
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40012c00 	.word	0x40012c00
 8001350:	40021000 	.word	0x40021000
 8001354:	48001000 	.word	0x48001000
 8001358:	40000800 	.word	0x40000800
 800135c:	48000c00 	.word	0x48000c00

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 f8e6 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013ba:	f003 f841 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000430 	.word	0x20000430

080013c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM2_IRQHandler+0x10>)
 80013ce:	f003 f837 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000047c 	.word	0x2000047c

080013dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <TIM4_IRQHandler+0x10>)
 80013e2:	f003 f82d 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200004c8 	.word	0x200004c8

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f009 ff20 	bl	800b264 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20050000 	.word	0x20050000
 8001450:	00000400 	.word	0x00000400
 8001454:	20000798 	.word	0x20000798
 8001458:	200007f0 	.word	0x200007f0

0800145c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001484:	f7ff ffea 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <LoopForever+0x6>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LoopForever+0xe>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <LoopForever+0x16>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f009 fedf 	bl	800b270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b2:	f7ff f877 	bl	80005a4 <main>

080014b6 <LoopForever>:

LoopForever:
    b LoopForever
 80014b6:	e7fe      	b.n	80014b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80014c4:	0800bcb4 	.word	0x0800bcb4
  ldr r2, =_sbss
 80014c8:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 80014cc:	200007f0 	.word	0x200007f0

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>

080014d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f961 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f80e 	bl	8001504 <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	e001      	b.n	80014f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f4:	f7ff fd74 	bl	8000fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_InitTick+0x6c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_InitTick+0x70>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_InitTick+0x6c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f96d 	bl	800180e <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d809      	bhi.n	8001554 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f937 	bl	80017ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_InitTick+0x74>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e007      	b.n	8001564 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e004      	b.n	8001564 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e001      	b.n	8001564 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000004 	.word	0x20000004
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	2000079c 	.word	0x2000079c

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000079c 	.word	0x2000079c

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_Delay+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000000c 	.word	0x2000000c

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	e166      	b.n	8001b06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8158 	beq.w	8001b00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d005      	beq.n	8001868 <HAL_GPIO_Init+0x40>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d130      	bne.n	80018ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800189e:	2201      	movs	r2, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f003 0201 	and.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d017      	beq.n	8001906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d123      	bne.n	800195a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	08da      	lsrs	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3208      	adds	r2, #8
 800191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	6939      	ldr	r1, [r7, #16]
 8001956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	2203      	movs	r2, #3
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0203 	and.w	r2, r3, #3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 80b2 	beq.w	8001b00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199c:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_GPIO_Init+0x2fc>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a0:	4a60      	ldr	r2, [pc, #384]	; (8001b24 <HAL_GPIO_Init+0x2fc>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6613      	str	r3, [r2, #96]	; 0x60
 80019a8:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <HAL_GPIO_Init+0x2fc>)
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b4:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_GPIO_Init+0x300>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019de:	d02b      	beq.n	8001a38 <HAL_GPIO_Init+0x210>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x304>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d025      	beq.n	8001a34 <HAL_GPIO_Init+0x20c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_GPIO_Init+0x308>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d01f      	beq.n	8001a30 <HAL_GPIO_Init+0x208>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d019      	beq.n	8001a2c <HAL_GPIO_Init+0x204>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x310>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x200>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_GPIO_Init+0x314>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1fc>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x318>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1f8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x31c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1f4>
 8001a18:	2307      	movs	r3, #7
 8001a1a:	e00e      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	e00c      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a20:	2306      	movs	r3, #6
 8001a22:	e00a      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a24:	2305      	movs	r3, #5
 8001a26:	e008      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a28:	2304      	movs	r3, #4
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4a:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_GPIO_Init+0x300>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a58:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a7c:	4a32      	ldr	r2, [pc, #200]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aa6:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f ae91 	bne.w	8001838 <HAL_GPIO_Init+0x10>
  }
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000c00 	.word	0x48000c00
 8001b38:	48001000 	.word	0x48001000
 8001b3c:	48001400 	.word	0x48001400
 8001b40:	48001800 	.word	0x48001800
 8001b44:	48001c00 	.word	0x48001c00
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e081      	b.n	8001c92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fa40 	bl	8001028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2224      	movs	r2, #36	; 0x24
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e006      	b.n	8001c04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d104      	bne.n	8001c16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69d9      	ldr	r1, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1a      	ldr	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	817b      	strh	r3, [r7, #10]
 8001cac:	4613      	mov	r3, r2
 8001cae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	f040 80da 	bne.w	8001e72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2C_Master_Transmit+0x30>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0d3      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cd4:	f7ff fc66 	bl	80015a4 <HAL_GetTick>
 8001cd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2319      	movs	r3, #25
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f9e6 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0be      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2221      	movs	r2, #33	; 0x21
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2210      	movs	r2, #16
 8001d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2bff      	cmp	r3, #255	; 0xff
 8001d26:	d90e      	bls.n	8001d46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	8979      	ldrh	r1, [r7, #10]
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fbdc 	bl	80024fc <I2C_TransferConfig>
 8001d44:	e06c      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	8979      	ldrh	r1, [r7, #10]
 8001d58:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_I2C_Master_Transmit+0x1e0>)
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 fbcb 	bl	80024fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d66:	e05b      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	6a39      	ldr	r1, [r7, #32]
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f9e3 	bl	8002138 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e07b      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d034      	beq.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d130      	bne.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f975 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e04d      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2bff      	cmp	r3, #255	; 0xff
 8001de0:	d90e      	bls.n	8001e00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	22ff      	movs	r2, #255	; 0xff
 8001de6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	8979      	ldrh	r1, [r7, #10]
 8001df0:	2300      	movs	r3, #0
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 fb7f 	bl	80024fc <I2C_TransferConfig>
 8001dfe:	e00f      	b.n	8001e20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fb6e 	bl	80024fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d19e      	bne.n	8001d68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	6a39      	ldr	r1, [r7, #32]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f9c2 	bl	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e01a      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_I2C_Master_Transmit+0x1e4>)
 8001e52:	400b      	ands	r3, r1
 8001e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	80002000 	.word	0x80002000
 8001e80:	fe00e800 	.word	0xfe00e800

08001e84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	460b      	mov	r3, r1
 8001e92:	817b      	strh	r3, [r7, #10]
 8001e94:	4613      	mov	r3, r2
 8001e96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	f040 80db 	bne.w	800205c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2C_Master_Receive+0x30>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0d4      	b.n	800205e <HAL_I2C_Master_Receive+0x1da>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ebc:	f7ff fb72 	bl	80015a4 <HAL_GetTick>
 8001ec0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2319      	movs	r3, #25
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f8f2 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0bf      	b.n	800205e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2222      	movs	r2, #34	; 0x22
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2bff      	cmp	r3, #255	; 0xff
 8001f0e:	d90e      	bls.n	8001f2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	22ff      	movs	r2, #255	; 0xff
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	4b52      	ldr	r3, [pc, #328]	; (8002068 <HAL_I2C_Master_Receive+0x1e4>)
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fae8 	bl	80024fc <I2C_TransferConfig>
 8001f2c:	e06d      	b.n	800200a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	8979      	ldrh	r1, [r7, #10]
 8001f40:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_I2C_Master_Receive+0x1e4>)
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fad7 	bl	80024fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f4e:	e05c      	b.n	800200a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	6a39      	ldr	r1, [r7, #32]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f96b 	bl	8002230 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e07c      	b.n	800205e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d034      	beq.n	800200a <HAL_I2C_Master_Receive+0x186>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d130      	bne.n	800200a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 f880 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e04d      	b.n	800205e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2bff      	cmp	r3, #255	; 0xff
 8001fca:	d90e      	bls.n	8001fea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	22ff      	movs	r2, #255	; 0xff
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	8979      	ldrh	r1, [r7, #10]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 fa8a 	bl	80024fc <I2C_TransferConfig>
 8001fe8:	e00f      	b.n	800200a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	8979      	ldrh	r1, [r7, #10]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fa79 	bl	80024fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d19d      	bne.n	8001f50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	6a39      	ldr	r1, [r7, #32]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f8cd 	bl	80021b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e01a      	b.n	800205e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2220      	movs	r2, #32
 800202e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_I2C_Master_Receive+0x1e8>)
 800203c:	400b      	ands	r3, r1
 800203e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	80002400 	.word	0x80002400
 800206c:	fe00e800 	.word	0xfe00e800

08002070 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b02      	cmp	r3, #2
 8002084:	d103      	bne.n	800208e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d007      	beq.n	80020ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	619a      	str	r2, [r3, #24]
  }
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c8:	e022      	b.n	8002110 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d01e      	beq.n	8002110 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d2:	f7ff fa67 	bl	80015a4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d302      	bcc.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d113      	bne.n	8002110 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e00f      	b.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	429a      	cmp	r2, r3
 800212c:	d0cd      	beq.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002144:	e02c      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f8ea 	bl	8002324 <I2C_IsErrorOccurred>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e02a      	b.n	80021b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d01e      	beq.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002162:	f7ff fa1f 	bl	80015a4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	429a      	cmp	r2, r3
 8002170:	d302      	bcc.n	8002178 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d113      	bne.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e007      	b.n	80021b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d1cb      	bne.n	8002146 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c4:	e028      	b.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8aa 	bl	8002324 <I2C_IsErrorOccurred>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e026      	b.n	8002228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7ff f9e3 	bl	80015a4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d113      	bne.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e007      	b.n	8002228 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b20      	cmp	r3, #32
 8002224:	d1cf      	bne.n	80021c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800223c:	e064      	b.n	8002308 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f86e 	bl	8002324 <I2C_IsErrorOccurred>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e062      	b.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b20      	cmp	r3, #32
 800225e:	d138      	bne.n	80022d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d105      	bne.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e04e      	b.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b10      	cmp	r3, #16
 8002286:	d107      	bne.n	8002298 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2204      	movs	r2, #4
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
 8002296:	e002      	b.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2220      	movs	r2, #32
 80022a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80022b2:	400b      	ands	r3, r1
 80022b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e022      	b.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7ff f967 	bl	80015a4 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10f      	bne.n	8002308 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e007      	b.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d193      	bne.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	fe00e800 	.word	0xfe00e800

08002324 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d075      	beq.n	800243c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2210      	movs	r2, #16
 8002356:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002358:	e056      	b.n	8002408 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d052      	beq.n	8002408 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002362:	f7ff f91f 	bl	80015a4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <I2C_IsErrorOccurred+0x54>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d147      	bne.n	8002408 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002382:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800238a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239a:	d12e      	bne.n	80023fa <I2C_IsErrorOccurred+0xd6>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a2:	d02a      	beq.n	80023fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d027      	beq.n	80023fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023ba:	f7ff f8f3 	bl	80015a4 <HAL_GetTick>
 80023be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c0:	e01b      	b.n	80023fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023c2:	f7ff f8ef 	bl	80015a4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b19      	cmp	r3, #25
 80023ce:	d914      	bls.n	80023fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b20      	cmp	r3, #32
 8002406:	d1dc      	bne.n	80023c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b20      	cmp	r3, #32
 8002414:	d003      	beq.n	800241e <I2C_IsErrorOccurred+0xfa>
 8002416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800241a:	2b00      	cmp	r3, #0
 800241c:	d09d      	beq.n	800235a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800241e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2220      	movs	r2, #32
 800242c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80024aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01c      	beq.n	80024ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f7ff fddc 	bl	8002070 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <I2C_IsErrorOccurred+0x1d4>)
 80024c4:	400b      	ands	r3, r1
 80024c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80024ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	fe00e800 	.word	0xfe00e800

080024fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	817b      	strh	r3, [r7, #10]
 800250a:	4613      	mov	r3, r2
 800250c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800250e:	897b      	ldrh	r3, [r7, #10]
 8002510:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002514:	7a7b      	ldrb	r3, [r7, #9]
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800251c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	4313      	orrs	r3, r2
 8002526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800252a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	0d5b      	lsrs	r3, r3, #21
 8002536:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <I2C_TransferConfig+0x60>)
 800253c:	430b      	orrs	r3, r1
 800253e:	43db      	mvns	r3, r3
 8002540:	ea02 0103 	and.w	r1, r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	03ff63ff 	.word	0x03ff63ff

08002560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b20      	cmp	r3, #32
 8002574:	d138      	bne.n	80025e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002580:	2302      	movs	r3, #2
 8002582:	e032      	b.n	80025ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	; 0x24
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b20      	cmp	r3, #32
 800260a:	d139      	bne.n	8002680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002616:	2302      	movs	r3, #2
 8002618:	e033      	b.n	8002682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2224      	movs	r2, #36	; 0x24
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002694:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800269c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a0:	d102      	bne.n	80026a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80026a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a6:	e00b      	b.n	80026c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80026aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b6:	d102      	bne.n	80026be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80026b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026bc:	e000      	b.n	80026c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80026be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000

080026d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d141      	bne.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026de:	4b4b      	ldr	r3, [pc, #300]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ea:	d131      	bne.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f2:	4a46      	ldr	r2, [pc, #280]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026fc:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002704:	4a41      	ldr	r2, [pc, #260]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2232      	movs	r2, #50	; 0x32
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	4a3f      	ldr	r2, [pc, #252]	; (8002814 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	0c9b      	lsrs	r3, r3, #18
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002722:	e002      	b.n	800272a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3b01      	subs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002736:	d102      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f2      	bne.n	8002724 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800273e:	4b33      	ldr	r3, [pc, #204]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d158      	bne.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e057      	b.n	8002800 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002750:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	4a2d      	ldr	r2, [pc, #180]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800275c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002760:	e04d      	b.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002768:	d141      	bne.n	80027ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800276a:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	d131      	bne.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277e:	4a23      	ldr	r2, [pc, #140]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002790:	4a1e      	ldr	r2, [pc, #120]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002796:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2232      	movs	r2, #50	; 0x32
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9b      	lsrs	r3, r3, #18
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ae:	e002      	b.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c2:	d102      	bne.n	80027ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f2      	bne.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d112      	bne.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e011      	b.n	8002800 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027ec:	e007      	b.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40007000 	.word	0x40007000
 8002810:	20000004 	.word	0x20000004
 8002814:	431bde83 	.word	0x431bde83

08002818 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_PWREx_EnableVddIO2+0x1c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002826:	6053      	str	r3, [r2, #4]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40007000 	.word	0x40007000

08002838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f000 bc68 	b.w	800311c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284c:	4b97      	ldr	r3, [pc, #604]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002856:	4b95      	ldr	r3, [pc, #596]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80e6 	beq.w	8002a3a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_RCC_OscConfig+0x4c>
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	f040 808d 	bne.w	8002996 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 8089 	bne.w	8002996 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002884:	4b89      	ldr	r3, [pc, #548]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <HAL_RCC_OscConfig+0x66>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f000 bc3f 	b.w	800311c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a2:	4b82      	ldr	r3, [pc, #520]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <HAL_RCC_OscConfig+0x80>
 80028ae:	4b7f      	ldr	r3, [pc, #508]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_OscConfig+0x8c>
 80028b8:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d224      	bcs.n	8002912 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fe2d 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f000 bc1f 	b.w	800311c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028de:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a72      	ldr	r2, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b70      	ldr	r3, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	496d      	ldr	r1, [pc, #436]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fc:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	4968      	ldr	r1, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
 8002910:	e025      	b.n	800295e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	4960      	ldr	r1, [pc, #384]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	495b      	ldr	r1, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fdec 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e3de      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295e:	f000 fd21 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b51      	ldr	r3, [pc, #324]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	4950      	ldr	r1, [pc, #320]	; (8002ab0 <HAL_RCC_OscConfig+0x278>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_RCC_OscConfig+0x27c>)
 800297c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fdbe 	bl	8001504 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d052      	beq.n	8002a38 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	e3c2      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d032      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a42      	ldr	r2, [pc, #264]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fdfb 	bl	80015a4 <HAL_GetTick>
 80029ae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b2:	f7fe fdf7 	bl	80015a4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e3ab      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a35      	ldr	r2, [pc, #212]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	4930      	ldr	r1, [pc, #192]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	492b      	ldr	r1, [pc, #172]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
 8002a02:	e01a      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a28      	ldr	r2, [pc, #160]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fdc8 	bl	80015a4 <HAL_GetTick>
 8002a14:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a18:	f7fe fdc4 	bl	80015a4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e378      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1e0>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d073      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_OscConfig+0x220>
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d10e      	bne.n	8002a70 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d063      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2f4>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d15f      	bne.n	8002b2c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e355      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d106      	bne.n	8002a88 <HAL_RCC_OscConfig+0x250>
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e025      	b.n	8002ad4 <HAL_RCC_OscConfig+0x29c>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d114      	bne.n	8002abc <HAL_RCC_OscConfig+0x284>
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCC_OscConfig+0x274>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e013      	b.n	8002ad4 <HAL_RCC_OscConfig+0x29c>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	0800bc00 	.word	0x0800bc00
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	4b8f      	ldr	r3, [pc, #572]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a8e      	ldr	r2, [pc, #568]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b8c      	ldr	r3, [pc, #560]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a8b      	ldr	r2, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fd62 	bl	80015a4 <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe fd5e 	bl	80015a4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e312      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2ac>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fd4e 	bl	80015a4 <HAL_GetTick>
 8002b08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fd4a 	bl	80015a4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e2fe      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	4b77      	ldr	r3, [pc, #476]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2d4>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d060      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x314>
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b4c:	4b6b      	ldr	r3, [pc, #428]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x32c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e2db      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4962      	ldr	r1, [pc, #392]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b78:	e040      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d023      	beq.n	8002bca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b82:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fd09 	bl	80015a4 <HAL_GetTick>
 8002b92:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b96:	f7fe fd05 	bl	80015a4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e2b9      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	494e      	ldr	r1, [pc, #312]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bca:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fce5 	bl	80015a4 <HAL_GetTick>
 8002bda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe fce1 	bl	80015a4 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e295      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8082 	beq.w	8002d0e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d05f      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c12:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d037      	beq.n	8002c98 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e26d      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c5a:	f7fe fca3 	bl	80015a4 <HAL_GetTick>
 8002c5e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe fc9f 	bl	80015a4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b11      	cmp	r3, #17
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e253      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ef      	bne.n	8002c62 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c88:	f023 0210 	bic.w	r2, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c98:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fc7c 	bl	80015a4 <HAL_GetTick>
 8002cac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fc78 	bl	80015a4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b11      	cmp	r3, #17
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e22c      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ef      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x478>
 8002cd0:	e01d      	b.n	8002d0e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fc5f 	bl	80015a4 <HAL_GetTick>
 8002ce6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fe fc5b 	bl	80015a4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b11      	cmp	r3, #17
 8002cf6:	d903      	bls.n	8002d00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e20f      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
 8002cfc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d00:	4b83      	ldr	r3, [pc, #524]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ed      	bne.n	8002cea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80bd 	beq.w	8002e96 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d22:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	4b78      	ldr	r3, [pc, #480]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	4a77      	ldr	r2, [pc, #476]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3a:	4b75      	ldr	r3, [pc, #468]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d46:	2301      	movs	r3, #1
 8002d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4c:	4b71      	ldr	r3, [pc, #452]	; (8002f14 <HAL_RCC_OscConfig+0x6dc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	4b6e      	ldr	r3, [pc, #440]	; (8002f14 <HAL_RCC_OscConfig+0x6dc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6d      	ldr	r2, [pc, #436]	; (8002f14 <HAL_RCC_OscConfig+0x6dc>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe fc1e 	bl	80015a4 <HAL_GetTick>
 8002d68:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe fc1a 	bl	80015a4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1ce      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x6dc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002d96:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	4959      	ldr	r1, [pc, #356]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dbc:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	4a53      	ldr	r2, [pc, #332]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dcc:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	4a4f      	ldr	r2, [pc, #316]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ddc:	e018      	b.n	8002e10 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dde:	4b4c      	ldr	r3, [pc, #304]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dee:	e00f      	b.n	8002e10 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002df0:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	4a42      	ldr	r2, [pc, #264]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d016      	beq.n	8002e46 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fbc4 	bl	80015a4 <HAL_GetTick>
 8002e1c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fbc0 	bl	80015a4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e172      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e36:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ed      	beq.n	8002e20 <HAL_RCC_OscConfig+0x5e8>
 8002e44:	e01d      	b.n	8002e82 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe fbad 	bl	80015a4 <HAL_GetTick>
 8002e4a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fba9 	bl	80015a4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e15b      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ed      	bne.n	8002e4e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d105      	bne.n	8002e96 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d041      	beq.n	8002f26 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01c      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb0:	4a17      	ldr	r2, [pc, #92]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe fb73 	bl	80015a4 <HAL_GetTick>
 8002ebe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec2:	f7fe fb6f 	bl	80015a4 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e123      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ef      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x68a>
 8002ee2:	e020      	b.n	8002f26 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_OscConfig+0x6d8>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fb56 	bl	80015a4 <HAL_GetTick>
 8002ef8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002efa:	e00d      	b.n	8002f18 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002efc:	f7fe fb52 	bl	80015a4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d906      	bls.n	8002f18 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e106      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f18:	4b82      	ldr	r3, [pc, #520]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ea      	bne.n	8002efc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80f5 	beq.w	800311a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	f040 80cb 	bne.w	80030d0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d12c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d123      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d113      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d109      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d06d      	beq.n	8003084 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d068      	beq.n	8003080 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fba:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0a8      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a55      	ldr	r2, [pc, #340]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd6:	f7fe fae5 	bl	80015a4 <HAL_GetTick>
 8002fda:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fae1 	bl	80015a4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e095      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffc:	4b49      	ldr	r3, [pc, #292]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	4b49      	ldr	r3, [pc, #292]	; (8003128 <HAL_RCC_OscConfig+0x8f0>)
 8003002:	4013      	ands	r3, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800300c:	3a01      	subs	r2, #1
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	4311      	orrs	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003016:	0212      	lsls	r2, r2, #8
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301e:	0852      	lsrs	r2, r2, #1
 8003020:	3a01      	subs	r2, #1
 8003022:	0552      	lsls	r2, r2, #21
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800302a:	0852      	lsrs	r2, r2, #1
 800302c:	3a01      	subs	r2, #1
 800302e:	0652      	lsls	r2, r2, #25
 8003030:	4311      	orrs	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003036:	06d2      	lsls	r2, r2, #27
 8003038:	430a      	orrs	r2, r1
 800303a:	493a      	ldr	r1, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 800303c:	4313      	orrs	r3, r2
 800303e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003040:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a37      	ldr	r2, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800304c:	4b35      	ldr	r3, [pc, #212]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8003052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003058:	f7fe faa4 	bl	80015a4 <HAL_GetTick>
 800305c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe faa0 	bl	80015a4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e054      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	4b2c      	ldr	r3, [pc, #176]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800307e:	e04c      	b.n	800311a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e04b      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d144      	bne.n	800311a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a20      	ldr	r2, [pc, #128]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030a8:	f7fe fa7c 	bl	80015a4 <HAL_GetTick>
 80030ac:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fa78 	bl	80015a4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e02c      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x878>
 80030ce:	e024      	b.n	800311a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d01f      	beq.n	8003116 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 80030dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fa5f 	bl	80015a4 <HAL_GetTick>
 80030e6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe fa5b 	bl	80015a4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e00f      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	4905      	ldr	r1, [pc, #20]	; (8003124 <HAL_RCC_OscConfig+0x8ec>)
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_RCC_OscConfig+0x8f4>)
 8003110:	4013      	ands	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
 8003114:	e001      	b.n	800311a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3728      	adds	r7, #40	; 0x28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	019d800c 	.word	0x019d800c
 800312c:	feeefffc 	.word	0xfeeefffc

08003130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e11d      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b90      	ldr	r3, [pc, #576]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d910      	bls.n	8003178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b8d      	ldr	r3, [pc, #564]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 020f 	bic.w	r2, r3, #15
 800315e:	498b      	ldr	r1, [pc, #556]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b89      	ldr	r3, [pc, #548]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e105      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	4b81      	ldr	r3, [pc, #516]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003190:	429a      	cmp	r2, r3
 8003192:	d908      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b7e      	ldr	r3, [pc, #504]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	497b      	ldr	r1, [pc, #492]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d079      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d11e      	bne.n	80031f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ba:	4b75      	ldr	r3, [pc, #468]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0dc      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80031ca:	f000 fa09 	bl	80035e0 <RCC_GetSysClockFreqFromPLLSource>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a70      	ldr	r2, [pc, #448]	; (8003394 <HAL_RCC_ClockConfig+0x264>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d946      	bls.n	8003264 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031d6:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d140      	bne.n	8003264 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031e2:	4b6b      	ldr	r3, [pc, #428]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	4a69      	ldr	r2, [pc, #420]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e035      	b.n	8003264 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003200:	4b63      	ldr	r3, [pc, #396]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d115      	bne.n	8003238 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b9      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003218:	4b5d      	ldr	r3, [pc, #372]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0ad      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0a5      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003238:	f000 f8b4 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800323c:	4603      	mov	r3, r0
 800323e:	4a55      	ldr	r2, [pc, #340]	; (8003394 <HAL_RCC_ClockConfig+0x264>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d90f      	bls.n	8003264 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003244:	4b52      	ldr	r3, [pc, #328]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003258:	4a4d      	ldr	r2, [pc, #308]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 800325a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4947      	ldr	r1, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003276:	f7fe f995 	bl	80015a4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327c:	e00a      	b.n	8003294 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327e:	f7fe f991 	bl	80015a4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e077      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003294:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 020c 	and.w	r2, r3, #12
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d1eb      	bne.n	800327e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d105      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032ac:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a37      	ldr	r2, [pc, #220]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80032b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d010      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b31      	ldr	r3, [pc, #196]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d208      	bcs.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	492b      	ldr	r1, [pc, #172]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d210      	bcs.n	8003316 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 020f 	bic.w	r2, r3, #15
 80032fc:	4923      	ldr	r1, [pc, #140]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003304:	4b21      	ldr	r3, [pc, #132]	; (800338c <HAL_RCC_ClockConfig+0x25c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d001      	beq.n	8003316 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e036      	b.n	8003384 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4918      	ldr	r1, [pc, #96]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4910      	ldr	r1, [pc, #64]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003354:	f000 f826 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCC_ClockConfig+0x260>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	490c      	ldr	r1, [pc, #48]	; (8003398 <HAL_RCC_ClockConfig+0x268>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x26c>)
 8003372:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe f8c3 	bl	8001504 <HAL_InitTick>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]

  return status;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40022000 	.word	0x40022000
 8003390:	40021000 	.word	0x40021000
 8003394:	04c4b400 	.word	0x04c4b400
 8003398:	0800bc00 	.word	0x0800bc00
 800339c:	20000004 	.word	0x20000004
 80033a0:	20000008 	.word	0x20000008

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d121      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11e      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e005      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003400:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003414:	e00a      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d102      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e004      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d101      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003428:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800342a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d134      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d003      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0xa6>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d003      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xac>
 8003448:	e005      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800344a:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800344c:	617b      	str	r3, [r7, #20]
      break;
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003452:	617b      	str	r3, [r7, #20]
      break;
 8003454:	e002      	b.n	800345c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	617b      	str	r3, [r7, #20]
      break;
 800345a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3301      	adds	r3, #1
 8003468:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	fb03 f202 	mul.w	r2, r3, r2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	0e5b      	lsrs	r3, r3, #25
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	3301      	adds	r3, #1
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800349c:	69bb      	ldr	r3, [r7, #24]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	0800bc18 	.word	0x0800bc18
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000004 	.word	0x20000004

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	0800bc10 	.word	0x0800bc10

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003504:	f7ff ffda 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4904      	ldr	r1, [pc, #16]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	0800bc10 	.word	0x0800bc10

0800352c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff f8a4 	bl	8002690 <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f894 	bl	8002690 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d10b      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d913      	bls.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2ba0      	cmp	r3, #160	; 0xa0
 8003588:	d902      	bls.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e00d      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e00a      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b7f      	cmp	r3, #127	; 0x7f
 800359a:	d902      	bls.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800359c:	2302      	movs	r3, #2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e004      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b70      	cmp	r3, #112	; 0x70
 80035a6:	d101      	bne.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 020f 	bic.w	r2, r3, #15
 80035b4:	4909      	ldr	r1, [pc, #36]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40022000 	.word	0x40022000

080035e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035e6:	4b2d      	ldr	r3, [pc, #180]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d00b      	beq.n	800360e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d825      	bhi.n	8003648 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d008      	beq.n	8003614 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11f      	bne.n	8003648 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800360a:	613b      	str	r3, [r7, #16]
    break;
 800360c:	e01f      	b.n	800364e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800360e:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003610:	613b      	str	r3, [r7, #16]
    break;
 8003612:	e01c      	b.n	800364e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003614:	4b21      	ldr	r3, [pc, #132]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e005      	b.n	800363c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	613b      	str	r3, [r7, #16]
    break;
 8003646:	e002      	b.n	800364e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
    break;
 800364c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	3301      	adds	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	fb03 f202 	mul.w	r2, r3, r2
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	0e5b      	lsrs	r3, r3, #25
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	3301      	adds	r3, #1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800368e:	683b      	ldr	r3, [r7, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40021000 	.word	0x40021000
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200
 80036a8:	0800bc18 	.word	0x0800bc18

080036ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b4:	2300      	movs	r3, #0
 80036b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b8:	2300      	movs	r3, #0
 80036ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d040      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d02a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d825      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036d4:	2b60      	cmp	r3, #96	; 0x60
 80036d6:	d026      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036d8:	2b60      	cmp	r3, #96	; 0x60
 80036da:	d821      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d006      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d81d      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d010      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80036ec:	e018      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4a88      	ldr	r2, [pc, #544]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fa:	e015      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fb3e 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370c:	e00c      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3320      	adds	r3, #32
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fc29 	bl	8003f6c <RCCEx_PLLSAI2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	74fb      	strb	r3, [r7, #19]
      break;
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800372e:	4b79      	ldr	r3, [pc, #484]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003734:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373c:	4975      	ldr	r1, [pc, #468]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003744:	e001      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d047      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d030      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d82a      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376a:	d02a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800376c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003770:	d824      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003776:	d008      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377c:	d81e      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	d010      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003788:	e018      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800378a:	4b62      	ldr	r3, [pc, #392]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4a61      	ldr	r2, [pc, #388]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003796:	e015      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 faf0 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a8:	e00c      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3320      	adds	r3, #32
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fbdb 	bl	8003f6c <RCCEx_PLLSAI2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	74fb      	strb	r3, [r7, #19]
      break;
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80037c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037ca:	4b52      	ldr	r3, [pc, #328]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	494e      	ldr	r1, [pc, #312]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037e0:	e001      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 809f 	beq.w	8003932 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037f8:	4b46      	ldr	r3, [pc, #280]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003808:	2300      	movs	r3, #0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	4a40      	ldr	r2, [pc, #256]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6593      	str	r3, [r2, #88]	; 0x58
 800381a:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003826:	2301      	movs	r3, #1
 8003828:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a3a      	ldr	r2, [pc, #232]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003836:	f7fd feb5 	bl	80015a4 <HAL_GetTick>
 800383a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800383c:	e009      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fd feb1 	bl	80015a4 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d902      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	74fb      	strb	r3, [r7, #19]
        break;
 8003850:	e005      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003852:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ef      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800385e:	7cfb      	ldrb	r3, [r7, #19]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d15b      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01f      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	429a      	cmp	r2, r3
 8003880:	d019      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800388e:	4b21      	ldr	r3, [pc, #132]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ae:	4a19      	ldr	r2, [pc, #100]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d016      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd fe70 	bl	80015a4 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	e00b      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fd fe6c 	bl	80015a4 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d902      	bls.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	74fb      	strb	r3, [r7, #19]
            break;
 80038de:	e006      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ec      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80038ee:	7cfb      	ldrb	r3, [r7, #19]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10c      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038f4:	4b07      	ldr	r3, [pc, #28]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003904:	4903      	ldr	r1, [pc, #12]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800390c:	e008      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	74bb      	strb	r3, [r7, #18]
 8003912:	e005      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003914:	40021000 	.word	0x40021000
 8003918:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003920:	7c7b      	ldrb	r3, [r7, #17]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003926:	4ba0      	ldr	r3, [pc, #640]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	4a9f      	ldr	r2, [pc, #636]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800392c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003930:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800393e:	4b9a      	ldr	r3, [pc, #616]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f023 0203 	bic.w	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	4996      	ldr	r1, [pc, #600]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003960:	4b91      	ldr	r3, [pc, #580]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f023 020c 	bic.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	498e      	ldr	r1, [pc, #568]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003982:	4b89      	ldr	r3, [pc, #548]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	4985      	ldr	r1, [pc, #532]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039a4:	4b80      	ldr	r3, [pc, #512]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b2:	497d      	ldr	r1, [pc, #500]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c6:	4b78      	ldr	r3, [pc, #480]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	4974      	ldr	r1, [pc, #464]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039e8:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	496c      	ldr	r1, [pc, #432]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0a:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a18:	4963      	ldr	r1, [pc, #396]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a3a:	495b      	ldr	r1, [pc, #364]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	4952      	ldr	r1, [pc, #328]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a70:	4b4d      	ldr	r3, [pc, #308]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	494a      	ldr	r1, [pc, #296]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a92:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	4941      	ldr	r1, [pc, #260]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	4939      	ldr	r1, [pc, #228]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d028      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad6:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	4930      	ldr	r1, [pc, #192]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af4:	d106      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af6:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4a2b      	ldr	r2, [pc, #172]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b00:	60d3      	str	r3, [r2, #12]
 8003b02:	e011      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f935 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d04d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b3c:	d108      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b44:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b4e:	e012      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6e:	490e      	ldr	r1, [pc, #56]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8a:	60d3      	str	r3, [r2, #12]
 8003b8c:	e020      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b96:	d109      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a02      	ldr	r2, [pc, #8]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba2:	60d3      	str	r3, [r2, #12]
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f8e1 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d028      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bea:	4965      	ldr	r1, [pc, #404]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfa:	d106      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfc:	4b60      	ldr	r3, [pc, #384]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a5f      	ldr	r2, [pc, #380]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c06:	60d3      	str	r3, [r2, #12]
 8003c08:	e011      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c12:	d10c      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f8b2 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003c2a:	7cfb      	ldrb	r3, [r7, #19]
 8003c2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01e      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4a:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2102      	movs	r1, #2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f88d 	bl	8003d84 <RCCEx_PLLSAI1_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c84:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c8a:	f023 0204 	bic.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c94:	493a      	ldr	r1, [pc, #232]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cae:	f023 0218 	bic.w	r2, r3, #24
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	4931      	ldr	r1, [pc, #196]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d035      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fd fc64 	bl	80015a4 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cde:	e009      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ce0:	f7fd fc60 	bl	80015a4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d902      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf2:	e005      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ef      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d113      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d16:	491a      	ldr	r1, [pc, #104]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3320      	adds	r3, #32
 8003d22:	2102      	movs	r1, #2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f921 	bl	8003f6c <RCCEx_PLLSAI2_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	490a      	ldr	r1, [pc, #40]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d66:	d105      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000

08003d84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d92:	4b72      	ldr	r3, [pc, #456]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00e      	beq.n	8003dbc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0203 	and.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d103      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
       ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d142      	bne.n	8003e3c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
 8003dba:	e03f      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d018      	beq.n	8003df6 <RCCEx_PLLSAI1_Config+0x72>
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d825      	bhi.n	8003e14 <RCCEx_PLLSAI1_Config+0x90>
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d002      	beq.n	8003dd2 <RCCEx_PLLSAI1_Config+0x4e>
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d009      	beq.n	8003de4 <RCCEx_PLLSAI1_Config+0x60>
 8003dd0:	e020      	b.n	8003e14 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dd2:	4b62      	ldr	r3, [pc, #392]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11d      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e01a      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003de4:	4b5d      	ldr	r3, [pc, #372]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d116      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df4:	e013      	b.n	8003e1e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003df6:	4b59      	ldr	r3, [pc, #356]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e02:	4b56      	ldr	r3, [pc, #344]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e12:	e006      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e004      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003e2a:	4b4c      	ldr	r3, [pc, #304]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4949      	ldr	r1, [pc, #292]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f040 8086 	bne.w	8003f50 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e44:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a44      	ldr	r2, [pc, #272]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fd fba8 	bl	80015a4 <HAL_GetTick>
 8003e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e56:	e009      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e58:	f7fd fba4 	bl	80015a4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d902      	bls.n	8003e6c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	73fb      	strb	r3, [r7, #15]
        break;
 8003e6a:	e005      	b.n	8003e78 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e6c:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ef      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d168      	bne.n	8003f50 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d113      	bne.n	8003eac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e84:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	0211      	lsls	r1, r2, #8
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68d2      	ldr	r2, [r2, #12]
 8003e96:	06d2      	lsls	r2, r2, #27
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6852      	ldr	r2, [r2, #4]
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	492d      	ldr	r1, [pc, #180]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	610b      	str	r3, [r1, #16]
 8003eaa:	e02d      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d115      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6892      	ldr	r2, [r2, #8]
 8003ebe:	0211      	lsls	r1, r2, #8
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6912      	ldr	r2, [r2, #16]
 8003ec4:	0852      	lsrs	r2, r2, #1
 8003ec6:	3a01      	subs	r2, #1
 8003ec8:	0552      	lsls	r2, r2, #21
 8003eca:	4311      	orrs	r1, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6852      	ldr	r2, [r2, #4]
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	0112      	lsls	r2, r2, #4
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	4921      	ldr	r1, [pc, #132]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	610b      	str	r3, [r1, #16]
 8003edc:	e014      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ede:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6892      	ldr	r2, [r2, #8]
 8003eea:	0211      	lsls	r1, r2, #8
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6952      	ldr	r2, [r2, #20]
 8003ef0:	0852      	lsrs	r2, r2, #1
 8003ef2:	3a01      	subs	r2, #1
 8003ef4:	0652      	lsls	r2, r2, #25
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6852      	ldr	r2, [r2, #4]
 8003efc:	3a01      	subs	r2, #1
 8003efe:	0112      	lsls	r2, r2, #4
 8003f00:	430a      	orrs	r2, r1
 8003f02:	4916      	ldr	r1, [pc, #88]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f08:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd fb46 	bl	80015a4 <HAL_GetTick>
 8003f18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f1a:	e009      	b.n	8003f30 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f1c:	f7fd fb42 	bl	80015a4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d902      	bls.n	8003f30 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f2e:	e005      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ef      	beq.n	8003f1c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	4904      	ldr	r1, [pc, #16]	; (8003f5c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	07ff800f 	.word	0x07ff800f
 8003f64:	ff9f800f 	.word	0xff9f800f
 8003f68:	f9ff800f 	.word	0xf9ff800f

08003f6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00e      	beq.n	8003fa4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0203 	and.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d103      	bne.n	8003f9e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
       ||
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d142      	bne.n	8004024 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e03f      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d018      	beq.n	8003fde <RCCEx_PLLSAI2_Config+0x72>
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d825      	bhi.n	8003ffc <RCCEx_PLLSAI2_Config+0x90>
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d002      	beq.n	8003fba <RCCEx_PLLSAI2_Config+0x4e>
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d009      	beq.n	8003fcc <RCCEx_PLLSAI2_Config+0x60>
 8003fb8:	e020      	b.n	8003ffc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fba:	4b62      	ldr	r3, [pc, #392]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fca:	e01a      	b.n	8004002 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fcc:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d116      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fdc:	e013      	b.n	8004006 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fde:	4b59      	ldr	r3, [pc, #356]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fea:	4b56      	ldr	r3, [pc, #344]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ffa:	e006      	b.n	800400a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e004      	b.n	800400c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004002:	bf00      	nop
 8004004:	e002      	b.n	800400c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800400a:	bf00      	nop
    }

    if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004012:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4949      	ldr	r1, [pc, #292]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004020:	4313      	orrs	r3, r2
 8004022:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 8086 	bne.w	8004138 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a44      	ldr	r2, [pc, #272]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fd fab4 	bl	80015a4 <HAL_GetTick>
 800403c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800403e:	e009      	b.n	8004054 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004040:	f7fd fab0 	bl	80015a4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d902      	bls.n	8004054 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	73fb      	strb	r3, [r7, #15]
        break;
 8004052:	e005      	b.n	8004060 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004054:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ef      	bne.n	8004040 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d168      	bne.n	8004138 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d113      	bne.n	8004094 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	4b35      	ldr	r3, [pc, #212]	; (8004148 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004072:	4013      	ands	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	0211      	lsls	r1, r2, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	06d2      	lsls	r2, r2, #27
 8004080:	4311      	orrs	r1, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6852      	ldr	r2, [r2, #4]
 8004086:	3a01      	subs	r2, #1
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	430a      	orrs	r2, r1
 800408c:	492d      	ldr	r1, [pc, #180]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	614b      	str	r3, [r1, #20]
 8004092:	e02d      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d115      	bne.n	80040c6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800409a:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	4b2b      	ldr	r3, [pc, #172]	; (800414c <RCCEx_PLLSAI2_Config+0x1e0>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	0211      	lsls	r1, r2, #8
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6912      	ldr	r2, [r2, #16]
 80040ac:	0852      	lsrs	r2, r2, #1
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0552      	lsls	r2, r2, #21
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6852      	ldr	r2, [r2, #4]
 80040b8:	3a01      	subs	r2, #1
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	430a      	orrs	r2, r1
 80040be:	4921      	ldr	r1, [pc, #132]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	614b      	str	r3, [r1, #20]
 80040c4:	e014      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	4b21      	ldr	r3, [pc, #132]	; (8004150 <RCCEx_PLLSAI2_Config+0x1e4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6892      	ldr	r2, [r2, #8]
 80040d2:	0211      	lsls	r1, r2, #8
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6952      	ldr	r2, [r2, #20]
 80040d8:	0852      	lsrs	r2, r2, #1
 80040da:	3a01      	subs	r2, #1
 80040dc:	0652      	lsls	r2, r2, #25
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6852      	ldr	r2, [r2, #4]
 80040e4:	3a01      	subs	r2, #1
 80040e6:	0112      	lsls	r2, r2, #4
 80040e8:	430a      	orrs	r2, r1
 80040ea:	4916      	ldr	r1, [pc, #88]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040f0:	4b14      	ldr	r3, [pc, #80]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fd fa52 	bl	80015a4 <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004102:	e009      	b.n	8004118 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004104:	f7fd fa4e 	bl	80015a4 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	73fb      	strb	r3, [r7, #15]
          break;
 8004116:	e005      	b.n	8004124 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ef      	beq.n	8004104 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4904      	ldr	r1, [pc, #16]	; (8004144 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004134:	4313      	orrs	r3, r2
 8004136:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	07ff800f 	.word	0x07ff800f
 800414c:	ff9f800f 	.word	0xff9f800f
 8004150:	f9ff800f 	.word	0xf9ff800f

08004154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e049      	b.n	80041fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd f812 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f000 fc7a 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	f241 1311 	movw	r3, #4369	; 0x1111
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <HAL_TIM_Base_Stop+0x38>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	f240 4344 	movw	r3, #1092	; 0x444
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <HAL_TIM_Base_Stop+0x38>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e049      	b.n	80042f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f841 	bl	80042fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 fbfc 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	6839      	ldr	r1, [r7, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ffba 	bl	80052a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3e      	ldr	r2, [pc, #248]	; (800442c <HAL_TIM_PWM_Stop+0x118>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_TIM_PWM_Stop+0x4a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <HAL_TIM_PWM_Stop+0x11c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00e      	beq.n	800435e <HAL_TIM_PWM_Stop+0x4a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3b      	ldr	r2, [pc, #236]	; (8004434 <HAL_TIM_PWM_Stop+0x120>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d009      	beq.n	800435e <HAL_TIM_PWM_Stop+0x4a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3a      	ldr	r2, [pc, #232]	; (8004438 <HAL_TIM_PWM_Stop+0x124>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_TIM_PWM_Stop+0x4a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a38      	ldr	r2, [pc, #224]	; (800443c <HAL_TIM_PWM_Stop+0x128>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_TIM_PWM_Stop+0x4e>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_TIM_PWM_Stop+0x50>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d017      	beq.n	8004398 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <HAL_TIM_PWM_Stop+0x84>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a1a      	ldr	r2, [r3, #32]
 800437e:	f240 4344 	movw	r3, #1092	; 0x444
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_TIM_PWM_Stop+0x84>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004396:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	f241 1311 	movw	r3, #4369	; 0x1111
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10f      	bne.n	80043c8 <HAL_TIM_PWM_Stop+0xb4>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a1a      	ldr	r2, [r3, #32]
 80043ae:	f240 4344 	movw	r3, #1092	; 0x444
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_PWM_Stop+0xb4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d104      	bne.n	80043d8 <HAL_TIM_PWM_Stop+0xc4>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d6:	e023      	b.n	8004420 <HAL_TIM_PWM_Stop+0x10c>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d104      	bne.n	80043e8 <HAL_TIM_PWM_Stop+0xd4>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e6:	e01b      	b.n	8004420 <HAL_TIM_PWM_Stop+0x10c>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d104      	bne.n	80043f8 <HAL_TIM_PWM_Stop+0xe4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f6:	e013      	b.n	8004420 <HAL_TIM_PWM_Stop+0x10c>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d104      	bne.n	8004408 <HAL_TIM_PWM_Stop+0xf4>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004406:	e00b      	b.n	8004420 <HAL_TIM_PWM_Stop+0x10c>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b10      	cmp	r3, #16
 800440c:	d104      	bne.n	8004418 <HAL_TIM_PWM_Stop+0x104>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004416:	e003      	b.n	8004420 <HAL_TIM_PWM_Stop+0x10c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40013400 	.word	0x40013400
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0202 	mvn.w	r2, #2
 800446c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fae3 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fad5 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fae6 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0204 	mvn.w	r2, #4
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fab9 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 faab 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fabc 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0208 	mvn.w	r2, #8
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa8f 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa81 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa92 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0210 	mvn.w	r2, #16
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2208      	movs	r2, #8
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa65 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa57 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fa68 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0201 	mvn.w	r2, #1
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fbd0 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 ff8e 	bl	800550c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d107      	bne.n	800461e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 ff81 	bl	8005520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d10e      	bne.n	800464a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d107      	bne.n	800464a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fa16 	bl	8004a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b20      	cmp	r3, #32
 8004656:	d10e      	bne.n	8004676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b20      	cmp	r3, #32
 8004664:	d107      	bne.n	8004676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0220 	mvn.w	r2, #32
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 ff41 	bl	80054f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800469a:	2302      	movs	r3, #2
 800469c:	e0ff      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b14      	cmp	r3, #20
 80046aa:	f200 80f0 	bhi.w	800488e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	08004709 	.word	0x08004709
 80046b8:	0800488f 	.word	0x0800488f
 80046bc:	0800488f 	.word	0x0800488f
 80046c0:	0800488f 	.word	0x0800488f
 80046c4:	08004749 	.word	0x08004749
 80046c8:	0800488f 	.word	0x0800488f
 80046cc:	0800488f 	.word	0x0800488f
 80046d0:	0800488f 	.word	0x0800488f
 80046d4:	0800478b 	.word	0x0800478b
 80046d8:	0800488f 	.word	0x0800488f
 80046dc:	0800488f 	.word	0x0800488f
 80046e0:	0800488f 	.word	0x0800488f
 80046e4:	080047cb 	.word	0x080047cb
 80046e8:	0800488f 	.word	0x0800488f
 80046ec:	0800488f 	.word	0x0800488f
 80046f0:	0800488f 	.word	0x0800488f
 80046f4:	0800480d 	.word	0x0800480d
 80046f8:	0800488f 	.word	0x0800488f
 80046fc:	0800488f 	.word	0x0800488f
 8004700:	0800488f 	.word	0x0800488f
 8004704:	0800484d 	.word	0x0800484d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fa56 	bl	8004bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6999      	ldr	r1, [r3, #24]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	619a      	str	r2, [r3, #24]
      break;
 8004746:	e0a5      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fac6 	bl	8004ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	021a      	lsls	r2, r3, #8
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	619a      	str	r2, [r3, #24]
      break;
 8004788:	e084      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fb2f 	bl	8004df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0208 	orr.w	r2, r2, #8
 80047a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0204 	bic.w	r2, r2, #4
 80047b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69d9      	ldr	r1, [r3, #28]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	61da      	str	r2, [r3, #28]
      break;
 80047c8:	e064      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fb97 	bl	8004f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	021a      	lsls	r2, r3, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	61da      	str	r2, [r3, #28]
      break;
 800480a:	e043      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fbe0 	bl	8004fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0204 	bic.w	r2, r2, #4
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800484a:	e023      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc24 	bl	80050a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800488c:	e002      	b.n	8004894 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      break;
 8004892:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop

080048a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIM_ConfigClockSource+0x1c>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e0b6      	b.n	8004a32 <HAL_TIM_ConfigClockSource+0x18a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004900:	d03e      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0xd8>
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004906:	f200 8087 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	f000 8086 	beq.w	8004a1e <HAL_TIM_ConfigClockSource+0x176>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	d87f      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004918:	2b70      	cmp	r3, #112	; 0x70
 800491a:	d01a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0xaa>
 800491c:	2b70      	cmp	r3, #112	; 0x70
 800491e:	d87b      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004920:	2b60      	cmp	r3, #96	; 0x60
 8004922:	d050      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x11e>
 8004924:	2b60      	cmp	r3, #96	; 0x60
 8004926:	d877      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004928:	2b50      	cmp	r3, #80	; 0x50
 800492a:	d03c      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0xfe>
 800492c:	2b50      	cmp	r3, #80	; 0x50
 800492e:	d873      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d058      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x13e>
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d86f      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004938:	2b30      	cmp	r3, #48	; 0x30
 800493a:	d064      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d86b      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004940:	2b20      	cmp	r3, #32
 8004942:	d060      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d867      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05c      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 800494c:	2b10      	cmp	r3, #16
 800494e:	d05a      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 8004950:	e062      	b.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6899      	ldr	r1, [r3, #8]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f000 fc7d 	bl	8005260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	609a      	str	r2, [r3, #8]
      break;
 800497e:	e04f      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f000 fc66 	bl	8005260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a2:	609a      	str	r2, [r3, #8]
      break;
 80049a4:	e03c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 fbda 	bl	800516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2150      	movs	r1, #80	; 0x50
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fc33 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 80049c4:	e02c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f000 fbf9 	bl	80051ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2160      	movs	r1, #96	; 0x60
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fc23 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 80049e4:	e01c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f000 fbba 	bl	800516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fc13 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004a04:	e00c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f000 fc0a 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004a16:	e003      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1c:	e000      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a40      	ldr	r2, [pc, #256]	; (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d00f      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3d      	ldr	r2, [pc, #244]	; (8004ba4 <TIM_Base_SetConfig+0x118>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3c      	ldr	r2, [pc, #240]	; (8004ba8 <TIM_Base_SetConfig+0x11c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3b      	ldr	r2, [pc, #236]	; (8004bac <TIM_Base_SetConfig+0x120>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3a      	ldr	r2, [pc, #232]	; (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <TIM_Base_SetConfig+0x118>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <TIM_Base_SetConfig+0x11c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <TIM_Base_SetConfig+0x120>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <TIM_Base_SetConfig+0x128>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <TIM_Base_SetConfig+0x130>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <TIM_Base_SetConfig+0x128>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0f      	ldr	r2, [pc, #60]	; (8004bbc <TIM_Base_SetConfig+0x130>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d103      	bne.n	8004b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	615a      	str	r2, [r3, #20]
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800

08004bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 0302 	bic.w	r3, r3, #2
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <TIM_OC1_SetConfig+0x10c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00f      	beq.n	8004c40 <TIM_OC1_SetConfig+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <TIM_OC1_SetConfig+0x110>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_OC1_SetConfig+0x80>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <TIM_OC1_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_OC1_SetConfig+0x80>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <TIM_OC1_SetConfig+0x118>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC1_SetConfig+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <TIM_OC1_SetConfig+0x11c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10c      	bne.n	8004c5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0308 	bic.w	r3, r3, #8
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <TIM_OC1_SetConfig+0x10c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <TIM_OC1_SetConfig+0xc2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <TIM_OC1_SetConfig+0x110>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_OC1_SetConfig+0xc2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <TIM_OC1_SetConfig+0x114>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_OC1_SetConfig+0xc2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <TIM_OC1_SetConfig+0x118>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_OC1_SetConfig+0xc2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <TIM_OC1_SetConfig+0x11c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	621a      	str	r2, [r3, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40013400 	.word	0x40013400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800

08004ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0210 	bic.w	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0320 	bic.w	r3, r3, #32
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a28      	ldr	r2, [pc, #160]	; (8004de0 <TIM_OC2_SetConfig+0x100>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_OC2_SetConfig+0x6c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a27      	ldr	r2, [pc, #156]	; (8004de4 <TIM_OC2_SetConfig+0x104>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d10d      	bne.n	8004d68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <TIM_OC2_SetConfig+0x100>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00f      	beq.n	8004d90 <TIM_OC2_SetConfig+0xb0>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <TIM_OC2_SetConfig+0x104>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_OC2_SetConfig+0xb0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <TIM_OC2_SetConfig+0x108>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_OC2_SetConfig+0xb0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <TIM_OC2_SetConfig+0x10c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC2_SetConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <TIM_OC2_SetConfig+0x110>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d113      	bne.n	8004db8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40013400 	.word	0x40013400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800

08004df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a27      	ldr	r2, [pc, #156]	; (8004ef0 <TIM_OC3_SetConfig+0xfc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_OC3_SetConfig+0x6a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <TIM_OC3_SetConfig+0x100>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10d      	bne.n	8004e7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <TIM_OC3_SetConfig+0xfc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_OC3_SetConfig+0xae>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <TIM_OC3_SetConfig+0x100>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_OC3_SetConfig+0xae>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ef8 <TIM_OC3_SetConfig+0x104>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_OC3_SetConfig+0xae>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a19      	ldr	r2, [pc, #100]	; (8004efc <TIM_OC3_SetConfig+0x108>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_OC3_SetConfig+0xae>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <TIM_OC3_SetConfig+0x10c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d113      	bne.n	8004eca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40013400 	.word	0x40013400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40014400 	.word	0x40014400
 8004f00:	40014800 	.word	0x40014800

08004f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <TIM_OC4_SetConfig+0xc0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <TIM_OC4_SetConfig+0x84>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <TIM_OC4_SetConfig+0xc4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_OC4_SetConfig+0x84>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a16      	ldr	r2, [pc, #88]	; (8004fcc <TIM_OC4_SetConfig+0xc8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_OC4_SetConfig+0x84>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <TIM_OC4_SetConfig+0xcc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC4_SetConfig+0x84>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <TIM_OC4_SetConfig+0xd0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d109      	bne.n	8004f9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	019b      	lsls	r3, r3, #6
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800501c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	041b      	lsls	r3, r3, #16
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a17      	ldr	r2, [pc, #92]	; (800508c <TIM_OC5_SetConfig+0xb4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00f      	beq.n	8005052 <TIM_OC5_SetConfig+0x7a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <TIM_OC5_SetConfig+0xb8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_OC5_SetConfig+0x7a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <TIM_OC5_SetConfig+0xbc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_OC5_SetConfig+0x7a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <TIM_OC5_SetConfig+0xc0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC5_SetConfig+0x7a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a13      	ldr	r2, [pc, #76]	; (800509c <TIM_OC5_SetConfig+0xc4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d109      	bne.n	8005066 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005058:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	621a      	str	r2, [r3, #32]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40013400 	.word	0x40013400
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400
 800509c:	40014800 	.word	0x40014800

080050a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	051b      	lsls	r3, r3, #20
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <TIM_OC6_SetConfig+0xb8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00f      	beq.n	800511c <TIM_OC6_SetConfig+0x7c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a17      	ldr	r2, [pc, #92]	; (800515c <TIM_OC6_SetConfig+0xbc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_OC6_SetConfig+0x7c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a16      	ldr	r2, [pc, #88]	; (8005160 <TIM_OC6_SetConfig+0xc0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_OC6_SetConfig+0x7c>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <TIM_OC6_SetConfig+0xc4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_OC6_SetConfig+0x7c>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a14      	ldr	r2, [pc, #80]	; (8005168 <TIM_OC6_SetConfig+0xc8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d109      	bne.n	8005130 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005122:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	029b      	lsls	r3, r3, #10
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40012c00 	.word	0x40012c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800

0800516c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 030a 	bic.w	r3, r3, #10
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0210 	bic.w	r2, r3, #16
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	f043 0307 	orr.w	r3, r3, #7
 800524c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	431a      	orrs	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2201      	movs	r2, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005300:	2302      	movs	r3, #2
 8005302:	e068      	b.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2e      	ldr	r2, [pc, #184]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800533e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01d      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d018      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10c      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40000c00 	.word	0x40000c00
 80053f8:	40014000 	.word	0x40014000

080053fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005414:	2302      	movs	r3, #2
 8005416:	e065      	b.n	80054e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	041b      	lsls	r3, r3, #16
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d115      	bne.n	80054d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	051b      	lsls	r3, r3, #20
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40013400 	.word	0x40013400

080054f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e042      	b.n	80055cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fb fdc3 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2224      	movs	r2, #36	; 0x24
 8005562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8c2 	bl	8005700 <UART_SetConfig>
 800557c:	4603      	mov	r3, r0
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e022      	b.n	80055cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fbb2 	bl	8005cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fc39 	bl	8005e3c <UART_CheckIdleState>
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	f040 8083 	bne.w	80056f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_UART_Transmit+0x28>
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e07b      	b.n	80056f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UART_Transmit+0x3a>
 800560a:	2302      	movs	r3, #2
 800560c:	e074      	b.n	80056f8 <HAL_UART_Transmit+0x124>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005626:	f7fb ffbd 	bl	80015a4 <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d108      	bne.n	8005658 <HAL_UART_Transmit+0x84>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e003      	b.n	8005660 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005668:	e02c      	b.n	80056c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fc2c 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e039      	b.n	80056f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005698:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e007      	b.n	80056b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1cc      	bne.n	800566a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fbf9 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e006      	b.n	80056f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005704:	b08c      	sub	sp, #48	; 0x30
 8005706:	af00      	add	r7, sp, #0
 8005708:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	431a      	orrs	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	4313      	orrs	r3, r2
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4baa      	ldr	r3, [pc, #680]	; (80059d8 <UART_SetConfig+0x2d8>)
 8005730:	4013      	ands	r3, r2
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005738:	430b      	orrs	r3, r1
 800573a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a9f      	ldr	r2, [pc, #636]	; (80059dc <UART_SetConfig+0x2dc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005768:	4313      	orrs	r3, r2
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005776:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005780:	430b      	orrs	r3, r1
 8005782:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f023 010f 	bic.w	r1, r3, #15
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a90      	ldr	r2, [pc, #576]	; (80059e0 <UART_SetConfig+0x2e0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d125      	bne.n	80057f0 <UART_SetConfig+0xf0>
 80057a4:	4b8f      	ldr	r3, [pc, #572]	; (80059e4 <UART_SetConfig+0x2e4>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d81a      	bhi.n	80057e8 <UART_SetConfig+0xe8>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0xb8>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057c9 	.word	0x080057c9
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057e1 	.word	0x080057e1
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ce:	e116      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057d0:	2302      	movs	r3, #2
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d6:	e112      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057de:	e10e      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e6:	e10a      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e106      	b.n	80059fe <UART_SetConfig+0x2fe>
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a7c      	ldr	r2, [pc, #496]	; (80059e8 <UART_SetConfig+0x2e8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d138      	bne.n	800586c <UART_SetConfig+0x16c>
 80057fa:	4b7a      	ldr	r3, [pc, #488]	; (80059e4 <UART_SetConfig+0x2e4>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d82d      	bhi.n	8005864 <UART_SetConfig+0x164>
 8005808:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <UART_SetConfig+0x110>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005845 	.word	0x08005845
 8005814:	08005865 	.word	0x08005865
 8005818:	08005865 	.word	0x08005865
 800581c:	08005865 	.word	0x08005865
 8005820:	08005855 	.word	0x08005855
 8005824:	08005865 	.word	0x08005865
 8005828:	08005865 	.word	0x08005865
 800582c:	08005865 	.word	0x08005865
 8005830:	0800584d 	.word	0x0800584d
 8005834:	08005865 	.word	0x08005865
 8005838:	08005865 	.word	0x08005865
 800583c:	08005865 	.word	0x08005865
 8005840:	0800585d 	.word	0x0800585d
 8005844:	2300      	movs	r3, #0
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e0d8      	b.n	80059fe <UART_SetConfig+0x2fe>
 800584c:	2302      	movs	r3, #2
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e0d4      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e0d0      	b.n	80059fe <UART_SetConfig+0x2fe>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e0cc      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586a:	e0c8      	b.n	80059fe <UART_SetConfig+0x2fe>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5e      	ldr	r2, [pc, #376]	; (80059ec <UART_SetConfig+0x2ec>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d125      	bne.n	80058c2 <UART_SetConfig+0x1c2>
 8005876:	4b5b      	ldr	r3, [pc, #364]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005880:	2b30      	cmp	r3, #48	; 0x30
 8005882:	d016      	beq.n	80058b2 <UART_SetConfig+0x1b2>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d818      	bhi.n	80058ba <UART_SetConfig+0x1ba>
 8005888:	2b20      	cmp	r3, #32
 800588a:	d00a      	beq.n	80058a2 <UART_SetConfig+0x1a2>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d814      	bhi.n	80058ba <UART_SetConfig+0x1ba>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <UART_SetConfig+0x19a>
 8005894:	2b10      	cmp	r3, #16
 8005896:	d008      	beq.n	80058aa <UART_SetConfig+0x1aa>
 8005898:	e00f      	b.n	80058ba <UART_SetConfig+0x1ba>
 800589a:	2300      	movs	r3, #0
 800589c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a0:	e0ad      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058a2:	2302      	movs	r3, #2
 80058a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a8:	e0a9      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058aa:	2304      	movs	r3, #4
 80058ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b0:	e0a5      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058b2:	2308      	movs	r3, #8
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b8:	e0a1      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058ba:	2310      	movs	r3, #16
 80058bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c0:	e09d      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a4a      	ldr	r2, [pc, #296]	; (80059f0 <UART_SetConfig+0x2f0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d125      	bne.n	8005918 <UART_SetConfig+0x218>
 80058cc:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <UART_SetConfig+0x2e4>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058d6:	2bc0      	cmp	r3, #192	; 0xc0
 80058d8:	d016      	beq.n	8005908 <UART_SetConfig+0x208>
 80058da:	2bc0      	cmp	r3, #192	; 0xc0
 80058dc:	d818      	bhi.n	8005910 <UART_SetConfig+0x210>
 80058de:	2b80      	cmp	r3, #128	; 0x80
 80058e0:	d00a      	beq.n	80058f8 <UART_SetConfig+0x1f8>
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d814      	bhi.n	8005910 <UART_SetConfig+0x210>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <UART_SetConfig+0x1f0>
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d008      	beq.n	8005900 <UART_SetConfig+0x200>
 80058ee:	e00f      	b.n	8005910 <UART_SetConfig+0x210>
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f6:	e082      	b.n	80059fe <UART_SetConfig+0x2fe>
 80058f8:	2302      	movs	r3, #2
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fe:	e07e      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005900:	2304      	movs	r3, #4
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e07a      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005908:	2308      	movs	r3, #8
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e076      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005910:	2310      	movs	r3, #16
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e072      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a35      	ldr	r2, [pc, #212]	; (80059f4 <UART_SetConfig+0x2f4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d12a      	bne.n	8005978 <UART_SetConfig+0x278>
 8005922:	4b30      	ldr	r3, [pc, #192]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005930:	d01a      	beq.n	8005968 <UART_SetConfig+0x268>
 8005932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005936:	d81b      	bhi.n	8005970 <UART_SetConfig+0x270>
 8005938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593c:	d00c      	beq.n	8005958 <UART_SetConfig+0x258>
 800593e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005942:	d815      	bhi.n	8005970 <UART_SetConfig+0x270>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <UART_SetConfig+0x250>
 8005948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594c:	d008      	beq.n	8005960 <UART_SetConfig+0x260>
 800594e:	e00f      	b.n	8005970 <UART_SetConfig+0x270>
 8005950:	2300      	movs	r3, #0
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005956:	e052      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595e:	e04e      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005966:	e04a      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596e:	e046      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005976:	e042      	b.n	80059fe <UART_SetConfig+0x2fe>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a17      	ldr	r2, [pc, #92]	; (80059dc <UART_SetConfig+0x2dc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d13a      	bne.n	80059f8 <UART_SetConfig+0x2f8>
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800598c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005990:	d01a      	beq.n	80059c8 <UART_SetConfig+0x2c8>
 8005992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005996:	d81b      	bhi.n	80059d0 <UART_SetConfig+0x2d0>
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599c:	d00c      	beq.n	80059b8 <UART_SetConfig+0x2b8>
 800599e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a2:	d815      	bhi.n	80059d0 <UART_SetConfig+0x2d0>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <UART_SetConfig+0x2b0>
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d008      	beq.n	80059c0 <UART_SetConfig+0x2c0>
 80059ae:	e00f      	b.n	80059d0 <UART_SetConfig+0x2d0>
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b6:	e022      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059b8:	2302      	movs	r3, #2
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059be:	e01e      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c6:	e01a      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ce:	e016      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d6:	e012      	b.n	80059fe <UART_SetConfig+0x2fe>
 80059d8:	cfff69f3 	.word	0xcfff69f3
 80059dc:	40008000 	.word	0x40008000
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40004400 	.word	0x40004400
 80059ec:	40004800 	.word	0x40004800
 80059f0:	40004c00 	.word	0x40004c00
 80059f4:	40005000 	.word	0x40005000
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4aae      	ldr	r2, [pc, #696]	; (8005cbc <UART_SetConfig+0x5bc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	f040 8097 	bne.w	8005b38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d823      	bhi.n	8005a5a <UART_SetConfig+0x35a>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x318>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a5b 	.word	0x08005a5b
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a5b 	.word	0x08005a5b
 8005a28:	08005a4b 	.word	0x08005a4b
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a5b 	.word	0x08005a5b
 8005a34:	08005a5b 	.word	0x08005a5b
 8005a38:	08005a53 	.word	0x08005a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fd fd4a 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a42:	e010      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a44:	4b9e      	ldr	r3, [pc, #632]	; (8005cc0 <UART_SetConfig+0x5c0>)
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a48:	e00d      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4a:	f7fd fcab 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a50:	e009      	b.n	8005a66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a58:	e005      	b.n	8005a66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8130 	beq.w	8005cce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	4a94      	ldr	r2, [pc, #592]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d305      	bcc.n	8005a9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d903      	bls.n	8005aa6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005aa4:	e113      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	60fa      	str	r2, [r7, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	4a84      	ldr	r2, [pc, #528]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2200      	movs	r2, #0
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ac8:	f7fa fbea 	bl	80002a0 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	020b      	lsls	r3, r1, #8
 8005ade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ae2:	0202      	lsls	r2, r0, #8
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	6849      	ldr	r1, [r1, #4]
 8005ae8:	0849      	lsrs	r1, r1, #1
 8005aea:	2000      	movs	r0, #0
 8005aec:	460c      	mov	r4, r1
 8005aee:	4605      	mov	r5, r0
 8005af0:	eb12 0804 	adds.w	r8, r2, r4
 8005af4:	eb43 0905 	adc.w	r9, r3, r5
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	469a      	mov	sl, r3
 8005b00:	4693      	mov	fp, r2
 8005b02:	4652      	mov	r2, sl
 8005b04:	465b      	mov	r3, fp
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fbc9 	bl	80002a0 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4613      	mov	r3, r2
 8005b14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1c:	d308      	bcc.n	8005b30 <UART_SetConfig+0x430>
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b24:	d204      	bcs.n	8005b30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e0ce      	b.n	8005cce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b36:	e0ca      	b.n	8005cce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b40:	d166      	bne.n	8005c10 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d827      	bhi.n	8005b9a <UART_SetConfig+0x49a>
 8005b4a:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <UART_SetConfig+0x450>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b75 	.word	0x08005b75
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	08005b9b 	.word	0x08005b9b
 8005b60:	08005b8b 	.word	0x08005b8b
 8005b64:	08005b9b 	.word	0x08005b9b
 8005b68:	08005b9b 	.word	0x08005b9b
 8005b6c:	08005b9b 	.word	0x08005b9b
 8005b70:	08005b93 	.word	0x08005b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b74:	f7fd fcae 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8005b78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b7a:	e014      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b7c:	f7fd fcc0 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8005b80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b82:	e010      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b84:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <UART_SetConfig+0x5c0>)
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b88:	e00d      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b8a:	f7fd fc0b 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8005b8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b90:	e009      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b98:	e005      	b.n	8005ba6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ba4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8090 	beq.w	8005cce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	4a44      	ldr	r2, [pc, #272]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bc0:	005a      	lsls	r2, r3, #1
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	441a      	add	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d916      	bls.n	8005c08 <UART_SetConfig+0x508>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be0:	d212      	bcs.n	8005c08 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f023 030f 	bic.w	r3, r3, #15
 8005bea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	8bfb      	ldrh	r3, [r7, #30]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	8bfa      	ldrh	r2, [r7, #30]
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	e062      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c0e:	e05e      	b.n	8005cce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d828      	bhi.n	8005c6a <UART_SetConfig+0x56a>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x520>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	08005c6b 	.word	0x08005c6b
 8005c30:	08005c5b 	.word	0x08005c5b
 8005c34:	08005c6b 	.word	0x08005c6b
 8005c38:	08005c6b 	.word	0x08005c6b
 8005c3c:	08005c6b 	.word	0x08005c6b
 8005c40:	08005c63 	.word	0x08005c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7fd fc46 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c4a:	e014      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fd fc58 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c52:	e010      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <UART_SetConfig+0x5c0>)
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c58:	e00d      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5a:	f7fd fba3 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c60:	e009      	b.n	8005c76 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c68:	e005      	b.n	8005c76 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c74:	bf00      	nop
    }

    if (pclk != 0U)
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d028      	beq.n	8005cce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <UART_SetConfig+0x5c4>)
 8005c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	441a      	add	r2, r3
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b0f      	cmp	r3, #15
 8005ca4:	d910      	bls.n	8005cc8 <UART_SetConfig+0x5c8>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d20c      	bcs.n	8005cc8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60da      	str	r2, [r3, #12]
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x5ce>
 8005cba:	bf00      	nop
 8005cbc:	40008000 	.word	0x40008000
 8005cc0:	00f42400 	.word	0x00f42400
 8005cc4:	0800bc48 	.word	0x0800bc48
      }
      else
      {
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005cea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3730      	adds	r7, #48	; 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005df6:	d10a      	bne.n	8005e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e4c:	f7fb fbaa 	bl	80015a4 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d10e      	bne.n	8005e7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f82f 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e025      	b.n	8005eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d10e      	bne.n	8005eaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f819 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e00f      	b.n	8005eca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b09c      	sub	sp, #112	; 0x70
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee2:	e0a9      	b.n	8006038 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	f000 80a5 	beq.w	8006038 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eee:	f7fb fb59 	bl	80015a4 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d302      	bcc.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x32>
 8005efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d140      	bne.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f18:	667b      	str	r3, [r7, #100]	; 0x64
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e6      	bne.n	8005f04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f56:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e5      	bne.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e069      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d051      	beq.n	8006038 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa2:	d149      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006000:	623a      	str	r2, [r7, #32]
 8006002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	69f9      	ldr	r1, [r7, #28]
 8006006:	6a3a      	ldr	r2, [r7, #32]
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	61bb      	str	r3, [r7, #24]
   return(result);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e010      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69da      	ldr	r2, [r3, #28]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	429a      	cmp	r2, r3
 8006054:	f43f af46 	beq.w	8005ee4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3770      	adds	r7, #112	; 0x70
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_UARTEx_DisableFifoMode+0x16>
 8006074:	2302      	movs	r3, #2
 8006076:	e027      	b.n	80060c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	; 0x24
 8006084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e02d      	b.n	8006148 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	; 0x24
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f84f 	bl	80061cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e02d      	b.n	80061c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f811 	bl	80061cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d108      	bne.n	80061ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061ec:	e031      	b.n	8006252 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061ee:	2308      	movs	r3, #8
 80061f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f2:	2308      	movs	r3, #8
 80061f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	0e5b      	lsrs	r3, r3, #25
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	0f5b      	lsrs	r3, r3, #29
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	7b3a      	ldrb	r2, [r7, #12]
 800621a:	4911      	ldr	r1, [pc, #68]	; (8006260 <UARTEx_SetNbDataToProcess+0x94>)
 800621c:	5c8a      	ldrb	r2, [r1, r2]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006222:	7b3a      	ldrb	r2, [r7, #12]
 8006224:	490f      	ldr	r1, [pc, #60]	; (8006264 <UARTEx_SetNbDataToProcess+0x98>)
 8006226:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006228:	fb93 f3f2 	sdiv	r3, r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	7b7a      	ldrb	r2, [r7, #13]
 8006238:	4909      	ldr	r1, [pc, #36]	; (8006260 <UARTEx_SetNbDataToProcess+0x94>)
 800623a:	5c8a      	ldrb	r2, [r1, r2]
 800623c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006240:	7b7a      	ldrb	r2, [r7, #13]
 8006242:	4908      	ldr	r1, [pc, #32]	; (8006264 <UARTEx_SetNbDataToProcess+0x98>)
 8006244:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006246:	fb93 f3f2 	sdiv	r3, r3, r2
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	0800bc60 	.word	0x0800bc60
 8006264:	0800bc68 	.word	0x0800bc68

08006268 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fcb2 	bl	8007be2 <VL53L0X_get_offset_calibration_data_micro_meter>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006282:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b096      	sub	sp, #88	; 0x58
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006298:	2300      	movs	r3, #0
 800629a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800629e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d107      	bne.n	80062b6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80062a6:	2200      	movs	r2, #0
 80062a8:	2188      	movs	r1, #136	; 0x88
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f004 feaa 	bl	800b004 <VL53L0X_WrByte>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062c4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80062ce:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a9e      	ldr	r2, [pc, #632]	; (8006550 <VL53L0X_DataInit+0x2c0>)
 80062d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a9d      	ldr	r2, [pc, #628]	; (8006554 <VL53L0X_DataInit+0x2c4>)
 80062de:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80062e8:	f107 0310 	add.w	r3, r7, #16
 80062ec:	4619      	mov	r1, r3
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fac2 	bl	8006878 <VL53L0X_GetDeviceParameters>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80062fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d112      	bne.n	8006328 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006302:	2300      	movs	r3, #0
 8006304:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006306:	2300      	movs	r3, #0
 8006308:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f103 0410 	add.w	r4, r3, #16
 8006310:	f107 0510 	add.w	r5, r7, #16
 8006314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800631a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800631e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006320:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2264      	movs	r2, #100	; 0x64
 800632c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006336:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006340:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800634a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006356:	2201      	movs	r2, #1
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f004 fe52 	bl	800b004 <VL53L0X_WrByte>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006368:	4313      	orrs	r3, r2
 800636a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800636e:	2201      	movs	r2, #1
 8006370:	21ff      	movs	r1, #255	; 0xff
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f004 fe46 	bl	800b004 <VL53L0X_WrByte>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006380:	4313      	orrs	r3, r2
 8006382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006386:	2200      	movs	r2, #0
 8006388:	2100      	movs	r1, #0
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f004 fe3a 	bl	800b004 <VL53L0X_WrByte>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006398:	4313      	orrs	r3, r2
 800639a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800639e:	f107 030f 	add.w	r3, r7, #15
 80063a2:	461a      	mov	r2, r3
 80063a4:	2191      	movs	r1, #145	; 0x91
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f004 feae 	bl	800b108 <VL53L0X_RdByte>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461a      	mov	r2, r3
 80063b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80063ba:	7bfa      	ldrb	r2, [r7, #15]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80063c2:	2201      	movs	r2, #1
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f004 fe1c 	bl	800b004 <VL53L0X_WrByte>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80063da:	2200      	movs	r2, #0
 80063dc:	21ff      	movs	r1, #255	; 0xff
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f004 fe10 	bl	800b004 <VL53L0X_WrByte>
 80063e4:	4603      	mov	r3, r0
 80063e6:	461a      	mov	r2, r3
 80063e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ec:	4313      	orrs	r3, r2
 80063ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80063f2:	2200      	movs	r2, #0
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f004 fe04 	bl	800b004 <VL53L0X_WrByte>
 80063fc:	4603      	mov	r3, r0
 80063fe:	461a      	mov	r2, r3
 8006400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006404:	4313      	orrs	r3, r2
 8006406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800640a:	2300      	movs	r3, #0
 800640c:	653b      	str	r3, [r7, #80]	; 0x50
 800640e:	e014      	b.n	800643a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006410:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006414:	2b00      	cmp	r3, #0
 8006416:	d114      	bne.n	8006442 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641a:	b29b      	uxth	r3, r3
 800641c:	2201      	movs	r2, #1
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fd35 	bl	8006e90 <VL53L0X_SetLimitCheckEnable>
 8006426:	4603      	mov	r3, r0
 8006428:	461a      	mov	r2, r3
 800642a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800642e:	4313      	orrs	r3, r2
 8006430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006436:	3301      	adds	r3, #1
 8006438:	653b      	str	r3, [r7, #80]	; 0x50
 800643a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800643c:	2b05      	cmp	r3, #5
 800643e:	dde7      	ble.n	8006410 <VL53L0X_DataInit+0x180>
 8006440:	e000      	b.n	8006444 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006442:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006444:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006448:	2b00      	cmp	r3, #0
 800644a:	d107      	bne.n	800645c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800644c:	2200      	movs	r2, #0
 800644e:	2102      	movs	r1, #2
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fd1d 	bl	8006e90 <VL53L0X_SetLimitCheckEnable>
 8006456:	4603      	mov	r3, r0
 8006458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800645c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006460:	2b00      	cmp	r3, #0
 8006462:	d107      	bne.n	8006474 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006464:	2200      	movs	r2, #0
 8006466:	2103      	movs	r1, #3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fd11 	bl	8006e90 <VL53L0X_SetLimitCheckEnable>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006474:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006478:	2b00      	cmp	r3, #0
 800647a:	d107      	bne.n	800648c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800647c:	2200      	movs	r2, #0
 800647e:	2104      	movs	r1, #4
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fd05 	bl	8006e90 <VL53L0X_SetLimitCheckEnable>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800648c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006490:	2b00      	cmp	r3, #0
 8006492:	d107      	bne.n	80064a4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006494:	2200      	movs	r2, #0
 8006496:	2105      	movs	r1, #5
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fcf9 	bl	8006e90 <VL53L0X_SetLimitCheckEnable>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80064a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d108      	bne.n	80064be <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80064ac:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fd9c 	bl	8006ff0 <VL53L0X_SetLimitCheckValue>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80064be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d108      	bne.n	80064d8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80064c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064ca:	2101      	movs	r1, #1
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fd8f 	bl	8006ff0 <VL53L0X_SetLimitCheckValue>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d108      	bne.n	80064f2 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80064e0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80064e4:	2102      	movs	r1, #2
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fd82 	bl	8006ff0 <VL53L0X_SetLimitCheckValue>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d107      	bne.n	800650a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80064fa:	2200      	movs	r2, #0
 80064fc:	2103      	movs	r1, #3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fd76 	bl	8006ff0 <VL53L0X_SetLimitCheckValue>
 8006504:	4603      	mov	r3, r0
 8006506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800650a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10f      	bne.n	8006532 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	22ff      	movs	r2, #255	; 0xff
 8006516:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800651a:	22ff      	movs	r2, #255	; 0xff
 800651c:	2101      	movs	r1, #1
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f004 fd70 	bl	800b004 <VL53L0X_WrByte>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006532:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006542:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006546:	4618      	mov	r0, r3
 8006548:	3758      	adds	r7, #88	; 0x58
 800654a:	46bd      	mov	sp, r7
 800654c:	bdb0      	pop	{r4, r5, r7, pc}
 800654e:	bf00      	nop
 8006550:	00016b85 	.word	0x00016b85
 8006554:	000970a4 	.word	0x000970a4

08006558 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b09e      	sub	sp, #120	; 0x78
 800655c:	af02      	add	r7, sp, #8
 800655e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006566:	f107 031c 	add.w	r3, r7, #28
 800656a:	2240      	movs	r2, #64	; 0x40
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f004 feb0 	bl	800b2d4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006594:	2101      	movs	r1, #1
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f002 fa79 	bl	8008a8e <VL53L0X_get_info_from_device>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80065a8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80065b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80065b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d80d      	bhi.n	80065d8 <VL53L0X_StaticInit+0x80>
 80065bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d102      	bne.n	80065ca <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80065c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d806      	bhi.n	80065d8 <VL53L0X_StaticInit+0x80>
 80065ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10e      	bne.n	80065f0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80065d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d4:	2b0c      	cmp	r3, #12
 80065d6:	d90b      	bls.n	80065f0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80065d8:	f107 0218 	add.w	r2, r7, #24
 80065dc:	f107 0314 	add.w	r3, r7, #20
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fcf8 	bl	8007fd8 <VL53L0X_perform_ref_spad_management>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80065ee:	e009      	b.n	8006604 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80065f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065f4:	461a      	mov	r2, r3
 80065f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fef9 	bl	80083f0 <VL53L0X_set_reference_spads>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006604:	4b94      	ldr	r3, [pc, #592]	; (8006858 <VL53L0X_StaticInit+0x300>)
 8006606:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006608:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10f      	bne.n	8006630 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006616:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800661a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006628:	66bb      	str	r3, [r7, #104]	; 0x68
 800662a:	e001      	b.n	8006630 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800662c:	4b8a      	ldr	r3, [pc, #552]	; (8006858 <VL53L0X_StaticInit+0x300>)
 800662e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006630:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006638:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f003 fdcc 	bl	800a1d8 <VL53L0X_load_tuning_settings>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006646:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800664e:	2300      	movs	r3, #0
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	2304      	movs	r3, #4
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 f8f1 	bl	8007840 <VL53L0X_SetGpioConfig>
 800665e:	4603      	mov	r3, r0
 8006660:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006664:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006668:	2b00      	cmp	r3, #0
 800666a:	d121      	bne.n	80066b0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800666c:	2201      	movs	r2, #1
 800666e:	21ff      	movs	r1, #255	; 0xff
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f004 fcc7 	bl	800b004 <VL53L0X_WrByte>
 8006676:	4603      	mov	r3, r0
 8006678:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800667c:	f107 031a 	add.w	r3, r7, #26
 8006680:	461a      	mov	r2, r3
 8006682:	2184      	movs	r1, #132	; 0x84
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f004 fd69 	bl	800b15c <VL53L0X_RdWord>
 800668a:	4603      	mov	r3, r0
 800668c:	461a      	mov	r2, r3
 800668e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006692:	4313      	orrs	r3, r2
 8006694:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006698:	2200      	movs	r2, #0
 800669a:	21ff      	movs	r1, #255	; 0xff
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f004 fcb1 	bl	800b004 <VL53L0X_WrByte>
 80066a2:	4603      	mov	r3, r0
 80066a4:	461a      	mov	r2, r3
 80066a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80066b8:	8b7b      	ldrh	r3, [r7, #26]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80066c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d108      	bne.n	80066de <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80066cc:	f107 031c 	add.w	r3, r7, #28
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8d0 	bl	8006878 <VL53L0X_GetDeviceParameters>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80066de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d110      	bne.n	8006708 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80066e6:	f107 0319 	add.w	r3, r7, #25
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f992 	bl	8006a16 <VL53L0X_GetFractionEnable>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80066f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006700:	7e7a      	ldrb	r2, [r7, #25]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006708:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10e      	bne.n	800672e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f103 0410 	add.w	r4, r3, #16
 8006716:	f107 051c 	add.w	r5, r7, #28
 800671a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800671c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800671e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006726:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800672a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800672e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006732:	2b00      	cmp	r3, #0
 8006734:	d111      	bne.n	800675a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006736:	f107 0319 	add.w	r3, r7, #25
 800673a:	461a      	mov	r2, r3
 800673c:	2101      	movs	r1, #1
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f004 fce2 	bl	800b108 <VL53L0X_RdByte>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800674a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006752:	7e7a      	ldrb	r2, [r7, #25]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800675a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800675e:	2b00      	cmp	r3, #0
 8006760:	d107      	bne.n	8006772 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9ca 	bl	8006b00 <VL53L0X_SetSequenceStepEnable>
 800676c:	4603      	mov	r3, r0
 800676e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006772:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006776:	2b00      	cmp	r3, #0
 8006778:	d107      	bne.n	800678a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800677a:	2200      	movs	r2, #0
 800677c:	2102      	movs	r1, #2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9be 	bl	8006b00 <VL53L0X_SetSequenceStepEnable>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800678a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2203      	movs	r2, #3
 8006796:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800679a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d109      	bne.n	80067b6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80067a2:	f107 0313 	add.w	r3, r7, #19
 80067a6:	461a      	mov	r2, r3
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f990 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80067be:	7cfa      	ldrb	r2, [r7, #19]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80067c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80067ce:	f107 0313 	add.w	r3, r7, #19
 80067d2:	461a      	mov	r2, r3
 80067d4:	2101      	movs	r1, #1
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f97a 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 80067dc:	4603      	mov	r3, r0
 80067de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80067ea:	7cfa      	ldrb	r2, [r7, #19]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80067f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80067fa:	f107 030c 	add.w	r3, r7, #12
 80067fe:	461a      	mov	r2, r3
 8006800:	2103      	movs	r1, #3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f002 fec4 	bl	8009590 <get_sequence_step_timeout>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800680e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800681e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006826:	f107 030c 	add.w	r3, r7, #12
 800682a:	461a      	mov	r2, r3
 800682c:	2104      	movs	r1, #4
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f002 feae 	bl	8009590 <get_sequence_step_timeout>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800683a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800684a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800684e:	4618      	mov	r0, r3
 8006850:	3770      	adds	r7, #112	; 0x70
 8006852:	46bd      	mov	sp, r7
 8006854:	bdb0      	pop	{r4, r5, r7, pc}
 8006856:	bf00      	nop
 8006858:	20000010 	.word	0x20000010

0800685c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006864:	239d      	movs	r3, #157	; 0x9d
 8006866:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f8b0 	bl	80069f0 <VL53L0X_GetDeviceMode>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d107      	bne.n	80068ac <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa78 	bl	8006d98 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80068a8:	4603      	mov	r3, r0
 80068aa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80068ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80068ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	3310      	adds	r3, #16
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 faae 	bl	8006e2a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80068d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d107      	bne.n	80068ea <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	3314      	adds	r3, #20
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff fcc1 	bl	8006268 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80068ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d134      	bne.n	800695c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80068f2:	2300      	movs	r3, #0
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	e02a      	b.n	800694e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80068f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d12a      	bne.n	8006956 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	b299      	uxth	r1, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	3308      	adds	r3, #8
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	4413      	add	r3, r2
 800690e:	3304      	adds	r3, #4
 8006910:	461a      	mov	r2, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fbce 	bl	80070b4 <VL53L0X_GetLimitCheckValue>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	4313      	orrs	r3, r2
 8006920:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d117      	bne.n	800695a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	b299      	uxth	r1, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3318      	adds	r3, #24
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	4413      	add	r3, r2
 8006936:	461a      	mov	r2, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fb35 	bl	8006fa8 <VL53L0X_GetLimitCheckEnable>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	4313      	orrs	r3, r2
 8006946:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	3301      	adds	r3, #1
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b05      	cmp	r3, #5
 8006952:	ddd1      	ble.n	80068f8 <VL53L0X_GetDeviceParameters+0x80>
 8006954:	e002      	b.n	800695c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800695a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800695c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d107      	bne.n	8006974 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	333c      	adds	r3, #60	; 0x3c
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fc30 	bl	80071d0 <VL53L0X_GetWrapAroundCheckEnable>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d107      	bne.n	800698c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f879 	bl	8006a7a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800698c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	2b15      	cmp	r3, #21
 80069ac:	bf8c      	ite	hi
 80069ae:	2201      	movhi	r2, #1
 80069b0:	2200      	movls	r2, #0
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d10e      	bne.n	80069d6 <VL53L0X_SetDeviceMode+0x3e>
 80069b8:	2201      	movs	r2, #1
 80069ba:	409a      	lsls	r2, r3
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <VL53L0X_SetDeviceMode+0x54>)
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	bf14      	ite	ne
 80069c4:	2301      	movne	r3, #1
 80069c6:	2300      	moveq	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	741a      	strb	r2, [r3, #16]
		break;
 80069d4:	e001      	b.n	80069da <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80069d6:	23f8      	movs	r3, #248	; 0xf8
 80069d8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	0030000b 	.word	0x0030000b

080069f0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7c1a      	ldrb	r2, [r3, #16]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	2109      	movs	r1, #9
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f004 fb6d 	bl	800b108 <VL53L0X_RdByte>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f003 fa26 	bl	8009eb6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f003 faf3 	bl	800a076 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
 8006aac:	4613      	mov	r3, r2
 8006aae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006ab4:	78ba      	ldrb	r2, [r7, #2]
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f002 ff3b 	bl	8009936 <VL53L0X_set_vcsel_pulse_period>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006ae2:	7afb      	ldrb	r3, [r7, #11]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f003 f9ad 	bl	8009e48 <VL53L0X_get_vcsel_pulse_period>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006b1c:	f107 030f 	add.w	r3, r7, #15
 8006b20:	461a      	mov	r2, r3
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f004 faef 	bl	800b108 <VL53L0X_RdByte>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d15a      	bne.n	8006bf0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006b3a:	78bb      	ldrb	r3, [r7, #2]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d12b      	bne.n	8006b98 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d825      	bhi.n	8006b92 <VL53L0X_SetSequenceStepEnable+0x92>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b61 	.word	0x08006b61
 8006b50:	08006b6b 	.word	0x08006b6b
 8006b54:	08006b75 	.word	0x08006b75
 8006b58:	08006b7f 	.word	0x08006b7f
 8006b5c:	08006b89 	.word	0x08006b89
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006b60:	7dbb      	ldrb	r3, [r7, #22]
 8006b62:	f043 0310 	orr.w	r3, r3, #16
 8006b66:	75bb      	strb	r3, [r7, #22]
				break;
 8006b68:	e043      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006b6a:	7dbb      	ldrb	r3, [r7, #22]
 8006b6c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006b70:	75bb      	strb	r3, [r7, #22]
				break;
 8006b72:	e03e      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006b74:	7dbb      	ldrb	r3, [r7, #22]
 8006b76:	f043 0304 	orr.w	r3, r3, #4
 8006b7a:	75bb      	strb	r3, [r7, #22]
				break;
 8006b7c:	e039      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006b7e:	7dbb      	ldrb	r3, [r7, #22]
 8006b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b84:	75bb      	strb	r3, [r7, #22]
				break;
 8006b86:	e034      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006b88:	7dbb      	ldrb	r3, [r7, #22]
 8006b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b8e:	75bb      	strb	r3, [r7, #22]
				break;
 8006b90:	e02f      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b92:	23fc      	movs	r3, #252	; 0xfc
 8006b94:	75fb      	strb	r3, [r7, #23]
 8006b96:	e02c      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d825      	bhi.n	8006bea <VL53L0X_SetSequenceStepEnable+0xea>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006bb9 	.word	0x08006bb9
 8006ba8:	08006bc3 	.word	0x08006bc3
 8006bac:	08006bcd 	.word	0x08006bcd
 8006bb0:	08006bd7 	.word	0x08006bd7
 8006bb4:	08006be1 	.word	0x08006be1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006bb8:	7dbb      	ldrb	r3, [r7, #22]
 8006bba:	f023 0310 	bic.w	r3, r3, #16
 8006bbe:	75bb      	strb	r3, [r7, #22]
				break;
 8006bc0:	e017      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006bc2:	7dbb      	ldrb	r3, [r7, #22]
 8006bc4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006bc8:	75bb      	strb	r3, [r7, #22]
				break;
 8006bca:	e012      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006bcc:	7dbb      	ldrb	r3, [r7, #22]
 8006bce:	f023 0304 	bic.w	r3, r3, #4
 8006bd2:	75bb      	strb	r3, [r7, #22]
				break;
 8006bd4:	e00d      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006bd6:	7dbb      	ldrb	r3, [r7, #22]
 8006bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bdc:	75bb      	strb	r3, [r7, #22]
				break;
 8006bde:	e008      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006be0:	7dbb      	ldrb	r3, [r7, #22]
 8006be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be6:	75bb      	strb	r3, [r7, #22]
				break;
 8006be8:	e003      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bea:	23fc      	movs	r3, #252	; 0xfc
 8006bec:	75fb      	strb	r3, [r7, #23]
 8006bee:	e000      	b.n	8006bf2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006bf0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	7dba      	ldrb	r2, [r7, #22]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d01e      	beq.n	8006c38 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006c02:	7dbb      	ldrb	r3, [r7, #22]
 8006c04:	461a      	mov	r2, r3
 8006c06:	2101      	movs	r1, #1
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f004 f9fb 	bl	800b004 <VL53L0X_WrByte>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d103      	bne.n	8006c22 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7dba      	ldrb	r2, [r7, #22]
 8006c1e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006c30:	6939      	ldr	r1, [r7, #16]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ff0e 	bl	8006a54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	607b      	str	r3, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	72fb      	strb	r3, [r7, #11]
 8006c52:	4613      	mov	r3, r2
 8006c54:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006c60:	7afb      	ldrb	r3, [r7, #11]
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d836      	bhi.n	8006cd4 <sequence_step_enabled+0x90>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <sequence_step_enabled+0x28>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006c81 	.word	0x08006c81
 8006c70:	08006c93 	.word	0x08006c93
 8006c74:	08006ca5 	.word	0x08006ca5
 8006c78:	08006cb7 	.word	0x08006cb7
 8006c7c:	08006cc9 	.word	0x08006cc9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006c80:	7abb      	ldrb	r3, [r7, #10]
 8006c82:	111b      	asrs	r3, r3, #4
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	701a      	strb	r2, [r3, #0]
		break;
 8006c90:	e022      	b.n	8006cd8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006c92:	7abb      	ldrb	r3, [r7, #10]
 8006c94:	10db      	asrs	r3, r3, #3
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	701a      	strb	r2, [r3, #0]
		break;
 8006ca2:	e019      	b.n	8006cd8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006ca4:	7abb      	ldrb	r3, [r7, #10]
 8006ca6:	109b      	asrs	r3, r3, #2
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	701a      	strb	r2, [r3, #0]
		break;
 8006cb4:	e010      	b.n	8006cd8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006cb6:	7abb      	ldrb	r3, [r7, #10]
 8006cb8:	119b      	asrs	r3, r3, #6
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	701a      	strb	r2, [r3, #0]
		break;
 8006cc6:	e007      	b.n	8006cd8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006cc8:	7abb      	ldrb	r3, [r7, #10]
 8006cca:	09db      	lsrs	r3, r3, #7
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	701a      	strb	r2, [r3, #0]
		break;
 8006cd2:	e001      	b.n	8006cd8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cd4:	23fc      	movs	r3, #252	; 0xfc
 8006cd6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006cfa:	f107 030e 	add.w	r3, r7, #14
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f004 fa00 	bl	800b108 <VL53L0X_RdByte>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d107      	bne.n	8006d24 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006d14:	7bba      	ldrb	r2, [r7, #14]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ff92 	bl	8006c44 <sequence_step_enabled>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d108      	bne.n	8006d3e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006d2c:	7bba      	ldrb	r2, [r7, #14]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	3302      	adds	r3, #2
 8006d32:	2101      	movs	r1, #1
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ff85 	bl	8006c44 <sequence_step_enabled>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d108      	bne.n	8006d58 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006d46:	7bba      	ldrb	r2, [r7, #14]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff ff78 	bl	8006c44 <sequence_step_enabled>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d108      	bne.n	8006d72 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006d60:	7bba      	ldrb	r2, [r7, #14]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	3303      	adds	r3, #3
 8006d66:	2103      	movs	r1, #3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ff6b 	bl	8006c44 <sequence_step_enabled>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d108      	bne.n	8006d8c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006d7a:	7bba      	ldrb	r2, [r7, #14]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	2104      	movs	r1, #4
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff ff5e 	bl	8006c44 <sequence_step_enabled>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	461a      	mov	r2, r3
 8006dac:	21f8      	movs	r1, #248	; 0xf8
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f004 f9d4 	bl	800b15c <VL53L0X_RdWord>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d108      	bne.n	8006dd2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006dc0:	f107 0308 	add.w	r3, r7, #8
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	2104      	movs	r1, #4
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f004 f9ff 	bl	800b1cc <VL53L0X_RdDWord>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10c      	bne.n	8006df4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006dda:	89bb      	ldrh	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	89ba      	ldrh	r2, [r7, #12]
 8006de4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7f1b      	ldrb	r3, [r3, #28]
 8006e12:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	7bba      	ldrb	r2, [r7, #14]
 8006e18:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b086      	sub	sp, #24
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006e38:	f107 030e 	add.w	r3, r7, #14
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2120      	movs	r1, #32
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f004 f98b 	bl	800b15c <VL53L0X_RdWord>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d118      	bne.n	8006e84 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006e52:	89fb      	ldrh	r3, [r7, #14]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	771a      	strb	r2, [r3, #28]
 8006e6a:	e00b      	b.n	8006e84 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006e6c:	89fb      	ldrh	r3, [r7, #14]
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006eb0:	887b      	ldrh	r3, [r7, #2]
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	d902      	bls.n	8006ebc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006eb6:	23fc      	movs	r3, #252	; 0xfc
 8006eb8:	75fb      	strb	r3, [r7, #23]
 8006eba:	e05b      	b.n	8006f74 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006ebc:	787b      	ldrb	r3, [r7, #1]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	73bb      	strb	r3, [r7, #14]
 8006ece:	e00a      	b.n	8006ee6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ed0:	887b      	ldrh	r3, [r7, #2]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	2b05      	cmp	r3, #5
 8006eea:	d841      	bhi.n	8006f70 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f17 	.word	0x08006f17
 8006efc:	08006f2d 	.word	0x08006f2d
 8006f00:	08006f37 	.word	0x08006f37
 8006f04:	08006f41 	.word	0x08006f41
 8006f08:	08006f59 	.word	0x08006f59

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7bfa      	ldrb	r2, [r7, #15]
 8006f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006f14:	e02e      	b.n	8006f74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2144      	movs	r1, #68	; 0x44
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f004 f893 	bl	800b04c <VL53L0X_WrWord>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

			break;
 8006f2a:	e023      	b.n	8006f74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7bfa      	ldrb	r2, [r7, #15]
 8006f30:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006f34:	e01e      	b.n	8006f74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7bfa      	ldrb	r2, [r7, #15]
 8006f3a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006f3e:	e019      	b.n	8006f74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006f46:	7b7b      	ldrb	r3, [r7, #13]
 8006f48:	22fe      	movs	r2, #254	; 0xfe
 8006f4a:	2160      	movs	r1, #96	; 0x60
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f004 f8a7 	bl	800b0a0 <VL53L0X_UpdateByte>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006f56:	e00d      	b.n	8006f74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006f5e:	7b7b      	ldrb	r3, [r7, #13]
 8006f60:	22ef      	movs	r2, #239	; 0xef
 8006f62:	2160      	movs	r1, #96	; 0x60
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f004 f89b 	bl	800b0a0 <VL53L0X_UpdateByte>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006f6e:	e001      	b.n	8006f74 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f70:	23fc      	movs	r3, #252	; 0xfc
 8006f72:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10f      	bne.n	8006f9c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006f7c:	787b      	ldrb	r3, [r7, #1]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f82:	887b      	ldrh	r3, [r7, #2]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006f8e:	e005      	b.n	8006f9c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f90:	887b      	ldrh	r3, [r7, #2]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006fba:	897b      	ldrh	r3, [r7, #10]
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d905      	bls.n	8006fcc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fc0:	23fc      	movs	r3, #252	; 0xfc
 8006fc2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e008      	b.n	8006fde <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006fcc:	897b      	ldrh	r3, [r7, #10]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	7dba      	ldrb	r2, [r7, #22]
 8006fdc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007002:	897b      	ldrh	r3, [r7, #10]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800700c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800700e:	7dbb      	ldrb	r3, [r7, #22]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d107      	bne.n	8007024 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007014:	897b      	ldrh	r3, [r7, #10]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	330c      	adds	r3, #12
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	605a      	str	r2, [r3, #4]
 8007022:	e040      	b.n	80070a6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007024:	897b      	ldrh	r3, [r7, #10]
 8007026:	2b05      	cmp	r3, #5
 8007028:	d830      	bhi.n	800708c <VL53L0X_SetLimitCheckValue+0x9c>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <VL53L0X_SetLimitCheckValue+0x40>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007049 	.word	0x08007049
 8007034:	08007051 	.word	0x08007051
 8007038:	08007067 	.word	0x08007067
 800703c:	0800706f 	.word	0x0800706f
 8007040:	08007077 	.word	0x08007077
 8007044:	08007077 	.word	0x08007077

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800704e:	e01f      	b.n	8007090 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007054:	b29b      	uxth	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	2144      	movs	r1, #68	; 0x44
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f003 fff6 	bl	800b04c <VL53L0X_WrWord>
 8007060:	4603      	mov	r3, r0
 8007062:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007064:	e014      	b.n	8007090 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800706c:	e010      	b.n	8007090 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007074:	e00c      	b.n	8007090 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800707a:	b29b      	uxth	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	2164      	movs	r1, #100	; 0x64
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f003 ffe3 	bl	800b04c <VL53L0X_WrWord>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800708a:	e001      	b.n	8007090 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800708c:	23fc      	movs	r3, #252	; 0xfc
 800708e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007098:	897b      	ldrh	r3, [r7, #10]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	330c      	adds	r3, #12
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop

080070b4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	460b      	mov	r3, r1
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	2b05      	cmp	r3, #5
 80070ce:	d847      	bhi.n	8007160 <VL53L0X_GetLimitCheckValue+0xac>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <VL53L0X_GetLimitCheckValue+0x24>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	080070f1 	.word	0x080070f1
 80070dc:	080070fd 	.word	0x080070fd
 80070e0:	08007123 	.word	0x08007123
 80070e4:	0800712f 	.word	0x0800712f
 80070e8:	0800713b 	.word	0x0800713b
 80070ec:	0800713b 	.word	0x0800713b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	77bb      	strb	r3, [r7, #30]
		break;
 80070fa:	e033      	b.n	8007164 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80070fc:	f107 0316 	add.w	r3, r7, #22
 8007100:	461a      	mov	r2, r3
 8007102:	2144      	movs	r1, #68	; 0x44
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f004 f829 	bl	800b15c <VL53L0X_RdWord>
 800710a:	4603      	mov	r3, r0
 800710c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800710e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d102      	bne.n	800711c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007116:	8afb      	ldrh	r3, [r7, #22]
 8007118:	025b      	lsls	r3, r3, #9
 800711a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800711c:	2301      	movs	r3, #1
 800711e:	77bb      	strb	r3, [r7, #30]
		break;
 8007120:	e020      	b.n	8007164 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	77bb      	strb	r3, [r7, #30]
		break;
 800712c:	e01a      	b.n	8007164 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	77bb      	strb	r3, [r7, #30]
		break;
 8007138:	e014      	b.n	8007164 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800713a:	f107 0316 	add.w	r3, r7, #22
 800713e:	461a      	mov	r2, r3
 8007140:	2164      	movs	r1, #100	; 0x64
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f004 f80a 	bl	800b15c <VL53L0X_RdWord>
 8007148:	4603      	mov	r3, r0
 800714a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800714c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007154:	8afb      	ldrh	r3, [r7, #22]
 8007156:	025b      	lsls	r3, r3, #9
 8007158:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	77bb      	strb	r3, [r7, #30]
		break;
 800715e:	e001      	b.n	8007164 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007160:	23fc      	movs	r3, #252	; 0xfc
 8007162:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007164:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d12a      	bne.n	80071c2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800716c:	7fbb      	ldrb	r3, [r7, #30]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d124      	bne.n	80071bc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d110      	bne.n	800719a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007178:	897b      	ldrh	r3, [r7, #10]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	330c      	adds	r3, #12
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800718c:	897b      	ldrh	r3, [r7, #10]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007198:	e013      	b.n	80071c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80071a0:	897b      	ldrh	r3, [r7, #10]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	330c      	adds	r3, #12
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80071ae:	897b      	ldrh	r3, [r7, #10]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80071ba:	e002      	b.n	80071c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071c2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80071de:	f107 030e 	add.w	r3, r7, #14
 80071e2:	461a      	mov	r2, r3
 80071e4:	2101      	movs	r1, #1
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f003 ff8e 	bl	800b108 <VL53L0X_RdByte>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80071f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10e      	bne.n	8007216 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80071f8:	7bba      	ldrb	r2, [r7, #14]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	b25b      	sxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	da03      	bge.n	8007210 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2201      	movs	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e002      	b.n	8007216 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007240:	f107 030e 	add.w	r3, r7, #14
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff fbd2 	bl	80069f0 <VL53L0X_GetDeviceMode>
 800724c:	4603      	mov	r3, r0
 800724e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d107      	bne.n	8007268 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d104      	bne.n	8007268 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f898 	bl	8007394 <VL53L0X_StartMeasurement>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fb3f 	bl	80088f4 <VL53L0X_measurement_poll_for_completion>
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800727a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2203      	movs	r2, #3
 800728c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80072ac:	2301      	movs	r3, #1
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f001 fae1 	bl	800887a <VL53L0X_perform_ref_calibration>
 80072b8:	4603      	mov	r3, r0
 80072ba:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80072bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80072de:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80072e0:	7dbb      	ldrb	r3, [r7, #22]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d005      	beq.n	80072f2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80072e6:	7dbb      	ldrb	r3, [r7, #22]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d002      	beq.n	80072f2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80072ec:	7dbb      	ldrb	r3, [r7, #22]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d147      	bne.n	8007382 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80072f2:	f107 030c 	add.w	r3, r7, #12
 80072f6:	f107 0210 	add.w	r2, r7, #16
 80072fa:	2101      	movs	r1, #1
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fbc3 	bl	8007a88 <VL53L0X_GetInterruptThresholds>
 8007302:	4603      	mov	r3, r0
 8007304:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800730c:	d803      	bhi.n	8007316 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800730e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007310:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007314:	d935      	bls.n	8007382 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d131      	bne.n	8007382 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d006      	beq.n	8007332 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007324:	491a      	ldr	r1, [pc, #104]	; (8007390 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f002 ff56 	bl	800a1d8 <VL53L0X_load_tuning_settings>
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]
 8007330:	e027      	b.n	8007382 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007332:	2204      	movs	r2, #4
 8007334:	21ff      	movs	r1, #255	; 0xff
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f003 fe64 	bl	800b004 <VL53L0X_WrByte>
 800733c:	4603      	mov	r3, r0
 800733e:	461a      	mov	r2, r3
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	4313      	orrs	r3, r2
 8007344:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007346:	2200      	movs	r2, #0
 8007348:	2170      	movs	r1, #112	; 0x70
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f003 fe5a 	bl	800b004 <VL53L0X_WrByte>
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	4313      	orrs	r3, r2
 8007358:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800735a:	2200      	movs	r2, #0
 800735c:	21ff      	movs	r1, #255	; 0xff
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f003 fe50 	bl	800b004 <VL53L0X_WrByte>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	4313      	orrs	r3, r2
 800736c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800736e:	2200      	movs	r2, #0
 8007370:	2180      	movs	r1, #128	; 0x80
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f003 fe46 	bl	800b004 <VL53L0X_WrByte>
 8007378:	4603      	mov	r3, r0
 800737a:	461a      	mov	r2, r3
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	4313      	orrs	r3, r2
 8007380:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007382:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000104 	.word	0x20000104

08007394 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800739c:	2300      	movs	r3, #0
 800739e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80073a4:	f107 030e 	add.w	r3, r7, #14
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fb20 	bl	80069f0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80073b0:	2201      	movs	r2, #1
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f003 fe25 	bl	800b004 <VL53L0X_WrByte>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80073be:	2201      	movs	r2, #1
 80073c0:	21ff      	movs	r1, #255	; 0xff
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f003 fe1e 	bl	800b004 <VL53L0X_WrByte>
 80073c8:	4603      	mov	r3, r0
 80073ca:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80073cc:	2200      	movs	r2, #0
 80073ce:	2100      	movs	r1, #0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f003 fe17 	bl	800b004 <VL53L0X_WrByte>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80073e0:	461a      	mov	r2, r3
 80073e2:	2191      	movs	r1, #145	; 0x91
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f003 fe0d 	bl	800b004 <VL53L0X_WrByte>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80073ee:	2201      	movs	r2, #1
 80073f0:	2100      	movs	r1, #0
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f003 fe06 	bl	800b004 <VL53L0X_WrByte>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80073fc:	2200      	movs	r2, #0
 80073fe:	21ff      	movs	r1, #255	; 0xff
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f003 fdff 	bl	800b004 <VL53L0X_WrByte>
 8007406:	4603      	mov	r3, r0
 8007408:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800740a:	2200      	movs	r2, #0
 800740c:	2180      	movs	r1, #128	; 0x80
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f003 fdf8 	bl	800b004 <VL53L0X_WrByte>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d054      	beq.n	80074c8 <VL53L0X_StartMeasurement+0x134>
 800741e:	2b03      	cmp	r3, #3
 8007420:	dc6c      	bgt.n	80074fc <VL53L0X_StartMeasurement+0x168>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <VL53L0X_StartMeasurement+0x98>
 8007426:	2b01      	cmp	r3, #1
 8007428:	d034      	beq.n	8007494 <VL53L0X_StartMeasurement+0x100>
 800742a:	e067      	b.n	80074fc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800742c:	2201      	movs	r2, #1
 800742e:	2100      	movs	r1, #0
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f003 fde7 	bl	800b004 <VL53L0X_WrByte>
 8007436:	4603      	mov	r3, r0
 8007438:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800743e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d15d      	bne.n	8007502 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007450:	f107 030d 	add.w	r3, r7, #13
 8007454:	461a      	mov	r2, r3
 8007456:	2100      	movs	r1, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f003 fe55 	bl	800b108 <VL53L0X_RdByte>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3301      	adds	r3, #1
 8007466:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007468:	7b7a      	ldrb	r2, [r7, #13]
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	4013      	ands	r3, r2
 800746e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007470:	7bfa      	ldrb	r2, [r7, #15]
 8007472:	429a      	cmp	r2, r3
 8007474:	d107      	bne.n	8007486 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007484:	d3e1      	bcc.n	800744a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800748c:	d339      	bcc.n	8007502 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800748e:	23f9      	movs	r3, #249	; 0xf9
 8007490:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007492:	e036      	b.n	8007502 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d105      	bne.n	80074a8 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800749c:	2101      	movs	r1, #1
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff ff12 	bl	80072c8 <VL53L0X_CheckAndLoadInterruptSettings>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80074a8:	2202      	movs	r2, #2
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f003 fda9 	bl	800b004 <VL53L0X_WrByte>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80074b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d123      	bne.n	8007506 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2204      	movs	r2, #4
 80074c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80074c6:	e01e      	b.n	8007506 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80074c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d105      	bne.n	80074dc <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80074d0:	2101      	movs	r1, #1
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fef8 	bl	80072c8 <VL53L0X_CheckAndLoadInterruptSettings>
 80074d8:	4603      	mov	r3, r0
 80074da:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80074dc:	2204      	movs	r2, #4
 80074de:	2100      	movs	r1, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f003 fd8f 	bl	800b004 <VL53L0X_WrByte>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80074ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10b      	bne.n	800750a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2204      	movs	r2, #4
 80074f6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80074fa:	e006      	b.n	800750a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80074fc:	23f8      	movs	r3, #248	; 0xf8
 80074fe:	75fb      	strb	r3, [r7, #23]
 8007500:	e004      	b.n	800750c <VL53L0X_StartMeasurement+0x178>
		break;
 8007502:	bf00      	nop
 8007504:	e002      	b.n	800750c <VL53L0X_StartMeasurement+0x178>
		break;
 8007506:	bf00      	nop
 8007508:	e000      	b.n	800750c <VL53L0X_StartMeasurement+0x178>
		break;
 800750a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800750c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800752c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	2b04      	cmp	r3, #4
 8007532:	d112      	bne.n	800755a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fb1a 	bl	8007b74 <VL53L0X_GetInterruptMaskStatus>
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b04      	cmp	r3, #4
 8007548:	d103      	bne.n	8007552 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	e01c      	b.n	800758c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e018      	b.n	800758c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800755a:	f107 030d 	add.w	r3, r7, #13
 800755e:	461a      	mov	r2, r3
 8007560:	2114      	movs	r1, #20
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f003 fdd0 	bl	800b108 <VL53L0X_RdByte>
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800756c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10b      	bne.n	800758c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007574:	7b7b      	ldrb	r3, [r7, #13]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2201      	movs	r2, #1
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e002      	b.n	800758c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800758c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007598:	b5b0      	push	{r4, r5, r7, lr}
 800759a:	b096      	sub	sp, #88	; 0x58
 800759c:	af02      	add	r7, sp, #8
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80075a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80075ac:	230c      	movs	r3, #12
 80075ae:	2114      	movs	r1, #20
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f003 fcfb 	bl	800afac <VL53L0X_ReadMulti>
 80075b6:	4603      	mov	r3, r0
 80075b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80075bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 80d1 	bne.w	8007768 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2200      	movs	r2, #0
 80075ca:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80075d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2200      	movs	r2, #0
 80075ec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80075ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	4413      	add	r3, r2
 8007600:	b29b      	uxth	r3, r3
 8007602:	025b      	lsls	r3, r3, #9
 8007604:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800760a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800760c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007610:	b29b      	uxth	r3, r3
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	b29a      	uxth	r2, r3
 8007616:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800761a:	b29b      	uxth	r3, r3
 800761c:	4413      	add	r3, r2
 800761e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007622:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007626:	025b      	lsls	r3, r3, #9
 8007628:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800762e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007632:	b29b      	uxth	r3, r3
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	b29a      	uxth	r2, r3
 8007638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800763c:	b29b      	uxth	r3, r3
 800763e:	4413      	add	r3, r2
 8007640:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800764a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800764c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800765a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007666:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800766c:	d046      	beq.n	80076fc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800766e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007670:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007674:	fb02 f303 	mul.w	r3, r2, r3
 8007678:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800767c:	4a57      	ldr	r2, [pc, #348]	; (80077dc <VL53L0X_GetRangingMeasurementData+0x244>)
 800767e:	fb82 1203 	smull	r1, r2, r2, r3
 8007682:	1192      	asrs	r2, r2, #6
 8007684:	17db      	asrs	r3, r3, #31
 8007686:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007688:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7f1b      	ldrb	r3, [r3, #28]
 8007696:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800769a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d02c      	beq.n	80076fc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80076a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076a4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80076a8:	fb02 f303 	mul.w	r3, r2, r3
 80076ac:	121a      	asrs	r2, r3, #8
					<= 0) {
 80076ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d10d      	bne.n	80076d0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80076b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80076bc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80076c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076c4:	e016      	b.n	80076f4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80076c6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80076ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076ce:	e011      	b.n	80076f4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80076d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80076d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076d6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80076da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076dc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80076e4:	121b      	asrs	r3, r3, #8
 80076e6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80076e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ea:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80076f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80076f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80076fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00d      	beq.n	8007720 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007704:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007708:	089b      	lsrs	r3, r3, #2
 800770a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007710:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007714:	b2db      	uxtb	r3, r3
 8007716:	019b      	lsls	r3, r3, #6
 8007718:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	75da      	strb	r2, [r3, #23]
 800771e:	e006      	b.n	800772e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007726:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2200      	movs	r2, #0
 800772c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800772e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007732:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007736:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f003 f9e5 	bl	800ab14 <VL53L0X_get_pal_range_status>
 800774a:	4603      	mov	r3, r0
 800774c:	461a      	mov	r2, r3
 800774e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007752:	4313      	orrs	r3, r2
 8007754:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007758:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007760:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007768:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800776c:	2b00      	cmp	r3, #0
 800776e:	d12f      	bne.n	80077d0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f107 040c 	add.w	r4, r7, #12
 8007776:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800777a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800777c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007782:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800778a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007798:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800779e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80077a4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80077aa:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80077b0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80077b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80077c0:	f107 050c 	add.w	r5, r7, #12
 80077c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80077cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3750      	adds	r7, #80	; 0x50
 80077d8:	46bd      	mov	sp, r7
 80077da:	bdb0      	pop	{r4, r5, r7, pc}
 80077dc:	10624dd3 	.word	0x10624dd3

080077e0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff f8d1 	bl	8006998 <VL53L0X_SetDeviceMode>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80077fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff fd16 	bl	8007234 <VL53L0X_PerformSingleMeasurement>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800780c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff febe 	bl	8007598 <VL53L0X_GetRangingMeasurementData>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d105      	bne.n	8007834 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007828:	2100      	movs	r1, #0
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f962 	bl	8007af4 <VL53L0X_ClearInterruptMask>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	461a      	mov	r2, r3
 800784e:	4603      	mov	r3, r0
 8007850:	70fb      	strb	r3, [r7, #3]
 8007852:	460b      	mov	r3, r1
 8007854:	70bb      	strb	r3, [r7, #2]
 8007856:	4613      	mov	r3, r2
 8007858:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007864:	23f6      	movs	r3, #246	; 0xf6
 8007866:	73fb      	strb	r3, [r7, #15]
 8007868:	e107      	b.n	8007a7a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800786a:	78bb      	ldrb	r3, [r7, #2]
 800786c:	2b14      	cmp	r3, #20
 800786e:	d110      	bne.n	8007892 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007870:	7e3b      	ldrb	r3, [r7, #24]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007876:	2310      	movs	r3, #16
 8007878:	73bb      	strb	r3, [r7, #14]
 800787a:	e001      	b.n	8007880 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800787c:	2301      	movs	r3, #1
 800787e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	461a      	mov	r2, r3
 8007884:	2184      	movs	r1, #132	; 0x84
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f003 fbbc 	bl	800b004 <VL53L0X_WrByte>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
 8007890:	e0f3      	b.n	8007a7a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007892:	78bb      	ldrb	r3, [r7, #2]
 8007894:	2b15      	cmp	r3, #21
 8007896:	f040 8097 	bne.w	80079c8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800789a:	2201      	movs	r2, #1
 800789c:	21ff      	movs	r1, #255	; 0xff
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f003 fbb0 	bl	800b004 <VL53L0X_WrByte>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f003 fba6 	bl	800b004 <VL53L0X_WrByte>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4313      	orrs	r3, r2
 80078c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80078c2:	2200      	movs	r2, #0
 80078c4:	21ff      	movs	r1, #255	; 0xff
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f003 fb9c 	bl	800b004 <VL53L0X_WrByte>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80078d6:	2201      	movs	r2, #1
 80078d8:	2180      	movs	r1, #128	; 0x80
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f003 fb92 	bl	800b004 <VL53L0X_WrByte>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80078ea:	2202      	movs	r2, #2
 80078ec:	2185      	movs	r1, #133	; 0x85
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f003 fb88 	bl	800b004 <VL53L0X_WrByte>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461a      	mov	r2, r3
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80078fe:	2204      	movs	r2, #4
 8007900:	21ff      	movs	r1, #255	; 0xff
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f003 fb7e 	bl	800b004 <VL53L0X_WrByte>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	4313      	orrs	r3, r2
 8007910:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007912:	2200      	movs	r2, #0
 8007914:	21cd      	movs	r1, #205	; 0xcd
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f003 fb74 	bl	800b004 <VL53L0X_WrByte>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	4313      	orrs	r3, r2
 8007924:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007926:	2211      	movs	r2, #17
 8007928:	21cc      	movs	r1, #204	; 0xcc
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f003 fb6a 	bl	800b004 <VL53L0X_WrByte>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	4313      	orrs	r3, r2
 8007938:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800793a:	2207      	movs	r2, #7
 800793c:	21ff      	movs	r1, #255	; 0xff
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f003 fb60 	bl	800b004 <VL53L0X_WrByte>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	4313      	orrs	r3, r2
 800794c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800794e:	2200      	movs	r2, #0
 8007950:	21be      	movs	r1, #190	; 0xbe
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f003 fb56 	bl	800b004 <VL53L0X_WrByte>
 8007958:	4603      	mov	r3, r0
 800795a:	461a      	mov	r2, r3
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	4313      	orrs	r3, r2
 8007960:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007962:	2206      	movs	r2, #6
 8007964:	21ff      	movs	r1, #255	; 0xff
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f003 fb4c 	bl	800b004 <VL53L0X_WrByte>
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	4313      	orrs	r3, r2
 8007974:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007976:	2209      	movs	r2, #9
 8007978:	21cc      	movs	r1, #204	; 0xcc
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f003 fb42 	bl	800b004 <VL53L0X_WrByte>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4313      	orrs	r3, r2
 8007988:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800798a:	2200      	movs	r2, #0
 800798c:	21ff      	movs	r1, #255	; 0xff
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f003 fb38 	bl	800b004 <VL53L0X_WrByte>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	4313      	orrs	r3, r2
 800799c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800799e:	2201      	movs	r2, #1
 80079a0:	21ff      	movs	r1, #255	; 0xff
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f003 fb2e 	bl	800b004 <VL53L0X_WrByte>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461a      	mov	r2, r3
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f003 fb24 	bl	800b004 <VL53L0X_WrByte>
 80079bc:	4603      	mov	r3, r0
 80079be:	461a      	mov	r2, r3
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	73fb      	strb	r3, [r7, #15]
 80079c6:	e058      	b.n	8007a7a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80079c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d121      	bne.n	8007a14 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80079d0:	787b      	ldrb	r3, [r7, #1]
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d81b      	bhi.n	8007a0e <VL53L0X_SetGpioConfig+0x1ce>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <VL53L0X_SetGpioConfig+0x19c>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079f1 	.word	0x080079f1
 80079e0:	080079f7 	.word	0x080079f7
 80079e4:	080079fd 	.word	0x080079fd
 80079e8:	08007a03 	.word	0x08007a03
 80079ec:	08007a09 	.word	0x08007a09
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73bb      	strb	r3, [r7, #14]
				break;
 80079f4:	e00f      	b.n	8007a16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80079f6:	2301      	movs	r3, #1
 80079f8:	73bb      	strb	r3, [r7, #14]
				break;
 80079fa:	e00c      	b.n	8007a16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80079fc:	2302      	movs	r3, #2
 80079fe:	73bb      	strb	r3, [r7, #14]
				break;
 8007a00:	e009      	b.n	8007a16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73bb      	strb	r3, [r7, #14]
				break;
 8007a06:	e006      	b.n	8007a16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007a08:	2304      	movs	r3, #4
 8007a0a:	73bb      	strb	r3, [r7, #14]
				break;
 8007a0c:	e003      	b.n	8007a16 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007a0e:	23f5      	movs	r3, #245	; 0xf5
 8007a10:	73fb      	strb	r3, [r7, #15]
 8007a12:	e000      	b.n	8007a16 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007a14:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d107      	bne.n	8007a2e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	461a      	mov	r2, r3
 8007a22:	210a      	movs	r1, #10
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f003 faed 	bl	800b004 <VL53L0X_WrByte>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10f      	bne.n	8007a56 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007a36:	7e3b      	ldrb	r3, [r7, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73bb      	strb	r3, [r7, #14]
 8007a40:	e001      	b.n	8007a46 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007a42:	2310      	movs	r3, #16
 8007a44:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	22ef      	movs	r2, #239	; 0xef
 8007a4a:	2184      	movs	r1, #132	; 0x84
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f003 fb27 	bl	800b0a0 <VL53L0X_UpdateByte>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d103      	bne.n	8007a66 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	787a      	ldrb	r2, [r7, #1]
 8007a62:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d105      	bne.n	8007a7a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007a6e:	2100      	movs	r1, #0
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f83f 	bl	8007af4 <VL53L0X_ClearInterruptMask>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop

08007a88 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	460b      	mov	r3, r1
 8007a96:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007a9c:	f107 0314 	add.w	r3, r7, #20
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	210e      	movs	r1, #14
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f003 fb59 	bl	800b15c <VL53L0X_RdWord>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007aae:	8abb      	ldrh	r3, [r7, #20]
 8007ab0:	045b      	lsls	r3, r3, #17
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <VL53L0X_GetInterruptThresholds+0x68>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10f      	bne.n	8007ae4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	461a      	mov	r2, r3
 8007aca:	210c      	movs	r1, #12
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f003 fb45 	bl	800b15c <VL53L0X_RdWord>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007ad6:	8abb      	ldrh	r3, [r7, #20]
 8007ad8:	045b      	lsls	r3, r3, #17
 8007ada:	461a      	mov	r2, r3
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <VL53L0X_GetInterruptThresholds+0x68>)
 8007ade:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	1ffe0000 	.word	0x1ffe0000

08007af4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007b06:	2201      	movs	r2, #1
 8007b08:	210b      	movs	r1, #11
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f003 fa7a 	bl	800b004 <VL53L0X_WrByte>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007b14:	2200      	movs	r2, #0
 8007b16:	210b      	movs	r1, #11
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f003 fa73 	bl	800b004 <VL53L0X_WrByte>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007b28:	f107 030d 	add.w	r3, r7, #13
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2113      	movs	r1, #19
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f003 fae9 	bl	800b108 <VL53L0X_RdByte>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	3301      	adds	r3, #1
 8007b44:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007b46:	7b7b      	ldrb	r3, [r7, #13]
 8007b48:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d006      	beq.n	8007b5e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d803      	bhi.n	8007b5e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0d3      	beq.n	8007b06 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007b64:	23f4      	movs	r3, #244	; 0xf4
 8007b66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007b82:	f107 030e 	add.w	r3, r7, #14
 8007b86:	461a      	mov	r2, r3
 8007b88:	2113      	movs	r1, #19
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f003 fabc 	bl	800b108 <VL53L0X_RdByte>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	f003 0207 	and.w	r2, r3, #7
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	f003 0318 	and.w	r3, r3, #24
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007ba8:	23fa      	movs	r3, #250	; 0xfa
 8007baa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fa03 	bl	8007fd8 <VL53L0X_perform_ref_spad_management>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007bf0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007bf4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bfa:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007bfc:	f107 0308 	add.w	r3, r7, #8
 8007c00:	461a      	mov	r2, r3
 8007c02:	2128      	movs	r1, #40	; 0x28
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f003 faa9 	bl	800b15c <VL53L0X_RdWord>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d11e      	bne.n	8007c54 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007c16:	893b      	ldrh	r3, [r7, #8]
 8007c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007c20:	893b      	ldrh	r3, [r7, #8]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	dd0b      	ble.n	8007c44 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007c2c:	893a      	ldrh	r2, [r7, #8]
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	b21b      	sxth	r3, r3
 8007c36:	461a      	mov	r2, r3
					* 250;
 8007c38:	23fa      	movs	r3, #250	; 0xfa
 8007c3a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	e007      	b.n	8007c54 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007c44:	893b      	ldrh	r3, [r7, #8]
 8007c46:	b21b      	sxth	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	23fa      	movs	r3, #250	; 0xfa
 8007c4c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b08b      	sub	sp, #44	; 0x2c
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007c6e:	2308      	movs	r3, #8
 8007c70:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c86:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c90:	69b9      	ldr	r1, [r7, #24]
 8007c92:	fb01 f202 	mul.w	r2, r1, r2
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	e030      	b.n	8007d02 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	4413      	add	r3, r2
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d11e      	bne.n	8007cf4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007cb6:	7ffa      	ldrb	r2, [r7, #31]
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	fa42 f303 	asr.w	r3, r2, r3
 8007cbe:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007cc4:	e016      	b.n	8007cf4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007cc6:	7ffb      	ldrb	r3, [r7, #31]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <get_next_good_spad+0x88>
				success = 1;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	fb03 f202 	mul.w	r2, r3, r2
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	4413      	add	r3, r2
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	601a      	str	r2, [r3, #0]
				break;
 8007ce6:	e009      	b.n	8007cfc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007ce8:	7ffb      	ldrb	r3, [r7, #31]
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d3e4      	bcc.n	8007cc6 <get_next_good_spad+0x66>
				coarseIndex++) {
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	3301      	adds	r3, #1
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d202      	bcs.n	8007d10 <get_next_good_spad+0xb0>
 8007d0a:	7fbb      	ldrb	r3, [r7, #30]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0c7      	beq.n	8007ca0 <get_next_good_spad+0x40>
		}
	}
}
 8007d10:	bf00      	nop
 8007d12:	372c      	adds	r7, #44	; 0x2c
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	099b      	lsrs	r3, r3, #6
 8007d2c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007d2e:	4a07      	ldr	r2, [pc, #28]	; (8007d4c <is_aperture+0x30>)
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <is_aperture+0x22>
		isAperture = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	200002bc 	.word	0x200002bc

08007d50 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b089      	sub	sp, #36	; 0x24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007d60:	2308      	movs	r3, #8
 8007d62:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d76:	69b9      	ldr	r1, [r7, #24]
 8007d78:	fb01 f202 	mul.w	r2, r1, r2
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d302      	bcc.n	8007d8e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d88:	23ce      	movs	r3, #206	; 0xce
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	e010      	b.n	8007db0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	4413      	add	r3, r2
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b25a      	sxtb	r2, r3
 8007d98:	2101      	movs	r1, #1
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007da0:	b25b      	sxtb	r3, r3
 8007da2:	4313      	orrs	r3, r2
 8007da4:	b259      	sxtb	r1, r3
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	4413      	add	r3, r2
 8007dac:	b2ca      	uxtb	r2, r1
 8007dae:	701a      	strb	r2, [r3, #0]

	return status;
 8007db0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3724      	adds	r7, #36	; 0x24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007dca:	2306      	movs	r3, #6
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	21b0      	movs	r1, #176	; 0xb0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f003 f8bb 	bl	800af4c <VL53L0X_WriteMulti>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007df0:	2306      	movs	r3, #6
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	21b0      	movs	r1, #176	; 0xb0
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f003 f8d8 	bl	800afac <VL53L0X_ReadMulti>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	; 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e24:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e28:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e2e:	e02b      	b.n	8007e88 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007e30:	f107 031c 	add.w	r3, r7, #28
 8007e34:	6a3a      	ldr	r2, [r7, #32]
 8007e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ff11 	bl	8007c60 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d103      	bne.n	8007e4e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e46:	23ce      	movs	r3, #206	; 0xce
 8007e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007e4c:	e020      	b.n	8007e90 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e54:	4413      	add	r3, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff ff60 	bl	8007d1c <is_aperture>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	461a      	mov	r2, r3
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d003      	beq.n	8007e6e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e66:	23ce      	movs	r3, #206	; 0xce
 8007e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007e6c:	e010      	b.n	8007e90 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007e72:	6a3a      	ldr	r2, [r7, #32]
 8007e74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e76:	6838      	ldr	r0, [r7, #0]
 8007e78:	f7ff ff6a 	bl	8007d50 <enable_spad_bit>
		currentSpad++;
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	3301      	adds	r3, #1
 8007e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d3cf      	bcc.n	8007e30 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e92:	6a3a      	ldr	r2, [r7, #32]
 8007e94:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007e96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff ff8d 	bl	8007dc0 <set_ref_spad_map>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007eac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d121      	bne.n	8007ef8 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007eb4:	f107 0314 	add.w	r3, r7, #20
 8007eb8:	4619      	mov	r1, r3
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff ff93 	bl	8007de6 <get_ref_spad_map>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007eca:	e011      	b.n	8007ef0 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	4413      	add	r3, r2
 8007ed2:	781a      	ldrb	r2, [r3, #0]
 8007ed4:	f107 0114 	add.w	r1, r7, #20
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	440b      	add	r3, r1
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d003      	beq.n	8007eea <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007ee2:	23ce      	movs	r3, #206	; 0xce
 8007ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007ee8:	e006      	b.n	8007ef8 <enable_ref_spads+0xec>
			}
			i++;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	3301      	adds	r3, #1
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d3e9      	bcc.n	8007ecc <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007ef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3730      	adds	r7, #48	; 0x30
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007f20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007f24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d107      	bne.n	8007f3c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007f2c:	22c0      	movs	r2, #192	; 0xc0
 8007f2e:	2101      	movs	r1, #1
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f003 f867 	bl	800b004 <VL53L0X_WrByte>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d108      	bne.n	8007f56 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fc48 	bl	80077e0 <VL53L0X_PerformSingleRangingMeasurement>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007f56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d107      	bne.n	8007f6e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f5e:	2201      	movs	r2, #1
 8007f60:	21ff      	movs	r1, #255	; 0xff
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f003 f84e 	bl	800b004 <VL53L0X_WrByte>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007f6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d107      	bne.n	8007f86 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	21b6      	movs	r1, #182	; 0xb6
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f003 f8ee 	bl	800b15c <VL53L0X_RdWord>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007f86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d107      	bne.n	8007f9e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f8e:	2200      	movs	r2, #0
 8007f90:	21ff      	movs	r1, #255	; 0xff
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f003 f836 	bl	800b004 <VL53L0X_WrByte>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007f9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d112      	bne.n	8007fcc <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007faa:	461a      	mov	r2, r3
 8007fac:	2101      	movs	r1, #1
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f003 f828 	bl	800b004 <VL53L0X_WrByte>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007fba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fc8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3728      	adds	r7, #40	; 0x28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007fd8:	b590      	push	{r4, r7, lr}
 8007fda:	b09d      	sub	sp, #116	; 0x74
 8007fdc:	af06      	add	r7, sp, #24
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007fea:	23b4      	movs	r3, #180	; 0xb4
 8007fec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007ff4:	232c      	movs	r3, #44	; 0x2c
 8007ff6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008004:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008008:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008012:	2306      	movs	r3, #6
 8008014:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800803c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800803e:	2300      	movs	r3, #0
 8008040:	64bb      	str	r3, [r7, #72]	; 0x48
 8008042:	e009      	b.n	8008058 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008048:	4413      	add	r3, r2
 800804a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008054:	3301      	adds	r3, #1
 8008056:	64bb      	str	r3, [r7, #72]	; 0x48
 8008058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	429a      	cmp	r2, r3
 800805e:	d3f1      	bcc.n	8008044 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008060:	2201      	movs	r2, #1
 8008062:	21ff      	movs	r1, #255	; 0xff
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f002 ffcd 	bl	800b004 <VL53L0X_WrByte>
 800806a:	4603      	mov	r3, r0
 800806c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008070:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008074:	2b00      	cmp	r3, #0
 8008076:	d107      	bne.n	8008088 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008078:	2200      	movs	r2, #0
 800807a:	214f      	movs	r1, #79	; 0x4f
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f002 ffc1 	bl	800b004 <VL53L0X_WrByte>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008088:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800808c:	2b00      	cmp	r3, #0
 800808e:	d107      	bne.n	80080a0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008090:	222c      	movs	r2, #44	; 0x2c
 8008092:	214e      	movs	r1, #78	; 0x4e
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f002 ffb5 	bl	800b004 <VL53L0X_WrByte>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80080a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d107      	bne.n	80080b8 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80080a8:	2200      	movs	r2, #0
 80080aa:	21ff      	movs	r1, #255	; 0xff
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f002 ffa9 	bl	800b004 <VL53L0X_WrByte>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80080b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80080c0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80080c4:	461a      	mov	r2, r3
 80080c6:	21b6      	movs	r1, #182	; 0xb6
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f002 ff9b 	bl	800b004 <VL53L0X_WrByte>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80080d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d107      	bne.n	80080ec <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80080dc:	2200      	movs	r2, #0
 80080de:	2180      	movs	r1, #128	; 0x80
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f002 ff8f 	bl	800b004 <VL53L0X_WrByte>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80080ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80080f4:	f107 0210 	add.w	r2, r7, #16
 80080f8:	f107 0111 	add.w	r1, r7, #17
 80080fc:	2300      	movs	r3, #0
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fbbb 	bl	800887a <VL53L0X_perform_ref_calibration>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800810a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800810e:	2b00      	cmp	r3, #0
 8008110:	d121      	bne.n	8008156 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008118:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800811e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008120:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800812e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008132:	f107 0218 	add.w	r2, r7, #24
 8008136:	9204      	str	r2, [sp, #16]
 8008138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813a:	9203      	str	r2, [sp, #12]
 800813c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800813e:	9202      	str	r2, [sp, #8]
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	4623      	mov	r3, r4
 8008148:	4602      	mov	r2, r0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f7ff fe5e 	bl	8007e0c <enable_ref_spads>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008156:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800815a:	2b00      	cmp	r3, #0
 800815c:	d174      	bne.n	8008248 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008162:	f107 0312 	add.w	r3, r7, #18
 8008166:	4619      	mov	r1, r3
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fecb 	bl	8007f04 <perform_ref_signal_measurement>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008174:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008178:	2b00      	cmp	r3, #0
 800817a:	d161      	bne.n	8008240 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800817c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800817e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008180:	429a      	cmp	r2, r3
 8008182:	d25d      	bcs.n	8008240 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008184:	2300      	movs	r3, #0
 8008186:	64bb      	str	r3, [r7, #72]	; 0x48
 8008188:	e009      	b.n	800819e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818e:	4413      	add	r3, r2
 8008190:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800819a:	3301      	adds	r3, #1
 800819c:	64bb      	str	r3, [r7, #72]	; 0x48
 800819e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d3f1      	bcc.n	800818a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80081a6:	e002      	b.n	80081ae <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80081a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081aa:	3301      	adds	r3, #1
 80081ac:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80081ae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80081b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b4:	4413      	add	r3, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fdb0 	bl	8007d1c <is_aperture>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80081c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d3ee      	bcc.n	80081a8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80081ca:	2301      	movs	r3, #1
 80081cc:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80081ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80081de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80081e2:	f107 0218 	add.w	r2, r7, #24
 80081e6:	9204      	str	r2, [sp, #16]
 80081e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ea:	9203      	str	r2, [sp, #12]
 80081ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081ee:	9202      	str	r2, [sp, #8]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	4623      	mov	r3, r4
 80081f8:	4602      	mov	r2, r0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fe06 	bl	8007e0c <enable_ref_spads>
 8008200:	4603      	mov	r3, r0
 8008202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008206:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800820a:	2b00      	cmp	r3, #0
 800820c:	d11b      	bne.n	8008246 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008212:	f107 0312 	add.w	r3, r7, #18
 8008216:	4619      	mov	r1, r3
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff fe73 	bl	8007f04 <perform_ref_signal_measurement>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008224:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10c      	bne.n	8008246 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800822c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800822e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008230:	429a      	cmp	r2, r3
 8008232:	d208      	bcs.n	8008246 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800823e:	e002      	b.n	8008246 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008244:	e000      	b.n	8008248 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008246:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008248:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800824c:	2b00      	cmp	r3, #0
 800824e:	f040 80af 	bne.w	80083b0 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008252:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008254:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008256:	429a      	cmp	r2, r3
 8008258:	f240 80aa 	bls.w	80083b0 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800825c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800826c:	f107 031c 	add.w	r3, r7, #28
 8008270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008272:	4618      	mov	r0, r3
 8008274:	f003 f820 	bl	800b2b8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008278:	8a7b      	ldrh	r3, [r7, #18]
 800827a:	461a      	mov	r2, r3
 800827c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfb8      	it	lt
 8008284:	425b      	neglt	r3, r3
 8008286:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800828e:	e086      	b.n	800839e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008296:	f107 0314 	add.w	r3, r7, #20
 800829a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800829c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800829e:	f7ff fcdf 	bl	8007c60 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a8:	d103      	bne.n	80082b2 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80082aa:	23ce      	movs	r3, #206	; 0xce
 80082ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80082b0:	e07e      	b.n	80083b0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80082b2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	4413      	add	r3, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fd2e 	bl	8007d1c <is_aperture>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80082d0:	e06e      	b.n	80083b0 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80082d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d4:	3301      	adds	r3, #1
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80082e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff fd32 	bl	8007d50 <enable_spad_bit>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80082f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10c      	bne.n	8008314 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80082fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082fc:	3301      	adds	r3, #1
 80082fe:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008306:	4619      	mov	r1, r3
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fd59 	bl	8007dc0 <set_ref_spad_map>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008314:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008318:	2b00      	cmp	r3, #0
 800831a:	d146      	bne.n	80083aa <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800831c:	f107 0312 	add.w	r3, r7, #18
 8008320:	4619      	mov	r1, r3
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff fdee 	bl	8007f04 <perform_ref_signal_measurement>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800832e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008332:	2b00      	cmp	r3, #0
 8008334:	d13b      	bne.n	80083ae <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008336:	8a7b      	ldrh	r3, [r7, #18]
 8008338:	461a      	mov	r2, r3
 800833a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	bfb8      	it	lt
 8008342:	425b      	neglt	r3, r3
 8008344:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008346:	8a7b      	ldrh	r3, [r7, #18]
 8008348:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800834a:	429a      	cmp	r2, r3
 800834c:	d21c      	bcs.n	8008388 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800834e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008352:	429a      	cmp	r2, r3
 8008354:	d914      	bls.n	8008380 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008356:	f107 031c 	add.w	r3, r7, #28
 800835a:	4619      	mov	r1, r3
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fd2f 	bl	8007dc0 <set_ref_spad_map>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800836e:	f107 011c 	add.w	r1, r7, #28
 8008372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008374:	4618      	mov	r0, r3
 8008376:	f002 ff9f 	bl	800b2b8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800837a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837c:	3b01      	subs	r3, #1
 800837e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008386:	e00a      	b.n	800839e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008392:	f107 031c 	add.w	r3, r7, #28
 8008396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008398:	4618      	mov	r0, r3
 800839a:	f002 ff8d 	bl	800b2b8 <memcpy>
		while (!complete) {
 800839e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f43f af74 	beq.w	8008290 <VL53L0X_perform_ref_spad_management+0x2b8>
 80083a8:	e002      	b.n	80083b0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80083aa:	bf00      	nop
 80083ac:	e000      	b.n	80083b0 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80083ae:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d115      	bne.n	80083e4 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083bc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80083c4:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80083e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	375c      	adds	r7, #92	; 0x5c
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd90      	pop	{r4, r7, pc}

080083f0 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80083f0:	b590      	push	{r4, r7, lr}
 80083f2:	b093      	sub	sp, #76	; 0x4c
 80083f4:	af06      	add	r7, sp, #24
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083fe:	2300      	movs	r3, #0
 8008400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008408:	23b4      	movs	r3, #180	; 0xb4
 800840a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800840e:	2306      	movs	r3, #6
 8008410:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008412:	232c      	movs	r3, #44	; 0x2c
 8008414:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008416:	2201      	movs	r2, #1
 8008418:	21ff      	movs	r1, #255	; 0xff
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f002 fdf2 	bl	800b004 <VL53L0X_WrByte>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008426:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800842e:	2200      	movs	r2, #0
 8008430:	214f      	movs	r1, #79	; 0x4f
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f002 fde6 	bl	800b004 <VL53L0X_WrByte>
 8008438:	4603      	mov	r3, r0
 800843a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800843e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008442:	2b00      	cmp	r3, #0
 8008444:	d107      	bne.n	8008456 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008446:	222c      	movs	r2, #44	; 0x2c
 8008448:	214e      	movs	r1, #78	; 0x4e
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f002 fdda 	bl	800b004 <VL53L0X_WrByte>
 8008450:	4603      	mov	r3, r0
 8008452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008456:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800845a:	2b00      	cmp	r3, #0
 800845c:	d107      	bne.n	800846e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800845e:	2200      	movs	r2, #0
 8008460:	21ff      	movs	r1, #255	; 0xff
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f002 fdce 	bl	800b004 <VL53L0X_WrByte>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800846e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008476:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800847a:	461a      	mov	r2, r3
 800847c:	21b6      	movs	r1, #182	; 0xb6
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f002 fdc0 	bl	800b004 <VL53L0X_WrByte>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
 800848e:	e009      	b.n	80084a4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	4413      	add	r3, r2
 8008496:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800849a:	2200      	movs	r2, #0
 800849c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	3301      	adds	r3, #1
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
 80084a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d3f1      	bcc.n	8008490 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d011      	beq.n	80084d6 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80084b2:	e002      	b.n	80084ba <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	3301      	adds	r3, #1
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80084ba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	4413      	add	r3, r2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fc2a 	bl	8007d1c <is_aperture>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d103      	bne.n	80084d6 <VL53L0X_set_reference_spads+0xe6>
 80084ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d3ee      	bcc.n	80084b4 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80084e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084e6:	79f9      	ldrb	r1, [r7, #7]
 80084e8:	f107 0214 	add.w	r2, r7, #20
 80084ec:	9204      	str	r2, [sp, #16]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	9203      	str	r2, [sp, #12]
 80084f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084f4:	9202      	str	r2, [sp, #8]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4623      	mov	r3, r4
 80084fe:	4602      	mov	r2, r0
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fc83 	bl	8007e0c <enable_ref_spads>
 8008506:	4603      	mov	r3, r0
 8008508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800850c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10c      	bne.n	800852e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	b2da      	uxtb	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	79fa      	ldrb	r2, [r7, #7]
 800852a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800852e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008532:	4618      	mov	r0, r3
 8008534:	3734      	adds	r7, #52	; 0x34
 8008536:	46bd      	mov	sp, r7
 8008538:	bd90      	pop	{r4, r7, pc}

0800853a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800854a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f002 fd50 	bl	800b004 <VL53L0X_WrByte>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d104      	bne.n	800857a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f9bf 	bl	80088f4 <VL53L0X_measurement_poll_for_completion>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800857a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d105      	bne.n	800858e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008582:	2100      	movs	r1, #0
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff fab5 	bl	8007af4 <VL53L0X_ClearInterruptMask>
 800858a:	4603      	mov	r3, r0
 800858c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800858e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008596:	2200      	movs	r2, #0
 8008598:	2100      	movs	r1, #0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f002 fd32 	bl	800b004 <VL53L0X_WrByte>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

	return Status;
 80085a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	4608      	mov	r0, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	461a      	mov	r2, r3
 80085be:	4603      	mov	r3, r0
 80085c0:	70fb      	strb	r3, [r7, #3]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70bb      	strb	r3, [r7, #2]
 80085c6:	4613      	mov	r3, r2
 80085c8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80085d2:	2201      	movs	r2, #1
 80085d4:	21ff      	movs	r1, #255	; 0xff
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f002 fd14 	bl	800b004 <VL53L0X_WrByte>
 80085dc:	4603      	mov	r3, r0
 80085de:	461a      	mov	r2, r3
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80085e6:	2200      	movs	r2, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f002 fd0a 	bl	800b004 <VL53L0X_WrByte>
 80085f0:	4603      	mov	r3, r0
 80085f2:	461a      	mov	r2, r3
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80085fa:	2200      	movs	r2, #0
 80085fc:	21ff      	movs	r1, #255	; 0xff
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f002 fd00 	bl	800b004 <VL53L0X_WrByte>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	4313      	orrs	r3, r2
 800860c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01e      	beq.n	8008652 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d009      	beq.n	8008630 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	21cb      	movs	r1, #203	; 0xcb
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f002 fd71 	bl	800b108 <VL53L0X_RdByte>
 8008626:	4603      	mov	r3, r0
 8008628:	461a      	mov	r2, r3
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	4313      	orrs	r3, r2
 800862e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	d02a      	beq.n	800868e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008638:	f107 030e 	add.w	r3, r7, #14
 800863c:	461a      	mov	r2, r3
 800863e:	21ee      	movs	r1, #238	; 0xee
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f002 fd61 	bl	800b108 <VL53L0X_RdByte>
 8008646:	4603      	mov	r3, r0
 8008648:	461a      	mov	r2, r3
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	4313      	orrs	r3, r2
 800864e:	73fb      	strb	r3, [r7, #15]
 8008650:	e01d      	b.n	800868e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800865a:	78bb      	ldrb	r3, [r7, #2]
 800865c:	461a      	mov	r2, r3
 800865e:	21cb      	movs	r1, #203	; 0xcb
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f002 fccf 	bl	800b004 <VL53L0X_WrByte>
 8008666:	4603      	mov	r3, r0
 8008668:	461a      	mov	r2, r3
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	4313      	orrs	r3, r2
 800866e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008670:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008678:	787b      	ldrb	r3, [r7, #1]
 800867a:	2280      	movs	r2, #128	; 0x80
 800867c:	21ee      	movs	r1, #238	; 0xee
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f002 fd0e 	bl	800b0a0 <VL53L0X_UpdateByte>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4313      	orrs	r3, r2
 800868c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800868e:	2201      	movs	r2, #1
 8008690:	21ff      	movs	r1, #255	; 0xff
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f002 fcb6 	bl	800b004 <VL53L0X_WrByte>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	4313      	orrs	r3, r2
 80086a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80086a2:	2201      	movs	r2, #1
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f002 fcac 	bl	800b004 <VL53L0X_WrByte>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461a      	mov	r2, r3
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80086b6:	2200      	movs	r2, #0
 80086b8:	21ff      	movs	r1, #255	; 0xff
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f002 fca2 	bl	800b004 <VL53L0X_WrByte>
 80086c0:	4603      	mov	r3, r0
 80086c2:	461a      	mov	r2, r3
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	f023 0310 	bic.w	r3, r3, #16
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	701a      	strb	r2, [r3, #0]

	return Status;
 80086d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b08a      	sub	sp, #40	; 0x28
 80086e6:	af04      	add	r7, sp, #16
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	4611      	mov	r1, r2
 80086ee:	461a      	mov	r2, r3
 80086f0:	460b      	mov	r3, r1
 80086f2:	71fb      	strb	r3, [r7, #7]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800870c:	79bb      	ldrb	r3, [r7, #6]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008718:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800871a:	2201      	movs	r2, #1
 800871c:	2101      	movs	r1, #1
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f002 fc70 	bl	800b004 <VL53L0X_WrByte>
 8008724:	4603      	mov	r3, r0
 8008726:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d105      	bne.n	800873c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008730:	2140      	movs	r1, #64	; 0x40
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff ff01 	bl	800853a <VL53L0X_perform_single_ref_calibration>
 8008738:	4603      	mov	r3, r0
 800873a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800873c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d115      	bne.n	8008770 <VL53L0X_perform_vhv_calibration+0x8e>
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d112      	bne.n	8008770 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800874a:	7d39      	ldrb	r1, [r7, #20]
 800874c:	7d7a      	ldrb	r2, [r7, #21]
 800874e:	2300      	movs	r3, #0
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	2301      	movs	r3, #1
 8008754:	9302      	str	r3, [sp, #8]
 8008756:	f107 0313 	add.w	r3, r7, #19
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	460b      	mov	r3, r1
 8008762:	2101      	movs	r1, #1
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff ff23 	bl	80085b0 <VL53L0X_ref_calibration_io>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]
 800876e:	e002      	b.n	8008776 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008776:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d112      	bne.n	80087a4 <VL53L0X_perform_vhv_calibration+0xc2>
 800877e:	79bb      	ldrb	r3, [r7, #6]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00f      	beq.n	80087a4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008784:	7dbb      	ldrb	r3, [r7, #22]
 8008786:	461a      	mov	r2, r3
 8008788:	2101      	movs	r1, #1
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f002 fc3a 	bl	800b004 <VL53L0X_WrByte>
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d103      	bne.n	80087a4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	7dba      	ldrb	r2, [r7, #22]
 80087a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80087a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	; 0x28
 80087b4:	af04      	add	r7, sp, #16
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4611      	mov	r1, r2
 80087bc:	461a      	mov	r2, r3
 80087be:	460b      	mov	r3, r1
 80087c0:	71fb      	strb	r3, [r7, #7]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80087d6:	79bb      	ldrb	r3, [r7, #6]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80087e2:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80087e4:	2202      	movs	r2, #2
 80087e6:	2101      	movs	r1, #1
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f002 fc0b 	bl	800b004 <VL53L0X_WrByte>
 80087ee:	4603      	mov	r3, r0
 80087f0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80087f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d105      	bne.n	8008806 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80087fa:	2100      	movs	r1, #0
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fe9c 	bl	800853a <VL53L0X_perform_single_ref_calibration>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008806:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d115      	bne.n	800883a <VL53L0X_perform_phase_calibration+0x8a>
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d112      	bne.n	800883a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008814:	7d39      	ldrb	r1, [r7, #20]
 8008816:	7d7a      	ldrb	r2, [r7, #21]
 8008818:	2301      	movs	r3, #1
 800881a:	9303      	str	r3, [sp, #12]
 800881c:	2300      	movs	r3, #0
 800881e:	9302      	str	r3, [sp, #8]
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	f107 0313 	add.w	r3, r7, #19
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	460b      	mov	r3, r1
 800882c:	2101      	movs	r1, #1
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff febe 	bl	80085b0 <VL53L0X_ref_calibration_io>
 8008834:	4603      	mov	r3, r0
 8008836:	75fb      	strb	r3, [r7, #23]
 8008838:	e002      	b.n	8008840 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d112      	bne.n	800886e <VL53L0X_perform_phase_calibration+0xbe>
 8008848:	79bb      	ldrb	r3, [r7, #6]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00f      	beq.n	800886e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800884e:	7dbb      	ldrb	r3, [r7, #22]
 8008850:	461a      	mov	r2, r3
 8008852:	2101      	movs	r1, #1
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f002 fbd5 	bl	800b004 <VL53L0X_WrByte>
 800885a:	4603      	mov	r3, r0
 800885c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800885e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d103      	bne.n	800886e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	7dba      	ldrb	r2, [r7, #22]
 800886a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800886e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008896:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008898:	78fa      	ldrb	r2, [r7, #3]
 800889a:	2300      	movs	r3, #0
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff ff1f 	bl	80086e2 <VL53L0X_perform_vhv_calibration>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80088a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d107      	bne.n	80088c0 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	2300      	movs	r3, #0
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff ff7a 	bl	80087b0 <VL53L0X_perform_phase_calibration>
 80088bc:	4603      	mov	r3, r0
 80088be:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80088c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10f      	bne.n	80088e8 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80088c8:	7dbb      	ldrb	r3, [r7, #22]
 80088ca:	461a      	mov	r2, r3
 80088cc:	2101      	movs	r1, #1
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f002 fb98 	bl	800b004 <VL53L0X_WrByte>
 80088d4:	4603      	mov	r3, r0
 80088d6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80088d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	7dba      	ldrb	r2, [r7, #22]
 80088e4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80088e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008908:	f107 030f 	add.w	r3, r7, #15
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fe fe02 	bl	8007518 <VL53L0X_GetMeasurementDataReady>
 8008914:	4603      	mov	r3, r0
 8008916:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d110      	bne.n	8008942 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d00f      	beq.n	8008946 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	3301      	adds	r3, #1
 800892a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008932:	d302      	bcc.n	800893a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008934:	23f9      	movs	r3, #249	; 0xf9
 8008936:	75fb      	strb	r3, [r7, #23]
			break;
 8008938:	e006      	b.n	8008948 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f002 fc82 	bl	800b244 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008940:	e7e2      	b.n	8008908 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008942:	bf00      	nop
 8008944:	e000      	b.n	8008948 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008946:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008948:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	3301      	adds	r3, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800897a:	b480      	push	{r7}
 800897c:	b085      	sub	sp, #20
 800897e:	af00      	add	r7, sp, #0
 8008980:	4603      	mov	r3, r0
 8008982:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	b2db      	uxtb	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80089ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089b0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80089b2:	e002      	b.n	80089ba <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	089b      	lsrs	r3, r3, #2
 80089b8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d8f8      	bhi.n	80089b4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80089c2:	e017      	b.n	80089f4 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	4413      	add	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d30b      	bcc.n	80089e8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	4413      	add	r3, r2
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4413      	add	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	e002      	b.n	80089ee <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	085b      	lsrs	r3, r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	089b      	lsrs	r3, r3, #2
 80089f2:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e4      	bne.n	80089c4 <VL53L0X_isqrt+0x24>
	}

	return res;
 80089fa:	68fb      	ldr	r3, [r7, #12]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a10:	2300      	movs	r3, #0
 8008a12:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008a14:	2200      	movs	r2, #0
 8008a16:	2183      	movs	r1, #131	; 0x83
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f002 faf3 	bl	800b004 <VL53L0X_WrByte>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	461a      	mov	r2, r3
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d11e      	bne.n	8008a6e <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008a30:	2300      	movs	r3, #0
 8008a32:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008a34:	f107 030f 	add.w	r3, r7, #15
 8008a38:	461a      	mov	r2, r3
 8008a3a:	2183      	movs	r1, #131	; 0x83
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f002 fb63 	bl	800b108 <VL53L0X_RdByte>
 8008a42:	4603      	mov	r3, r0
 8008a44:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <VL53L0X_device_read_strobe+0x5a>
 8008a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	3301      	adds	r3, #1
 8008a58:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a60:	d3e8      	bcc.n	8008a34 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a68:	d301      	bcc.n	8008a6e <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008a6a:	23f9      	movs	r3, #249	; 0xf9
 8008a6c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008a6e:	2201      	movs	r2, #1
 8008a70:	2183      	movs	r1, #131	; 0x83
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f002 fac6 	bl	800b004 <VL53L0X_WrByte>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008a82:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b098      	sub	sp, #96	; 0x60
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008abe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008ac2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008ad6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ade:	2b07      	cmp	r3, #7
 8008ae0:	f000 8408 	beq.w	80092f4 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	2180      	movs	r1, #128	; 0x80
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f002 fa8b 	bl	800b004 <VL53L0X_WrByte>
 8008aee:	4603      	mov	r3, r0
 8008af0:	461a      	mov	r2, r3
 8008af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008afc:	2201      	movs	r2, #1
 8008afe:	21ff      	movs	r1, #255	; 0xff
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f002 fa7f 	bl	800b004 <VL53L0X_WrByte>
 8008b06:	4603      	mov	r3, r0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f002 fa73 	bl	800b004 <VL53L0X_WrByte>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	461a      	mov	r2, r3
 8008b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b26:	4313      	orrs	r3, r2
 8008b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008b2c:	2206      	movs	r2, #6
 8008b2e:	21ff      	movs	r1, #255	; 0xff
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f002 fa67 	bl	800b004 <VL53L0X_WrByte>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008b44:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2183      	movs	r1, #131	; 0x83
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f002 fadb 	bl	800b108 <VL53L0X_RdByte>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461a      	mov	r2, r3
 8008b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b64:	f043 0304 	orr.w	r3, r3, #4
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	2183      	movs	r1, #131	; 0x83
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f002 fa48 	bl	800b004 <VL53L0X_WrByte>
 8008b74:	4603      	mov	r3, r0
 8008b76:	461a      	mov	r2, r3
 8008b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008b82:	2207      	movs	r2, #7
 8008b84:	21ff      	movs	r1, #255	; 0xff
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f002 fa3c 	bl	800b004 <VL53L0X_WrByte>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b94:	4313      	orrs	r3, r2
 8008b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	2181      	movs	r1, #129	; 0x81
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f002 fa30 	bl	800b004 <VL53L0X_WrByte>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f002 fb46 	bl	800b244 <VL53L0X_PollingDelay>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	2180      	movs	r1, #128	; 0x80
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f002 fa1a 	bl	800b004 <VL53L0X_WrByte>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8098 	beq.w	8008d1a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008bea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bee:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f040 8091 	bne.w	8008d1a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008bf8:	226b      	movs	r2, #107	; 0x6b
 8008bfa:	2194      	movs	r1, #148	; 0x94
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f002 fa01 	bl	800b004 <VL53L0X_WrByte>
 8008c02:	4603      	mov	r3, r0
 8008c04:	461a      	mov	r2, r3
 8008c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff fef9 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008c16:	4603      	mov	r3, r0
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c28:	461a      	mov	r2, r3
 8008c2a:	2190      	movs	r1, #144	; 0x90
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f002 facd 	bl	800b1cc <VL53L0X_RdDWord>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	0a1b      	lsrs	r3, r3, #8
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c4a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	0bdb      	lsrs	r3, r3, #15
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008c5c:	2224      	movs	r2, #36	; 0x24
 8008c5e:	2194      	movs	r1, #148	; 0x94
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f002 f9cf 	bl	800b004 <VL53L0X_WrByte>
 8008c66:	4603      	mov	r3, r0
 8008c68:	461a      	mov	r2, r3
 8008c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff fec7 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c82:	4313      	orrs	r3, r2
 8008c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	2190      	movs	r1, #144	; 0x90
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f002 fa9b 	bl	800b1cc <VL53L0X_RdDWord>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	0e1b      	lsrs	r3, r3, #24
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008cc2:	2225      	movs	r2, #37	; 0x25
 8008cc4:	2194      	movs	r1, #148	; 0x94
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f002 f99c 	bl	800b004 <VL53L0X_WrByte>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fe94 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	2190      	movs	r1, #144	; 0x90
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f002 fa68 	bl	800b1cc <VL53L0X_RdDWord>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d04:	4313      	orrs	r3, r2
 8008d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	0e1b      	lsrs	r3, r3, #24
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	0c1b      	lsrs	r3, r3, #16
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8189 	beq.w	8009038 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008d26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d2a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f040 8182 	bne.w	8009038 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008d34:	2202      	movs	r2, #2
 8008d36:	2194      	movs	r1, #148	; 0x94
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f002 f963 	bl	800b004 <VL53L0X_WrByte>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	461a      	mov	r2, r3
 8008d42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff fe5b 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008d60:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008d64:	461a      	mov	r2, r3
 8008d66:	2190      	movs	r1, #144	; 0x90
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f002 f9cd 	bl	800b108 <VL53L0X_RdByte>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	461a      	mov	r2, r3
 8008d72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008d7c:	227b      	movs	r2, #123	; 0x7b
 8008d7e:	2194      	movs	r1, #148	; 0x94
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f002 f93f 	bl	800b004 <VL53L0X_WrByte>
 8008d86:	4603      	mov	r3, r0
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff fe37 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008da8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008dac:	461a      	mov	r2, r3
 8008dae:	2190      	movs	r1, #144	; 0x90
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f002 f9a9 	bl	800b108 <VL53L0X_RdByte>
 8008db6:	4603      	mov	r3, r0
 8008db8:	461a      	mov	r2, r3
 8008dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008dc4:	2277      	movs	r2, #119	; 0x77
 8008dc6:	2194      	movs	r1, #148	; 0x94
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f002 f91b 	bl	800b004 <VL53L0X_WrByte>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff fe13 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
 8008de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008df4:	461a      	mov	r2, r3
 8008df6:	2190      	movs	r1, #144	; 0x90
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f002 f9e7 	bl	800b1cc <VL53L0X_RdDWord>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	461a      	mov	r2, r3
 8008e02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	0e5b      	lsrs	r3, r3, #25
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	0c9b      	lsrs	r3, r3, #18
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	0adb      	lsrs	r3, r3, #11
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	091b      	lsrs	r3, r3, #4
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008e56:	2278      	movs	r2, #120	; 0x78
 8008e58:	2194      	movs	r1, #148	; 0x94
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f002 f8d2 	bl	800b004 <VL53L0X_WrByte>
 8008e60:	4603      	mov	r3, r0
 8008e62:	461a      	mov	r2, r3
 8008e64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff fdca 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008e74:	4603      	mov	r3, r0
 8008e76:	461a      	mov	r2, r3
 8008e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e86:	461a      	mov	r2, r3
 8008e88:	2190      	movs	r1, #144	; 0x90
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f002 f99e 	bl	800b1cc <VL53L0X_RdDWord>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	0f5b      	lsrs	r3, r3, #29
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008eae:	4413      	add	r3, r2
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	0d9b      	lsrs	r3, r3, #22
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	0bdb      	lsrs	r3, r3, #15
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	085b      	lsrs	r3, r3, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	019b      	lsls	r3, r3, #6
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008efe:	2279      	movs	r2, #121	; 0x79
 8008f00:	2194      	movs	r1, #148	; 0x94
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f002 f87e 	bl	800b004 <VL53L0X_WrByte>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f10:	4313      	orrs	r3, r2
 8008f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff fd76 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f2e:	461a      	mov	r2, r3
 8008f30:	2190      	movs	r1, #144	; 0x90
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f002 f94a 	bl	800b1cc <VL53L0X_RdDWord>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f40:	4313      	orrs	r3, r2
 8008f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	0e9b      	lsrs	r3, r3, #26
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f50:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008f52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f56:	4413      	add	r3, r2
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	0cdb      	lsrs	r3, r3, #19
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	0b1b      	lsrs	r3, r3, #12
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008f98:	227a      	movs	r2, #122	; 0x7a
 8008f9a:	2194      	movs	r1, #148	; 0x94
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f002 f831 	bl	800b004 <VL53L0X_WrByte>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fd29 	bl	8008a08 <VL53L0X_device_read_strobe>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008fc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fc8:	461a      	mov	r2, r3
 8008fca:	2190      	movs	r1, #144	; 0x90
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f002 f8fd 	bl	800b1cc <VL53L0X_RdDWord>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	0f9b      	lsrs	r3, r3, #30
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fea:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008fec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ff0:	4413      	add	r3, r2
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	0ddb      	lsrs	r3, r3, #23
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009000:	b2db      	uxtb	r3, r3
 8009002:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	b2db      	uxtb	r3, r3
 800900a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800900e:	b2db      	uxtb	r3, r3
 8009010:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	0a5b      	lsrs	r3, r3, #9
 8009016:	b2db      	uxtb	r3, r3
 8009018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	089b      	lsrs	r3, r3, #2
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009032:	2300      	movs	r3, #0
 8009034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80f1 	beq.w	8009226 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009044:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009048:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 80ea 	bne.w	8009226 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009052:	227b      	movs	r2, #123	; 0x7b
 8009054:	2194      	movs	r1, #148	; 0x94
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 ffd4 	bl	800b004 <VL53L0X_WrByte>
 800905c:	4603      	mov	r3, r0
 800905e:	461a      	mov	r2, r3
 8009060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009064:	4313      	orrs	r3, r2
 8009066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff fccc 	bl	8008a08 <VL53L0X_device_read_strobe>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009078:	4313      	orrs	r3, r2
 800907a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800907e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009082:	461a      	mov	r2, r3
 8009084:	2190      	movs	r1, #144	; 0x90
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f002 f8a0 	bl	800b1cc <VL53L0X_RdDWord>
 800908c:	4603      	mov	r3, r0
 800908e:	461a      	mov	r2, r3
 8009090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009094:	4313      	orrs	r3, r2
 8009096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800909a:	227c      	movs	r2, #124	; 0x7c
 800909c:	2194      	movs	r1, #148	; 0x94
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 ffb0 	bl	800b004 <VL53L0X_WrByte>
 80090a4:	4603      	mov	r3, r0
 80090a6:	461a      	mov	r2, r3
 80090a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fca8 	bl	8008a08 <VL53L0X_device_read_strobe>
 80090b8:	4603      	mov	r3, r0
 80090ba:	461a      	mov	r2, r3
 80090bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090c0:	4313      	orrs	r3, r2
 80090c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80090c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ca:	461a      	mov	r2, r3
 80090cc:	2190      	movs	r1, #144	; 0x90
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f002 f87c 	bl	800b1cc <VL53L0X_RdDWord>
 80090d4:	4603      	mov	r3, r0
 80090d6:	461a      	mov	r2, r3
 80090d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090dc:	4313      	orrs	r3, r2
 80090de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80090e2:	2273      	movs	r2, #115	; 0x73
 80090e4:	2194      	movs	r1, #148	; 0x94
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 ff8c 	bl	800b004 <VL53L0X_WrByte>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090f4:	4313      	orrs	r3, r2
 80090f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fc84 	bl	8008a08 <VL53L0X_device_read_strobe>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009108:	4313      	orrs	r3, r2
 800910a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800910e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009112:	461a      	mov	r2, r3
 8009114:	2190      	movs	r1, #144	; 0x90
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f002 f858 	bl	800b1cc <VL53L0X_RdDWord>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009124:	4313      	orrs	r3, r2
 8009126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800912e:	b29b      	uxth	r3, r3
 8009130:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009132:	2274      	movs	r2, #116	; 0x74
 8009134:	2194      	movs	r1, #148	; 0x94
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 ff64 	bl	800b004 <VL53L0X_WrByte>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009144:	4313      	orrs	r3, r2
 8009146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff fc5c 	bl	8008a08 <VL53L0X_device_read_strobe>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009158:	4313      	orrs	r3, r2
 800915a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800915e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009162:	461a      	mov	r2, r3
 8009164:	2190      	movs	r1, #144	; 0x90
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f002 f830 	bl	800b1cc <VL53L0X_RdDWord>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009174:	4313      	orrs	r3, r2
 8009176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800917e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009180:	4313      	orrs	r3, r2
 8009182:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009184:	2275      	movs	r2, #117	; 0x75
 8009186:	2194      	movs	r1, #148	; 0x94
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f001 ff3b 	bl	800b004 <VL53L0X_WrByte>
 800918e:	4603      	mov	r3, r0
 8009190:	461a      	mov	r2, r3
 8009192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009196:	4313      	orrs	r3, r2
 8009198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fc33 	bl	8008a08 <VL53L0X_device_read_strobe>
 80091a2:	4603      	mov	r3, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80091b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091b4:	461a      	mov	r2, r3
 80091b6:	2190      	movs	r1, #144	; 0x90
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f002 f807 	bl	800b1cc <VL53L0X_RdDWord>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c6:	4313      	orrs	r3, r2
 80091c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80091d4:	2276      	movs	r2, #118	; 0x76
 80091d6:	2194      	movs	r1, #148	; 0x94
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f001 ff13 	bl	800b004 <VL53L0X_WrByte>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff fc0b 	bl	8008a08 <VL53L0X_device_read_strobe>
 80091f2:	4603      	mov	r3, r0
 80091f4:	461a      	mov	r2, r3
 80091f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009204:	461a      	mov	r2, r3
 8009206:	2190      	movs	r1, #144	; 0x90
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 ffdf 	bl	800b1cc <VL53L0X_RdDWord>
 800920e:	4603      	mov	r3, r0
 8009210:	461a      	mov	r2, r3
 8009212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009216:	4313      	orrs	r3, r2
 8009218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009222:	4313      	orrs	r3, r2
 8009224:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009226:	2200      	movs	r2, #0
 8009228:	2181      	movs	r1, #129	; 0x81
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 feea 	bl	800b004 <VL53L0X_WrByte>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009238:	4313      	orrs	r3, r2
 800923a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800923e:	2206      	movs	r2, #6
 8009240:	21ff      	movs	r1, #255	; 0xff
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fede 	bl	800b004 <VL53L0X_WrByte>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009250:	4313      	orrs	r3, r2
 8009252:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009256:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800925a:	461a      	mov	r2, r3
 800925c:	2183      	movs	r1, #131	; 0x83
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 ff52 	bl	800b108 <VL53L0X_RdByte>
 8009264:	4603      	mov	r3, r0
 8009266:	461a      	mov	r2, r3
 8009268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800926c:	4313      	orrs	r3, r2
 800926e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009276:	f023 0304 	bic.w	r3, r3, #4
 800927a:	b2db      	uxtb	r3, r3
 800927c:	461a      	mov	r2, r3
 800927e:	2183      	movs	r1, #131	; 0x83
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 febf 	bl	800b004 <VL53L0X_WrByte>
 8009286:	4603      	mov	r3, r0
 8009288:	461a      	mov	r2, r3
 800928a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800928e:	4313      	orrs	r3, r2
 8009290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009294:	2201      	movs	r2, #1
 8009296:	21ff      	movs	r1, #255	; 0xff
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 feb3 	bl	800b004 <VL53L0X_WrByte>
 800929e:	4603      	mov	r3, r0
 80092a0:	461a      	mov	r2, r3
 80092a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092a6:	4313      	orrs	r3, r2
 80092a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80092ac:	2201      	movs	r2, #1
 80092ae:	2100      	movs	r1, #0
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fea7 	bl	800b004 <VL53L0X_WrByte>
 80092b6:	4603      	mov	r3, r0
 80092b8:	461a      	mov	r2, r3
 80092ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092be:	4313      	orrs	r3, r2
 80092c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092c4:	2200      	movs	r2, #0
 80092c6:	21ff      	movs	r1, #255	; 0xff
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fe9b 	bl	800b004 <VL53L0X_WrByte>
 80092ce:	4603      	mov	r3, r0
 80092d0:	461a      	mov	r2, r3
 80092d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092d6:	4313      	orrs	r3, r2
 80092d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80092dc:	2200      	movs	r2, #0
 80092de:	2180      	movs	r1, #128	; 0x80
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 fe8f 	bl	800b004 <VL53L0X_WrByte>
 80092e6:	4603      	mov	r3, r0
 80092e8:	461a      	mov	r2, r3
 80092ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ee:	4313      	orrs	r3, r2
 80092f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80092f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f040 808f 	bne.w	800941c <VL53L0X_get_info_from_device+0x98e>
 80092fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009302:	2b07      	cmp	r3, #7
 8009304:	f000 808a 	beq.w	800941c <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d024      	beq.n	800935c <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009312:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009316:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800931a:	2b00      	cmp	r3, #0
 800931c:	d11e      	bne.n	800935c <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009324:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800932e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009332:	2300      	movs	r3, #0
 8009334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009336:	e00e      	b.n	8009356 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009338:	f107 0208 	add.w	r2, r7, #8
 800933c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933e:	4413      	add	r3, r2
 8009340:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009346:	4413      	add	r3, r2
 8009348:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800934c:	460a      	mov	r2, r1
 800934e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009352:	3301      	adds	r3, #1
 8009354:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009358:	2b05      	cmp	r3, #5
 800935a:	dded      	ble.n	8009338 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d018      	beq.n	8009398 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009366:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800936a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800936e:	2b00      	cmp	r3, #0
 8009370:	d112      	bne.n	8009398 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009372:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800937c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	33f3      	adds	r3, #243	; 0xf3
 800938a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800938c:	f107 0310 	add.w	r3, r7, #16
 8009390:	4619      	mov	r1, r3
 8009392:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009394:	f001 ffc6 	bl	800b324 <strcpy>

		}

		if (((option & 4) == 4) &&
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d030      	beq.n	8009404 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80093a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093a6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d12a      	bne.n	8009404 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80093be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c0:	025b      	lsls	r3, r3, #9
 80093c2:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093c8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80093d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d011      	beq.n	80093fc <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80093d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80093e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093e6:	fb02 f303 	mul.w	r3, r2, r3
 80093ea:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80093ec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80093f0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80093f4:	425b      	negs	r3, r3
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80093fc:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009404:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	4313      	orrs	r3, r2
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009412:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800941c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009420:	4618      	mov	r0, r3
 8009422:	3760      	adds	r7, #96	; 0x60
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009434:	f240 6277 	movw	r2, #1655	; 0x677
 8009438:	f04f 0300 	mov.w	r3, #0
 800943c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009440:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009444:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	fb02 f303 	mul.w	r3, r2, r3
 8009454:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009456:	68bb      	ldr	r3, [r7, #8]
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d017      	beq.n	80094ae <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3b01      	subs	r3, #1
 8009482:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009484:	e005      	b.n	8009492 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	085b      	lsrs	r3, r3, #1
 800948a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800948c:	89fb      	ldrh	r3, [r7, #14]
 800948e:	3301      	adds	r3, #1
 8009490:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1f4      	bne.n	8009486 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800949c:	89fb      	ldrh	r3, [r7, #14]
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80094aa:	4413      	add	r3, r2
 80094ac:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80094ae:	8afb      	ldrh	r3, [r7, #22]

}
 80094b0:	4618      	mov	r0, r3
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80094ce:	88fa      	ldrh	r2, [r7, #6]
 80094d0:	0a12      	lsrs	r2, r2, #8
 80094d2:	b292      	uxth	r2, r2
 80094d4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80094d6:	3301      	adds	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80094da:	68fb      	ldr	r3, [r7, #12]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	4613      	mov	r3, r2
 80094f4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80094f6:	2300      	movs	r3, #0
 80094f8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	4619      	mov	r1, r3
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff ff92 	bl	8009428 <VL53L0X_calc_macro_period_ps>
 8009504:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800950c:	4a0a      	ldr	r2, [pc, #40]	; (8009538 <VL53L0X_calc_timeout_mclks+0x50>)
 800950e:	fba2 2303 	umull	r2, r3, r2, r3
 8009512:	099b      	lsrs	r3, r3, #6
 8009514:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800951c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	085b      	lsrs	r3, r3, #1
 8009524:	441a      	add	r2, r3
	timeout_period_mclks =
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	fbb2 f3f3 	udiv	r3, r2, r3
 800952c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800952e:	69fb      	ldr	r3, [r7, #28]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	10624dd3 	.word	0x10624dd3

0800953c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	807b      	strh	r3, [r7, #2]
 8009548:	4613      	mov	r3, r2
 800954a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009550:	787b      	ldrb	r3, [r7, #1]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff ff67 	bl	8009428 <VL53L0X_calc_macro_period_ps>
 800955a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009562:	4a0a      	ldr	r2, [pc, #40]	; (800958c <VL53L0X_calc_timeout_us+0x50>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	099b      	lsrs	r3, r3, #6
 800956a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800956c:	887b      	ldrh	r3, [r7, #2]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	fb02 f303 	mul.w	r3, r2, r3
 8009574:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009578:	4a04      	ldr	r2, [pc, #16]	; (800958c <VL53L0X_calc_timeout_us+0x50>)
 800957a:	fba2 2303 	umull	r2, r3, r2, r3
 800957e:	099b      	lsrs	r3, r3, #6
 8009580:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009582:	697b      	ldr	r3, [r7, #20]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	10624dd3 	.word	0x10624dd3

08009590 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08c      	sub	sp, #48	; 0x30
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	460b      	mov	r3, r1
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80095b6:	7afb      	ldrb	r3, [r7, #11]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <get_sequence_step_timeout+0x38>
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d002      	beq.n	80095c8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80095c2:	7afb      	ldrb	r3, [r7, #11]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d128      	bne.n	800961a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80095c8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80095cc:	461a      	mov	r2, r3
 80095ce:	2100      	movs	r1, #0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7fd fa7d 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 80095d6:	4603      	mov	r3, r0
 80095d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80095dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d109      	bne.n	80095f8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80095e4:	f107 0320 	add.w	r3, r7, #32
 80095e8:	461a      	mov	r2, r3
 80095ea:	2146      	movs	r1, #70	; 0x46
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f001 fd8b 	bl	800b108 <VL53L0X_RdByte>
 80095f2:	4603      	mov	r3, r0
 80095f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80095f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff ff5c 	bl	80094bc <VL53L0X_decode_timeout>
 8009604:	4603      	mov	r3, r0
 8009606:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009608:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800960c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800960e:	4619      	mov	r1, r3
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7ff ff93 	bl	800953c <VL53L0X_calc_timeout_us>
 8009616:	62b8      	str	r0, [r7, #40]	; 0x28
 8009618:	e092      	b.n	8009740 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800961a:	7afb      	ldrb	r3, [r7, #11]
 800961c:	2b03      	cmp	r3, #3
 800961e:	d135      	bne.n	800968c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009620:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009624:	461a      	mov	r2, r3
 8009626:	2100      	movs	r1, #0
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7fd fa51 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009634:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 8081 	bne.w	8009740 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800963e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009642:	461a      	mov	r2, r3
 8009644:	2100      	movs	r1, #0
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7fd fa42 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009652:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009656:	2b00      	cmp	r3, #0
 8009658:	d109      	bne.n	800966e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800965a:	f107 031e 	add.w	r3, r7, #30
 800965e:	461a      	mov	r2, r3
 8009660:	2151      	movs	r1, #81	; 0x51
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f001 fd7a 	bl	800b15c <VL53L0X_RdWord>
 8009668:	4603      	mov	r3, r0
 800966a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800966e:	8bfb      	ldrh	r3, [r7, #30]
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff ff23 	bl	80094bc <VL53L0X_decode_timeout>
 8009676:	4603      	mov	r3, r0
 8009678:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800967a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800967e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009680:	4619      	mov	r1, r3
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7ff ff5a 	bl	800953c <VL53L0X_calc_timeout_us>
 8009688:	62b8      	str	r0, [r7, #40]	; 0x28
 800968a:	e059      	b.n	8009740 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	2b04      	cmp	r3, #4
 8009690:	d156      	bne.n	8009740 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009692:	f107 0314 	add.w	r3, r7, #20
 8009696:	4619      	mov	r1, r3
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7fd fb25 	bl	8006ce8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d01d      	beq.n	80096e4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80096a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80096ac:	461a      	mov	r2, r3
 80096ae:	2100      	movs	r1, #0
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7fd fa0d 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80096bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10f      	bne.n	80096e4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80096c4:	f107 031e 	add.w	r3, r7, #30
 80096c8:	461a      	mov	r2, r3
 80096ca:	2151      	movs	r1, #81	; 0x51
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f001 fd45 	bl	800b15c <VL53L0X_RdWord>
 80096d2:	4603      	mov	r3, r0
 80096d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80096d8:	8bfb      	ldrh	r3, [r7, #30]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff feee 	bl	80094bc <VL53L0X_decode_timeout>
 80096e0:	4603      	mov	r3, r0
 80096e2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80096e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d109      	bne.n	8009700 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80096ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80096f0:	461a      	mov	r2, r3
 80096f2:	2101      	movs	r1, #1
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7fd f9eb 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009700:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10f      	bne.n	8009728 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009708:	f107 031c 	add.w	r3, r7, #28
 800970c:	461a      	mov	r2, r3
 800970e:	2171      	movs	r1, #113	; 0x71
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f001 fd23 	bl	800b15c <VL53L0X_RdWord>
 8009716:	4603      	mov	r3, r0
 8009718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800971c:	8bbb      	ldrh	r3, [r7, #28]
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff fecc 	bl	80094bc <VL53L0X_decode_timeout>
 8009724:	4603      	mov	r3, r0
 8009726:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009728:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800972a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009730:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009736:	4619      	mov	r1, r3
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff feff 	bl	800953c <VL53L0X_calc_timeout_us>
 800973e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009744:	601a      	str	r2, [r3, #0]

	return Status;
 8009746:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800974a:	4618      	mov	r0, r3
 800974c:	3730      	adds	r7, #48	; 0x30
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b08a      	sub	sp, #40	; 0x28
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	460b      	mov	r3, r1
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009760:	2300      	movs	r3, #0
 8009762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009766:	7afb      	ldrb	r3, [r7, #11]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <set_sequence_step_timeout+0x26>
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d002      	beq.n	8009778 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d138      	bne.n	80097ea <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009778:	f107 031b 	add.w	r3, r7, #27
 800977c:	461a      	mov	r2, r3
 800977e:	2100      	movs	r1, #0
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f7fd f9a5 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800978c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009790:	2b00      	cmp	r3, #0
 8009792:	d11a      	bne.n	80097ca <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009794:	7efb      	ldrb	r3, [r7, #27]
 8009796:	461a      	mov	r2, r3
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff fea4 	bl	80094e8 <VL53L0X_calc_timeout_mclks>
 80097a0:	4603      	mov	r3, r0
 80097a2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80097a4:	8bbb      	ldrh	r3, [r7, #28]
 80097a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097aa:	d903      	bls.n	80097b4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80097ac:	23ff      	movs	r3, #255	; 0xff
 80097ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80097b2:	e004      	b.n	80097be <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80097b4:	8bbb      	ldrh	r3, [r7, #28]
 80097b6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80097b8:	3b01      	subs	r3, #1
 80097ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80097ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 80ab 	bne.w	800992a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80097d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097d8:	461a      	mov	r2, r3
 80097da:	2146      	movs	r1, #70	; 0x46
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f001 fc11 	bl	800b004 <VL53L0X_WrByte>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80097e8:	e09f      	b.n	800992a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d135      	bne.n	800985c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80097f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d11b      	bne.n	8009830 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80097f8:	f107 031b 	add.w	r3, r7, #27
 80097fc:	461a      	mov	r2, r3
 80097fe:	2100      	movs	r1, #0
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f7fd f965 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800980c:	7efb      	ldrb	r3, [r7, #27]
 800980e:	461a      	mov	r2, r3
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff fe68 	bl	80094e8 <VL53L0X_calc_timeout_mclks>
 8009818:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800981a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800981c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fe20 	bl	8009464 <VL53L0X_encode_timeout>
 8009824:	4603      	mov	r3, r0
 8009826:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009828:	8b3a      	ldrh	r2, [r7, #24]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009834:	2b00      	cmp	r3, #0
 8009836:	d108      	bne.n	800984a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009838:	8b3b      	ldrh	r3, [r7, #24]
 800983a:	461a      	mov	r2, r3
 800983c:	2151      	movs	r1, #81	; 0x51
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f001 fc04 	bl	800b04c <VL53L0X_WrWord>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800984a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800984e:	2b00      	cmp	r3, #0
 8009850:	d16b      	bne.n	800992a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800985a:	e066      	b.n	800992a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	2b04      	cmp	r3, #4
 8009860:	d160      	bne.n	8009924 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009862:	f107 0310 	add.w	r3, r7, #16
 8009866:	4619      	mov	r1, r3
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7fd fa3d 	bl	8006ce8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009872:	7cfb      	ldrb	r3, [r7, #19]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01d      	beq.n	80098b4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009878:	f107 031b 	add.w	r3, r7, #27
 800987c:	461a      	mov	r2, r3
 800987e:	2100      	movs	r1, #0
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f7fd f925 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 8009886:	4603      	mov	r3, r0
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800988c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10f      	bne.n	80098b4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009894:	f107 0318 	add.w	r3, r7, #24
 8009898:	461a      	mov	r2, r3
 800989a:	2151      	movs	r1, #81	; 0x51
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f001 fc5d 	bl	800b15c <VL53L0X_RdWord>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80098a8:	8b3b      	ldrh	r3, [r7, #24]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff fe06 	bl	80094bc <VL53L0X_decode_timeout>
 80098b0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80098b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80098b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d109      	bne.n	80098d0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80098bc:	f107 031b 	add.w	r3, r7, #27
 80098c0:	461a      	mov	r2, r3
 80098c2:	2101      	movs	r1, #1
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f7fd f903 	bl	8006ad0 <VL53L0X_GetVcselPulsePeriod>
 80098ca:	4603      	mov	r3, r0
 80098cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80098d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d128      	bne.n	800992a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80098d8:	7efb      	ldrb	r3, [r7, #27]
 80098da:	461a      	mov	r2, r3
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7ff fe02 	bl	80094e8 <VL53L0X_calc_timeout_mclks>
 80098e4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80098e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098e8:	6a3a      	ldr	r2, [r7, #32]
 80098ea:	4413      	add	r3, r2
 80098ec:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80098ee:	6a38      	ldr	r0, [r7, #32]
 80098f0:	f7ff fdb8 	bl	8009464 <VL53L0X_encode_timeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80098f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d108      	bne.n	8009912 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009900:	8bfb      	ldrh	r3, [r7, #30]
 8009902:	461a      	mov	r2, r3
 8009904:	2171      	movs	r1, #113	; 0x71
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f001 fba0 	bl	800b04c <VL53L0X_WrWord>
 800990c:	4603      	mov	r3, r0
 800990e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009916:	2b00      	cmp	r3, #0
 8009918:	d107      	bne.n	800992a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009922:	e002      	b.n	800992a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009924:	23fc      	movs	r3, #252	; 0xfc
 8009926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800992a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800992e:	4618      	mov	r0, r3
 8009930:	3728      	adds	r7, #40	; 0x28
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b08a      	sub	sp, #40	; 0x28
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
 8009942:	4613      	mov	r3, r2
 8009944:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009946:	2300      	movs	r3, #0
 8009948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800994c:	230c      	movs	r3, #12
 800994e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009952:	2312      	movs	r3, #18
 8009954:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009958:	2308      	movs	r3, #8
 800995a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800995e:	230e      	movs	r3, #14
 8009960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009968:	78bb      	ldrb	r3, [r7, #2]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009974:	23fc      	movs	r3, #252	; 0xfc
 8009976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800997a:	e020      	b.n	80099be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10d      	bne.n	800999e <VL53L0X_set_vcsel_pulse_period+0x68>
 8009982:	78ba      	ldrb	r2, [r7, #2]
 8009984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009988:	429a      	cmp	r2, r3
 800998a:	d304      	bcc.n	8009996 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800998c:	78ba      	ldrb	r2, [r7, #2]
 800998e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009992:	429a      	cmp	r2, r3
 8009994:	d903      	bls.n	800999e <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009996:	23fc      	movs	r3, #252	; 0xfc
 8009998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800999c:	e00f      	b.n	80099be <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d10c      	bne.n	80099be <VL53L0X_set_vcsel_pulse_period+0x88>
 80099a4:	78ba      	ldrb	r2, [r7, #2]
 80099a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d304      	bcc.n	80099b8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80099ae:	78ba      	ldrb	r2, [r7, #2]
 80099b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d902      	bls.n	80099be <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099b8:	23fc      	movs	r3, #252	; 0xfc
 80099ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80099be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80099c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099ca:	e239      	b.n	8009e40 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d150      	bne.n	8009a74 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80099d2:	78bb      	ldrb	r3, [r7, #2]
 80099d4:	2b0c      	cmp	r3, #12
 80099d6:	d110      	bne.n	80099fa <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80099d8:	2218      	movs	r2, #24
 80099da:	2157      	movs	r1, #87	; 0x57
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 fb11 	bl	800b004 <VL53L0X_WrByte>
 80099e2:	4603      	mov	r3, r0
 80099e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80099e8:	2208      	movs	r2, #8
 80099ea:	2156      	movs	r1, #86	; 0x56
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f001 fb09 	bl	800b004 <VL53L0X_WrByte>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099f8:	e17f      	b.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80099fa:	78bb      	ldrb	r3, [r7, #2]
 80099fc:	2b0e      	cmp	r3, #14
 80099fe:	d110      	bne.n	8009a22 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009a00:	2230      	movs	r2, #48	; 0x30
 8009a02:	2157      	movs	r1, #87	; 0x57
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 fafd 	bl	800b004 <VL53L0X_WrByte>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009a10:	2208      	movs	r2, #8
 8009a12:	2156      	movs	r1, #86	; 0x56
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f001 faf5 	bl	800b004 <VL53L0X_WrByte>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a20:	e16b      	b.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009a22:	78bb      	ldrb	r3, [r7, #2]
 8009a24:	2b10      	cmp	r3, #16
 8009a26:	d110      	bne.n	8009a4a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009a28:	2240      	movs	r2, #64	; 0x40
 8009a2a:	2157      	movs	r1, #87	; 0x57
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 fae9 	bl	800b004 <VL53L0X_WrByte>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009a38:	2208      	movs	r2, #8
 8009a3a:	2156      	movs	r1, #86	; 0x56
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 fae1 	bl	800b004 <VL53L0X_WrByte>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a48:	e157      	b.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009a4a:	78bb      	ldrb	r3, [r7, #2]
 8009a4c:	2b12      	cmp	r3, #18
 8009a4e:	f040 8154 	bne.w	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009a52:	2250      	movs	r2, #80	; 0x50
 8009a54:	2157      	movs	r1, #87	; 0x57
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 fad4 	bl	800b004 <VL53L0X_WrByte>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009a62:	2208      	movs	r2, #8
 8009a64:	2156      	movs	r1, #86	; 0x56
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 facc 	bl	800b004 <VL53L0X_WrByte>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a72:	e142      	b.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009a74:	78fb      	ldrb	r3, [r7, #3]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	f040 813f 	bne.w	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009a7c:	78bb      	ldrb	r3, [r7, #2]
 8009a7e:	2b08      	cmp	r3, #8
 8009a80:	d14c      	bne.n	8009b1c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009a82:	2210      	movs	r2, #16
 8009a84:	2148      	movs	r1, #72	; 0x48
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 fabc 	bl	800b004 <VL53L0X_WrByte>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009a92:	2208      	movs	r2, #8
 8009a94:	2147      	movs	r1, #71	; 0x47
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 fab4 	bl	800b004 <VL53L0X_WrByte>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	2132      	movs	r1, #50	; 0x32
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f001 faac 	bl	800b004 <VL53L0X_WrByte>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009aba:	220c      	movs	r2, #12
 8009abc:	2130      	movs	r1, #48	; 0x30
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 faa0 	bl	800b004 <VL53L0X_WrByte>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009acc:	4313      	orrs	r3, r2
 8009ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	21ff      	movs	r1, #255	; 0xff
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 fa94 	bl	800b004 <VL53L0X_WrByte>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009aea:	2230      	movs	r2, #48	; 0x30
 8009aec:	2130      	movs	r1, #48	; 0x30
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 fa88 	bl	800b004 <VL53L0X_WrByte>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009b02:	2200      	movs	r2, #0
 8009b04:	21ff      	movs	r1, #255	; 0xff
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 fa7c 	bl	800b004 <VL53L0X_WrByte>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b14:	4313      	orrs	r3, r2
 8009b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b1a:	e0ee      	b.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009b1c:	78bb      	ldrb	r3, [r7, #2]
 8009b1e:	2b0a      	cmp	r3, #10
 8009b20:	d14c      	bne.n	8009bbc <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009b22:	2228      	movs	r2, #40	; 0x28
 8009b24:	2148      	movs	r1, #72	; 0x48
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 fa6c 	bl	800b004 <VL53L0X_WrByte>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009b32:	2208      	movs	r2, #8
 8009b34:	2147      	movs	r1, #71	; 0x47
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 fa64 	bl	800b004 <VL53L0X_WrByte>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009b42:	2203      	movs	r2, #3
 8009b44:	2132      	movs	r1, #50	; 0x32
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 fa5c 	bl	800b004 <VL53L0X_WrByte>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b54:	4313      	orrs	r3, r2
 8009b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009b5a:	2209      	movs	r2, #9
 8009b5c:	2130      	movs	r1, #48	; 0x30
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 fa50 	bl	800b004 <VL53L0X_WrByte>
 8009b64:	4603      	mov	r3, r0
 8009b66:	461a      	mov	r2, r3
 8009b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009b72:	2201      	movs	r2, #1
 8009b74:	21ff      	movs	r1, #255	; 0xff
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 fa44 	bl	800b004 <VL53L0X_WrByte>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b84:	4313      	orrs	r3, r2
 8009b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	2130      	movs	r1, #48	; 0x30
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f001 fa38 	bl	800b004 <VL53L0X_WrByte>
 8009b94:	4603      	mov	r3, r0
 8009b96:	461a      	mov	r2, r3
 8009b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	21ff      	movs	r1, #255	; 0xff
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 fa2c 	bl	800b004 <VL53L0X_WrByte>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bba:	e09e      	b.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009bbc:	78bb      	ldrb	r3, [r7, #2]
 8009bbe:	2b0c      	cmp	r3, #12
 8009bc0:	d14c      	bne.n	8009c5c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009bc2:	2238      	movs	r2, #56	; 0x38
 8009bc4:	2148      	movs	r1, #72	; 0x48
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 fa1c 	bl	800b004 <VL53L0X_WrByte>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009bd2:	2208      	movs	r2, #8
 8009bd4:	2147      	movs	r1, #71	; 0x47
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 fa14 	bl	800b004 <VL53L0X_WrByte>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009be2:	2203      	movs	r2, #3
 8009be4:	2132      	movs	r1, #50	; 0x32
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f001 fa0c 	bl	800b004 <VL53L0X_WrByte>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009bfa:	2208      	movs	r2, #8
 8009bfc:	2130      	movs	r1, #48	; 0x30
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 fa00 	bl	800b004 <VL53L0X_WrByte>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009c12:	2201      	movs	r2, #1
 8009c14:	21ff      	movs	r1, #255	; 0xff
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 f9f4 	bl	800b004 <VL53L0X_WrByte>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c24:	4313      	orrs	r3, r2
 8009c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	2130      	movs	r1, #48	; 0x30
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 f9e8 	bl	800b004 <VL53L0X_WrByte>
 8009c34:	4603      	mov	r3, r0
 8009c36:	461a      	mov	r2, r3
 8009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009c42:	2200      	movs	r2, #0
 8009c44:	21ff      	movs	r1, #255	; 0xff
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 f9dc 	bl	800b004 <VL53L0X_WrByte>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c5a:	e04e      	b.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009c5c:	78bb      	ldrb	r3, [r7, #2]
 8009c5e:	2b0e      	cmp	r3, #14
 8009c60:	d14b      	bne.n	8009cfa <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009c62:	2248      	movs	r2, #72	; 0x48
 8009c64:	2148      	movs	r1, #72	; 0x48
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 f9cc 	bl	800b004 <VL53L0X_WrByte>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009c72:	2208      	movs	r2, #8
 8009c74:	2147      	movs	r1, #71	; 0x47
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 f9c4 	bl	800b004 <VL53L0X_WrByte>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009c82:	2203      	movs	r2, #3
 8009c84:	2132      	movs	r1, #50	; 0x32
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 f9bc 	bl	800b004 <VL53L0X_WrByte>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c94:	4313      	orrs	r3, r2
 8009c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009c9a:	2207      	movs	r2, #7
 8009c9c:	2130      	movs	r1, #48	; 0x30
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 f9b0 	bl	800b004 <VL53L0X_WrByte>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cac:	4313      	orrs	r3, r2
 8009cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	21ff      	movs	r1, #255	; 0xff
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f9a4 	bl	800b004 <VL53L0X_WrByte>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009cca:	2220      	movs	r2, #32
 8009ccc:	2130      	movs	r1, #48	; 0x30
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 f998 	bl	800b004 <VL53L0X_WrByte>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	21ff      	movs	r1, #255	; 0xff
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 f98c 	bl	800b004 <VL53L0X_WrByte>
 8009cec:	4603      	mov	r3, r0
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009cfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d17f      	bne.n	8009e02 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009d02:	78bb      	ldrb	r3, [r7, #2]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fe fe38 	bl	800897a <VL53L0X_encode_vcsel_period>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d045      	beq.n	8009da6 <VL53L0X_set_vcsel_pulse_period+0x470>
 8009d1a:	e06e      	b.n	8009dfa <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009d1c:	f107 0314 	add.w	r3, r7, #20
 8009d20:	461a      	mov	r2, r3
 8009d22:	2103      	movs	r1, #3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fc33 	bl	8009590 <get_sequence_step_timeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009d30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d109      	bne.n	8009d4c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009d38:	f107 0310 	add.w	r3, r7, #16
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2102      	movs	r1, #2
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff fc25 	bl	8009590 <get_sequence_step_timeout>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d109      	bne.n	8009d68 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d58:	461a      	mov	r2, r3
 8009d5a:	2150      	movs	r1, #80	; 0x50
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 f951 	bl	800b004 <VL53L0X_WrByte>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d108      	bne.n	8009d82 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	461a      	mov	r2, r3
 8009d74:	2103      	movs	r1, #3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff fceb 	bl	8009752 <set_sequence_step_timeout>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009d82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d108      	bne.n	8009d9c <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	2102      	movs	r1, #2
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7ff fcde 	bl	8009752 <set_sequence_step_timeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	78ba      	ldrb	r2, [r7, #2]
 8009da0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009da4:	e02e      	b.n	8009e04 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009da6:	f107 0318 	add.w	r3, r7, #24
 8009daa:	461a      	mov	r2, r3
 8009dac:	2104      	movs	r1, #4
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff fbee 	bl	8009590 <get_sequence_step_timeout>
 8009db4:	4603      	mov	r3, r0
 8009db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009dba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d109      	bne.n	8009dd6 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009dc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	2170      	movs	r1, #112	; 0x70
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f001 f91a 	bl	800b004 <VL53L0X_WrByte>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009dd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d108      	bne.n	8009df0 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	461a      	mov	r2, r3
 8009de2:	2104      	movs	r1, #4
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff fcb4 	bl	8009752 <set_sequence_step_timeout>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	78ba      	ldrb	r2, [r7, #2]
 8009df4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009df8:	e004      	b.n	8009e04 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dfa:	23fc      	movs	r3, #252	; 0xfc
 8009dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e00:	e000      	b.n	8009e04 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8009e02:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d109      	bne.n	8009e20 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009e12:	69f9      	ldr	r1, [r7, #28]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7fc fe1d 	bl	8006a54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009e28:	f107 010f 	add.w	r1, r7, #15
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7fe fcbd 	bl	80087b0 <VL53L0X_perform_phase_calibration>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3728      	adds	r7, #40	; 0x28
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	460b      	mov	r3, r1
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e56:	2300      	movs	r3, #0
 8009e58:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009e5a:	7afb      	ldrb	r3, [r7, #11]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d00a      	beq.n	8009e7a <VL53L0X_get_vcsel_pulse_period+0x32>
 8009e64:	e013      	b.n	8009e8e <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009e66:	f107 0316 	add.w	r3, r7, #22
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	2150      	movs	r1, #80	; 0x50
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f001 f94a 	bl	800b108 <VL53L0X_RdByte>
 8009e74:	4603      	mov	r3, r0
 8009e76:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009e78:	e00b      	b.n	8009e92 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009e7a:	f107 0316 	add.w	r3, r7, #22
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2170      	movs	r1, #112	; 0x70
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f001 f940 	bl	800b108 <VL53L0X_RdByte>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009e8c:	e001      	b.n	8009e92 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e8e:	23fc      	movs	r3, #252	; 0xfc
 8009e90:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d107      	bne.n	8009eaa <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009e9a:	7dbb      	ldrb	r3, [r7, #22]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fd59 	bl	8008954 <VL53L0X_decode_vcsel_period>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	701a      	strb	r2, [r3, #0]

	return Status;
 8009eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b092      	sub	sp, #72	; 0x48
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009ec6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009eca:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009ecc:	f240 7376 	movw	r3, #1910	; 0x776
 8009ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009ed2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009ed6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009ed8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009ede:	f240 234e 	movw	r3, #590	; 0x24e
 8009ee2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009ee4:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009eea:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009eee:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009ef0:	f240 2326 	movw	r3, #550	; 0x226
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009efa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009efe:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d205      	bcs.n	8009f18 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f0c:	23fc      	movs	r3, #252	; 0xfc
 8009f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009f12:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f16:	e0aa      	b.n	800a06e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7fc fedc 	bl	8006ce8 <VL53L0X_GetSequenceStepEnables>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009f36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d15b      	bne.n	8009ff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009f3e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d105      	bne.n	8009f50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009f44:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009f4a:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d052      	beq.n	8009ff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009f50:	f107 0310 	add.w	r3, r7, #16
 8009f54:	461a      	mov	r2, r3
 8009f56:	2102      	movs	r1, #2
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff fb19 	bl	8009590 <get_sequence_step_timeout>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009f64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009f6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f70:	e07d      	b.n	800a06e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009f72:	7d3b      	ldrb	r3, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00f      	beq.n	8009f98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009f78:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7c:	4413      	add	r3, r2
 8009f7e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009f80:	69fa      	ldr	r2, [r7, #28]
 8009f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d204      	bcs.n	8009f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f90:	e002      	b.n	8009f98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f92:	23fc      	movs	r3, #252	; 0xfc
 8009f94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009f98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009fa0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fa4:	e063      	b.n	800a06e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009fa6:	7dbb      	ldrb	r3, [r7, #22]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d011      	beq.n	8009fd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	4413      	add	r3, r2
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d204      	bcs.n	8009fc8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009fbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8009fc6:	e016      	b.n	8009ff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009fc8:	23fc      	movs	r3, #252	; 0xfc
 8009fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009fce:	e012      	b.n	8009ff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009fd0:	7d7b      	ldrb	r3, [r7, #21]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00f      	beq.n	8009ff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fda:	4413      	add	r3, r2
 8009fdc:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d204      	bcs.n	8009ff0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	643b      	str	r3, [r7, #64]	; 0x40
 8009fee:	e002      	b.n	8009ff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ff0:	23fc      	movs	r3, #252	; 0xfc
 8009ff2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009ff6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009ffe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a002:	e034      	b.n	800a06e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a004:	7dfb      	ldrb	r3, [r7, #23]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d019      	beq.n	800a03e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a00a:	f107 030c 	add.w	r3, r7, #12
 800a00e:	461a      	mov	r2, r3
 800a010:	2103      	movs	r1, #3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff fabc 	bl	8009590 <get_sequence_step_timeout>
 800a018:	4603      	mov	r3, r0
 800a01a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a022:	4413      	add	r3, r2
 800a024:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d204      	bcs.n	800a038 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a02e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	643b      	str	r3, [r7, #64]	; 0x40
 800a036:	e002      	b.n	800a03e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a038:	23fc      	movs	r3, #252	; 0xfc
 800a03a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a03e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a042:	2b00      	cmp	r3, #0
 800a044:	d111      	bne.n	800a06a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a046:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a04c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a056:	2104      	movs	r1, #4
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff fb7a 	bl	8009752 <set_sequence_step_timeout>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a06a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3748      	adds	r7, #72	; 0x48
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b090      	sub	sp, #64	; 0x40
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a080:	2300      	movs	r3, #0
 800a082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a086:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a08a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a08c:	f240 7376 	movw	r3, #1910	; 0x776
 800a090:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a092:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a096:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a098:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a09c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a09e:	f240 234e 	movw	r3, #590	; 0x24e
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a0a4:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a0a8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a0aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a0b0:	f240 2326 	movw	r3, #550	; 0x226
 800a0b4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a0ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0be:	441a      	add	r2, r3
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a0c4:	f107 0318 	add.w	r3, r7, #24
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7fc fe0c 	bl	8006ce8 <VL53L0X_GetSequenceStepEnables>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a0d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d002      	beq.n	800a0e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a0de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a0e2:	e075      	b.n	800a1d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a0e4:	7e3b      	ldrb	r3, [r7, #24]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d105      	bne.n	800a0f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a0ea:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a0f0:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d030      	beq.n	800a158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a0f6:	f107 0310 	add.w	r3, r7, #16
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	2102      	movs	r1, #2
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff fa46 	bl	8009590 <get_sequence_step_timeout>
 800a104:	4603      	mov	r3, r0
 800a106:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a10a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d122      	bne.n	800a158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a112:	7e3b      	ldrb	r3, [r7, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a11c:	6939      	ldr	r1, [r7, #16]
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a120:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a122:	441a      	add	r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a128:	7ebb      	ldrb	r3, [r7, #26]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d009      	beq.n	800a142 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a132:	6939      	ldr	r1, [r7, #16]
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	440b      	add	r3, r1
 800a138:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a13a:	441a      	add	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	e00a      	b.n	800a158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a142:	7e7b      	ldrb	r3, [r7, #25]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d007      	beq.n	800a158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a14c:	6939      	ldr	r1, [r7, #16]
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a152:	441a      	add	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a158:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d114      	bne.n	800a18a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a160:	7efb      	ldrb	r3, [r7, #27]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d011      	beq.n	800a18a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a166:	f107 030c 	add.w	r3, r7, #12
 800a16a:	461a      	mov	r2, r3
 800a16c:	2103      	movs	r1, #3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff fa0e 	bl	8009590 <get_sequence_step_timeout>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a184:	441a      	add	r2, r3
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a18a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d114      	bne.n	800a1bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a192:	7f3b      	ldrb	r3, [r7, #28]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d011      	beq.n	800a1bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a198:	f107 0314 	add.w	r3, r7, #20
 800a19c:	461a      	mov	r2, r3
 800a19e:	2104      	movs	r1, #4
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff f9f5 	bl	8009590 <get_sequence_step_timeout>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a1b0:	6979      	ldr	r1, [r7, #20]
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a1b6:	441a      	add	r2, r3
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3740      	adds	r7, #64	; 0x40
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a1ea:	e0c6      	b.n	800a37a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a1fc:	7cfb      	ldrb	r3, [r7, #19]
 800a1fe:	2bff      	cmp	r3, #255	; 0xff
 800a200:	f040 808d 	bne.w	800a31e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	4413      	add	r3, r2
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	747b      	strb	r3, [r7, #17]
			Index++;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	3301      	adds	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a214:	7c7b      	ldrb	r3, [r7, #17]
 800a216:	2b03      	cmp	r3, #3
 800a218:	d87e      	bhi.n	800a318 <VL53L0X_load_tuning_settings+0x140>
 800a21a:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <VL53L0X_load_tuning_settings+0x48>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a231 	.word	0x0800a231
 800a224:	0800a26b 	.word	0x0800a26b
 800a228:	0800a2a5 	.word	0x0800a2a5
 800a22c:	0800a2df 	.word	0x0800a2df
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4413      	add	r3, r2
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	743b      	strb	r3, [r7, #16]
				Index++;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	3301      	adds	r3, #1
 800a23e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4413      	add	r3, r2
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	3301      	adds	r3, #1
 800a24e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a250:	7c3b      	ldrb	r3, [r7, #16]
 800a252:	b29b      	uxth	r3, r3
 800a254:	021b      	lsls	r3, r3, #8
 800a256:	b29a      	uxth	r2, r3
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	4413      	add	r3, r2
 800a25e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	89ba      	ldrh	r2, [r7, #12]
 800a264:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a268:	e087      	b.n	800a37a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	4413      	add	r3, r2
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	743b      	strb	r3, [r7, #16]
				Index++;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	3301      	adds	r3, #1
 800a278:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	4413      	add	r3, r2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	3301      	adds	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a28a:	7c3b      	ldrb	r3, [r7, #16]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	b29a      	uxth	r2, r3
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	b29b      	uxth	r3, r3
 800a296:	4413      	add	r3, r2
 800a298:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	89ba      	ldrh	r2, [r7, #12]
 800a29e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a2a2:	e06a      	b.n	800a37a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	743b      	strb	r3, [r7, #16]
				Index++;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a2c4:	7c3b      	ldrb	r3, [r7, #16]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	89ba      	ldrh	r2, [r7, #12]
 800a2d8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a2dc:	e04d      	b.n	800a37a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	743b      	strb	r3, [r7, #16]
				Index++;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a2fe:	7c3b      	ldrb	r3, [r7, #16]
 800a300:	b29b      	uxth	r3, r3
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	b29a      	uxth	r2, r3
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	4413      	add	r3, r2
 800a30c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	89ba      	ldrh	r2, [r7, #12]
 800a312:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a316:	e030      	b.n	800a37a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a318:	23fc      	movs	r3, #252	; 0xfc
 800a31a:	77fb      	strb	r3, [r7, #31]
 800a31c:	e02d      	b.n	800a37a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a31e:	7cfb      	ldrb	r3, [r7, #19]
 800a320:	2b04      	cmp	r3, #4
 800a322:	d828      	bhi.n	800a376 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	4413      	add	r3, r2
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	3301      	adds	r3, #1
 800a332:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a334:	2300      	movs	r3, #0
 800a336:	61bb      	str	r3, [r7, #24]
 800a338:	e00f      	b.n	800a35a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	4413      	add	r3, r2
 800a340:	7819      	ldrb	r1, [r3, #0]
 800a342:	f107 0208 	add.w	r2, r7, #8
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	4413      	add	r3, r2
 800a34a:	460a      	mov	r2, r1
 800a34c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	3301      	adds	r3, #1
 800a352:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	3301      	adds	r3, #1
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	7cfb      	ldrb	r3, [r7, #19]
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	429a      	cmp	r2, r3
 800a360:	dbeb      	blt.n	800a33a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a362:	7cfb      	ldrb	r3, [r7, #19]
 800a364:	f107 0208 	add.w	r2, r7, #8
 800a368:	7cb9      	ldrb	r1, [r7, #18]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fdee 	bl	800af4c <VL53L0X_WriteMulti>
 800a370:	4603      	mov	r3, r0
 800a372:	77fb      	strb	r3, [r7, #31]
 800a374:	e001      	b.n	800a37a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a376:	23fc      	movs	r3, #252	; 0xfc
 800a378:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	4413      	add	r3, r2
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <VL53L0X_load_tuning_settings+0x1b8>
 800a386:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f43f af2e 	beq.w	800a1ec <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a390:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3720      	adds	r7, #32
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a3b2:	f107 0313 	add.w	r3, r7, #19
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7fc fd21 	bl	8006e00 <VL53L0X_GetXTalkCompensationEnable>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a3c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d111      	bne.n	800a3ee <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a3ca:	7cfb      	ldrb	r3, [r7, #19]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00e      	beq.n	800a3ee <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	8a9b      	ldrh	r3, [r3, #20]
 800a3da:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
 800a3e2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	3380      	adds	r3, #128	; 0x80
 800a3e8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a3ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3720      	adds	r7, #32
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b086      	sub	sp, #24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a406:	2300      	movs	r3, #0
 800a408:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a412:	f107 0310 	add.w	r3, r7, #16
 800a416:	461a      	mov	r2, r3
 800a418:	68b9      	ldr	r1, [r7, #8]
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff ffbe 	bl	800a39c <VL53L0X_get_total_xtalk_rate>
 800a420:	4603      	mov	r3, r0
 800a422:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a424:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d105      	bne.n	800a438 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	441a      	add	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]

	return Status;
 800a438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b09a      	sub	sp, #104	; 0x68
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a452:	2312      	movs	r3, #18
 800a454:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a45a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a45c:	2342      	movs	r3, #66	; 0x42
 800a45e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a460:	2306      	movs	r3, #6
 800a462:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a464:	2307      	movs	r3, #7
 800a466:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a474:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a47c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a482:	fb02 f303 	mul.w	r3, r2, r3
 800a486:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48a:	3380      	adds	r3, #128	; 0x80
 800a48c:	0a1b      	lsrs	r3, r3, #8
 800a48e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a494:	fb02 f303 	mul.w	r3, r2, r3
 800a498:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01a      	beq.n	800a4da <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	029b      	lsls	r3, r3, #10
 800a4a8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b0:	4413      	add	r3, r2
 800a4b2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a4b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4bc:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a4be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	4413      	add	r3, r2
 800a4c6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a4c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ca:	fb03 f303 	mul.w	r3, r3, r3
 800a4ce:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a4d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4d6:	0c1b      	lsrs	r3, r3, #16
 800a4d8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4ea:	0c1b      	lsrs	r3, r3, #16
 800a4ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	fb03 f303 	mul.w	r3, r3, r3
 800a4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a4f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a4fc:	0c1b      	lsrs	r3, r3, #16
 800a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a502:	085a      	lsrs	r2, r3, #1
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	441a      	add	r2, r3
 800a508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a514:	fb02 f303 	mul.w	r3, r2, r3
 800a518:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a520:	d302      	bcc.n	800a528 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a522:	4b54      	ldr	r3, [pc, #336]	; (800a674 <VL53L0X_calc_dmax+0x230>)
 800a524:	663b      	str	r3, [r7, #96]	; 0x60
 800a526:	e015      	b.n	800a554 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a52a:	085a      	lsrs	r2, r3, #1
 800a52c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a52e:	441a      	add	r2, r3
 800a530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a532:	fbb2 f3f3 	udiv	r3, r2, r3
 800a536:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a53a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a544:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a548:	0c1b      	lsrs	r3, r3, #16
 800a54a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a54c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a54e:	fb03 f303 	mul.w	r3, r3, r3
 800a552:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a556:	039b      	lsls	r3, r3, #14
 800a558:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a55c:	4a46      	ldr	r2, [pc, #280]	; (800a678 <VL53L0X_calc_dmax+0x234>)
 800a55e:	fba2 2303 	umull	r2, r3, r2, r3
 800a562:	099b      	lsrs	r3, r3, #6
 800a564:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	fb03 f303 	mul.w	r3, r3, r3
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a570:	fb03 f303 	mul.w	r3, r3, r3
 800a574:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	3308      	adds	r3, #8
 800a57a:	091b      	lsrs	r3, r3, #4
 800a57c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a588:	4613      	mov	r3, r2
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	4413      	add	r3, r2
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a598:	0b9b      	lsrs	r3, r3, #14
 800a59a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a59c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a59e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5a0:	4413      	add	r3, r2
 800a5a2:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a5a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5a6:	085b      	lsrs	r3, r3, #1
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	039b      	lsls	r3, r3, #14
 800a5bc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a5d6:	fb02 f303 	mul.w	r3, r2, r3
 800a5da:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5e2:	4a25      	ldr	r2, [pc, #148]	; (800a678 <VL53L0X_calc_dmax+0x234>)
 800a5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e8:	099b      	lsrs	r3, r3, #6
 800a5ea:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a5f8:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <VL53L0X_calc_dmax+0x234>)
 800a5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fe:	099b      	lsrs	r3, r3, #6
 800a600:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a604:	3380      	adds	r3, #128	; 0x80
 800a606:	0a1b      	lsrs	r3, r3, #8
 800a608:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d008      	beq.n	800a622 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	085a      	lsrs	r2, r3, #1
 800a614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a616:	441a      	add	r2, r3
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a620:	e001      	b.n	800a626 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a626:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a628:	f7fe f9ba 	bl	80089a0 <VL53L0X_isqrt>
 800a62c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d008      	beq.n	800a646 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	085a      	lsrs	r2, r3, #1
 800a638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63a:	441a      	add	r2, r3
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a642:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a644:	e001      	b.n	800a64a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a64a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a64c:	f7fe f9a8 	bl	80089a0 <VL53L0X_isqrt>
 800a650:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a652:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d902      	bls.n	800a666 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a662:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a664:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a666:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3768      	adds	r7, #104	; 0x68
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	fff00000 	.word	0xfff00000
 800a678:	10624dd3 	.word	0x10624dd3

0800a67c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b0b4      	sub	sp, #208	; 0xd0
 800a680:	af04      	add	r7, sp, #16
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a68a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a68e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a692:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a69a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a69e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a6a2:	f241 235c 	movw	r3, #4700	; 0x125c
 800a6a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a6aa:	4b9e      	ldr	r3, [pc, #632]	; (800a924 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a6ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a6b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a6b4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a6b6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a6ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a6c4:	4b98      	ldr	r3, [pc, #608]	; (800a928 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a6c6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a6c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6cc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a6ce:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a6d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a6d4:	f240 6377 	movw	r3, #1655	; 0x677
 800a6d8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6ee:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a6f2:	0c1b      	lsrs	r3, r3, #16
 800a6f4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a6fc:	f107 0310 	add.w	r3, r7, #16
 800a700:	461a      	mov	r2, r3
 800a702:	68b9      	ldr	r1, [r7, #8]
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff fe78 	bl	800a3fa <VL53L0X_get_total_signal_rate>
 800a70a:	4603      	mov	r3, r0
 800a70c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a710:	f107 0314 	add.w	r3, r7, #20
 800a714:	461a      	mov	r2, r3
 800a716:	68b9      	ldr	r1, [r7, #8]
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff fe3f 	bl	800a39c <VL53L0X_get_total_xtalk_rate>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a72a:	fb02 f303 	mul.w	r3, r2, r3
 800a72e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a732:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a736:	0c1b      	lsrs	r3, r3, #16
 800a738:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a740:	fb02 f303 	mul.w	r3, r2, r3
 800a744:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a748:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a74c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a74e:	429a      	cmp	r2, r3
 800a750:	d902      	bls.n	800a758 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a758:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d168      	bne.n	800a832 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a770:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a774:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a778:	461a      	mov	r2, r3
 800a77a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f7fe feb2 	bl	80094e8 <VL53L0X_calc_timeout_mclks>
 800a784:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a78c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a796:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a79a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7fe fe9f 	bl	80094e8 <VL53L0X_calc_timeout_mclks>
 800a7aa:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a7b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	d102      	bne.n	800a7c0 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a7c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7c4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a7c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a7ca:	fb02 f303 	mul.w	r3, r2, r3
 800a7ce:	02db      	lsls	r3, r3, #11
 800a7d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a7d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7dc:	4a53      	ldr	r2, [pc, #332]	; (800a92c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a7de:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e2:	099b      	lsrs	r3, r3, #6
 800a7e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a7e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7ee:	fb02 f303 	mul.w	r3, r2, r3
 800a7f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a7f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a7fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7fe:	4a4b      	ldr	r2, [pc, #300]	; (800a92c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a800:	fba2 2303 	umull	r2, r3, r2, r3
 800a804:	099b      	lsrs	r3, r3, #6
 800a806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3380      	adds	r3, #128	; 0x80
 800a80e:	0a1b      	lsrs	r3, r3, #8
 800a810:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a818:	fb02 f303 	mul.w	r3, r2, r3
 800a81c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a820:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a824:	3380      	adds	r3, #128	; 0x80
 800a826:	0a1b      	lsrs	r3, r3, #8
 800a828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a832:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a83a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a83e:	e15e      	b.n	800aafe <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800a840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10c      	bne.n	800a860 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a84c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a854:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	e14c      	b.n	800aafa <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a868:	2301      	movs	r3, #1
 800a86a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a86e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a872:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a876:	041a      	lsls	r2, r3, #16
 800a878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a888:	429a      	cmp	r2, r3
 800a88a:	d902      	bls.n	800a892 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a88c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a88e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a892:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a896:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a89a:	fb02 f303 	mul.w	r3, r2, r3
 800a89e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a8a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe f876 	bl	80089a0 <VL53L0X_isqrt>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	891b      	ldrh	r3, [r3, #8]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8c2:	fb02 f303 	mul.w	r3, r2, r3
 800a8c6:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a8c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8ca:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a8cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8d0:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a8d2:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a8d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a8d8:	4a14      	ldr	r2, [pc, #80]	; (800a92c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a8da:	fba2 2303 	umull	r2, r3, r2, r3
 800a8de:	099b      	lsrs	r3, r3, #6
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a8e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8e4:	041b      	lsls	r3, r3, #16
 800a8e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8ea:	4a10      	ldr	r2, [pc, #64]	; (800a92c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a8f0:	099b      	lsrs	r3, r3, #6
 800a8f2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a8fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	bfb8      	it	lt
 800a906:	425b      	neglt	r3, r3
 800a908:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	7e1b      	ldrb	r3, [r3, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00b      	beq.n	800a930 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a91c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a920:	e033      	b.n	800a98a <VL53L0X_calc_sigma_estimate+0x30e>
 800a922:	bf00      	nop
 800a924:	028f87ae 	.word	0x028f87ae
 800a928:	0006999a 	.word	0x0006999a
 800a92c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a936:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a940:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a948:	fb02 f303 	mul.w	r3, r2, r3
 800a94c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a950:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a956:	4413      	add	r3, r2
 800a958:	0c1b      	lsrs	r3, r3, #16
 800a95a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a95e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a962:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a96a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a96e:	085b      	lsrs	r3, r3, #1
 800a970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a978:	fb03 f303 	mul.w	r3, r3, r3
 800a97c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a984:	0b9b      	lsrs	r3, r3, #14
 800a986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a98a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a98e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a990:	fb02 f303 	mul.w	r3, r2, r3
 800a994:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a99c:	0c1b      	lsrs	r3, r3, #16
 800a99e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	fb03 f303 	mul.w	r3, r3, r3
 800a9a6:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a9a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a9ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a9b4:	0c1b      	lsrs	r3, r3, #16
 800a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	fb03 f303 	mul.w	r3, r3, r3
 800a9be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	4413      	add	r3, r2
 800a9c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ca:	f7fd ffe9 	bl	80089a0 <VL53L0X_isqrt>
 800a9ce:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	041b      	lsls	r3, r3, #16
 800a9d4:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d8:	3332      	adds	r3, #50	; 0x32
 800a9da:	4a4b      	ldr	r2, [pc, #300]	; (800ab08 <VL53L0X_calc_sigma_estimate+0x48c>)
 800a9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e0:	095a      	lsrs	r2, r3, #5
 800a9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a9ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9f0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a9f4:	fb02 f303 	mul.w	r3, r2, r3
 800a9f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a9fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa00:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800aa04:	3308      	adds	r3, #8
 800aa06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800aa0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa0e:	4a3f      	ldr	r2, [pc, #252]	; (800ab0c <VL53L0X_calc_sigma_estimate+0x490>)
 800aa10:	fba2 2303 	umull	r2, r3, r2, r3
 800aa14:	0b5b      	lsrs	r3, r3, #13
 800aa16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800aa1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d902      	bls.n	800aa2a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800aa24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800aa2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800aa38:	4a35      	ldr	r2, [pc, #212]	; (800ab10 <VL53L0X_calc_sigma_estimate+0x494>)
 800aa3a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3e:	099b      	lsrs	r3, r3, #6
 800aa40:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800aa46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa4a:	441a      	add	r2, r3
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fd ffa4 	bl	80089a0 <VL53L0X_isqrt>
 800aa58:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	021b      	lsls	r3, r3, #8
 800aa5e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aa66:	4a2a      	ldr	r2, [pc, #168]	; (800ab10 <VL53L0X_calc_sigma_estimate+0x494>)
 800aa68:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6c:	099b      	lsrs	r3, r3, #6
 800aa6e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800aa70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa74:	fb03 f303 	mul.w	r3, r3, r3
 800aa78:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	fb03 f303 	mul.w	r3, r3, r3
 800aa80:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800aa82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	4413      	add	r3, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fd ff89 	bl	80089a0 <VL53L0X_isqrt>
 800aa8e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa96:	fb02 f303 	mul.w	r3, r2, r3
 800aa9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800aa9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d009      	beq.n	800aab8 <VL53L0X_calc_sigma_estimate+0x43c>
 800aaa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d005      	beq.n	800aab8 <VL53L0X_calc_sigma_estimate+0x43c>
 800aaac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d903      	bls.n	800aac0 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800aab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aabc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aac6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800aad2:	6939      	ldr	r1, [r7, #16]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	9303      	str	r3, [sp, #12]
 800aad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aadc:	9302      	str	r3, [sp, #8]
 800aade:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aaec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7ff fca8 	bl	800a444 <VL53L0X_calc_dmax>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aafa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	37c0      	adds	r7, #192	; 0xc0
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	51eb851f 	.word	0x51eb851f
 800ab0c:	d1b71759 	.word	0xd1b71759
 800ab10:	10624dd3 	.word	0x10624dd3

0800ab14 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b090      	sub	sp, #64	; 0x40
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	607a      	str	r2, [r7, #4]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	460b      	mov	r3, r1
 800ab22:	72fb      	strb	r3, [r7, #11]
 800ab24:	4613      	mov	r3, r2
 800ab26:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ab66:	7afb      	ldrb	r3, [r7, #11]
 800ab68:	10db      	asrs	r3, r3, #3
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ab74:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d017      	beq.n	800abac <VL53L0X_get_pal_range_status+0x98>
 800ab7c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	d013      	beq.n	800abac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ab84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab88:	2b07      	cmp	r3, #7
 800ab8a:	d00f      	beq.n	800abac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800ab8c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab90:	2b0c      	cmp	r3, #12
 800ab92:	d00b      	beq.n	800abac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800ab94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab98:	2b0d      	cmp	r3, #13
 800ab9a:	d007      	beq.n	800abac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800ab9c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aba0:	2b0e      	cmp	r3, #14
 800aba2:	d003      	beq.n	800abac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800aba4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aba8:	2b0f      	cmp	r3, #15
 800abaa:	d103      	bne.n	800abb4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800abac:	2301      	movs	r3, #1
 800abae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800abb2:	e002      	b.n	800abba <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800abba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800abc2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800abc6:	461a      	mov	r2, r3
 800abc8:	2100      	movs	r1, #0
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7fc f9ec 	bl	8006fa8 <VL53L0X_GetLimitCheckEnable>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800abd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d02e      	beq.n	800ac3c <VL53L0X_get_pal_range_status+0x128>
 800abde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d12a      	bne.n	800ac3c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800abe6:	f107 0310 	add.w	r3, r7, #16
 800abea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800abee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff fd43 	bl	800a67c <VL53L0X_calc_sigma_estimate>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800abfc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d103      	bne.n	800ac0c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ac0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d113      	bne.n	800ac3c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ac14:	f107 0320 	add.w	r3, r7, #32
 800ac18:	461a      	mov	r2, r3
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7fc fa49 	bl	80070b4 <VL53L0X_GetLimitCheckValue>
 800ac22:	4603      	mov	r3, r0
 800ac24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d006      	beq.n	800ac3c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ac2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac30:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d902      	bls.n	800ac3c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ac3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ac44:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ac48:	461a      	mov	r2, r3
 800ac4a:	2102      	movs	r1, #2
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7fc f9ab 	bl	8006fa8 <VL53L0X_GetLimitCheckEnable>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800ac58:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d044      	beq.n	800acea <VL53L0X_get_pal_range_status+0x1d6>
 800ac60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d140      	bne.n	800acea <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ac68:	f107 031c 	add.w	r3, r7, #28
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	2102      	movs	r1, #2
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7fc fa1f 	bl	80070b4 <VL53L0X_GetLimitCheckValue>
 800ac76:	4603      	mov	r3, r0
 800ac78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800ac7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d107      	bne.n	800ac94 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ac84:	2201      	movs	r2, #1
 800ac86:	21ff      	movs	r1, #255	; 0xff
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f9bb 	bl	800b004 <VL53L0X_WrByte>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800ac94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800ac9c:	f107 0316 	add.w	r3, r7, #22
 800aca0:	461a      	mov	r2, r3
 800aca2:	21b6      	movs	r1, #182	; 0xb6
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 fa59 	bl	800b15c <VL53L0X_RdWord>
 800acaa:	4603      	mov	r3, r0
 800acac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800acb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d107      	bne.n	800acc8 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800acb8:	2200      	movs	r2, #0
 800acba:	21ff      	movs	r1, #255	; 0xff
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 f9a1 	bl	800b004 <VL53L0X_WrByte>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800acc8:	8afb      	ldrh	r3, [r7, #22]
 800acca:	025b      	lsls	r3, r3, #9
 800accc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acd2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d006      	beq.n	800acea <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800acdc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800acde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d902      	bls.n	800acea <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ace4:	2301      	movs	r3, #1
 800ace6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800acea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800acf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800acf6:	461a      	mov	r2, r3
 800acf8:	2103      	movs	r1, #3
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7fc f954 	bl	8006fa8 <VL53L0X_GetLimitCheckEnable>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ad06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d023      	beq.n	800ad56 <VL53L0X_get_pal_range_status+0x242>
 800ad0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d11f      	bne.n	800ad56 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ad16:	893b      	ldrh	r3, [r7, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad20:	e005      	b.n	800ad2e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	021a      	lsls	r2, r3, #8
 800ad26:	893b      	ldrh	r3, [r7, #8]
 800ad28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad2c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ad2e:	f107 0318 	add.w	r3, r7, #24
 800ad32:	461a      	mov	r2, r3
 800ad34:	2103      	movs	r1, #3
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7fc f9bc 	bl	80070b4 <VL53L0X_GetLimitCheckValue>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ad48:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ad4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d202      	bcs.n	800ad56 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ad50:	2301      	movs	r3, #1
 800ad52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d14a      	bne.n	800adf4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ad5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d103      	bne.n	800ad6e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ad66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad68:	22ff      	movs	r2, #255	; 0xff
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	e042      	b.n	800adf4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ad6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d007      	beq.n	800ad86 <VL53L0X_get_pal_range_status+0x272>
 800ad76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d003      	beq.n	800ad86 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ad7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d103      	bne.n	800ad8e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ad86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad88:	2205      	movs	r2, #5
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	e032      	b.n	800adf4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ad8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad92:	2b06      	cmp	r3, #6
 800ad94:	d003      	beq.n	800ad9e <VL53L0X_get_pal_range_status+0x28a>
 800ad96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ad9a:	2b09      	cmp	r3, #9
 800ad9c:	d103      	bne.n	800ada6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ad9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada0:	2204      	movs	r2, #4
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	e026      	b.n	800adf4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ada6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adaa:	2b08      	cmp	r3, #8
 800adac:	d007      	beq.n	800adbe <VL53L0X_get_pal_range_status+0x2aa>
 800adae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adb2:	2b0a      	cmp	r3, #10
 800adb4:	d003      	beq.n	800adbe <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800adb6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d103      	bne.n	800adc6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800adbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc0:	2203      	movs	r2, #3
 800adc2:	701a      	strb	r2, [r3, #0]
 800adc4:	e016      	b.n	800adf4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800adc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adca:	2b04      	cmp	r3, #4
 800adcc:	d003      	beq.n	800add6 <VL53L0X_get_pal_range_status+0x2c2>
 800adce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800add2:	2b01      	cmp	r3, #1
 800add4:	d103      	bne.n	800adde <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800add6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add8:	2202      	movs	r2, #2
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	e00a      	b.n	800adf4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800adde:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d103      	bne.n	800adee <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ade6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]
 800adec:	e002      	b.n	800adf4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800adee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf0:	2200      	movs	r2, #0
 800adf2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800adf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800adfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adfe:	2200      	movs	r2, #0
 800ae00:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ae02:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ae06:	461a      	mov	r2, r3
 800ae08:	2101      	movs	r1, #1
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7fc f8cc 	bl	8006fa8 <VL53L0X_GetLimitCheckEnable>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ae16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d14f      	bne.n	800aebe <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ae1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <VL53L0X_get_pal_range_status+0x31a>
 800ae26:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d103      	bne.n	800ae36 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae34:	e002      	b.n	800ae3c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae42:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ae46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae4a:	2b04      	cmp	r3, #4
 800ae4c:	d003      	beq.n	800ae56 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ae4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ae56:	2301      	movs	r3, #1
 800ae58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5c:	e002      	b.n	800ae64 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800ae6e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <VL53L0X_get_pal_range_status+0x36a>
 800ae76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d103      	bne.n	800ae86 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae84:	e002      	b.n	800ae8c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ae96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <VL53L0X_get_pal_range_status+0x392>
 800ae9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d103      	bne.n	800aeae <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800aea6:	2301      	movs	r3, #1
 800aea8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeac:	e002      	b.n	800aeb4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aeba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aebe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3740      	adds	r7, #64	; 0x40
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b088      	sub	sp, #32
 800aece:	af02      	add	r7, sp, #8
 800aed0:	60f8      	str	r0, [r7, #12]
 800aed2:	60b9      	str	r1, [r7, #8]
 800aed4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	330a      	adds	r3, #10
 800aeda:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800aee8:	b299      	uxth	r1, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	4613      	mov	r3, r2
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	f7f6 fed1 	bl	8001c9c <HAL_I2C_Master_Transmit>
 800aefa:	4603      	mov	r3, r0
 800aefc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800aefe:	693b      	ldr	r3, [r7, #16]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af02      	add	r7, sp, #8
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	330a      	adds	r3, #10
 800af18:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	b299      	uxth	r1, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	b29a      	uxth	r2, r3
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	4613      	mov	r3, r2
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	f7f6 ffa3 	bl	8001e84 <HAL_I2C_Master_Receive>
 800af3e:	4603      	mov	r3, r0
 800af40:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800af42:	693b      	ldr	r3, [r7, #16]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	607a      	str	r2, [r7, #4]
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	460b      	mov	r3, r1
 800af5a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af5c:	2300      	movs	r3, #0
 800af5e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b3f      	cmp	r3, #63	; 0x3f
 800af64:	d902      	bls.n	800af6c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800af66:	f06f 0303 	mvn.w	r3, #3
 800af6a:	e016      	b.n	800af9a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800af6c:	4a0d      	ldr	r2, [pc, #52]	; (800afa4 <VL53L0X_WriteMulti+0x58>)
 800af6e:	7afb      	ldrb	r3, [r7, #11]
 800af70:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	480c      	ldr	r0, [pc, #48]	; (800afa8 <VL53L0X_WriteMulti+0x5c>)
 800af78:	f000 f99e 	bl	800b2b8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	3301      	adds	r3, #1
 800af80:	461a      	mov	r2, r3
 800af82:	4908      	ldr	r1, [pc, #32]	; (800afa4 <VL53L0X_WriteMulti+0x58>)
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff ffa0 	bl	800aeca <_I2CWrite>
 800af8a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af92:	23ec      	movs	r3, #236	; 0xec
 800af94:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800af96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	200007a0 	.word	0x200007a0
 800afa8:	200007a1 	.word	0x200007a1

0800afac <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	607a      	str	r2, [r7, #4]
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	460b      	mov	r3, r1
 800afba:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800afc0:	f107 030b 	add.w	r3, r7, #11
 800afc4:	2201      	movs	r2, #1
 800afc6:	4619      	mov	r1, r3
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f7ff ff7e 	bl	800aeca <_I2CWrite>
 800afce:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800afd6:	23ec      	movs	r3, #236	; 0xec
 800afd8:	75fb      	strb	r3, [r7, #23]
        goto done;
 800afda:	e00c      	b.n	800aff6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f7ff ff91 	bl	800af08 <_I2CRead>
 800afe6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800afee:	23ec      	movs	r3, #236	; 0xec
 800aff0:	75fb      	strb	r3, [r7, #23]
 800aff2:	e000      	b.n	800aff6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800aff4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800aff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
 800b010:	4613      	mov	r3, r2
 800b012:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b018:	4a0b      	ldr	r2, [pc, #44]	; (800b048 <VL53L0X_WrByte+0x44>)
 800b01a:	78fb      	ldrb	r3, [r7, #3]
 800b01c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b01e:	4a0a      	ldr	r2, [pc, #40]	; (800b048 <VL53L0X_WrByte+0x44>)
 800b020:	78bb      	ldrb	r3, [r7, #2]
 800b022:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b024:	2202      	movs	r2, #2
 800b026:	4908      	ldr	r1, [pc, #32]	; (800b048 <VL53L0X_WrByte+0x44>)
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff ff4e 	bl	800aeca <_I2CWrite>
 800b02e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b036:	23ec      	movs	r3, #236	; 0xec
 800b038:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b03a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	200007a0 	.word	0x200007a0

0800b04c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
 800b058:	4613      	mov	r3, r2
 800b05a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b05c:	2300      	movs	r3, #0
 800b05e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b060:	4a0e      	ldr	r2, [pc, #56]	; (800b09c <VL53L0X_WrWord+0x50>)
 800b062:	78fb      	ldrb	r3, [r7, #3]
 800b064:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b066:	883b      	ldrh	r3, [r7, #0]
 800b068:	0a1b      	lsrs	r3, r3, #8
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	4b0b      	ldr	r3, [pc, #44]	; (800b09c <VL53L0X_WrWord+0x50>)
 800b070:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b072:	883b      	ldrh	r3, [r7, #0]
 800b074:	b2da      	uxtb	r2, r3
 800b076:	4b09      	ldr	r3, [pc, #36]	; (800b09c <VL53L0X_WrWord+0x50>)
 800b078:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b07a:	2203      	movs	r2, #3
 800b07c:	4907      	ldr	r1, [pc, #28]	; (800b09c <VL53L0X_WrWord+0x50>)
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff ff23 	bl	800aeca <_I2CWrite>
 800b084:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b08c:	23ec      	movs	r3, #236	; 0xec
 800b08e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b090:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	200007a0 	.word	0x200007a0

0800b0a0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	70fb      	strb	r3, [r7, #3]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70bb      	strb	r3, [r7, #2]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b0be:	f107 020e 	add.w	r2, r7, #14
 800b0c2:	78fb      	ldrb	r3, [r7, #3]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f81e 	bl	800b108 <VL53L0X_RdByte>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d110      	bne.n	800b0fa <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b0d8:	7bba      	ldrb	r2, [r7, #14]
 800b0da:	78bb      	ldrb	r3, [r7, #2]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	787b      	ldrb	r3, [r7, #1]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b0e8:	7bba      	ldrb	r2, [r7, #14]
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7ff ff88 	bl	800b004 <VL53L0X_WrByte>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
 800b0f8:	e000      	b.n	800b0fc <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b0fa:	bf00      	nop
done:
    return Status;
 800b0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	460b      	mov	r3, r1
 800b112:	607a      	str	r2, [r7, #4]
 800b114:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b11a:	f107 030b 	add.w	r3, r7, #11
 800b11e:	2201      	movs	r2, #1
 800b120:	4619      	mov	r1, r3
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff fed1 	bl	800aeca <_I2CWrite>
 800b128:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b130:	23ec      	movs	r3, #236	; 0xec
 800b132:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b134:	e00c      	b.n	800b150 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b136:	2201      	movs	r2, #1
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f7ff fee4 	bl	800af08 <_I2CRead>
 800b140:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b148:	23ec      	movs	r3, #236	; 0xec
 800b14a:	75fb      	strb	r3, [r7, #23]
 800b14c:	e000      	b.n	800b150 <VL53L0X_RdByte+0x48>
    }
done:
 800b14e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b150:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	460b      	mov	r3, r1
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b16e:	f107 030b 	add.w	r3, r7, #11
 800b172:	2201      	movs	r2, #1
 800b174:	4619      	mov	r1, r3
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f7ff fea7 	bl	800aeca <_I2CWrite>
 800b17c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b184:	23ec      	movs	r3, #236	; 0xec
 800b186:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b188:	e017      	b.n	800b1ba <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b18a:	2202      	movs	r2, #2
 800b18c:	490e      	ldr	r1, [pc, #56]	; (800b1c8 <VL53L0X_RdWord+0x6c>)
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7ff feba 	bl	800af08 <_I2CRead>
 800b194:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b19c:	23ec      	movs	r3, #236	; 0xec
 800b19e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b1a0:	e00b      	b.n	800b1ba <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <VL53L0X_RdWord+0x6c>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	021b      	lsls	r3, r3, #8
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <VL53L0X_RdWord+0x6c>)
 800b1ae:	785b      	ldrb	r3, [r3, #1]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b1ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	200007a0 	.word	0x200007a0

0800b1cc <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b1de:	f107 030b 	add.w	r3, r7, #11
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7ff fe6f 	bl	800aeca <_I2CWrite>
 800b1ec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1f4:	23ec      	movs	r3, #236	; 0xec
 800b1f6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b1f8:	e01b      	b.n	800b232 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	4910      	ldr	r1, [pc, #64]	; (800b240 <VL53L0X_RdDWord+0x74>)
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7ff fe82 	bl	800af08 <_I2CRead>
 800b204:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b20c:	23ec      	movs	r3, #236	; 0xec
 800b20e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b210:	e00f      	b.n	800b232 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b212:	4b0b      	ldr	r3, [pc, #44]	; (800b240 <VL53L0X_RdDWord+0x74>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	061a      	lsls	r2, r3, #24
 800b218:	4b09      	ldr	r3, [pc, #36]	; (800b240 <VL53L0X_RdDWord+0x74>)
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	041b      	lsls	r3, r3, #16
 800b21e:	441a      	add	r2, r3
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <VL53L0X_RdDWord+0x74>)
 800b222:	789b      	ldrb	r3, [r3, #2]
 800b224:	021b      	lsls	r3, r3, #8
 800b226:	4413      	add	r3, r2
 800b228:	4a05      	ldr	r2, [pc, #20]	; (800b240 <VL53L0X_RdDWord+0x74>)
 800b22a:	78d2      	ldrb	r2, [r2, #3]
 800b22c:	441a      	add	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b232:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	200007a0 	.word	0x200007a0

0800b244 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b250:	2002      	movs	r0, #2
 800b252:	f7f6 f9b3 	bl	80015bc <HAL_Delay>
    return status;
 800b256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <__errno>:
 800b264:	4b01      	ldr	r3, [pc, #4]	; (800b26c <__errno+0x8>)
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	200002cc 	.word	0x200002cc

0800b270 <__libc_init_array>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	4d0d      	ldr	r5, [pc, #52]	; (800b2a8 <__libc_init_array+0x38>)
 800b274:	4c0d      	ldr	r4, [pc, #52]	; (800b2ac <__libc_init_array+0x3c>)
 800b276:	1b64      	subs	r4, r4, r5
 800b278:	10a4      	asrs	r4, r4, #2
 800b27a:	2600      	movs	r6, #0
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	d109      	bne.n	800b294 <__libc_init_array+0x24>
 800b280:	4d0b      	ldr	r5, [pc, #44]	; (800b2b0 <__libc_init_array+0x40>)
 800b282:	4c0c      	ldr	r4, [pc, #48]	; (800b2b4 <__libc_init_array+0x44>)
 800b284:	f000 fc96 	bl	800bbb4 <_init>
 800b288:	1b64      	subs	r4, r4, r5
 800b28a:	10a4      	asrs	r4, r4, #2
 800b28c:	2600      	movs	r6, #0
 800b28e:	42a6      	cmp	r6, r4
 800b290:	d105      	bne.n	800b29e <__libc_init_array+0x2e>
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	f855 3b04 	ldr.w	r3, [r5], #4
 800b298:	4798      	blx	r3
 800b29a:	3601      	adds	r6, #1
 800b29c:	e7ee      	b.n	800b27c <__libc_init_array+0xc>
 800b29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a2:	4798      	blx	r3
 800b2a4:	3601      	adds	r6, #1
 800b2a6:	e7f2      	b.n	800b28e <__libc_init_array+0x1e>
 800b2a8:	0800bcac 	.word	0x0800bcac
 800b2ac:	0800bcac 	.word	0x0800bcac
 800b2b0:	0800bcac 	.word	0x0800bcac
 800b2b4:	0800bcb0 	.word	0x0800bcb0

0800b2b8 <memcpy>:
 800b2b8:	440a      	add	r2, r1
 800b2ba:	4291      	cmp	r1, r2
 800b2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2c0:	d100      	bne.n	800b2c4 <memcpy+0xc>
 800b2c2:	4770      	bx	lr
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ce:	4291      	cmp	r1, r2
 800b2d0:	d1f9      	bne.n	800b2c6 <memcpy+0xe>
 800b2d2:	bd10      	pop	{r4, pc}

0800b2d4 <memset>:
 800b2d4:	4402      	add	r2, r0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d100      	bne.n	800b2de <memset+0xa>
 800b2dc:	4770      	bx	lr
 800b2de:	f803 1b01 	strb.w	r1, [r3], #1
 800b2e2:	e7f9      	b.n	800b2d8 <memset+0x4>

0800b2e4 <siprintf>:
 800b2e4:	b40e      	push	{r1, r2, r3}
 800b2e6:	b500      	push	{lr}
 800b2e8:	b09c      	sub	sp, #112	; 0x70
 800b2ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b2ec:	9002      	str	r0, [sp, #8]
 800b2ee:	9006      	str	r0, [sp, #24]
 800b2f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2f4:	4809      	ldr	r0, [pc, #36]	; (800b31c <siprintf+0x38>)
 800b2f6:	9107      	str	r1, [sp, #28]
 800b2f8:	9104      	str	r1, [sp, #16]
 800b2fa:	4909      	ldr	r1, [pc, #36]	; (800b320 <siprintf+0x3c>)
 800b2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b300:	9105      	str	r1, [sp, #20]
 800b302:	6800      	ldr	r0, [r0, #0]
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	a902      	add	r1, sp, #8
 800b308:	f000 f870 	bl	800b3ec <_svfiprintf_r>
 800b30c:	9b02      	ldr	r3, [sp, #8]
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	b01c      	add	sp, #112	; 0x70
 800b314:	f85d eb04 	ldr.w	lr, [sp], #4
 800b318:	b003      	add	sp, #12
 800b31a:	4770      	bx	lr
 800b31c:	200002cc 	.word	0x200002cc
 800b320:	ffff0208 	.word	0xffff0208

0800b324 <strcpy>:
 800b324:	4603      	mov	r3, r0
 800b326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b32a:	f803 2b01 	strb.w	r2, [r3], #1
 800b32e:	2a00      	cmp	r2, #0
 800b330:	d1f9      	bne.n	800b326 <strcpy+0x2>
 800b332:	4770      	bx	lr

0800b334 <__ssputs_r>:
 800b334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b338:	688e      	ldr	r6, [r1, #8]
 800b33a:	429e      	cmp	r6, r3
 800b33c:	4682      	mov	sl, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	4690      	mov	r8, r2
 800b342:	461f      	mov	r7, r3
 800b344:	d838      	bhi.n	800b3b8 <__ssputs_r+0x84>
 800b346:	898a      	ldrh	r2, [r1, #12]
 800b348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b34c:	d032      	beq.n	800b3b4 <__ssputs_r+0x80>
 800b34e:	6825      	ldr	r5, [r4, #0]
 800b350:	6909      	ldr	r1, [r1, #16]
 800b352:	eba5 0901 	sub.w	r9, r5, r1
 800b356:	6965      	ldr	r5, [r4, #20]
 800b358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b35c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b360:	3301      	adds	r3, #1
 800b362:	444b      	add	r3, r9
 800b364:	106d      	asrs	r5, r5, #1
 800b366:	429d      	cmp	r5, r3
 800b368:	bf38      	it	cc
 800b36a:	461d      	movcc	r5, r3
 800b36c:	0553      	lsls	r3, r2, #21
 800b36e:	d531      	bpl.n	800b3d4 <__ssputs_r+0xa0>
 800b370:	4629      	mov	r1, r5
 800b372:	f000 fb55 	bl	800ba20 <_malloc_r>
 800b376:	4606      	mov	r6, r0
 800b378:	b950      	cbnz	r0, 800b390 <__ssputs_r+0x5c>
 800b37a:	230c      	movs	r3, #12
 800b37c:	f8ca 3000 	str.w	r3, [sl]
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b386:	81a3      	strh	r3, [r4, #12]
 800b388:	f04f 30ff 	mov.w	r0, #4294967295
 800b38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b390:	6921      	ldr	r1, [r4, #16]
 800b392:	464a      	mov	r2, r9
 800b394:	f7ff ff90 	bl	800b2b8 <memcpy>
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b39e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	6126      	str	r6, [r4, #16]
 800b3a6:	6165      	str	r5, [r4, #20]
 800b3a8:	444e      	add	r6, r9
 800b3aa:	eba5 0509 	sub.w	r5, r5, r9
 800b3ae:	6026      	str	r6, [r4, #0]
 800b3b0:	60a5      	str	r5, [r4, #8]
 800b3b2:	463e      	mov	r6, r7
 800b3b4:	42be      	cmp	r6, r7
 800b3b6:	d900      	bls.n	800b3ba <__ssputs_r+0x86>
 800b3b8:	463e      	mov	r6, r7
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	4632      	mov	r2, r6
 800b3be:	4641      	mov	r1, r8
 800b3c0:	f000 faa8 	bl	800b914 <memmove>
 800b3c4:	68a3      	ldr	r3, [r4, #8]
 800b3c6:	1b9b      	subs	r3, r3, r6
 800b3c8:	60a3      	str	r3, [r4, #8]
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	4433      	add	r3, r6
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e7db      	b.n	800b38c <__ssputs_r+0x58>
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	f000 fb97 	bl	800bb08 <_realloc_r>
 800b3da:	4606      	mov	r6, r0
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d1e1      	bne.n	800b3a4 <__ssputs_r+0x70>
 800b3e0:	6921      	ldr	r1, [r4, #16]
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	f000 fab0 	bl	800b948 <_free_r>
 800b3e8:	e7c7      	b.n	800b37a <__ssputs_r+0x46>
	...

0800b3ec <_svfiprintf_r>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	4698      	mov	r8, r3
 800b3f2:	898b      	ldrh	r3, [r1, #12]
 800b3f4:	061b      	lsls	r3, r3, #24
 800b3f6:	b09d      	sub	sp, #116	; 0x74
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	4614      	mov	r4, r2
 800b3fe:	d50e      	bpl.n	800b41e <_svfiprintf_r+0x32>
 800b400:	690b      	ldr	r3, [r1, #16]
 800b402:	b963      	cbnz	r3, 800b41e <_svfiprintf_r+0x32>
 800b404:	2140      	movs	r1, #64	; 0x40
 800b406:	f000 fb0b 	bl	800ba20 <_malloc_r>
 800b40a:	6028      	str	r0, [r5, #0]
 800b40c:	6128      	str	r0, [r5, #16]
 800b40e:	b920      	cbnz	r0, 800b41a <_svfiprintf_r+0x2e>
 800b410:	230c      	movs	r3, #12
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	f04f 30ff 	mov.w	r0, #4294967295
 800b418:	e0d1      	b.n	800b5be <_svfiprintf_r+0x1d2>
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	616b      	str	r3, [r5, #20]
 800b41e:	2300      	movs	r3, #0
 800b420:	9309      	str	r3, [sp, #36]	; 0x24
 800b422:	2320      	movs	r3, #32
 800b424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b428:	f8cd 800c 	str.w	r8, [sp, #12]
 800b42c:	2330      	movs	r3, #48	; 0x30
 800b42e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5d8 <_svfiprintf_r+0x1ec>
 800b432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b436:	f04f 0901 	mov.w	r9, #1
 800b43a:	4623      	mov	r3, r4
 800b43c:	469a      	mov	sl, r3
 800b43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b442:	b10a      	cbz	r2, 800b448 <_svfiprintf_r+0x5c>
 800b444:	2a25      	cmp	r2, #37	; 0x25
 800b446:	d1f9      	bne.n	800b43c <_svfiprintf_r+0x50>
 800b448:	ebba 0b04 	subs.w	fp, sl, r4
 800b44c:	d00b      	beq.n	800b466 <_svfiprintf_r+0x7a>
 800b44e:	465b      	mov	r3, fp
 800b450:	4622      	mov	r2, r4
 800b452:	4629      	mov	r1, r5
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff ff6d 	bl	800b334 <__ssputs_r>
 800b45a:	3001      	adds	r0, #1
 800b45c:	f000 80aa 	beq.w	800b5b4 <_svfiprintf_r+0x1c8>
 800b460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b462:	445a      	add	r2, fp
 800b464:	9209      	str	r2, [sp, #36]	; 0x24
 800b466:	f89a 3000 	ldrb.w	r3, [sl]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 80a2 	beq.w	800b5b4 <_svfiprintf_r+0x1c8>
 800b470:	2300      	movs	r3, #0
 800b472:	f04f 32ff 	mov.w	r2, #4294967295
 800b476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b47a:	f10a 0a01 	add.w	sl, sl, #1
 800b47e:	9304      	str	r3, [sp, #16]
 800b480:	9307      	str	r3, [sp, #28]
 800b482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b486:	931a      	str	r3, [sp, #104]	; 0x68
 800b488:	4654      	mov	r4, sl
 800b48a:	2205      	movs	r2, #5
 800b48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b490:	4851      	ldr	r0, [pc, #324]	; (800b5d8 <_svfiprintf_r+0x1ec>)
 800b492:	f7f4 feb5 	bl	8000200 <memchr>
 800b496:	9a04      	ldr	r2, [sp, #16]
 800b498:	b9d8      	cbnz	r0, 800b4d2 <_svfiprintf_r+0xe6>
 800b49a:	06d0      	lsls	r0, r2, #27
 800b49c:	bf44      	itt	mi
 800b49e:	2320      	movmi	r3, #32
 800b4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4a4:	0711      	lsls	r1, r2, #28
 800b4a6:	bf44      	itt	mi
 800b4a8:	232b      	movmi	r3, #43	; 0x2b
 800b4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b4:	d015      	beq.n	800b4e2 <_svfiprintf_r+0xf6>
 800b4b6:	9a07      	ldr	r2, [sp, #28]
 800b4b8:	4654      	mov	r4, sl
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	f04f 0c0a 	mov.w	ip, #10
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4c6:	3b30      	subs	r3, #48	; 0x30
 800b4c8:	2b09      	cmp	r3, #9
 800b4ca:	d94e      	bls.n	800b56a <_svfiprintf_r+0x17e>
 800b4cc:	b1b0      	cbz	r0, 800b4fc <_svfiprintf_r+0x110>
 800b4ce:	9207      	str	r2, [sp, #28]
 800b4d0:	e014      	b.n	800b4fc <_svfiprintf_r+0x110>
 800b4d2:	eba0 0308 	sub.w	r3, r0, r8
 800b4d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	9304      	str	r3, [sp, #16]
 800b4de:	46a2      	mov	sl, r4
 800b4e0:	e7d2      	b.n	800b488 <_svfiprintf_r+0x9c>
 800b4e2:	9b03      	ldr	r3, [sp, #12]
 800b4e4:	1d19      	adds	r1, r3, #4
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	9103      	str	r1, [sp, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	bfbb      	ittet	lt
 800b4ee:	425b      	neglt	r3, r3
 800b4f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b4f4:	9307      	strge	r3, [sp, #28]
 800b4f6:	9307      	strlt	r3, [sp, #28]
 800b4f8:	bfb8      	it	lt
 800b4fa:	9204      	strlt	r2, [sp, #16]
 800b4fc:	7823      	ldrb	r3, [r4, #0]
 800b4fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b500:	d10c      	bne.n	800b51c <_svfiprintf_r+0x130>
 800b502:	7863      	ldrb	r3, [r4, #1]
 800b504:	2b2a      	cmp	r3, #42	; 0x2a
 800b506:	d135      	bne.n	800b574 <_svfiprintf_r+0x188>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	1d1a      	adds	r2, r3, #4
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	9203      	str	r2, [sp, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	bfb8      	it	lt
 800b514:	f04f 33ff 	movlt.w	r3, #4294967295
 800b518:	3402      	adds	r4, #2
 800b51a:	9305      	str	r3, [sp, #20]
 800b51c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5e8 <_svfiprintf_r+0x1fc>
 800b520:	7821      	ldrb	r1, [r4, #0]
 800b522:	2203      	movs	r2, #3
 800b524:	4650      	mov	r0, sl
 800b526:	f7f4 fe6b 	bl	8000200 <memchr>
 800b52a:	b140      	cbz	r0, 800b53e <_svfiprintf_r+0x152>
 800b52c:	2340      	movs	r3, #64	; 0x40
 800b52e:	eba0 000a 	sub.w	r0, r0, sl
 800b532:	fa03 f000 	lsl.w	r0, r3, r0
 800b536:	9b04      	ldr	r3, [sp, #16]
 800b538:	4303      	orrs	r3, r0
 800b53a:	3401      	adds	r4, #1
 800b53c:	9304      	str	r3, [sp, #16]
 800b53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b542:	4826      	ldr	r0, [pc, #152]	; (800b5dc <_svfiprintf_r+0x1f0>)
 800b544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b548:	2206      	movs	r2, #6
 800b54a:	f7f4 fe59 	bl	8000200 <memchr>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d038      	beq.n	800b5c4 <_svfiprintf_r+0x1d8>
 800b552:	4b23      	ldr	r3, [pc, #140]	; (800b5e0 <_svfiprintf_r+0x1f4>)
 800b554:	bb1b      	cbnz	r3, 800b59e <_svfiprintf_r+0x1b2>
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	3307      	adds	r3, #7
 800b55a:	f023 0307 	bic.w	r3, r3, #7
 800b55e:	3308      	adds	r3, #8
 800b560:	9303      	str	r3, [sp, #12]
 800b562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b564:	4433      	add	r3, r6
 800b566:	9309      	str	r3, [sp, #36]	; 0x24
 800b568:	e767      	b.n	800b43a <_svfiprintf_r+0x4e>
 800b56a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b56e:	460c      	mov	r4, r1
 800b570:	2001      	movs	r0, #1
 800b572:	e7a5      	b.n	800b4c0 <_svfiprintf_r+0xd4>
 800b574:	2300      	movs	r3, #0
 800b576:	3401      	adds	r4, #1
 800b578:	9305      	str	r3, [sp, #20]
 800b57a:	4619      	mov	r1, r3
 800b57c:	f04f 0c0a 	mov.w	ip, #10
 800b580:	4620      	mov	r0, r4
 800b582:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b586:	3a30      	subs	r2, #48	; 0x30
 800b588:	2a09      	cmp	r2, #9
 800b58a:	d903      	bls.n	800b594 <_svfiprintf_r+0x1a8>
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0c5      	beq.n	800b51c <_svfiprintf_r+0x130>
 800b590:	9105      	str	r1, [sp, #20]
 800b592:	e7c3      	b.n	800b51c <_svfiprintf_r+0x130>
 800b594:	fb0c 2101 	mla	r1, ip, r1, r2
 800b598:	4604      	mov	r4, r0
 800b59a:	2301      	movs	r3, #1
 800b59c:	e7f0      	b.n	800b580 <_svfiprintf_r+0x194>
 800b59e:	ab03      	add	r3, sp, #12
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4b0f      	ldr	r3, [pc, #60]	; (800b5e4 <_svfiprintf_r+0x1f8>)
 800b5a6:	a904      	add	r1, sp, #16
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f3af 8000 	nop.w
 800b5ae:	1c42      	adds	r2, r0, #1
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	d1d6      	bne.n	800b562 <_svfiprintf_r+0x176>
 800b5b4:	89ab      	ldrh	r3, [r5, #12]
 800b5b6:	065b      	lsls	r3, r3, #25
 800b5b8:	f53f af2c 	bmi.w	800b414 <_svfiprintf_r+0x28>
 800b5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5be:	b01d      	add	sp, #116	; 0x74
 800b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c4:	ab03      	add	r3, sp, #12
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <_svfiprintf_r+0x1f8>)
 800b5cc:	a904      	add	r1, sp, #16
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	f000 f87a 	bl	800b6c8 <_printf_i>
 800b5d4:	e7eb      	b.n	800b5ae <_svfiprintf_r+0x1c2>
 800b5d6:	bf00      	nop
 800b5d8:	0800bc70 	.word	0x0800bc70
 800b5dc:	0800bc7a 	.word	0x0800bc7a
 800b5e0:	00000000 	.word	0x00000000
 800b5e4:	0800b335 	.word	0x0800b335
 800b5e8:	0800bc76 	.word	0x0800bc76

0800b5ec <_printf_common>:
 800b5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	4699      	mov	r9, r3
 800b5f4:	688a      	ldr	r2, [r1, #8]
 800b5f6:	690b      	ldr	r3, [r1, #16]
 800b5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	bfb8      	it	lt
 800b600:	4613      	movlt	r3, r2
 800b602:	6033      	str	r3, [r6, #0]
 800b604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b608:	4607      	mov	r7, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	b10a      	cbz	r2, 800b612 <_printf_common+0x26>
 800b60e:	3301      	adds	r3, #1
 800b610:	6033      	str	r3, [r6, #0]
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	0699      	lsls	r1, r3, #26
 800b616:	bf42      	ittt	mi
 800b618:	6833      	ldrmi	r3, [r6, #0]
 800b61a:	3302      	addmi	r3, #2
 800b61c:	6033      	strmi	r3, [r6, #0]
 800b61e:	6825      	ldr	r5, [r4, #0]
 800b620:	f015 0506 	ands.w	r5, r5, #6
 800b624:	d106      	bne.n	800b634 <_printf_common+0x48>
 800b626:	f104 0a19 	add.w	sl, r4, #25
 800b62a:	68e3      	ldr	r3, [r4, #12]
 800b62c:	6832      	ldr	r2, [r6, #0]
 800b62e:	1a9b      	subs	r3, r3, r2
 800b630:	42ab      	cmp	r3, r5
 800b632:	dc26      	bgt.n	800b682 <_printf_common+0x96>
 800b634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b638:	1e13      	subs	r3, r2, #0
 800b63a:	6822      	ldr	r2, [r4, #0]
 800b63c:	bf18      	it	ne
 800b63e:	2301      	movne	r3, #1
 800b640:	0692      	lsls	r2, r2, #26
 800b642:	d42b      	bmi.n	800b69c <_printf_common+0xb0>
 800b644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b648:	4649      	mov	r1, r9
 800b64a:	4638      	mov	r0, r7
 800b64c:	47c0      	blx	r8
 800b64e:	3001      	adds	r0, #1
 800b650:	d01e      	beq.n	800b690 <_printf_common+0xa4>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	68e5      	ldr	r5, [r4, #12]
 800b656:	6832      	ldr	r2, [r6, #0]
 800b658:	f003 0306 	and.w	r3, r3, #6
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	bf08      	it	eq
 800b660:	1aad      	subeq	r5, r5, r2
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	6922      	ldr	r2, [r4, #16]
 800b666:	bf0c      	ite	eq
 800b668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b66c:	2500      	movne	r5, #0
 800b66e:	4293      	cmp	r3, r2
 800b670:	bfc4      	itt	gt
 800b672:	1a9b      	subgt	r3, r3, r2
 800b674:	18ed      	addgt	r5, r5, r3
 800b676:	2600      	movs	r6, #0
 800b678:	341a      	adds	r4, #26
 800b67a:	42b5      	cmp	r5, r6
 800b67c:	d11a      	bne.n	800b6b4 <_printf_common+0xc8>
 800b67e:	2000      	movs	r0, #0
 800b680:	e008      	b.n	800b694 <_printf_common+0xa8>
 800b682:	2301      	movs	r3, #1
 800b684:	4652      	mov	r2, sl
 800b686:	4649      	mov	r1, r9
 800b688:	4638      	mov	r0, r7
 800b68a:	47c0      	blx	r8
 800b68c:	3001      	adds	r0, #1
 800b68e:	d103      	bne.n	800b698 <_printf_common+0xac>
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b698:	3501      	adds	r5, #1
 800b69a:	e7c6      	b.n	800b62a <_printf_common+0x3e>
 800b69c:	18e1      	adds	r1, r4, r3
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	2030      	movs	r0, #48	; 0x30
 800b6a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6a6:	4422      	add	r2, r4
 800b6a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b0:	3302      	adds	r3, #2
 800b6b2:	e7c7      	b.n	800b644 <_printf_common+0x58>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	47c0      	blx	r8
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d0e6      	beq.n	800b690 <_printf_common+0xa4>
 800b6c2:	3601      	adds	r6, #1
 800b6c4:	e7d9      	b.n	800b67a <_printf_common+0x8e>
	...

0800b6c8 <_printf_i>:
 800b6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	7e0f      	ldrb	r7, [r1, #24]
 800b6ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6d0:	2f78      	cmp	r7, #120	; 0x78
 800b6d2:	4691      	mov	r9, r2
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	469a      	mov	sl, r3
 800b6da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6de:	d807      	bhi.n	800b6f0 <_printf_i+0x28>
 800b6e0:	2f62      	cmp	r7, #98	; 0x62
 800b6e2:	d80a      	bhi.n	800b6fa <_printf_i+0x32>
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	f000 80d8 	beq.w	800b89a <_printf_i+0x1d2>
 800b6ea:	2f58      	cmp	r7, #88	; 0x58
 800b6ec:	f000 80a3 	beq.w	800b836 <_printf_i+0x16e>
 800b6f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6f8:	e03a      	b.n	800b770 <_printf_i+0xa8>
 800b6fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6fe:	2b15      	cmp	r3, #21
 800b700:	d8f6      	bhi.n	800b6f0 <_printf_i+0x28>
 800b702:	a101      	add	r1, pc, #4	; (adr r1, 800b708 <_printf_i+0x40>)
 800b704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b708:	0800b761 	.word	0x0800b761
 800b70c:	0800b775 	.word	0x0800b775
 800b710:	0800b6f1 	.word	0x0800b6f1
 800b714:	0800b6f1 	.word	0x0800b6f1
 800b718:	0800b6f1 	.word	0x0800b6f1
 800b71c:	0800b6f1 	.word	0x0800b6f1
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b6f1 	.word	0x0800b6f1
 800b728:	0800b6f1 	.word	0x0800b6f1
 800b72c:	0800b6f1 	.word	0x0800b6f1
 800b730:	0800b6f1 	.word	0x0800b6f1
 800b734:	0800b881 	.word	0x0800b881
 800b738:	0800b7a5 	.word	0x0800b7a5
 800b73c:	0800b863 	.word	0x0800b863
 800b740:	0800b6f1 	.word	0x0800b6f1
 800b744:	0800b6f1 	.word	0x0800b6f1
 800b748:	0800b8a3 	.word	0x0800b8a3
 800b74c:	0800b6f1 	.word	0x0800b6f1
 800b750:	0800b7a5 	.word	0x0800b7a5
 800b754:	0800b6f1 	.word	0x0800b6f1
 800b758:	0800b6f1 	.word	0x0800b6f1
 800b75c:	0800b86b 	.word	0x0800b86b
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	1d1a      	adds	r2, r3, #4
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	602a      	str	r2, [r5, #0]
 800b768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b76c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b770:	2301      	movs	r3, #1
 800b772:	e0a3      	b.n	800b8bc <_printf_i+0x1f4>
 800b774:	6820      	ldr	r0, [r4, #0]
 800b776:	6829      	ldr	r1, [r5, #0]
 800b778:	0606      	lsls	r6, r0, #24
 800b77a:	f101 0304 	add.w	r3, r1, #4
 800b77e:	d50a      	bpl.n	800b796 <_printf_i+0xce>
 800b780:	680e      	ldr	r6, [r1, #0]
 800b782:	602b      	str	r3, [r5, #0]
 800b784:	2e00      	cmp	r6, #0
 800b786:	da03      	bge.n	800b790 <_printf_i+0xc8>
 800b788:	232d      	movs	r3, #45	; 0x2d
 800b78a:	4276      	negs	r6, r6
 800b78c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b790:	485e      	ldr	r0, [pc, #376]	; (800b90c <_printf_i+0x244>)
 800b792:	230a      	movs	r3, #10
 800b794:	e019      	b.n	800b7ca <_printf_i+0x102>
 800b796:	680e      	ldr	r6, [r1, #0]
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b79e:	bf18      	it	ne
 800b7a0:	b236      	sxthne	r6, r6
 800b7a2:	e7ef      	b.n	800b784 <_printf_i+0xbc>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	6820      	ldr	r0, [r4, #0]
 800b7a8:	1d19      	adds	r1, r3, #4
 800b7aa:	6029      	str	r1, [r5, #0]
 800b7ac:	0601      	lsls	r1, r0, #24
 800b7ae:	d501      	bpl.n	800b7b4 <_printf_i+0xec>
 800b7b0:	681e      	ldr	r6, [r3, #0]
 800b7b2:	e002      	b.n	800b7ba <_printf_i+0xf2>
 800b7b4:	0646      	lsls	r6, r0, #25
 800b7b6:	d5fb      	bpl.n	800b7b0 <_printf_i+0xe8>
 800b7b8:	881e      	ldrh	r6, [r3, #0]
 800b7ba:	4854      	ldr	r0, [pc, #336]	; (800b90c <_printf_i+0x244>)
 800b7bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b7be:	bf0c      	ite	eq
 800b7c0:	2308      	moveq	r3, #8
 800b7c2:	230a      	movne	r3, #10
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7ca:	6865      	ldr	r5, [r4, #4]
 800b7cc:	60a5      	str	r5, [r4, #8]
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	bfa2      	ittt	ge
 800b7d2:	6821      	ldrge	r1, [r4, #0]
 800b7d4:	f021 0104 	bicge.w	r1, r1, #4
 800b7d8:	6021      	strge	r1, [r4, #0]
 800b7da:	b90e      	cbnz	r6, 800b7e0 <_printf_i+0x118>
 800b7dc:	2d00      	cmp	r5, #0
 800b7de:	d04d      	beq.n	800b87c <_printf_i+0x1b4>
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7e6:	fb03 6711 	mls	r7, r3, r1, r6
 800b7ea:	5dc7      	ldrb	r7, [r0, r7]
 800b7ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7f0:	4637      	mov	r7, r6
 800b7f2:	42bb      	cmp	r3, r7
 800b7f4:	460e      	mov	r6, r1
 800b7f6:	d9f4      	bls.n	800b7e2 <_printf_i+0x11a>
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d10b      	bne.n	800b814 <_printf_i+0x14c>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	07de      	lsls	r6, r3, #31
 800b800:	d508      	bpl.n	800b814 <_printf_i+0x14c>
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	6861      	ldr	r1, [r4, #4]
 800b806:	4299      	cmp	r1, r3
 800b808:	bfde      	ittt	le
 800b80a:	2330      	movle	r3, #48	; 0x30
 800b80c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b810:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b814:	1b52      	subs	r2, r2, r5
 800b816:	6122      	str	r2, [r4, #16]
 800b818:	f8cd a000 	str.w	sl, [sp]
 800b81c:	464b      	mov	r3, r9
 800b81e:	aa03      	add	r2, sp, #12
 800b820:	4621      	mov	r1, r4
 800b822:	4640      	mov	r0, r8
 800b824:	f7ff fee2 	bl	800b5ec <_printf_common>
 800b828:	3001      	adds	r0, #1
 800b82a:	d14c      	bne.n	800b8c6 <_printf_i+0x1fe>
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	b004      	add	sp, #16
 800b832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b836:	4835      	ldr	r0, [pc, #212]	; (800b90c <_printf_i+0x244>)
 800b838:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b83c:	6829      	ldr	r1, [r5, #0]
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	f851 6b04 	ldr.w	r6, [r1], #4
 800b844:	6029      	str	r1, [r5, #0]
 800b846:	061d      	lsls	r5, r3, #24
 800b848:	d514      	bpl.n	800b874 <_printf_i+0x1ac>
 800b84a:	07df      	lsls	r7, r3, #31
 800b84c:	bf44      	itt	mi
 800b84e:	f043 0320 	orrmi.w	r3, r3, #32
 800b852:	6023      	strmi	r3, [r4, #0]
 800b854:	b91e      	cbnz	r6, 800b85e <_printf_i+0x196>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	f023 0320 	bic.w	r3, r3, #32
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	2310      	movs	r3, #16
 800b860:	e7b0      	b.n	800b7c4 <_printf_i+0xfc>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	f043 0320 	orr.w	r3, r3, #32
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	2378      	movs	r3, #120	; 0x78
 800b86c:	4828      	ldr	r0, [pc, #160]	; (800b910 <_printf_i+0x248>)
 800b86e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b872:	e7e3      	b.n	800b83c <_printf_i+0x174>
 800b874:	0659      	lsls	r1, r3, #25
 800b876:	bf48      	it	mi
 800b878:	b2b6      	uxthmi	r6, r6
 800b87a:	e7e6      	b.n	800b84a <_printf_i+0x182>
 800b87c:	4615      	mov	r5, r2
 800b87e:	e7bb      	b.n	800b7f8 <_printf_i+0x130>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	6826      	ldr	r6, [r4, #0]
 800b884:	6961      	ldr	r1, [r4, #20]
 800b886:	1d18      	adds	r0, r3, #4
 800b888:	6028      	str	r0, [r5, #0]
 800b88a:	0635      	lsls	r5, r6, #24
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	d501      	bpl.n	800b894 <_printf_i+0x1cc>
 800b890:	6019      	str	r1, [r3, #0]
 800b892:	e002      	b.n	800b89a <_printf_i+0x1d2>
 800b894:	0670      	lsls	r0, r6, #25
 800b896:	d5fb      	bpl.n	800b890 <_printf_i+0x1c8>
 800b898:	8019      	strh	r1, [r3, #0]
 800b89a:	2300      	movs	r3, #0
 800b89c:	6123      	str	r3, [r4, #16]
 800b89e:	4615      	mov	r5, r2
 800b8a0:	e7ba      	b.n	800b818 <_printf_i+0x150>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	1d1a      	adds	r2, r3, #4
 800b8a6:	602a      	str	r2, [r5, #0]
 800b8a8:	681d      	ldr	r5, [r3, #0]
 800b8aa:	6862      	ldr	r2, [r4, #4]
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7f4 fca6 	bl	8000200 <memchr>
 800b8b4:	b108      	cbz	r0, 800b8ba <_printf_i+0x1f2>
 800b8b6:	1b40      	subs	r0, r0, r5
 800b8b8:	6060      	str	r0, [r4, #4]
 800b8ba:	6863      	ldr	r3, [r4, #4]
 800b8bc:	6123      	str	r3, [r4, #16]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c4:	e7a8      	b.n	800b818 <_printf_i+0x150>
 800b8c6:	6923      	ldr	r3, [r4, #16]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	47d0      	blx	sl
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d0ab      	beq.n	800b82c <_printf_i+0x164>
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	079b      	lsls	r3, r3, #30
 800b8d8:	d413      	bmi.n	800b902 <_printf_i+0x23a>
 800b8da:	68e0      	ldr	r0, [r4, #12]
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	4298      	cmp	r0, r3
 800b8e0:	bfb8      	it	lt
 800b8e2:	4618      	movlt	r0, r3
 800b8e4:	e7a4      	b.n	800b830 <_printf_i+0x168>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4632      	mov	r2, r6
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	47d0      	blx	sl
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d09b      	beq.n	800b82c <_printf_i+0x164>
 800b8f4:	3501      	adds	r5, #1
 800b8f6:	68e3      	ldr	r3, [r4, #12]
 800b8f8:	9903      	ldr	r1, [sp, #12]
 800b8fa:	1a5b      	subs	r3, r3, r1
 800b8fc:	42ab      	cmp	r3, r5
 800b8fe:	dcf2      	bgt.n	800b8e6 <_printf_i+0x21e>
 800b900:	e7eb      	b.n	800b8da <_printf_i+0x212>
 800b902:	2500      	movs	r5, #0
 800b904:	f104 0619 	add.w	r6, r4, #25
 800b908:	e7f5      	b.n	800b8f6 <_printf_i+0x22e>
 800b90a:	bf00      	nop
 800b90c:	0800bc81 	.word	0x0800bc81
 800b910:	0800bc92 	.word	0x0800bc92

0800b914 <memmove>:
 800b914:	4288      	cmp	r0, r1
 800b916:	b510      	push	{r4, lr}
 800b918:	eb01 0402 	add.w	r4, r1, r2
 800b91c:	d902      	bls.n	800b924 <memmove+0x10>
 800b91e:	4284      	cmp	r4, r0
 800b920:	4623      	mov	r3, r4
 800b922:	d807      	bhi.n	800b934 <memmove+0x20>
 800b924:	1e43      	subs	r3, r0, #1
 800b926:	42a1      	cmp	r1, r4
 800b928:	d008      	beq.n	800b93c <memmove+0x28>
 800b92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b932:	e7f8      	b.n	800b926 <memmove+0x12>
 800b934:	4402      	add	r2, r0
 800b936:	4601      	mov	r1, r0
 800b938:	428a      	cmp	r2, r1
 800b93a:	d100      	bne.n	800b93e <memmove+0x2a>
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b946:	e7f7      	b.n	800b938 <memmove+0x24>

0800b948 <_free_r>:
 800b948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b94a:	2900      	cmp	r1, #0
 800b94c:	d044      	beq.n	800b9d8 <_free_r+0x90>
 800b94e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b952:	9001      	str	r0, [sp, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	f1a1 0404 	sub.w	r4, r1, #4
 800b95a:	bfb8      	it	lt
 800b95c:	18e4      	addlt	r4, r4, r3
 800b95e:	f000 f913 	bl	800bb88 <__malloc_lock>
 800b962:	4a1e      	ldr	r2, [pc, #120]	; (800b9dc <_free_r+0x94>)
 800b964:	9801      	ldr	r0, [sp, #4]
 800b966:	6813      	ldr	r3, [r2, #0]
 800b968:	b933      	cbnz	r3, 800b978 <_free_r+0x30>
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	6014      	str	r4, [r2, #0]
 800b96e:	b003      	add	sp, #12
 800b970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b974:	f000 b90e 	b.w	800bb94 <__malloc_unlock>
 800b978:	42a3      	cmp	r3, r4
 800b97a:	d908      	bls.n	800b98e <_free_r+0x46>
 800b97c:	6825      	ldr	r5, [r4, #0]
 800b97e:	1961      	adds	r1, r4, r5
 800b980:	428b      	cmp	r3, r1
 800b982:	bf01      	itttt	eq
 800b984:	6819      	ldreq	r1, [r3, #0]
 800b986:	685b      	ldreq	r3, [r3, #4]
 800b988:	1949      	addeq	r1, r1, r5
 800b98a:	6021      	streq	r1, [r4, #0]
 800b98c:	e7ed      	b.n	800b96a <_free_r+0x22>
 800b98e:	461a      	mov	r2, r3
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	b10b      	cbz	r3, 800b998 <_free_r+0x50>
 800b994:	42a3      	cmp	r3, r4
 800b996:	d9fa      	bls.n	800b98e <_free_r+0x46>
 800b998:	6811      	ldr	r1, [r2, #0]
 800b99a:	1855      	adds	r5, r2, r1
 800b99c:	42a5      	cmp	r5, r4
 800b99e:	d10b      	bne.n	800b9b8 <_free_r+0x70>
 800b9a0:	6824      	ldr	r4, [r4, #0]
 800b9a2:	4421      	add	r1, r4
 800b9a4:	1854      	adds	r4, r2, r1
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	6011      	str	r1, [r2, #0]
 800b9aa:	d1e0      	bne.n	800b96e <_free_r+0x26>
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	6053      	str	r3, [r2, #4]
 800b9b2:	4421      	add	r1, r4
 800b9b4:	6011      	str	r1, [r2, #0]
 800b9b6:	e7da      	b.n	800b96e <_free_r+0x26>
 800b9b8:	d902      	bls.n	800b9c0 <_free_r+0x78>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	e7d6      	b.n	800b96e <_free_r+0x26>
 800b9c0:	6825      	ldr	r5, [r4, #0]
 800b9c2:	1961      	adds	r1, r4, r5
 800b9c4:	428b      	cmp	r3, r1
 800b9c6:	bf04      	itt	eq
 800b9c8:	6819      	ldreq	r1, [r3, #0]
 800b9ca:	685b      	ldreq	r3, [r3, #4]
 800b9cc:	6063      	str	r3, [r4, #4]
 800b9ce:	bf04      	itt	eq
 800b9d0:	1949      	addeq	r1, r1, r5
 800b9d2:	6021      	streq	r1, [r4, #0]
 800b9d4:	6054      	str	r4, [r2, #4]
 800b9d6:	e7ca      	b.n	800b96e <_free_r+0x26>
 800b9d8:	b003      	add	sp, #12
 800b9da:	bd30      	pop	{r4, r5, pc}
 800b9dc:	200007e0 	.word	0x200007e0

0800b9e0 <sbrk_aligned>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	4e0e      	ldr	r6, [pc, #56]	; (800ba1c <sbrk_aligned+0x3c>)
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	6831      	ldr	r1, [r6, #0]
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	b911      	cbnz	r1, 800b9f2 <sbrk_aligned+0x12>
 800b9ec:	f000 f8bc 	bl	800bb68 <_sbrk_r>
 800b9f0:	6030      	str	r0, [r6, #0]
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f000 f8b7 	bl	800bb68 <_sbrk_r>
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	d00a      	beq.n	800ba14 <sbrk_aligned+0x34>
 800b9fe:	1cc4      	adds	r4, r0, #3
 800ba00:	f024 0403 	bic.w	r4, r4, #3
 800ba04:	42a0      	cmp	r0, r4
 800ba06:	d007      	beq.n	800ba18 <sbrk_aligned+0x38>
 800ba08:	1a21      	subs	r1, r4, r0
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	f000 f8ac 	bl	800bb68 <_sbrk_r>
 800ba10:	3001      	adds	r0, #1
 800ba12:	d101      	bne.n	800ba18 <sbrk_aligned+0x38>
 800ba14:	f04f 34ff 	mov.w	r4, #4294967295
 800ba18:	4620      	mov	r0, r4
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
 800ba1c:	200007e4 	.word	0x200007e4

0800ba20 <_malloc_r>:
 800ba20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba24:	1ccd      	adds	r5, r1, #3
 800ba26:	f025 0503 	bic.w	r5, r5, #3
 800ba2a:	3508      	adds	r5, #8
 800ba2c:	2d0c      	cmp	r5, #12
 800ba2e:	bf38      	it	cc
 800ba30:	250c      	movcc	r5, #12
 800ba32:	2d00      	cmp	r5, #0
 800ba34:	4607      	mov	r7, r0
 800ba36:	db01      	blt.n	800ba3c <_malloc_r+0x1c>
 800ba38:	42a9      	cmp	r1, r5
 800ba3a:	d905      	bls.n	800ba48 <_malloc_r+0x28>
 800ba3c:	230c      	movs	r3, #12
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	2600      	movs	r6, #0
 800ba42:	4630      	mov	r0, r6
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	4e2e      	ldr	r6, [pc, #184]	; (800bb04 <_malloc_r+0xe4>)
 800ba4a:	f000 f89d 	bl	800bb88 <__malloc_lock>
 800ba4e:	6833      	ldr	r3, [r6, #0]
 800ba50:	461c      	mov	r4, r3
 800ba52:	bb34      	cbnz	r4, 800baa2 <_malloc_r+0x82>
 800ba54:	4629      	mov	r1, r5
 800ba56:	4638      	mov	r0, r7
 800ba58:	f7ff ffc2 	bl	800b9e0 <sbrk_aligned>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	4604      	mov	r4, r0
 800ba60:	d14d      	bne.n	800bafe <_malloc_r+0xde>
 800ba62:	6834      	ldr	r4, [r6, #0]
 800ba64:	4626      	mov	r6, r4
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	d140      	bne.n	800baec <_malloc_r+0xcc>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4638      	mov	r0, r7
 800ba70:	eb04 0803 	add.w	r8, r4, r3
 800ba74:	f000 f878 	bl	800bb68 <_sbrk_r>
 800ba78:	4580      	cmp	r8, r0
 800ba7a:	d13a      	bne.n	800baf2 <_malloc_r+0xd2>
 800ba7c:	6821      	ldr	r1, [r4, #0]
 800ba7e:	3503      	adds	r5, #3
 800ba80:	1a6d      	subs	r5, r5, r1
 800ba82:	f025 0503 	bic.w	r5, r5, #3
 800ba86:	3508      	adds	r5, #8
 800ba88:	2d0c      	cmp	r5, #12
 800ba8a:	bf38      	it	cc
 800ba8c:	250c      	movcc	r5, #12
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff ffa5 	bl	800b9e0 <sbrk_aligned>
 800ba96:	3001      	adds	r0, #1
 800ba98:	d02b      	beq.n	800baf2 <_malloc_r+0xd2>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	442b      	add	r3, r5
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	e00e      	b.n	800bac0 <_malloc_r+0xa0>
 800baa2:	6822      	ldr	r2, [r4, #0]
 800baa4:	1b52      	subs	r2, r2, r5
 800baa6:	d41e      	bmi.n	800bae6 <_malloc_r+0xc6>
 800baa8:	2a0b      	cmp	r2, #11
 800baaa:	d916      	bls.n	800bada <_malloc_r+0xba>
 800baac:	1961      	adds	r1, r4, r5
 800baae:	42a3      	cmp	r3, r4
 800bab0:	6025      	str	r5, [r4, #0]
 800bab2:	bf18      	it	ne
 800bab4:	6059      	strne	r1, [r3, #4]
 800bab6:	6863      	ldr	r3, [r4, #4]
 800bab8:	bf08      	it	eq
 800baba:	6031      	streq	r1, [r6, #0]
 800babc:	5162      	str	r2, [r4, r5]
 800babe:	604b      	str	r3, [r1, #4]
 800bac0:	4638      	mov	r0, r7
 800bac2:	f104 060b 	add.w	r6, r4, #11
 800bac6:	f000 f865 	bl	800bb94 <__malloc_unlock>
 800baca:	f026 0607 	bic.w	r6, r6, #7
 800bace:	1d23      	adds	r3, r4, #4
 800bad0:	1af2      	subs	r2, r6, r3
 800bad2:	d0b6      	beq.n	800ba42 <_malloc_r+0x22>
 800bad4:	1b9b      	subs	r3, r3, r6
 800bad6:	50a3      	str	r3, [r4, r2]
 800bad8:	e7b3      	b.n	800ba42 <_malloc_r+0x22>
 800bada:	6862      	ldr	r2, [r4, #4]
 800badc:	42a3      	cmp	r3, r4
 800bade:	bf0c      	ite	eq
 800bae0:	6032      	streq	r2, [r6, #0]
 800bae2:	605a      	strne	r2, [r3, #4]
 800bae4:	e7ec      	b.n	800bac0 <_malloc_r+0xa0>
 800bae6:	4623      	mov	r3, r4
 800bae8:	6864      	ldr	r4, [r4, #4]
 800baea:	e7b2      	b.n	800ba52 <_malloc_r+0x32>
 800baec:	4634      	mov	r4, r6
 800baee:	6876      	ldr	r6, [r6, #4]
 800baf0:	e7b9      	b.n	800ba66 <_malloc_r+0x46>
 800baf2:	230c      	movs	r3, #12
 800baf4:	603b      	str	r3, [r7, #0]
 800baf6:	4638      	mov	r0, r7
 800baf8:	f000 f84c 	bl	800bb94 <__malloc_unlock>
 800bafc:	e7a1      	b.n	800ba42 <_malloc_r+0x22>
 800bafe:	6025      	str	r5, [r4, #0]
 800bb00:	e7de      	b.n	800bac0 <_malloc_r+0xa0>
 800bb02:	bf00      	nop
 800bb04:	200007e0 	.word	0x200007e0

0800bb08 <_realloc_r>:
 800bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	4680      	mov	r8, r0
 800bb0e:	4614      	mov	r4, r2
 800bb10:	460e      	mov	r6, r1
 800bb12:	b921      	cbnz	r1, 800bb1e <_realloc_r+0x16>
 800bb14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	4611      	mov	r1, r2
 800bb1a:	f7ff bf81 	b.w	800ba20 <_malloc_r>
 800bb1e:	b92a      	cbnz	r2, 800bb2c <_realloc_r+0x24>
 800bb20:	f7ff ff12 	bl	800b948 <_free_r>
 800bb24:	4625      	mov	r5, r4
 800bb26:	4628      	mov	r0, r5
 800bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2c:	f000 f838 	bl	800bba0 <_malloc_usable_size_r>
 800bb30:	4284      	cmp	r4, r0
 800bb32:	4607      	mov	r7, r0
 800bb34:	d802      	bhi.n	800bb3c <_realloc_r+0x34>
 800bb36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb3a:	d812      	bhi.n	800bb62 <_realloc_r+0x5a>
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7ff ff6e 	bl	800ba20 <_malloc_r>
 800bb44:	4605      	mov	r5, r0
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d0ed      	beq.n	800bb26 <_realloc_r+0x1e>
 800bb4a:	42bc      	cmp	r4, r7
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	4631      	mov	r1, r6
 800bb50:	bf28      	it	cs
 800bb52:	463a      	movcs	r2, r7
 800bb54:	f7ff fbb0 	bl	800b2b8 <memcpy>
 800bb58:	4631      	mov	r1, r6
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	f7ff fef4 	bl	800b948 <_free_r>
 800bb60:	e7e1      	b.n	800bb26 <_realloc_r+0x1e>
 800bb62:	4635      	mov	r5, r6
 800bb64:	e7df      	b.n	800bb26 <_realloc_r+0x1e>
	...

0800bb68 <_sbrk_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d06      	ldr	r5, [pc, #24]	; (800bb84 <_sbrk_r+0x1c>)
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4604      	mov	r4, r0
 800bb70:	4608      	mov	r0, r1
 800bb72:	602b      	str	r3, [r5, #0]
 800bb74:	f7f5 fc3c 	bl	80013f0 <_sbrk>
 800bb78:	1c43      	adds	r3, r0, #1
 800bb7a:	d102      	bne.n	800bb82 <_sbrk_r+0x1a>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	b103      	cbz	r3, 800bb82 <_sbrk_r+0x1a>
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	bd38      	pop	{r3, r4, r5, pc}
 800bb84:	200007e8 	.word	0x200007e8

0800bb88 <__malloc_lock>:
 800bb88:	4801      	ldr	r0, [pc, #4]	; (800bb90 <__malloc_lock+0x8>)
 800bb8a:	f000 b811 	b.w	800bbb0 <__retarget_lock_acquire_recursive>
 800bb8e:	bf00      	nop
 800bb90:	200007ec 	.word	0x200007ec

0800bb94 <__malloc_unlock>:
 800bb94:	4801      	ldr	r0, [pc, #4]	; (800bb9c <__malloc_unlock+0x8>)
 800bb96:	f000 b80c 	b.w	800bbb2 <__retarget_lock_release_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	200007ec 	.word	0x200007ec

0800bba0 <_malloc_usable_size_r>:
 800bba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba4:	1f18      	subs	r0, r3, #4
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bfbc      	itt	lt
 800bbaa:	580b      	ldrlt	r3, [r1, r0]
 800bbac:	18c0      	addlt	r0, r0, r3
 800bbae:	4770      	bx	lr

0800bbb0 <__retarget_lock_acquire_recursive>:
 800bbb0:	4770      	bx	lr

0800bbb2 <__retarget_lock_release_recursive>:
 800bbb2:	4770      	bx	lr

0800bbb4 <_init>:
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb6:	bf00      	nop
 800bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbba:	bc08      	pop	{r3}
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	4770      	bx	lr

0800bbc0 <_fini>:
 800bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc2:	bf00      	nop
 800bbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc6:	bc08      	pop	{r3}
 800bbc8:	469e      	mov	lr, r3
 800bbca:	4770      	bx	lr
