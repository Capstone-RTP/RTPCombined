
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800ccac  0800ccac  0001ccac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd1c  0800cd1c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd1c  0800cd1c  0001cd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd24  0800cd24  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd28  0800cd28  0001cd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800cd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200002d0  0800cff8  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800cff8  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c76  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368a  00000000  00000000  00042f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00046600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  00047f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000517e  00000000  00000000  00049738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7c8  00000000  00000000  0004e8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a770  00000000  00000000  0006d07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001877ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c50  00000000  00000000  00187840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200002d0 	.word	0x200002d0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800cc94 	.word	0x0800cc94

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200002d4 	.word	0x200002d4
 80001f8:	0800cc94 	.word	0x0800cc94

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 f9b2 	bl	800186e <HAL_Init>

  /* USER CODE BEGIN Init */

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 33);
 800050a:	2321      	movs	r3, #33	; 0x21
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2320      	movs	r3, #32
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	2200      	movs	r2, #0
 8000518:	496c      	ldr	r1, [pc, #432]	; (80006cc <main+0x1cc>)
 800051a:	486d      	ldr	r0, [pc, #436]	; (80006d0 <main+0x1d0>)
 800051c:	f000 fdd8 	bl	80010d0 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 8000520:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2340      	movs	r3, #64	; 0x40
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800052e:	2200      	movs	r2, #0
 8000530:	4968      	ldr	r1, [pc, #416]	; (80006d4 <main+0x1d4>)
 8000532:	4869      	ldr	r0, [pc, #420]	; (80006d8 <main+0x1d8>)
 8000534:	f000 fdcc 	bl	80010d0 <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 8000538:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000546:	2208      	movs	r2, #8
 8000548:	4964      	ldr	r1, [pc, #400]	; (80006dc <main+0x1dc>)
 800054a:	4865      	ldr	r0, [pc, #404]	; (80006e0 <main+0x1e0>)
 800054c:	f000 fdc0 	bl	80010d0 <initStepper>
	yMotor.PPS_ZeroDefault = 200;
 8000550:	4b61      	ldr	r3, [pc, #388]	; (80006d8 <main+0x1d8>)
 8000552:	22c8      	movs	r2, #200	; 0xc8
 8000554:	615a      	str	r2, [r3, #20]
	thetaMotor.PPS_ZeroDefault = 200;
 8000556:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <main+0x1d0>)
 8000558:	22c8      	movs	r2, #200	; 0xc8
 800055a:	615a      	str	r2, [r3, #20]
	rMotor.PPS_ZeroDefault = 200;
 800055c:	4b60      	ldr	r3, [pc, #384]	; (80006e0 <main+0x1e0>)
 800055e:	22c8      	movs	r2, #200	; 0xc8
 8000560:	615a      	str	r2, [r3, #20]

	InitSerialFromPC(&hlpuart1,rxBuffer);
 8000562:	4960      	ldr	r1, [pc, #384]	; (80006e4 <main+0x1e4>)
 8000564:	4860      	ldr	r0, [pc, #384]	; (80006e8 <main+0x1e8>)
 8000566:	f000 fd9d 	bl	80010a4 <InitSerialFromPC>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f8c7 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fbad 	bl	8000ccc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000572:	f000 f9f5 	bl	8000960 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000576:	f000 fae3 	bl	8000b40 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 800057a:	f000 f951 	bl	8000820 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 800057e:	f000 f90f 	bl	80007a0 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000582:	f000 fa65 	bl	8000a50 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000586:	f000 fb53 	bl	8000c30 <MX_TIM5_Init>
  MX_TIM1_Init();
 800058a:	f000 f995 	bl	80008b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800058e:	4b4f      	ldr	r3, [pc, #316]	; (80006cc <main+0x1cc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	4b4d      	ldr	r3, [pc, #308]	; (80006cc <main+0x1cc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f042 0201 	orr.w	r2, r2, #1
 800059c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800059e:	4b4d      	ldr	r3, [pc, #308]	; (80006d4 <main+0x1d4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68da      	ldr	r2, [r3, #12]
 80005a4:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <main+0x1d4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f042 0201 	orr.w	r2, r2, #1
 80005ac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80005ae:	4b4b      	ldr	r3, [pc, #300]	; (80006dc <main+0x1dc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68da      	ldr	r2, [r3, #12]
 80005b4:	4b49      	ldr	r3, [pc, #292]	; (80006dc <main+0x1dc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f042 0201 	orr.w	r2, r2, #1
 80005bc:	60da      	str	r2, [r3, #12]

	Dev->I2cHandle = &hi2c2;
 80005be:	4b4b      	ldr	r3, [pc, #300]	; (80006ec <main+0x1ec>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a4b      	ldr	r2, [pc, #300]	; (80006f0 <main+0x1f0>)
 80005c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 80005c8:	4b48      	ldr	r3, [pc, #288]	; (80006ec <main+0x1ec>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2252      	movs	r2, #82	; 0x52
 80005ce:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
 80005d2:	4b46      	ldr	r3, [pc, #280]	; (80006ec <main+0x1ec>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 fe16 	bl	8008208 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 80005dc:	4b43      	ldr	r3, [pc, #268]	; (80006ec <main+0x1ec>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 fb2b 	bl	8007c3c <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 80005e6:	4b41      	ldr	r3, [pc, #260]	; (80006ec <main+0x1ec>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 fc8a 	bl	8007f04 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80005f0:	4b3e      	ldr	r3, [pc, #248]	; (80006ec <main+0x1ec>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	1c7a      	adds	r2, r7, #1
 80005f6:	1cb9      	adds	r1, r7, #2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 fb25 	bl	8008c48 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80005fe:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <main+0x1ec>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1cfa      	adds	r2, r7, #3
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f008 ffac 	bl	8009564 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <main+0x1ec>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fe96 	bl	8008344 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <main+0x1ec>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2201      	movs	r2, #1
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f008 f90b 	bl	800883c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <main+0x1ec>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2201      	movs	r2, #1
 800062c:	2101      	movs	r1, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f008 f904 	bl	800883c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <main+0x1ec>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f641 1299 	movw	r2, #6553	; 0x1999
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f008 f9ac 	bl	800899c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <main+0x1ec>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f008 f9a4 	bl	800899c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <main+0x1ec>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800065c:	4618      	mov	r0, r3
 800065e:	f007 fecf 	bl	8008400 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <main+0x1ec>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2212      	movs	r2, #18
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 feee 	bl	800844c <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <main+0x1ec>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	220e      	movs	r2, #14
 8000676:	2101      	movs	r1, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f007 fee7 	bl	800844c <VL53L0X_SetVcselPulsePeriod>

	//Enable UART Enable IT
	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes
 800067e:	2206      	movs	r2, #6
 8000680:	4918      	ldr	r1, [pc, #96]	; (80006e4 <main+0x1e4>)
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <main+0x1e8>)
 8000684:	f005 fb36 	bl	8005cf4 <HAL_UART_Receive_IT>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 8000688:	481a      	ldr	r0, [pc, #104]	; (80006f4 <main+0x1f4>)
 800068a:	f004 f85b 	bl	8004744 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f001 f961 	bl	8001958 <HAL_Delay>
	//	pressureZero = hx711_value_ave(&loadCell, 5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	timer = HAL_GetTick();
 8000696:	f001 f953 	bl	8001940 <HAL_GetTick>
 800069a:	4603      	mov	r3, r0
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <main+0x1f8>)
 800069e:	6013      	str	r3, [r2, #0]

	//testing stopping function
	GoHome(&thetaMotor);
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <main+0x1d0>)
 80006a2:	f001 f893 	bl	80017cc <GoHome>
	HAL_Delay(10000);
 80006a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80006aa:	f001 f955 	bl	8001958 <HAL_Delay>
	GoHome(&yMotor);
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <main+0x1d8>)
 80006b0:	f001 f88c 	bl	80017cc <GoHome>
	HAL_Delay(10000);
 80006b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80006b8:	f001 f94e 	bl	8001958 <HAL_Delay>
	GoHome(&rMotor);
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <main+0x1e0>)
 80006be:	f001 f885 	bl	80017cc <GoHome>
	HAL_Delay(10000);
 80006c2:	f242 7010 	movw	r0, #10000	; 0x2710
 80006c6:	f001 f947 	bl	8001958 <HAL_Delay>
	//setTarget(&yMotor, 1000, 1);
	//HAL_Delay(3000);
	//setTarget(&yMotor, 500, 0);


	while (1)
 80006ca:	e7fe      	b.n	80006ca <main+0x1ca>
 80006cc:	20000468 	.word	0x20000468
 80006d0:	20000550 	.word	0x20000550
 80006d4:	2000041c 	.word	0x2000041c
 80006d8:	20000588 	.word	0x20000588
 80006dc:	200004b4 	.word	0x200004b4
 80006e0:	200005c0 	.word	0x200005c0
 80006e4:	2000078c 	.word	0x2000078c
 80006e8:	20000340 	.word	0x20000340
 80006ec:	20000000 	.word	0x20000000
 80006f0:	200002ec 	.word	0x200002ec
 80006f4:	20000500 	.word	0x20000500
 80006f8:	20000788 	.word	0x20000788

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b098      	sub	sp, #96	; 0x60
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	2248      	movs	r2, #72	; 0x48
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00c fab2 	bl	800cc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800071e:	2000      	movs	r0, #0
 8000720:	f002 fa76 	bl	8002c10 <HAL_PWREx_ControlVoltageScaling>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800072a:	f000 fcb5 	bl	8001098 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800072e:	2310      	movs	r3, #16
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000732:	2301      	movs	r3, #1
 8000734:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800073a:	2360      	movs	r3, #96	; 0x60
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000742:	2301      	movs	r3, #1
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800074a:	2332      	movs	r3, #50	; 0x32
 800074c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fb0a 	bl	8002d78 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800076a:	f000 fc95 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2104      	movs	r1, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f002 ff72 	bl	8003670 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000792:	f000 fc81 	bl	8001098 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3760      	adds	r7, #96	; 0x60
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_I2C2_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_I2C2_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MX_I2C2_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_I2C2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_I2C2_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_I2C2_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <MX_I2C2_Init+0x74>)
 80007dc:	f001 fc6e 	bl	80020bc <HAL_I2C_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f000 fc57 	bl	8001098 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ee:	f002 f957 	bl	8002aa0 <HAL_I2CEx_ConfigAnalogFilter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fc4e 	bl	8001098 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_I2C2_Init+0x74>)
 8000800:	f002 f999 	bl	8002b36 <HAL_I2CEx_ConfigDigitalFilter>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 fc45 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200002ec 	.word	0x200002ec
 8000818:	40005800 	.word	0x40005800
 800081c:	10c0ecff 	.word	0x10c0ecff

08000820 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <MX_LPUART1_UART_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800086a:	f005 f9f3 	bl	8005c54 <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 fc10 	bl	8001098 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800087c:	f007 f8ff 	bl	8007a7e <HAL_UARTEx_SetTxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 fc07 	bl	8001098 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800088e:	f007 f934 	bl	8007afa <HAL_UARTEx_SetRxFifoThreshold>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 fbfe 	bl	8001098 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800089e:	f007 f8b5 	bl	8007a0c <HAL_UARTEx_DisableFifoMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 fbf6 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000340 	.word	0x20000340
 80008b4:	40008000 	.word	0x40008000

080008b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_TIM1_Init+0xa0>)
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <MX_TIM1_Init+0xa4>)
 80008da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM1_Init+0xa0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_TIM1_Init+0xa0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_TIM1_Init+0xa0>)
 80008ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM1_Init+0xa0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_TIM1_Init+0xa0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_TIM1_Init+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000902:	4815      	ldr	r0, [pc, #84]	; (8000958 <MX_TIM1_Init+0xa0>)
 8000904:	f003 fec6 	bl	8004694 <HAL_TIM_Base_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800090e:	f000 fbc3 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	480e      	ldr	r0, [pc, #56]	; (8000958 <MX_TIM1_Init+0xa0>)
 8000920:	f004 fbd0 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800092a:	f000 fbb5 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_TIM1_Init+0xa0>)
 8000940:	f005 f8e2 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800094a:	f000 fba5 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200003d0 	.word	0x200003d0
 800095c:	40012c00 	.word	0x40012c00

08000960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000992:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <MX_TIM2_Init+0xec>)
 8000994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000998:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_TIM2_Init+0xec>)
 800099c:	2263      	movs	r2, #99	; 0x63
 800099e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_TIM2_Init+0xec>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_TIM2_Init+0xec>)
 80009a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80009ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_TIM2_Init+0xec>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <MX_TIM2_Init+0xec>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ba:	4824      	ldr	r0, [pc, #144]	; (8000a4c <MX_TIM2_Init+0xec>)
 80009bc:	f003 fe6a 	bl	8004694 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f000 fb67 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d4:	4619      	mov	r1, r3
 80009d6:	481d      	ldr	r0, [pc, #116]	; (8000a4c <MX_TIM2_Init+0xec>)
 80009d8:	f004 fb74 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009e2:	f000 fb59 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e6:	4819      	ldr	r0, [pc, #100]	; (8000a4c <MX_TIM2_Init+0xec>)
 80009e8:	f003 ff3b 	bl	8004862 <HAL_TIM_PWM_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009f2:	f000 fb51 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_TIM2_Init+0xec>)
 8000a06:	f005 f87f 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a10:	f000 fb42 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000a18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM2_Init+0xec>)
 8000a2e:	f004 fa35 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a38:	f000 fb2e 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM2_Init+0xec>)
 8000a3e:	f000 fdc5 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8000a42:	bf00      	nop
 8000a44:	3738      	adds	r7, #56	; 0x38
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000041c 	.word	0x2000041c

08000a50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <MX_TIM3_Init+0xec>)
 8000a86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000a8a:	2263      	movs	r2, #99	; 0x63
 8000a8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000a96:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000a9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa8:	4823      	ldr	r0, [pc, #140]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000aaa:	f003 fdf3 	bl	8004694 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ab4:	f000 faf0 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481c      	ldr	r0, [pc, #112]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000ac6:	f004 fafd 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ad0:	f000 fae2 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ad4:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000ad6:	f003 fec4 	bl	8004862 <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ae0:	f000 fada 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000af4:	f005 f808 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000afe:	f000 facb 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000b06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000b1c:	f004 f9be 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b26:	f000 fab7 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM3_Init+0xe8>)
 8000b2c:	f000 fd4e 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	; 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000468 	.word	0x20000468
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000b74:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <MX_TIM4_Init+0xec>)
 8000b76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000b78:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000b7a:	2263      	movs	r2, #99	; 0x63
 8000b7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000b86:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b98:	4823      	ldr	r0, [pc, #140]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000b9a:	f003 fd7b 	bl	8004694 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ba4:	f000 fa78 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481c      	ldr	r0, [pc, #112]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000bb6:	f004 fa85 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000bc0:	f000 fa6a 	bl	8001098 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000bc6:	f003 fe4c 	bl	8004862 <HAL_TIM_PWM_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000bd0:	f000 fa62 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000be4:	f004 ff90 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000bee:	f000 fa53 	bl	8001098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf2:	2360      	movs	r3, #96	; 0x60
 8000bf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000bf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	2208      	movs	r2, #8
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000c0c:	f004 f946 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000c16:	f000 fa3f 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM4_Init+0xe8>)
 8000c1c:	f000 fcd6 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8000c20:	bf00      	nop
 8000c22:	3738      	adds	r7, #56	; 0x38
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200004b4 	.word	0x200004b4
 8000c2c:	40000800 	.word	0x40000800

08000c30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <MX_TIM5_Init+0x98>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c56:	2263      	movs	r2, #99	; 0x63
 8000c58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c62:	f04f 32ff 	mov.w	r2, #4294967295
 8000c66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c76:	f003 fd0d 	bl	8004694 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c80:	f000 fa0a 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000c92:	f004 fa17 	bl	80050c4 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000c9c:	f000 f9fc 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM5_Init+0x94>)
 8000cae:	f004 ff2b 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000cb8:	f000 f9ee 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000500 	.word	0x20000500
 8000cc8:	40000c00 	.word	0x40000c00

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a66      	ldr	r2, [pc, #408]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b64      	ldr	r3, [pc, #400]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfa:	4b61      	ldr	r3, [pc, #388]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a60      	ldr	r2, [pc, #384]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b55      	ldr	r3, [pc, #340]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a54      	ldr	r2, [pc, #336]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a4e      	ldr	r2, [pc, #312]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b4c      	ldr	r3, [pc, #304]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5a:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000d72:	f001 fff1 	bl	8002d58 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a41      	ldr	r2, [pc, #260]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <MX_GPIO_Init+0x1b4>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	21e0      	movs	r1, #224	; 0xe0
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f001 f961 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, state3LED_Pin|state2LED_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000da0:	4838      	ldr	r0, [pc, #224]	; (8000e84 <MX_GPIO_Init+0x1b8>)
 8000da2:	f001 f95b 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, loadCLK_Pin|tofXSHUT_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000dac:	4836      	ldr	r0, [pc, #216]	; (8000e88 <MX_GPIO_Init+0x1bc>)
 8000dae:	f001 f955 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	4835      	ldr	r0, [pc, #212]	; (8000e8c <MX_GPIO_Init+0x1c0>)
 8000db8:	f001 f950 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000dbc:	23e0      	movs	r3, #224	; 0xe0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f000 ffaf 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : thLim_Pin yLim_Pin rLim_Pin */
  GPIO_InitStruct.Pin = thLim_Pin|yLim_Pin|rLim_Pin;
 8000dda:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4827      	ldr	r0, [pc, #156]	; (8000e90 <MX_GPIO_Init+0x1c4>)
 8000df2:	f000 ffa1 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : state3LED_Pin state2LED_Pin */
  GPIO_InitStruct.Pin = state3LED_Pin|state2LED_Pin;
 8000df6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481d      	ldr	r0, [pc, #116]	; (8000e84 <MX_GPIO_Init+0x1b8>)
 8000e10:	f000 ff92 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : loadCLK_Pin tofXSHUT_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin|tofXSHUT_Pin;
 8000e14:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4816      	ldr	r0, [pc, #88]	; (8000e88 <MX_GPIO_Init+0x1bc>)
 8000e2e:	f000 ff83 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	4810      	ldr	r0, [pc, #64]	; (8000e88 <MX_GPIO_Init+0x1bc>)
 8000e48:	f000 ff76 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : state1LED_Pin */
  GPIO_InitStruct.Pin = state1LED_Pin;
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(state1LED_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <MX_GPIO_Init+0x1c0>)
 8000e64:	f000 ff68 	bl	8001d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2028      	movs	r0, #40	; 0x28
 8000e6e:	f000 fe72 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e72:	2028      	movs	r0, #40	; 0x28
 8000e74:	f000 fe8b 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	48000c00 	.word	0x48000c00
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48001000 	.word	0x48001000

08000e94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e98:	b088      	sub	sp, #32
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	4a5c      	ldr	r2, [pc, #368]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d13b      	bne.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10d      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 8000eb2:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000eb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000eb8:	1c51      	adds	r1, r2, #1
 8000eba:	6139      	str	r1, [r7, #16]
 8000ebc:	f143 0300 	adc.w	r3, r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ec4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000ec8:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8000ecc:	e012      	b.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000ece:	4b52      	ldr	r3, [pc, #328]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 8000eda:	4b4f      	ldr	r3, [pc, #316]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ee0:	1e51      	subs	r1, r2, #1
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000eec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000ef0:	e9c3 1208 	strd	r1, r2, [r3, #32]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000ef4:	4b48      	ldr	r3, [pc, #288]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ef6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000efc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000f00:	4299      	cmp	r1, r3
 8000f02:	bf08      	it	eq
 8000f04:	4290      	cmpeq	r0, r2
 8000f06:	d10a      	bne.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4842      	ldr	r0, [pc, #264]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f0c:	f003 fe10 	bl	8004b30 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000f10:	4840      	ldr	r0, [pc, #256]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f12:	f003 fc7f 	bl	8004814 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4a3e      	ldr	r2, [pc, #248]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d138      	bne.n	8000f98 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10d      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 8000f32:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f38:	1c51      	adds	r1, r2, #1
 8000f3a:	6039      	str	r1, [r7, #0]
 8000f3c:	f143 0300 	adc.w	r3, r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b37      	ldr	r3, [pc, #220]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f48:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8000f4c:	e00f      	b.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d109      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f60:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000f64:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f6a:	e9c3 ab08 	strd	sl, fp, [r3, #32]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f70:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	bf08      	it	eq
 8000f7e:	4290      	cmpeq	r0, r2
 8000f80:	d10a      	bne.n	8000f98 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4825      	ldr	r0, [pc, #148]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f86:	f003 fdd3 	bl	8004b30 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000f8a:	4824      	ldr	r0, [pc, #144]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f8c:	f003 fc42 	bl	8004814 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f92:	2203      	movs	r2, #3
 8000f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	4a22      	ldr	r2, [pc, #136]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d134      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x176>
		if(rMotor.Status == RunningForward){
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10a      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x12e>
			rMotor.CurrentPosition++;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fb2:	f112 0801 	adds.w	r8, r2, #1
 8000fb6:	f143 0900 	adc.w	r9, r3, #0
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fbc:	e9c3 8908 	strd	r8, r9, [r3, #32]
 8000fc0:	e00e      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if (rMotor.Status == RunningBackward){
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d108      	bne.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition--;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fd4:	1e54      	subs	r4, r2, #1
 8000fd6:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fdc:	e9c3 4508 	strd	r4, r5, [r3, #32]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fe2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fe8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000fec:	4299      	cmp	r1, r3
 8000fee:	bf08      	it	eq
 8000ff0:	4290      	cmpeq	r0, r2
 8000ff2:	d10a      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ff8:	f003 fd9a 	bl	8004b30 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ffe:	f003 fc09 	bl	8004814 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001004:	2203      	movs	r2, #3
 8001006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001014:	20000468 	.word	0x20000468
 8001018:	20000550 	.word	0x20000550
 800101c:	2000041c 	.word	0x2000041c
 8001020:	20000588 	.word	0x20000588
 8001024:	200004b4 	.word	0x200004b4
 8001028:	200005c0 	.word	0x200005c0

0800102c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	//set flag
	uartRecievedFlag = 1;
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <HAL_UART_RxCpltCallback+0x1c>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000079c 	.word	0x2000079c

0800104c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]

	//check which limit switch was hit
	if(GPIO_Pin == rLim_Pin){
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800105c:	d103      	bne.n	8001066 <HAL_GPIO_EXTI_Callback+0x1a>
		zeroStepper(&rMotor);
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_GPIO_EXTI_Callback+0x40>)
 8001060:	f000 f924 	bl	80012ac <zeroStepper>
	else if(GPIO_Pin == yLim_Pin){
		zeroStepper(&yMotor);
	}


}
 8001064:	e00e      	b.n	8001084 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == thLim_Pin){
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800106c:	d103      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x2a>
		zeroStepper(&thetaMotor);
 800106e:	4808      	ldr	r0, [pc, #32]	; (8001090 <HAL_GPIO_EXTI_Callback+0x44>)
 8001070:	f000 f91c 	bl	80012ac <zeroStepper>
}
 8001074:	e006      	b.n	8001084 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == yLim_Pin){
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800107c:	d102      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x38>
		zeroStepper(&yMotor);
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_GPIO_EXTI_Callback+0x48>)
 8001080:	f000 f914 	bl	80012ac <zeroStepper>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200005c0 	.word	0x200005c0
 8001090:	20000550 	.word	0x20000550
 8001094:	20000588 	.word	0x20000588

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <InitSerialFromPC>:
uint8_t newLine = '\n';
uint8_t carriageReturn = '\r';

UART_HandleTypeDef* huart;

void InitSerialFromPC(UART_HandleTypeDef* huartHandler, uint8_t* rxBuffer){
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <InitSerialFromPC+0x24>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <InitSerialFromPC+0x28>)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6013      	str	r3, [r2, #0]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200007a4 	.word	0x200007a4
 80010cc:	200007a0 	.word	0x200007a0

080010d0 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8b3a      	ldrh	r2, [r7, #24]
 80010f4:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition =0;
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	//Set status
	stepper->Status = Stopped;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2203      	movs	r2, #3
 800111c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	4619      	mov	r1, r3
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 f84a 	bl	80011c0 <setSpeed>
	//return stepper structure pointer
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 8001134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8001142:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00c      	beq.n	8001164 <setTarget+0x30>
		stepper->TargetPosition+= increment;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001154:	eb10 0802 	adds.w	r8, r0, r2
 8001158:	eb41 0903 	adc.w	r9, r1, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 8001162:	e00a      	b.n	800117a <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800116a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116e:	1a84      	subs	r4, r0, r2
 8001170:	eb61 0503 	sbc.w	r5, r1, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped && stepper->TargetPosition != stepper->CurrentPosition){
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b03      	cmp	r3, #3
 800118a:	d111      	bne.n	80011b0 <setTarget+0x7c>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001198:	4299      	cmp	r1, r3
 800119a:	bf08      	it	eq
 800119c:	4290      	cmpeq	r0, r2
 800119e:	d007      	beq.n	80011b0 <setTarget+0x7c>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f003 fbba 	bl	8004924 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f000 f827 	bl	8001204 <setDirection>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080011c0 <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	005a      	lsls	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4909      	ldr	r1, [pc, #36]	; (8001200 <setSpeed+0x40>)
 80011dc:	fbb1 f2f2 	udiv	r2, r1, r2
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <setSpeed+0x40>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3a01      	subs	r2, #1
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	000f4240 	.word	0x000f4240

08001204 <setDirection>:

//set direction
void setDirection(stepper *stepper){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
 8001218:	4290      	cmp	r0, r2
 800121a:	eb71 0303 	sbcs.w	r3, r1, r3
 800121e:	d20c      	bcs.n	800123a <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6898      	ldr	r0, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	899b      	ldrh	r3, [r3, #12]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f000 ff16 	bl	800205c <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
	else if(stepper->CurrentPosition < stepper->TargetPosition){
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 8001238:	e015      	b.n	8001266 <setDirection+0x62>
	else if(stepper->CurrentPosition < stepper->TargetPosition){
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001246:	4290      	cmp	r0, r2
 8001248:	eb71 0303 	sbcs.w	r3, r1, r3
 800124c:	d20b      	bcs.n	8001266 <setDirection+0x62>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6898      	ldr	r0, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	899b      	ldrh	r3, [r3, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	f000 feff 	bl	800205c <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <stopStepper>:

void stopStepper(stepper *stepper){
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->Timer, stepper->Channel);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f003 fc55 	bl	8004b30 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(stepper->Timer);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fac2 	bl	8004814 <HAL_TIM_Base_Stop>
	stepper->Status = Stopped;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2203      	movs	r2, #3
 8001294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	stepper->TargetPosition = stepper->CurrentPosition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <zeroStepper>:

void zeroStepper(stepper *stepper){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	stopStepper(stepper);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffda 	bl	800126e <stopStepper>
	stepper->CurrentPosition = 0;
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition = 0;
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_MspInit+0x44>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_MspInit+0x44>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6613      	str	r3, [r2, #96]	; 0x60
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_MspInit+0x44>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	4a08      	ldr	r2, [pc, #32]	; (8001324 <HAL_MspInit+0x44>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6593      	str	r3, [r2, #88]	; 0x58
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0b0      	sub	sp, #192	; 0xc0
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2298      	movs	r2, #152	; 0x98
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f00b fc93 	bl	800cc74 <memset>
  if(hi2c->Instance==I2C2)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_I2C_MspInit+0xb0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d13a      	bne.n	80013ce <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800135c:	2300      	movs	r3, #0
 800135e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fc41 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001370:	f7ff fe92 	bl	8001098 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_I2C_MspInit+0xb4>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a18      	ldr	r2, [pc, #96]	; (80013dc <HAL_I2C_MspInit+0xb4>)
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_I2C_MspInit+0xb4>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138c:	2303      	movs	r3, #3
 800138e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013a4:	2304      	movs	r3, #4
 80013a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <HAL_I2C_MspInit+0xb8>)
 80013b2:	f000 fcc1 	bl	8001d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_I2C_MspInit+0xb4>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_I2C_MspInit+0xb4>)
 80013bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_I2C_MspInit+0xb4>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	37c0      	adds	r7, #192	; 0xc0
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40005800 	.word	0x40005800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48001400 	.word	0x48001400

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0b0      	sub	sp, #192	; 0xc0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2298      	movs	r2, #152	; 0x98
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00b fc35 	bl	800cc74 <memset>
  if(huart->Instance==LPUART1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <HAL_UART_MspInit+0xc4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d145      	bne.n	80014a0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001414:	2320      	movs	r3, #32
 8001416:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fbe3 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800142c:	f7ff fe34 	bl	8001098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_UART_MspInit+0xc8>)
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_UART_MspInit+0xc8>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_UART_MspInit+0xc8>)
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_UART_MspInit+0xc8>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_UART_MspInit+0xc8>)
 800144e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001452:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_UART_MspInit+0xc8>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001460:	f001 fc7a 	bl	8002d58 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001464:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800147e:	2308      	movs	r3, #8
 8001480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001484:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001488:	4619      	mov	r1, r3
 800148a:	4809      	ldr	r0, [pc, #36]	; (80014b0 <HAL_UART_MspInit+0xcc>)
 800148c:	f000 fc54 	bl	8001d38 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2046      	movs	r0, #70	; 0x46
 8001496:	f000 fb5e 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800149a:	2046      	movs	r0, #70	; 0x46
 800149c:	f000 fb77 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	37c0      	adds	r7, #192	; 0xc0
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40008000 	.word	0x40008000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48001800 	.word	0x48001800

080014b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3d      	ldr	r2, [pc, #244]	; (80015b8 <HAL_TIM_Base_MspInit+0x104>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d114      	bne.n	80014f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ca:	4a3c      	ldr	r2, [pc, #240]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 80014cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d0:	6613      	str	r3, [r2, #96]	; 0x60
 80014d2:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2018      	movs	r0, #24
 80014e4:	f000 fb37 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014e8:	2018      	movs	r0, #24
 80014ea:	f000 fb50 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80014ee:	e05e      	b.n	80015ae <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f8:	d114      	bne.n	8001524 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6593      	str	r3, [r2, #88]	; 0x58
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	201c      	movs	r0, #28
 8001518:	f000 fb1d 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800151c:	201c      	movs	r0, #28
 800151e:	f000 fb36 	bl	8001b8e <HAL_NVIC_EnableIRQ>
}
 8001522:	e044      	b.n	80015ae <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <HAL_TIM_Base_MspInit+0x10c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d114      	bne.n	8001558 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	201d      	movs	r0, #29
 800154c:	f000 fb03 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001550:	201d      	movs	r0, #29
 8001552:	f000 fb1c 	bl	8001b8e <HAL_NVIC_EnableIRQ>
}
 8001556:	e02a      	b.n	80015ae <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_TIM_Base_MspInit+0x110>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d114      	bne.n	800158c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	201e      	movs	r0, #30
 8001580:	f000 fae9 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001584:	201e      	movs	r0, #30
 8001586:	f000 fb02 	bl	8001b8e <HAL_NVIC_EnableIRQ>
}
 800158a:	e010      	b.n	80015ae <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <HAL_TIM_Base_MspInit+0x114>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10b      	bne.n	80015ae <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_TIM_Base_MspInit+0x108>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40012c00 	.word	0x40012c00
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40000c00 	.word	0x40000c00

080015cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d11d      	bne.n	800162a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a32      	ldr	r2, [pc, #200]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001616:	2301      	movs	r3, #1
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f000 fb88 	bl	8001d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001628:	e043      	b.n	80016b2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <HAL_TIM_MspPostInit+0xf4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d11c      	bne.n	800166e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800164c:	2308      	movs	r3, #8
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165c:	2302      	movs	r3, #2
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4817      	ldr	r0, [pc, #92]	; (80016c4 <HAL_TIM_MspPostInit+0xf8>)
 8001668:	f000 fb66 	bl	8001d38 <HAL_GPIO_Init>
}
 800166c:	e021      	b.n	80016b2 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <HAL_TIM_MspPostInit+0xfc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d11c      	bne.n	80016b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001678:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_TIM_MspPostInit+0xf0>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016a2:	2302      	movs	r3, #2
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <HAL_TIM_MspPostInit+0x100>)
 80016ae:	f000 fb43 	bl	8001d38 <HAL_GPIO_Init>
}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40000400 	.word	0x40000400
 80016c4:	48001000 	.word	0x48001000
 80016c8:	40000800 	.word	0x40000800
 80016cc:	48000c00 	.word	0x48000c00

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 f8fc 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800172a:	f003 fa97 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200003d0 	.word	0x200003d0

08001738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM2_IRQHandler+0x10>)
 800173e:	f003 fa8d 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000041c 	.word	0x2000041c

0800174c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <TIM3_IRQHandler+0x10>)
 8001752:	f003 fa83 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000468 	.word	0x20000468

08001760 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM4_IRQHandler+0x10>)
 8001766:	f003 fa79 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200004b4 	.word	0x200004b4

08001774 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(thLim_Pin);
 8001778:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800177c:	f000 fc86 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(yLim_Pin);
 8001780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001784:	f000 fc82 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(rLim_Pin);
 8001788:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800178c:	f000 fc7e 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <LPUART1_IRQHandler+0x10>)
 800179a:	f004 fb01 	bl	8005da0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000340 	.word	0x20000340

080017a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <GoHome>:
 *      Author: kylei
 */

#include "zeroing.h"

void GoHome(stepper* motor){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
	//stop any current motion
	stopStepper(motor);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fd4a 	bl	800126e <stopStepper>
	//make stepper think its far from zero
	motor->CurrentPosition = 0xFFFF;
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	motor->TargetPosition = 0xFFFF;
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	/*make motor go backward "forever"
	Note: make sure there is some mechanism in main()
	to stop otherwise this will go until it breaks something*/
	setSpeed(motor,motor->PPS_ZeroDefault);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fcdf 	bl	80011c0 <setSpeed>
	setTarget(motor, 0xFFFE,0);
 8001802:	2300      	movs	r3, #0
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fc90 	bl	8001134 <setTarget>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001854 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001820:	f7ff ffc2 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <LoopForever+0x6>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <LoopForever+0xe>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <LoopForever+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184a:	f00b f9e1 	bl	800cc10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184e:	f7fe fe57 	bl	8000500 <main>

08001852 <LoopForever>:

LoopForever:
    b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001854:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001860:	0800cd2c 	.word	0x0800cd2c
  ldr r2, =_sbss
 8001864:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001868:	200007ec 	.word	0x200007ec

0800186c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC1_2_IRQHandler>

0800186e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f961 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187e:	200f      	movs	r0, #15
 8001880:	f000 f80e 	bl	80018a0 <HAL_InitTick>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	e001      	b.n	8001894 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001890:	f7ff fd26 	bl	80012e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001894:	79fb      	ldrb	r3, [r7, #7]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_InitTick+0x6c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d023      	beq.n	80018fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_InitTick+0x70>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_InitTick+0x6c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f96d 	bl	8001baa <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d809      	bhi.n	80018f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f937 	bl	8001b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_InitTick+0x74>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e007      	b.n	8001900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e004      	b.n	8001900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e001      	b.n	8001900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c
 8001910:	20000004 	.word	0x20000004
 8001914:	20000008 	.word	0x20000008

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	2000000c 	.word	0x2000000c
 800193c:	200007a8 	.word	0x200007a8

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200007a8 	.word	0x200007a8

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff ffee 	bl	8001940 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_Delay+0x44>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffde 	bl	8001940 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000000c 	.word	0x2000000c

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff29 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff3e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff8e 	bl	8001a94 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5d 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff31 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e040      	b.n	8001c6e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020e 	bic.w	r2, r2, #14
 8001bfa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c0a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f003 021c 	and.w	r2, r3, #28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d005      	beq.n	8001c9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e047      	b.n	8001d2e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020e 	bic.w	r2, r2, #14
 8001cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f003 021c 	and.w	r2, r3, #28
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cea:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00c      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d02:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d0c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
    }
  }
  return status;
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e166      	b.n	8002016 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8158 	beq.w	8002010 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d005      	beq.n	8001d78 <HAL_GPIO_Init+0x40>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d130      	bne.n	8001dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dae:	2201      	movs	r2, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 0201 	and.w	r2, r3, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d017      	beq.n	8001e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d123      	bne.n	8001e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	6939      	ldr	r1, [r7, #16]
 8001e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0203 	and.w	r2, r3, #3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80b2 	beq.w	8002010 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eac:	4b61      	ldr	r3, [pc, #388]	; (8002034 <HAL_GPIO_Init+0x2fc>)
 8001eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb0:	4a60      	ldr	r2, [pc, #384]	; (8002034 <HAL_GPIO_Init+0x2fc>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb8:	4b5e      	ldr	r3, [pc, #376]	; (8002034 <HAL_GPIO_Init+0x2fc>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec4:	4a5c      	ldr	r2, [pc, #368]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eee:	d02b      	beq.n	8001f48 <HAL_GPIO_Init+0x210>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_GPIO_Init+0x304>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d025      	beq.n	8001f44 <HAL_GPIO_Init+0x20c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a51      	ldr	r2, [pc, #324]	; (8002040 <HAL_GPIO_Init+0x308>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d01f      	beq.n	8001f40 <HAL_GPIO_Init+0x208>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a50      	ldr	r2, [pc, #320]	; (8002044 <HAL_GPIO_Init+0x30c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d019      	beq.n	8001f3c <HAL_GPIO_Init+0x204>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_GPIO_Init+0x200>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a4e      	ldr	r2, [pc, #312]	; (800204c <HAL_GPIO_Init+0x314>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00d      	beq.n	8001f34 <HAL_GPIO_Init+0x1fc>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_GPIO_Init+0x318>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <HAL_GPIO_Init+0x1f8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x31c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_GPIO_Init+0x1f4>
 8001f28:	2307      	movs	r3, #7
 8001f2a:	e00e      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	e00c      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f30:	2306      	movs	r3, #6
 8001f32:	e00a      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f34:	2305      	movs	r3, #5
 8001f36:	e008      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e006      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e004      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4093      	lsls	r3, r2
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f5a:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f68:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f8c:	4a32      	ldr	r2, [pc, #200]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f92:	4b31      	ldr	r3, [pc, #196]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb6:	4a28      	ldr	r2, [pc, #160]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_GPIO_Init+0x320>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	f47f ae91 	bne.w	8001d48 <HAL_GPIO_Init+0x10>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000
 8002038:	40010000 	.word	0x40010000
 800203c:	48000400 	.word	0x48000400
 8002040:	48000800 	.word	0x48000800
 8002044:	48000c00 	.word	0x48000c00
 8002048:	48001000 	.word	0x48001000
 800204c:	48001400 	.word	0x48001400
 8002050:	48001800 	.word	0x48001800
 8002054:	48001c00 	.word	0x48001c00
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
 8002068:	4613      	mov	r3, r2
 800206a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002078:	e002      	b.n	8002080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe ffce 	bl	800104c <HAL_GPIO_EXTI_Callback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e081      	b.n	80021d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f920 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2224      	movs	r2, #36	; 0x24
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800210c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800211c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e006      	b.n	8002144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d104      	bne.n	8002156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69d9      	ldr	r1, [r3, #28]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	817b      	strh	r3, [r7, #10]
 80021ec:	4613      	mov	r3, r2
 80021ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	f040 80da 	bne.w	80023b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_I2C_Master_Transmit+0x30>
 8002208:	2302      	movs	r3, #2
 800220a:	e0d3      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1d8>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002214:	f7ff fb94 	bl	8001940 <HAL_GetTick>
 8002218:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2319      	movs	r3, #25
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f9e6 	bl	80025f8 <I2C_WaitOnFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0be      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2221      	movs	r2, #33	; 0x21
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2210      	movs	r2, #16
 8002242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	893a      	ldrh	r2, [r7, #8]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2bff      	cmp	r3, #255	; 0xff
 8002266:	d90e      	bls.n	8002286 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	b2da      	uxtb	r2, r3
 8002274:	8979      	ldrh	r1, [r7, #10]
 8002276:	4b51      	ldr	r3, [pc, #324]	; (80023bc <HAL_I2C_Master_Transmit+0x1e0>)
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fbdc 	bl	8002a3c <I2C_TransferConfig>
 8002284:	e06c      	b.n	8002360 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	b2da      	uxtb	r2, r3
 8002296:	8979      	ldrh	r1, [r7, #10]
 8002298:	4b48      	ldr	r3, [pc, #288]	; (80023bc <HAL_I2C_Master_Transmit+0x1e0>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fbcb 	bl	8002a3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022a6:	e05b      	b.n	8002360 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	6a39      	ldr	r1, [r7, #32]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f9e3 	bl	8002678 <I2C_WaitOnTXISFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e07b      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d034      	beq.n	8002360 <HAL_I2C_Master_Transmit+0x184>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d130      	bne.n	8002360 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	2200      	movs	r2, #0
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f975 	bl	80025f8 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e04d      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	2bff      	cmp	r3, #255	; 0xff
 8002320:	d90e      	bls.n	8002340 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	22ff      	movs	r2, #255	; 0xff
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	b2da      	uxtb	r2, r3
 800232e:	8979      	ldrh	r1, [r7, #10]
 8002330:	2300      	movs	r3, #0
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fb7f 	bl	8002a3c <I2C_TransferConfig>
 800233e:	e00f      	b.n	8002360 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	b2da      	uxtb	r2, r3
 8002350:	8979      	ldrh	r1, [r7, #10]
 8002352:	2300      	movs	r3, #0
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fb6e 	bl	8002a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d19e      	bne.n	80022a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	6a39      	ldr	r1, [r7, #32]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f9c2 	bl	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e01a      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2220      	movs	r2, #32
 8002384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8002392:	400b      	ands	r3, r1
 8002394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	80002000 	.word	0x80002000
 80023c0:	fe00e800 	.word	0xfe00e800

080023c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	461a      	mov	r2, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
 80023d4:	4613      	mov	r3, r2
 80023d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	f040 80db 	bne.w	800259c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2C_Master_Receive+0x30>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0d4      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023fc:	f7ff faa0 	bl	8001940 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2319      	movs	r3, #25
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f8f2 	bl	80025f8 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0bf      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2222      	movs	r2, #34	; 0x22
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2210      	movs	r2, #16
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2bff      	cmp	r3, #255	; 0xff
 800244e:	d90e      	bls.n	800246e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	22ff      	movs	r2, #255	; 0xff
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245a:	b2da      	uxtb	r2, r3
 800245c:	8979      	ldrh	r1, [r7, #10]
 800245e:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fae8 	bl	8002a3c <I2C_TransferConfig>
 800246c:	e06d      	b.n	800254a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_I2C_Master_Receive+0x1e4>)
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fad7 	bl	8002a3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800248e:	e05c      	b.n	800254a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	6a39      	ldr	r1, [r7, #32]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f96b 	bl	8002770 <I2C_WaitOnRXNEFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e07c      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d034      	beq.n	800254a <HAL_I2C_Master_Receive+0x186>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d130      	bne.n	800254a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2200      	movs	r2, #0
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f880 	bl	80025f8 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04d      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2bff      	cmp	r3, #255	; 0xff
 800250a:	d90e      	bls.n	800252a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	b2da      	uxtb	r2, r3
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fa8a 	bl	8002a3c <I2C_TransferConfig>
 8002528:	e00f      	b.n	800254a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	2300      	movs	r3, #0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa79 	bl	8002a3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d19d      	bne.n	8002490 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6a39      	ldr	r1, [r7, #32]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f8cd 	bl	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e01a      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_I2C_Master_Receive+0x1e8>)
 800257c:	400b      	ands	r3, r1
 800257e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	80002400 	.word	0x80002400
 80025ac:	fe00e800 	.word	0xfe00e800

080025b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d103      	bne.n	80025ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d007      	beq.n	80025ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	619a      	str	r2, [r3, #24]
  }
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002608:	e022      	b.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d01e      	beq.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7ff f995 	bl	8001940 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d113      	bne.n	8002650 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e00f      	b.n	8002670 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	429a      	cmp	r2, r3
 800266c:	d0cd      	beq.n	800260a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002684:	e02c      	b.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f8ea 	bl	8002864 <I2C_IsErrorOccurred>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e02a      	b.n	80026f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d01e      	beq.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7ff f94d 	bl	8001940 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d113      	bne.n	80026e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e007      	b.n	80026f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d1cb      	bne.n	8002686 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002704:	e028      	b.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8aa 	bl	8002864 <I2C_IsErrorOccurred>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e026      	b.n	8002768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7ff f911 	bl	8001940 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d113      	bne.n	8002758 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e007      	b.n	8002768 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b20      	cmp	r3, #32
 8002764:	d1cf      	bne.n	8002706 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800277c:	e064      	b.n	8002848 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f86e 	bl	8002864 <I2C_IsErrorOccurred>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e062      	b.n	8002858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d138      	bne.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d105      	bne.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e04e      	b.n	8002858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d107      	bne.n	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2210      	movs	r2, #16
 80027ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2204      	movs	r2, #4
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
 80027d6:	e002      	b.n	80027de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2220      	movs	r2, #32
 80027e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80027f2:	400b      	ands	r3, r1
 80027f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e022      	b.n	8002858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002812:	f7ff f895 	bl	8001940 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	d302      	bcc.n	8002828 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10f      	bne.n	8002848 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e007      	b.n	8002858 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d193      	bne.n	800277e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	fe00e800 	.word	0xfe00e800

08002864 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d075      	beq.n	800297c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002898:	e056      	b.n	8002948 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d052      	beq.n	8002948 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028a2:	f7ff f84d 	bl	8001940 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <I2C_IsErrorOccurred+0x54>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d147      	bne.n	8002948 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028da:	d12e      	bne.n	800293a <I2C_IsErrorOccurred+0xd6>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e2:	d02a      	beq.n	800293a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d027      	beq.n	800293a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028fa:	f7ff f821 	bl	8001940 <HAL_GetTick>
 80028fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002900:	e01b      	b.n	800293a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002902:	f7ff f81d 	bl	8001940 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b19      	cmp	r3, #25
 800290e:	d914      	bls.n	800293a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b20      	cmp	r3, #32
 8002946:	d1dc      	bne.n	8002902 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b20      	cmp	r3, #32
 8002954:	d003      	beq.n	800295e <I2C_IsErrorOccurred+0xfa>
 8002956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800295a:	2b00      	cmp	r3, #0
 800295c:	d09d      	beq.n	800289a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800295e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2220      	movs	r2, #32
 800296c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f043 0308 	orr.w	r3, r3, #8
 80029b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01c      	beq.n	8002a2c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff fddc 	bl	80025b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <I2C_IsErrorOccurred+0x1d4>)
 8002a04:	400b      	ands	r3, r1
 8002a06:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3728      	adds	r7, #40	; 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a54:	7a7b      	ldrb	r3, [r7, #9]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	0d5b      	lsrs	r3, r3, #21
 8002a76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <I2C_TransferConfig+0x60>)
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	ea02 0103 	and.w	r1, r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	03ff63ff 	.word	0x03ff63ff

08002aa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d138      	bne.n	8002b28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e032      	b.n	8002b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	; 0x24
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002af2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d139      	bne.n	8002bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e033      	b.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2224      	movs	r2, #36	; 0x24
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be0:	d102      	bne.n	8002be8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be6:	e00b      	b.n	8002c00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf6:	d102      	bne.n	8002bfe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfc:	e000      	b.n	8002c00 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002bfe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d141      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c1e:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d131      	bne.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c2c:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c32:	4a46      	ldr	r2, [pc, #280]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c3c:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c44:	4a41      	ldr	r2, [pc, #260]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c4c:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2232      	movs	r2, #50	; 0x32
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a3f      	ldr	r2, [pc, #252]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	0c9b      	lsrs	r3, r3, #18
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c62:	e002      	b.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d102      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f2      	bne.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8a:	d158      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e057      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c96:	4a2d      	ldr	r2, [pc, #180]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ca0:	e04d      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca8:	d141      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d131      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2232      	movs	r2, #50	; 0x32
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9b      	lsrs	r3, r3, #18
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cee:	e002      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d102      	bne.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f2      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d112      	bne.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e011      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d2c:	e007      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	20000004 	.word	0x20000004
 8002d54:	431bde83 	.word	0x431bde83

08002d58 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6053      	str	r3, [r2, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f000 bc68 	b.w	800365c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8c:	4b97      	ldr	r3, [pc, #604]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d96:	4b95      	ldr	r3, [pc, #596]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80e6 	beq.w	8002f7a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4c>
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	f040 808d 	bne.w	8002ed6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	f040 8089 	bne.w	8002ed6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc4:	4b89      	ldr	r3, [pc, #548]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <HAL_RCC_OscConfig+0x66>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f000 bc3f 	b.w	800365c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de2:	4b82      	ldr	r3, [pc, #520]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_RCC_OscConfig+0x80>
 8002dee:	4b7f      	ldr	r3, [pc, #508]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df6:	e005      	b.n	8002e04 <HAL_RCC_OscConfig+0x8c>
 8002df8:	4b7c      	ldr	r3, [pc, #496]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d224      	bcs.n	8002e52 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fe2d 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f000 bc1f 	b.w	800365c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1e:	4b73      	ldr	r3, [pc, #460]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a72      	ldr	r2, [pc, #456]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	496d      	ldr	r1, [pc, #436]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3c:	4b6b      	ldr	r3, [pc, #428]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	4968      	ldr	r1, [pc, #416]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
 8002e50:	e025      	b.n	8002e9e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e52:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a65      	ldr	r2, [pc, #404]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e58:	f043 0308 	orr.w	r3, r3, #8
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	4960      	ldr	r1, [pc, #384]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e70:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	495b      	ldr	r1, [pc, #364]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fdec 	bl	8003a6c <RCC_SetFlashLatencyFromMSIRange>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e3de      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e9e:	f000 fd21 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b51      	ldr	r3, [pc, #324]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	4950      	ldr	r1, [pc, #320]	; (8002ff0 <HAL_RCC_OscConfig+0x278>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eba:	4a4e      	ldr	r2, [pc, #312]	; (8002ff4 <HAL_RCC_OscConfig+0x27c>)
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ebe:	4b4e      	ldr	r3, [pc, #312]	; (8002ff8 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fcec 	bl	80018a0 <HAL_InitTick>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d052      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	e3c2      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d032      	beq.n	8002f44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ede:	4b43      	ldr	r3, [pc, #268]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a42      	ldr	r2, [pc, #264]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eea:	f7fe fd29 	bl	8001940 <HAL_GetTick>
 8002eee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fd25 	bl	8001940 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e3ab      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f04:	4b39      	ldr	r3, [pc, #228]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a35      	ldr	r2, [pc, #212]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b33      	ldr	r3, [pc, #204]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	4930      	ldr	r1, [pc, #192]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	492b      	ldr	r1, [pc, #172]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
 8002f42:	e01a      	b.n	8002f7a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f44:	4b29      	ldr	r3, [pc, #164]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a28      	ldr	r2, [pc, #160]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fcf6 	bl	8001940 <HAL_GetTick>
 8002f54:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f58:	f7fe fcf2 	bl	8001940 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e378      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1e0>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d073      	beq.n	800306e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_OscConfig+0x220>
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d10e      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d10b      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d063      	beq.n	800306c <HAL_RCC_OscConfig+0x2f4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d15f      	bne.n	800306c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e355      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x250>
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e025      	b.n	8003014 <HAL_RCC_OscConfig+0x29c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd0:	d114      	bne.n	8002ffc <HAL_RCC_OscConfig+0x284>
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a02      	ldr	r2, [pc, #8]	; (8002fec <HAL_RCC_OscConfig+0x274>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e013      	b.n	8003014 <HAL_RCC_OscConfig+0x29c>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	0800ccac 	.word	0x0800ccac
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	4b8f      	ldr	r3, [pc, #572]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a8e      	ldr	r2, [pc, #568]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b8c      	ldr	r3, [pc, #560]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a8b      	ldr	r2, [pc, #556]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d013      	beq.n	8003044 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fc90 	bl	8001940 <HAL_GetTick>
 8003020:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003024:	f7fe fc8c 	bl	8001940 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e312      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	4b81      	ldr	r3, [pc, #516]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x2ac>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fc7c 	bl	8001940 <HAL_GetTick>
 8003048:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fc78 	bl	8001940 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e2fe      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	4b77      	ldr	r3, [pc, #476]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x2d4>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d060      	beq.n	800313c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x314>
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d119      	bne.n	80030ba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d116      	bne.n	80030ba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800308c:	4b6b      	ldr	r3, [pc, #428]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_OscConfig+0x32c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e2db      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	4962      	ldr	r1, [pc, #392]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b8:	e040      	b.n	800313c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d023      	beq.n	800310a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c2:	4b5e      	ldr	r3, [pc, #376]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5d      	ldr	r2, [pc, #372]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fc37 	bl	8001940 <HAL_GetTick>
 80030d2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fc33 	bl	8001940 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e2b9      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	4b54      	ldr	r3, [pc, #336]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b51      	ldr	r3, [pc, #324]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	494e      	ldr	r1, [pc, #312]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e018      	b.n	800313c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b4c      	ldr	r3, [pc, #304]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a4b      	ldr	r2, [pc, #300]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fc13 	bl	8001940 <HAL_GetTick>
 800311a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311e:	f7fe fc0f 	bl	8001940 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e295      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003130:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8082 	beq.w	800324e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d05f      	beq.n	8003212 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003152:	4b3a      	ldr	r3, [pc, #232]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003158:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	429a      	cmp	r2, r3
 8003166:	d037      	beq.n	80031d8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e26d      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800318a:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003190:	4a2a      	ldr	r2, [pc, #168]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800319a:	f7fe fbd1 	bl	8001940 <HAL_GetTick>
 800319e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fe fbcd 	bl	8001940 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b11      	cmp	r3, #17
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e253      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1ef      	bne.n	80031a2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	f023 0210 	bic.w	r2, r3, #16
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	491a      	ldr	r1, [pc, #104]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe fbaa 	bl	8001940 <HAL_GetTick>
 80031ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe fba6 	bl	8001940 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b11      	cmp	r3, #17
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e22c      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x478>
 8003210:	e01d      	b.n	800324e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003218:	4a08      	ldr	r2, [pc, #32]	; (800323c <HAL_RCC_OscConfig+0x4c4>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe fb8d 	bl	8001940 <HAL_GetTick>
 8003226:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe fb89 	bl	8001940 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b11      	cmp	r3, #17
 8003236:	d903      	bls.n	8003240 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e20f      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
 800323c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003240:	4b83      	ldr	r3, [pc, #524]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ed      	bne.n	800322a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80bd 	beq.w	80033d6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003262:	4b7b      	ldr	r3, [pc, #492]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b78      	ldr	r3, [pc, #480]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	4a77      	ldr	r2, [pc, #476]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6593      	str	r3, [r2, #88]	; 0x58
 800327a:	4b75      	ldr	r3, [pc, #468]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328c:	4b71      	ldr	r3, [pc, #452]	; (8003454 <HAL_RCC_OscConfig+0x6dc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d118      	bne.n	80032ca <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003298:	4b6e      	ldr	r3, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x6dc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6d      	ldr	r2, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x6dc>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a4:	f7fe fb4c 	bl	8001940 <HAL_GetTick>
 80032a8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe fb48 	bl	8001940 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1ce      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032be:	4b65      	ldr	r3, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x6dc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02c      	beq.n	8003330 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80032d6:	4b5e      	ldr	r3, [pc, #376]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	4959      	ldr	r1, [pc, #356]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d010      	beq.n	800331e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032fc:	4b54      	ldr	r3, [pc, #336]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	4a53      	ldr	r2, [pc, #332]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800330c:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800331c:	e018      	b.n	8003350 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800331e:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003330:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	4a46      	ldr	r2, [pc, #280]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003340:	4b43      	ldr	r3, [pc, #268]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	4a42      	ldr	r2, [pc, #264]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d016      	beq.n	8003386 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe faf2 	bl	8001940 <HAL_GetTick>
 800335c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7fe faee 	bl	8001940 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e172      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ed      	beq.n	8003360 <HAL_RCC_OscConfig+0x5e8>
 8003384:	e01d      	b.n	80033c2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fe fadb 	bl	8001940 <HAL_GetTick>
 800338a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe fad7 	bl	8001940 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e15b      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a4:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ed      	bne.n	800338e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80033b2:	4b27      	ldr	r3, [pc, #156]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	4a25      	ldr	r2, [pc, #148]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80033ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d105      	bne.n	80033d6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d041      	beq.n	8003466 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01c      	beq.n	8003424 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80033ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f0:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe faa1 	bl	8001940 <HAL_GetTick>
 80033fe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003402:	f7fe fa9d 	bl	8001940 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e123      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ef      	beq.n	8003402 <HAL_RCC_OscConfig+0x68a>
 8003422:	e020      	b.n	8003466 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 8003426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_OscConfig+0x6d8>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe fa84 	bl	8001940 <HAL_GetTick>
 8003438:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800343a:	e00d      	b.n	8003458 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343c:	f7fe fa80 	bl	8001940 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d906      	bls.n	8003458 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e106      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003458:	4b82      	ldr	r3, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800345a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ea      	bne.n	800343c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80f5 	beq.w	800365a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	2b02      	cmp	r3, #2
 8003476:	f040 80cb 	bne.w	8003610 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800347a:	4b7a      	ldr	r3, [pc, #488]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0203 	and.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	429a      	cmp	r2, r3
 800348c:	d12c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	3b01      	subs	r3, #1
 800349a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d123      	bne.n	80034e8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d11b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d113      	bne.n	80034e8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d109      	bne.n	80034e8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	3b01      	subs	r3, #1
 80034e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d06d      	beq.n	80035c4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d068      	beq.n	80035c0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034fa:	4b5a      	ldr	r3, [pc, #360]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0a8      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800350a:	4b56      	ldr	r3, [pc, #344]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a55      	ldr	r2, [pc, #340]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 8003510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003514:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003516:	f7fe fa13 	bl	8001940 <HAL_GetTick>
 800351a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351e:	f7fe fa0f 	bl	8001940 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e095      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	4b4c      	ldr	r3, [pc, #304]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353c:	4b49      	ldr	r3, [pc, #292]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <HAL_RCC_OscConfig+0x8f0>)
 8003542:	4013      	ands	r3, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800354c:	3a01      	subs	r2, #1
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003556:	0212      	lsls	r2, r2, #8
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800355e:	0852      	lsrs	r2, r2, #1
 8003560:	3a01      	subs	r2, #1
 8003562:	0552      	lsls	r2, r2, #21
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800356a:	0852      	lsrs	r2, r2, #1
 800356c:	3a01      	subs	r2, #1
 800356e:	0652      	lsls	r2, r2, #25
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003576:	06d2      	lsls	r2, r2, #27
 8003578:	430a      	orrs	r2, r1
 800357a:	493a      	ldr	r1, [pc, #232]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003580:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a37      	ldr	r2, [pc, #220]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 8003586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800358c:	4b35      	ldr	r3, [pc, #212]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a34      	ldr	r2, [pc, #208]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 8003592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003596:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003598:	f7fe f9d2 	bl	8001940 <HAL_GetTick>
 800359c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe f9ce 	bl	8001940 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e054      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035be:	e04c      	b.n	800365a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e04b      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d144      	bne.n	800365a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a20      	ldr	r2, [pc, #128]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 80035e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035e8:	f7fe f9aa 	bl	8001940 <HAL_GetTick>
 80035ec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe f9a6 	bl	8001940 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e02c      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x878>
 800360e:	e024      	b.n	800365a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	d01f      	beq.n	8003656 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a12      	ldr	r2, [pc, #72]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800361c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fe f98d 	bl	8001940 <HAL_GetTick>
 8003626:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe f989 	bl	8001940 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e00f      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4905      	ldr	r1, [pc, #20]	; (8003664 <HAL_RCC_OscConfig+0x8ec>)
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_RCC_OscConfig+0x8f4>)
 8003650:	4013      	ands	r3, r2
 8003652:	60cb      	str	r3, [r1, #12]
 8003654:	e001      	b.n	800365a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	019d800c 	.word	0x019d800c
 800366c:	feeefffc 	.word	0xfeeefffc

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e11d      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b90      	ldr	r3, [pc, #576]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b8d      	ldr	r3, [pc, #564]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	498b      	ldr	r1, [pc, #556]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b89      	ldr	r3, [pc, #548]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e105      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	4b81      	ldr	r3, [pc, #516]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d908      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	4b7e      	ldr	r3, [pc, #504]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	497b      	ldr	r1, [pc, #492]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d079      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d11e      	bne.n	8003738 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	4b75      	ldr	r3, [pc, #468]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0dc      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800370a:	f000 fa09 	bl	8003b20 <RCC_GetSysClockFreqFromPLLSource>
 800370e:	4603      	mov	r3, r0
 8003710:	4a70      	ldr	r2, [pc, #448]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d946      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003716:	4b6e      	ldr	r3, [pc, #440]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d140      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003722:	4b6b      	ldr	r3, [pc, #428]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	4a69      	ldr	r2, [pc, #420]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e035      	b.n	80037a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d107      	bne.n	8003750 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003740:	4b63      	ldr	r3, [pc, #396]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d115      	bne.n	8003778 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b9      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003758:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0ad      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003768:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0a5      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003778:	f000 f8b4 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800377c:	4603      	mov	r3, r0
 800377e:	4a55      	ldr	r2, [pc, #340]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d90f      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003784:	4b52      	ldr	r3, [pc, #328]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003790:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003798:	4a4d      	ldr	r2, [pc, #308]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800379a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a4:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 0203 	bic.w	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4947      	ldr	r1, [pc, #284]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fe f8c3 	bl	8001940 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037be:	f7fe f8bf 	bl	8001940 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e077      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d4:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 020c 	and.w	r2, r3, #12
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d1eb      	bne.n	80037be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b80      	cmp	r3, #128	; 0x80
 80037ea:	d105      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037ec:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a37      	ldr	r2, [pc, #220]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80037f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003810:	429a      	cmp	r2, r3
 8003812:	d208      	bcs.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	492b      	ldr	r1, [pc, #172]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d210      	bcs.n	8003856 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003834:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 020f 	bic.w	r2, r3, #15
 800383c:	4923      	ldr	r1, [pc, #140]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003844:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_RCC_ClockConfig+0x25c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d001      	beq.n	8003856 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e036      	b.n	80038c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	4918      	ldr	r1, [pc, #96]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4910      	ldr	r1, [pc, #64]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003894:	f000 f826 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	490c      	ldr	r1, [pc, #48]	; (80038d8 <HAL_RCC_ClockConfig+0x268>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x26c>)
 80038b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fff1 	bl	80018a0 <HAL_InitTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40021000 	.word	0x40021000
 80038d4:	04c4b400 	.word	0x04c4b400
 80038d8:	0800ccac 	.word	0x0800ccac
 80038dc:	20000004 	.word	0x20000004
 80038e0:	20000008 	.word	0x20000008

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d121      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d11e      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003924:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	e005      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003940:	4a2b      	ldr	r2, [pc, #172]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003954:	e00a      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d102      	bne.n	8003962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e004      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d101      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003968:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800396a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d134      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0xa6>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d003      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0xac>
 8003988:	e005      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800398c:	617b      	str	r3, [r7, #20]
      break;
 800398e:	e005      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003992:	617b      	str	r3, [r7, #20]
      break;
 8003994:	e002      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	617b      	str	r3, [r7, #20]
      break;
 800399a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3301      	adds	r3, #1
 80039a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	fb03 f202 	mul.w	r2, r3, r2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_RCC_GetSysClockFreq+0x108>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	0e5b      	lsrs	r3, r3, #25
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	3301      	adds	r3, #1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039dc:	69bb      	ldr	r3, [r7, #24]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3724      	adds	r7, #36	; 0x24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	0800ccc4 	.word	0x0800ccc4
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	007a1200 	.word	0x007a1200

080039fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000004 	.word	0x20000004

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a18:	f7ff fff0 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4904      	ldr	r1, [pc, #16]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	0800ccbc 	.word	0x0800ccbc

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a44:	f7ff ffda 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4904      	ldr	r1, [pc, #16]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	0800ccbc 	.word	0x0800ccbc

08003a6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a78:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a84:	f7ff f8a4 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 8003a88:	6178      	str	r0, [r7, #20]
 8003a8a:	e014      	b.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6593      	str	r3, [r2, #88]	; 0x58
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa4:	f7ff f894 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 8003aa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abc:	d10b      	bne.n	8003ad6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d913      	bls.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ac8:	d902      	bls.n	8003ad0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aca:	2302      	movs	r3, #2
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	e00d      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e00a      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8003ada:	d902      	bls.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003adc:	2302      	movs	r3, #2
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e004      	b.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b70      	cmp	r3, #112	; 0x70
 8003ae6:	d101      	bne.n	8003aec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae8:	2301      	movs	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 020f 	bic.w	r2, r3, #15
 8003af4:	4909      	ldr	r1, [pc, #36]	; (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d001      	beq.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40022000 	.word	0x40022000

08003b20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b26:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d00b      	beq.n	8003b4e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d825      	bhi.n	8003b88 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d008      	beq.n	8003b54 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d11f      	bne.n	8003b88 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b4a:	613b      	str	r3, [r7, #16]
    break;
 8003b4c:	e01f      	b.n	8003b8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003b50:	613b      	str	r3, [r7, #16]
    break;
 8003b52:	e01c      	b.n	8003b8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d107      	bne.n	8003b70 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e005      	b.n	8003b7c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003b7c:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b84:	613b      	str	r3, [r7, #16]
    break;
 8003b86:	e002      	b.n	8003b8e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
    break;
 8003b8c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b8e:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	fb03 f202 	mul.w	r2, r3, r2
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0e5b      	lsrs	r3, r3, #25
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003bce:	683b      	ldr	r3, [r7, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	007a1200 	.word	0x007a1200
 8003be8:	0800ccc4 	.word	0x0800ccc4

08003bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d040      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d02a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c10:	2b80      	cmp	r3, #128	; 0x80
 8003c12:	d825      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c14:	2b60      	cmp	r3, #96	; 0x60
 8003c16:	d026      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c18:	2b60      	cmp	r3, #96	; 0x60
 8003c1a:	d821      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d006      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d81d      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003c2c:	e018      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c2e:	4b89      	ldr	r3, [pc, #548]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a88      	ldr	r2, [pc, #544]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c3a:	e015      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fb3e 	bl	80042c4 <RCCEx_PLLSAI1_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3320      	adds	r3, #32
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fc29 	bl	80044ac <RCCEx_PLLSAI2_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	74fb      	strb	r3, [r7, #19]
      break;
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6e:	4b79      	ldr	r3, [pc, #484]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c74:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7c:	4975      	ldr	r1, [pc, #468]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003c84:	e001      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d047      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d030      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca4:	d82a      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003caa:	d02a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb0:	d824      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb6:	d008      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cbc:	d81e      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	d010      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cc8:	e018      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cca:	4b62      	ldr	r3, [pc, #392]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4a61      	ldr	r2, [pc, #388]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cd6:	e015      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 faf0 	bl	80042c4 <RCCEx_PLLSAI1_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ce8:	e00c      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3320      	adds	r3, #32
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fbdb 	bl	80044ac <RCCEx_PLLSAI2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cfa:	e003      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	74fb      	strb	r3, [r7, #19]
      break;
 8003d00:	e000      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d0a:	4b52      	ldr	r3, [pc, #328]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	494e      	ldr	r1, [pc, #312]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d20:	e001      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 809f 	beq.w	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d38:	4b46      	ldr	r3, [pc, #280]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b41      	ldr	r3, [pc, #260]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	4a40      	ldr	r2, [pc, #256]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	; 0x58
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d66:	2301      	movs	r3, #1
 8003d68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3a      	ldr	r2, [pc, #232]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d76:	f7fd fde3 	bl	8001940 <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d7c:	e009      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fd fddf 	bl	8001940 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d902      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d90:	e005      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ef      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003d9e:	7cfb      	ldrb	r3, [r7, #19]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d15b      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01f      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d019      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc2:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dee:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d016      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fd fd9e 	bl	8001940 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e06:	e00b      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e08:	f7fd fd9a 	bl	8001940 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d902      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e1e:	e006      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ec      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e4c:	e008      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	74bb      	strb	r3, [r7, #18]
 8003e52:	e005      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e60:	7c7b      	ldrb	r3, [r7, #17]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4ba0      	ldr	r3, [pc, #640]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	4a9f      	ldr	r2, [pc, #636]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e7e:	4b9a      	ldr	r3, [pc, #616]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f023 0203 	bic.w	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	4996      	ldr	r1, [pc, #600]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ea0:	4b91      	ldr	r3, [pc, #580]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 020c 	bic.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	498e      	ldr	r1, [pc, #568]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ec2:	4b89      	ldr	r3, [pc, #548]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	4985      	ldr	r1, [pc, #532]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ee4:	4b80      	ldr	r3, [pc, #512]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef2:	497d      	ldr	r1, [pc, #500]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f06:	4b78      	ldr	r3, [pc, #480]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	4974      	ldr	r1, [pc, #464]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f28:	4b6f      	ldr	r3, [pc, #444]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f36:	496c      	ldr	r1, [pc, #432]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f58:	4963      	ldr	r1, [pc, #396]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f6c:	4b5e      	ldr	r3, [pc, #376]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7a:	495b      	ldr	r1, [pc, #364]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f8e:	4b56      	ldr	r3, [pc, #344]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	4952      	ldr	r1, [pc, #328]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fb0:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	494a      	ldr	r1, [pc, #296]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fd2:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	4941      	ldr	r1, [pc, #260]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ff4:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ffa:	f023 0203 	bic.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004002:	4939      	ldr	r1, [pc, #228]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d028      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004024:	4930      	ldr	r1, [pc, #192]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004034:	d106      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004040:	60d3      	str	r3, [r2, #12]
 8004042:	e011      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800404c:	d10c      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f935 	bl	80042c4 <RCCEx_PLLSAI1_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d04d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407c:	d108      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800408a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800408e:	e012      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004096:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800409c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ae:	490e      	ldr	r1, [pc, #56]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040be:	d106      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
 80040cc:	e020      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d6:	d109      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a02      	ldr	r2, [pc, #8]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e2:	60d3      	str	r3, [r2, #12]
 80040e4:	e014      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f8e1 	bl	80042c4 <RCCEx_PLLSAI1_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d028      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800411c:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412a:	4965      	ldr	r1, [pc, #404]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413a:	d106      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413c:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a5f      	ldr	r2, [pc, #380]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004146:	60d3      	str	r3, [r2, #12]
 8004148:	e011      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004152:	d10c      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	2101      	movs	r1, #1
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f8b2 	bl	80042c4 <RCCEx_PLLSAI1_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01e      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800417a:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418a:	494d      	ldr	r1, [pc, #308]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f88d 	bl	80042c4 <RCCEx_PLLSAI1_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041c4:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ca:	f023 0204 	bic.w	r2, r3, #4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d4:	493a      	ldr	r1, [pc, #232]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ee:	f023 0218 	bic.w	r2, r3, #24
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	4931      	ldr	r1, [pc, #196]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d035      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800420c:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fd fb92 	bl	8001940 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800421e:	e009      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004220:	f7fd fb8e 	bl	8001940 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d902      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	74fb      	strb	r3, [r7, #19]
        break;
 8004232:	e005      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004234:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ef      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d113      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004246:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004256:	491a      	ldr	r1, [pc, #104]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3320      	adds	r3, #32
 8004262:	2102      	movs	r1, #2
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f921 	bl	80044ac <RCCEx_PLLSAI2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d017      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800428a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	490a      	ldr	r1, [pc, #40]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a6:	d105      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000

080042c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042d2:	4b72      	ldr	r3, [pc, #456]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042de:	4b6f      	ldr	r3, [pc, #444]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0203 	and.w	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d103      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
       ||
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d142      	bne.n	800437c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	e03f      	b.n	800437c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d018      	beq.n	8004336 <RCCEx_PLLSAI1_Config+0x72>
 8004304:	2b03      	cmp	r3, #3
 8004306:	d825      	bhi.n	8004354 <RCCEx_PLLSAI1_Config+0x90>
 8004308:	2b01      	cmp	r3, #1
 800430a:	d002      	beq.n	8004312 <RCCEx_PLLSAI1_Config+0x4e>
 800430c:	2b02      	cmp	r3, #2
 800430e:	d009      	beq.n	8004324 <RCCEx_PLLSAI1_Config+0x60>
 8004310:	e020      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004312:	4b62      	ldr	r3, [pc, #392]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11d      	bne.n	800435a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004322:	e01a      	b.n	800435a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004324:	4b5d      	ldr	r3, [pc, #372]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d116      	bne.n	800435e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004334:	e013      	b.n	800435e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004336:	4b59      	ldr	r3, [pc, #356]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004342:	4b56      	ldr	r3, [pc, #344]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004352:	e006      	b.n	8004362 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      break;
 8004358:	e004      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004362:	bf00      	nop
    }

    if(status == HAL_OK)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800436a:	4b4c      	ldr	r3, [pc, #304]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f023 0203 	bic.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4949      	ldr	r1, [pc, #292]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 8086 	bne.w	8004490 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004384:	4b45      	ldr	r3, [pc, #276]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a44      	ldr	r2, [pc, #272]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 800438a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800438e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004390:	f7fd fad6 	bl	8001940 <HAL_GetTick>
 8004394:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004396:	e009      	b.n	80043ac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004398:	f7fd fad2 	bl	8001940 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d902      	bls.n	80043ac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	73fb      	strb	r3, [r7, #15]
        break;
 80043aa:	e005      	b.n	80043b8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043ac:	4b3b      	ldr	r3, [pc, #236]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ef      	bne.n	8004398 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d168      	bne.n	8004490 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d113      	bne.n	80043ec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043c4:	4b35      	ldr	r3, [pc, #212]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6892      	ldr	r2, [r2, #8]
 80043d0:	0211      	lsls	r1, r2, #8
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68d2      	ldr	r2, [r2, #12]
 80043d6:	06d2      	lsls	r2, r2, #27
 80043d8:	4311      	orrs	r1, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6852      	ldr	r2, [r2, #4]
 80043de:	3a01      	subs	r2, #1
 80043e0:	0112      	lsls	r2, r2, #4
 80043e2:	430a      	orrs	r2, r1
 80043e4:	492d      	ldr	r1, [pc, #180]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	610b      	str	r3, [r1, #16]
 80043ea:	e02d      	b.n	8004448 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d115      	bne.n	800441e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f2:	4b2a      	ldr	r3, [pc, #168]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6892      	ldr	r2, [r2, #8]
 80043fe:	0211      	lsls	r1, r2, #8
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6912      	ldr	r2, [r2, #16]
 8004404:	0852      	lsrs	r2, r2, #1
 8004406:	3a01      	subs	r2, #1
 8004408:	0552      	lsls	r2, r2, #21
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6852      	ldr	r2, [r2, #4]
 8004410:	3a01      	subs	r2, #1
 8004412:	0112      	lsls	r2, r2, #4
 8004414:	430a      	orrs	r2, r1
 8004416:	4921      	ldr	r1, [pc, #132]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004418:	4313      	orrs	r3, r2
 800441a:	610b      	str	r3, [r1, #16]
 800441c:	e014      	b.n	8004448 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	0211      	lsls	r1, r2, #8
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6952      	ldr	r2, [r2, #20]
 8004430:	0852      	lsrs	r2, r2, #1
 8004432:	3a01      	subs	r2, #1
 8004434:	0652      	lsls	r2, r2, #25
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6852      	ldr	r2, [r2, #4]
 800443c:	3a01      	subs	r2, #1
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	430a      	orrs	r2, r1
 8004442:	4916      	ldr	r1, [pc, #88]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004444:	4313      	orrs	r3, r2
 8004446:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 800444e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fd fa74 	bl	8001940 <HAL_GetTick>
 8004458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800445a:	e009      	b.n	8004470 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800445c:	f7fd fa70 	bl	8001940 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	73fb      	strb	r3, [r7, #15]
          break;
 800446e:	e005      	b.n	800447c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ef      	beq.n	800445c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	4904      	ldr	r1, [pc, #16]	; (800449c <RCCEx_PLLSAI1_Config+0x1d8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	07ff800f 	.word	0x07ff800f
 80044a4:	ff9f800f 	.word	0xff9f800f
 80044a8:	f9ff800f 	.word	0xf9ff800f

080044ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ba:	4b72      	ldr	r3, [pc, #456]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044c6:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0203 	and.w	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d103      	bne.n	80044de <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
       ||
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d142      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	e03f      	b.n	8004564 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d018      	beq.n	800451e <RCCEx_PLLSAI2_Config+0x72>
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d825      	bhi.n	800453c <RCCEx_PLLSAI2_Config+0x90>
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d002      	beq.n	80044fa <RCCEx_PLLSAI2_Config+0x4e>
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d009      	beq.n	800450c <RCCEx_PLLSAI2_Config+0x60>
 80044f8:	e020      	b.n	800453c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044fa:	4b62      	ldr	r3, [pc, #392]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11d      	bne.n	8004542 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450a:	e01a      	b.n	8004542 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800450c:	4b5d      	ldr	r3, [pc, #372]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004514:	2b00      	cmp	r3, #0
 8004516:	d116      	bne.n	8004546 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451c:	e013      	b.n	8004546 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800451e:	4b59      	ldr	r3, [pc, #356]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800452a:	4b56      	ldr	r3, [pc, #344]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800453a:	e006      	b.n	800454a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      break;
 8004540:	e004      	b.n	800454c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800454a:	bf00      	nop
    }

    if(status == HAL_OK)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d108      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 0203 	bic.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4949      	ldr	r1, [pc, #292]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004560:	4313      	orrs	r3, r2
 8004562:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 8086 	bne.w	8004678 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800456c:	4b45      	ldr	r3, [pc, #276]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a44      	ldr	r2, [pc, #272]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fd f9e2 	bl	8001940 <HAL_GetTick>
 800457c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800457e:	e009      	b.n	8004594 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004580:	f7fd f9de 	bl	8001940 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d902      	bls.n	8004594 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	73fb      	strb	r3, [r7, #15]
        break;
 8004592:	e005      	b.n	80045a0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ef      	bne.n	8004580 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d168      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d113      	bne.n	80045d4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	4b35      	ldr	r3, [pc, #212]	; (8004688 <RCCEx_PLLSAI2_Config+0x1dc>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6892      	ldr	r2, [r2, #8]
 80045b8:	0211      	lsls	r1, r2, #8
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68d2      	ldr	r2, [r2, #12]
 80045be:	06d2      	lsls	r2, r2, #27
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6852      	ldr	r2, [r2, #4]
 80045c6:	3a01      	subs	r2, #1
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	430a      	orrs	r2, r1
 80045cc:	492d      	ldr	r1, [pc, #180]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	614b      	str	r3, [r1, #20]
 80045d2:	e02d      	b.n	8004630 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d115      	bne.n	8004606 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045da:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	4b2b      	ldr	r3, [pc, #172]	; (800468c <RCCEx_PLLSAI2_Config+0x1e0>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6892      	ldr	r2, [r2, #8]
 80045e6:	0211      	lsls	r1, r2, #8
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6912      	ldr	r2, [r2, #16]
 80045ec:	0852      	lsrs	r2, r2, #1
 80045ee:	3a01      	subs	r2, #1
 80045f0:	0552      	lsls	r2, r2, #21
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6852      	ldr	r2, [r2, #4]
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	430a      	orrs	r2, r1
 80045fe:	4921      	ldr	r1, [pc, #132]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004600:	4313      	orrs	r3, r2
 8004602:	614b      	str	r3, [r1, #20]
 8004604:	e014      	b.n	8004630 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004606:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <RCCEx_PLLSAI2_Config+0x1e4>)
 800460c:	4013      	ands	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6892      	ldr	r2, [r2, #8]
 8004612:	0211      	lsls	r1, r2, #8
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6952      	ldr	r2, [r2, #20]
 8004618:	0852      	lsrs	r2, r2, #1
 800461a:	3a01      	subs	r2, #1
 800461c:	0652      	lsls	r2, r2, #25
 800461e:	4311      	orrs	r1, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6852      	ldr	r2, [r2, #4]
 8004624:	3a01      	subs	r2, #1
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	430a      	orrs	r2, r1
 800462a:	4916      	ldr	r1, [pc, #88]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 800462c:	4313      	orrs	r3, r2
 800462e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fd f980 	bl	8001940 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004644:	f7fd f97c 	bl	8001940 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
          break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4904      	ldr	r1, [pc, #16]	; (8004684 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	07ff800f 	.word	0x07ff800f
 800468c:	ff9f800f 	.word	0xff9f800f
 8004690:	f9ff800f 	.word	0xf9ff800f

08004694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e049      	b.n	800473a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fefa 	bl	80014b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 fde8 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d001      	beq.n	800475c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e047      	b.n	80047ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <HAL_TIM_Base_Start+0xb4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01d      	beq.n	80047aa <HAL_TIM_Base_Start+0x66>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d018      	beq.n	80047aa <HAL_TIM_Base_Start+0x66>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <HAL_TIM_Base_Start+0xb8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_TIM_Base_Start+0x66>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_TIM_Base_Start+0xbc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_TIM_Base_Start+0x66>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_TIM_Base_Start+0xc0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_TIM_Base_Start+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_TIM_Base_Start+0xc4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_TIM_Base_Start+0x66>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_TIM_Base_Start+0xc8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d115      	bne.n	80047d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_TIM_Base_Start+0xcc>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d015      	beq.n	80047e8 <HAL_TIM_Base_Start+0xa4>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c2:	d011      	beq.n	80047e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	e008      	b.n	80047e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e000      	b.n	80047ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40013400 	.word	0x40013400
 800480c:	40014000 	.word	0x40014000
 8004810:	00010007 	.word	0x00010007

08004814 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	f241 1311 	movw	r3, #4369	; 0x1111
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10f      	bne.n	800484c <HAL_TIM_Base_Stop+0x38>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6a1a      	ldr	r2, [r3, #32]
 8004832:	f240 4344 	movw	r3, #1092	; 0x444
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d107      	bne.n	800484c <HAL_TIM_Base_Stop+0x38>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e049      	b.n	8004908 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f841 	bl	8004910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f000 fd01 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <HAL_TIM_PWM_Start+0x24>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e03c      	b.n	80049c2 <HAL_TIM_PWM_Start+0x9e>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d109      	bne.n	8004962 <HAL_TIM_PWM_Start+0x3e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e02f      	b.n	80049c2 <HAL_TIM_PWM_Start+0x9e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d109      	bne.n	800497c <HAL_TIM_PWM_Start+0x58>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e022      	b.n	80049c2 <HAL_TIM_PWM_Start+0x9e>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d109      	bne.n	8004996 <HAL_TIM_PWM_Start+0x72>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	e015      	b.n	80049c2 <HAL_TIM_PWM_Start+0x9e>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b10      	cmp	r3, #16
 800499a:	d109      	bne.n	80049b0 <HAL_TIM_PWM_Start+0x8c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e008      	b.n	80049c2 <HAL_TIM_PWM_Start+0x9e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	bf14      	ite	ne
 80049bc:	2301      	movne	r3, #1
 80049be:	2300      	moveq	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e09c      	b.n	8004b04 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <HAL_TIM_PWM_Start+0xb6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049d8:	e023      	b.n	8004a22 <HAL_TIM_PWM_Start+0xfe>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d104      	bne.n	80049ea <HAL_TIM_PWM_Start+0xc6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e8:	e01b      	b.n	8004a22 <HAL_TIM_PWM_Start+0xfe>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d104      	bne.n	80049fa <HAL_TIM_PWM_Start+0xd6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f8:	e013      	b.n	8004a22 <HAL_TIM_PWM_Start+0xfe>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	d104      	bne.n	8004a0a <HAL_TIM_PWM_Start+0xe6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a08:	e00b      	b.n	8004a22 <HAL_TIM_PWM_Start+0xfe>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_PWM_Start+0xf6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a18:	e003      	b.n	8004a22 <HAL_TIM_PWM_Start+0xfe>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2201      	movs	r2, #1
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 f846 	bl	8005abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a35      	ldr	r2, [pc, #212]	; (8004b0c <HAL_TIM_PWM_Start+0x1e8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x13e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a34      	ldr	r2, [pc, #208]	; (8004b10 <HAL_TIM_PWM_Start+0x1ec>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x13e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <HAL_TIM_PWM_Start+0x1f0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x13e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a31      	ldr	r2, [pc, #196]	; (8004b18 <HAL_TIM_PWM_Start+0x1f4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x13e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <HAL_TIM_PWM_Start+0x1f8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x142>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <HAL_TIM_PWM_Start+0x144>
 8004a66:	2300      	movs	r3, #0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_TIM_PWM_Start+0x1e8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <HAL_TIM_PWM_Start+0x19e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d018      	beq.n	8004ac2 <HAL_TIM_PWM_Start+0x19e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a22      	ldr	r2, [pc, #136]	; (8004b20 <HAL_TIM_PWM_Start+0x1fc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_TIM_PWM_Start+0x19e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <HAL_TIM_PWM_Start+0x200>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_TIM_PWM_Start+0x19e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <HAL_TIM_PWM_Start+0x204>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_TIM_PWM_Start+0x19e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a17      	ldr	r2, [pc, #92]	; (8004b10 <HAL_TIM_PWM_Start+0x1ec>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_TIM_PWM_Start+0x19e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <HAL_TIM_PWM_Start+0x1f0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d115      	bne.n	8004aee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_TIM_PWM_Start+0x208>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d015      	beq.n	8004b00 <HAL_TIM_PWM_Start+0x1dc>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d011      	beq.n	8004b00 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e008      	b.n	8004b00 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40013400 	.word	0x40013400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	00010007 	.word	0x00010007

08004b30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 ffba 	bl	8005abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3e      	ldr	r2, [pc, #248]	; (8004c48 <HAL_TIM_PWM_Stop+0x118>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <HAL_TIM_PWM_Stop+0x4a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3d      	ldr	r2, [pc, #244]	; (8004c4c <HAL_TIM_PWM_Stop+0x11c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00e      	beq.n	8004b7a <HAL_TIM_PWM_Stop+0x4a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3b      	ldr	r2, [pc, #236]	; (8004c50 <HAL_TIM_PWM_Stop+0x120>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_TIM_PWM_Stop+0x4a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3a      	ldr	r2, [pc, #232]	; (8004c54 <HAL_TIM_PWM_Stop+0x124>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_TIM_PWM_Stop+0x4a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a38      	ldr	r2, [pc, #224]	; (8004c58 <HAL_TIM_PWM_Stop+0x128>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_PWM_Stop+0x4e>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_TIM_PWM_Stop+0x50>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d017      	beq.n	8004bb4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10f      	bne.n	8004bb4 <HAL_TIM_PWM_Stop+0x84>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	f240 4344 	movw	r3, #1092	; 0x444
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_PWM_Stop+0x84>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a1a      	ldr	r2, [r3, #32]
 8004bba:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <HAL_TIM_PWM_Stop+0xb4>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a1a      	ldr	r2, [r3, #32]
 8004bca:	f240 4344 	movw	r3, #1092	; 0x444
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_TIM_PWM_Stop+0xb4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_TIM_PWM_Stop+0xc4>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf2:	e023      	b.n	8004c3c <HAL_TIM_PWM_Stop+0x10c>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d104      	bne.n	8004c04 <HAL_TIM_PWM_Stop+0xd4>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c02:	e01b      	b.n	8004c3c <HAL_TIM_PWM_Stop+0x10c>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d104      	bne.n	8004c14 <HAL_TIM_PWM_Stop+0xe4>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c12:	e013      	b.n	8004c3c <HAL_TIM_PWM_Stop+0x10c>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d104      	bne.n	8004c24 <HAL_TIM_PWM_Stop+0xf4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c22:	e00b      	b.n	8004c3c <HAL_TIM_PWM_Stop+0x10c>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d104      	bne.n	8004c34 <HAL_TIM_PWM_Stop+0x104>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c32:	e003      	b.n	8004c3c <HAL_TIM_PWM_Stop+0x10c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0202 	mvn.w	r2, #2
 8004c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fae3 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fad5 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fae6 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fab9 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 faab 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fabc 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0208 	mvn.w	r2, #8
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2204      	movs	r2, #4
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa8f 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa81 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fa92 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0210 	mvn.w	r2, #16
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa65 	bl	800526a <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fa57 	bl	8005256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fa68 	bl	800527e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0201 	mvn.w	r2, #1
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc f85a 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 ff10 	bl	8005c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1a:	d10e      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d107      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 ff03 	bl	8005c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d10e      	bne.n	8004e66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d107      	bne.n	8004e66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fa16 	bl	8005292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d10e      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d107      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f06f 0220 	mvn.w	r2, #32
 8004e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fec3 	bl	8005c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0ff      	b.n	80050ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b14      	cmp	r3, #20
 8004ec6:	f200 80f0 	bhi.w	80050aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f25 	.word	0x08004f25
 8004ed4:	080050ab 	.word	0x080050ab
 8004ed8:	080050ab 	.word	0x080050ab
 8004edc:	080050ab 	.word	0x080050ab
 8004ee0:	08004f65 	.word	0x08004f65
 8004ee4:	080050ab 	.word	0x080050ab
 8004ee8:	080050ab 	.word	0x080050ab
 8004eec:	080050ab 	.word	0x080050ab
 8004ef0:	08004fa7 	.word	0x08004fa7
 8004ef4:	080050ab 	.word	0x080050ab
 8004ef8:	080050ab 	.word	0x080050ab
 8004efc:	080050ab 	.word	0x080050ab
 8004f00:	08004fe7 	.word	0x08004fe7
 8004f04:	080050ab 	.word	0x080050ab
 8004f08:	080050ab 	.word	0x080050ab
 8004f0c:	080050ab 	.word	0x080050ab
 8004f10:	08005029 	.word	0x08005029
 8004f14:	080050ab 	.word	0x080050ab
 8004f18:	080050ab 	.word	0x080050ab
 8004f1c:	080050ab 	.word	0x080050ab
 8004f20:	08005069 	.word	0x08005069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fa56 	bl	80053dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0208 	orr.w	r2, r2, #8
 8004f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0204 	bic.w	r2, r2, #4
 8004f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	619a      	str	r2, [r3, #24]
      break;
 8004f62:	e0a5      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fac6 	bl	80054fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	619a      	str	r2, [r3, #24]
      break;
 8004fa4:	e084      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fb2f 	bl	8005610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0208 	orr.w	r2, r2, #8
 8004fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0204 	bic.w	r2, r2, #4
 8004fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	61da      	str	r2, [r3, #28]
      break;
 8004fe4:	e064      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fb97 	bl	8005720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	021a      	lsls	r2, r3, #8
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	61da      	str	r2, [r3, #28]
      break;
 8005026:	e043      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fbe0 	bl	80057f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0208 	orr.w	r2, r2, #8
 8005042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0204 	bic.w	r2, r2, #4
 8005052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005066:	e023      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fc24 	bl	80058bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	021a      	lsls	r2, r3, #8
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050a8:	e002      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
      break;
 80050ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop

080050c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_TIM_ConfigClockSource+0x1c>
 80050dc:	2302      	movs	r3, #2
 80050de:	e0b6      	b.n	800524e <HAL_TIM_ConfigClockSource+0x18a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800510a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d03e      	beq.n	800519c <HAL_TIM_ConfigClockSource+0xd8>
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	f200 8087 	bhi.w	8005234 <HAL_TIM_ConfigClockSource+0x170>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	f000 8086 	beq.w	800523a <HAL_TIM_ConfigClockSource+0x176>
 800512e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005132:	d87f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d01a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0xaa>
 8005138:	2b70      	cmp	r3, #112	; 0x70
 800513a:	d87b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d050      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x11e>
 8005140:	2b60      	cmp	r3, #96	; 0x60
 8005142:	d877      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
 8005144:	2b50      	cmp	r3, #80	; 0x50
 8005146:	d03c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0xfe>
 8005148:	2b50      	cmp	r3, #80	; 0x50
 800514a:	d873      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d058      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0x13e>
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d86f      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d064      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15e>
 8005158:	2b30      	cmp	r3, #48	; 0x30
 800515a:	d86b      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d060      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15e>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d867      	bhi.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d05c      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15e>
 8005168:	2b10      	cmp	r3, #16
 800516a:	d05a      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0x15e>
 800516c:	e062      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6899      	ldr	r1, [r3, #8]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f000 fc7d 	bl	8005a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	609a      	str	r2, [r3, #8]
      break;
 800519a:	e04f      	b.n	800523c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f000 fc66 	bl	8005a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051be:	609a      	str	r2, [r3, #8]
      break;
 80051c0:	e03c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f000 fbda 	bl	8005988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2150      	movs	r1, #80	; 0x50
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fc33 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 80051e0:	e02c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f000 fbf9 	bl	80059e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2160      	movs	r1, #96	; 0x60
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fc23 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 8005200:	e01c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6859      	ldr	r1, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	461a      	mov	r2, r3
 8005210:	f000 fbba 	bl	8005988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fc13 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 8005220:	e00c      	b.n	800523c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 fc0a 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 8005232:	e003      	b.n	800523c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	e000      	b.n	800523c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800523a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a40      	ldr	r2, [pc, #256]	; (80053bc <TIM_Base_SetConfig+0x114>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d00f      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a3d      	ldr	r2, [pc, #244]	; (80053c0 <TIM_Base_SetConfig+0x118>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a3c      	ldr	r2, [pc, #240]	; (80053c4 <TIM_Base_SetConfig+0x11c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3b      	ldr	r2, [pc, #236]	; (80053c8 <TIM_Base_SetConfig+0x120>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3a      	ldr	r2, [pc, #232]	; (80053cc <TIM_Base_SetConfig+0x124>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d108      	bne.n	80052fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <TIM_Base_SetConfig+0x114>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d01f      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005308:	d01b      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2c      	ldr	r2, [pc, #176]	; (80053c0 <TIM_Base_SetConfig+0x118>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d017      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2b      	ldr	r2, [pc, #172]	; (80053c4 <TIM_Base_SetConfig+0x11c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <TIM_Base_SetConfig+0x120>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00f      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a29      	ldr	r2, [pc, #164]	; (80053cc <TIM_Base_SetConfig+0x124>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00b      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a28      	ldr	r2, [pc, #160]	; (80053d0 <TIM_Base_SetConfig+0x128>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d007      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a27      	ldr	r2, [pc, #156]	; (80053d4 <TIM_Base_SetConfig+0x12c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_Base_SetConfig+0x9a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a26      	ldr	r2, [pc, #152]	; (80053d8 <TIM_Base_SetConfig+0x130>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d108      	bne.n	8005354 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <TIM_Base_SetConfig+0x114>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00f      	beq.n	80053a0 <TIM_Base_SetConfig+0xf8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a12      	ldr	r2, [pc, #72]	; (80053cc <TIM_Base_SetConfig+0x124>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_Base_SetConfig+0xf8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a11      	ldr	r2, [pc, #68]	; (80053d0 <TIM_Base_SetConfig+0x128>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_Base_SetConfig+0xf8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <TIM_Base_SetConfig+0x12c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_Base_SetConfig+0xf8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a0f      	ldr	r2, [pc, #60]	; (80053d8 <TIM_Base_SetConfig+0x130>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d103      	bne.n	80053a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	615a      	str	r2, [r3, #20]
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40013400 	.word	0x40013400
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400
 80053d8:	40014800 	.word	0x40014800

080053dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 0302 	bic.w	r3, r3, #2
 8005428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <TIM_OC1_SetConfig+0x10c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00f      	beq.n	800545c <TIM_OC1_SetConfig+0x80>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <TIM_OC1_SetConfig+0x110>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00b      	beq.n	800545c <TIM_OC1_SetConfig+0x80>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <TIM_OC1_SetConfig+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d007      	beq.n	800545c <TIM_OC1_SetConfig+0x80>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a29      	ldr	r2, [pc, #164]	; (80054f4 <TIM_OC1_SetConfig+0x118>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_OC1_SetConfig+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <TIM_OC1_SetConfig+0x11c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d10c      	bne.n	8005476 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0308 	bic.w	r3, r3, #8
 8005462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <TIM_OC1_SetConfig+0x10c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <TIM_OC1_SetConfig+0xc2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <TIM_OC1_SetConfig+0x110>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00b      	beq.n	800549e <TIM_OC1_SetConfig+0xc2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <TIM_OC1_SetConfig+0x114>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_OC1_SetConfig+0xc2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <TIM_OC1_SetConfig+0x118>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_OC1_SetConfig+0xc2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <TIM_OC1_SetConfig+0x11c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d111      	bne.n	80054c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800

080054fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0210 	bic.w	r2, r3, #16
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0320 	bic.w	r3, r3, #32
 800554a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a28      	ldr	r2, [pc, #160]	; (80055fc <TIM_OC2_SetConfig+0x100>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC2_SetConfig+0x6c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a27      	ldr	r2, [pc, #156]	; (8005600 <TIM_OC2_SetConfig+0x104>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10d      	bne.n	8005584 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <TIM_OC2_SetConfig+0x100>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00f      	beq.n	80055ac <TIM_OC2_SetConfig+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <TIM_OC2_SetConfig+0x104>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_OC2_SetConfig+0xb0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <TIM_OC2_SetConfig+0x108>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_OC2_SetConfig+0xb0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <TIM_OC2_SetConfig+0x10c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_OC2_SetConfig+0xb0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a19      	ldr	r2, [pc, #100]	; (800560c <TIM_OC2_SetConfig+0x110>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d113      	bne.n	80055d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40013400 	.word	0x40013400
 8005604:	40014000 	.word	0x40014000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800

08005610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800565c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a27      	ldr	r2, [pc, #156]	; (800570c <TIM_OC3_SetConfig+0xfc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_OC3_SetConfig+0x6a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a26      	ldr	r2, [pc, #152]	; (8005710 <TIM_OC3_SetConfig+0x100>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10d      	bne.n	8005696 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1c      	ldr	r2, [pc, #112]	; (800570c <TIM_OC3_SetConfig+0xfc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00f      	beq.n	80056be <TIM_OC3_SetConfig+0xae>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <TIM_OC3_SetConfig+0x100>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_OC3_SetConfig+0xae>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <TIM_OC3_SetConfig+0x104>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_OC3_SetConfig+0xae>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a19      	ldr	r2, [pc, #100]	; (8005718 <TIM_OC3_SetConfig+0x108>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_OC3_SetConfig+0xae>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a18      	ldr	r2, [pc, #96]	; (800571c <TIM_OC3_SetConfig+0x10c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d113      	bne.n	80056e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	40012c00 	.word	0x40012c00
 8005710:	40013400 	.word	0x40013400
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800

08005720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800576e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	031b      	lsls	r3, r3, #12
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <TIM_OC4_SetConfig+0xc0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00f      	beq.n	80057a4 <TIM_OC4_SetConfig+0x84>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <TIM_OC4_SetConfig+0xc4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_OC4_SetConfig+0x84>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a16      	ldr	r2, [pc, #88]	; (80057e8 <TIM_OC4_SetConfig+0xc8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_OC4_SetConfig+0x84>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a15      	ldr	r2, [pc, #84]	; (80057ec <TIM_OC4_SetConfig+0xcc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC4_SetConfig+0x84>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <TIM_OC4_SetConfig+0xd0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d109      	bne.n	80057b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <TIM_OC5_SetConfig+0xb4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_OC5_SetConfig+0x7a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a16      	ldr	r2, [pc, #88]	; (80058ac <TIM_OC5_SetConfig+0xb8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_OC5_SetConfig+0x7a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <TIM_OC5_SetConfig+0xbc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_OC5_SetConfig+0x7a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a14      	ldr	r2, [pc, #80]	; (80058b4 <TIM_OC5_SetConfig+0xc0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_OC5_SetConfig+0x7a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <TIM_OC5_SetConfig+0xc4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d109      	bne.n	8005882 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005874:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800

080058bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	051b      	lsls	r3, r3, #20
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a18      	ldr	r2, [pc, #96]	; (8005974 <TIM_OC6_SetConfig+0xb8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00f      	beq.n	8005938 <TIM_OC6_SetConfig+0x7c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <TIM_OC6_SetConfig+0xbc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00b      	beq.n	8005938 <TIM_OC6_SetConfig+0x7c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <TIM_OC6_SetConfig+0xc0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d007      	beq.n	8005938 <TIM_OC6_SetConfig+0x7c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a15      	ldr	r2, [pc, #84]	; (8005980 <TIM_OC6_SetConfig+0xc4>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_OC6_SetConfig+0x7c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a14      	ldr	r2, [pc, #80]	; (8005984 <TIM_OC6_SetConfig+0xc8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d109      	bne.n	800594c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800593e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	029b      	lsls	r3, r3, #10
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40013400 	.word	0x40013400
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800

08005988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f023 0201 	bic.w	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f023 030a 	bic.w	r3, r3, #10
 80059c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b087      	sub	sp, #28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f023 0210 	bic.w	r2, r3, #16
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	031b      	lsls	r3, r3, #12
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f043 0307 	orr.w	r3, r3, #7
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	021a      	lsls	r2, r3, #8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	2201      	movs	r2, #1
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	43db      	mvns	r3, r3
 8005ade:	401a      	ands	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	fa01 f303 	lsl.w	r3, r1, r3
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e068      	b.n	8005bf2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d108      	bne.n	8005b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d01d      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d018      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a14      	ldr	r2, [pc, #80]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10c      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40013400 	.word	0x40013400
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40014000 	.word	0x40014000

08005c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e042      	b.n	8005cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fb fbb3 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2224      	movs	r2, #36	; 0x24
 8005c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fbba 	bl	8006410 <UART_SetConfig>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e022      	b.n	8005cec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 feaa 	bl	8006a08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 ff31 	bl	8006b4c <UART_CheckIdleState>
 8005cea:	4603      	mov	r3, r0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d142      	bne.n	8005d92 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_UART_Receive_IT+0x24>
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e03b      	b.n	8005d94 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Receive_IT+0x36>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e034      	b.n	8005d94 <HAL_UART_Receive_IT+0xa0>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <HAL_UART_Receive_IT+0xa8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d018      	beq.n	8005d82 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	69f9      	ldr	r1, [r7, #28]
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	461a      	mov	r2, r3
 8005d86:	68b9      	ldr	r1, [r7, #8]
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fff3 	bl	8006d74 <UART_Start_Receive_IT>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	e000      	b.n	8005d94 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d92:	2302      	movs	r3, #2
  }
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3728      	adds	r7, #40	; 0x28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40008000 	.word	0x40008000

08005da0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b0ba      	sub	sp, #232	; 0xe8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005dca:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dce:	4013      	ands	r3, r2
 8005dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d11b      	bne.n	8005e14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d015      	beq.n	8005e14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 82d6 	beq.w	80063b6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
      }
      return;
 8005e12:	e2d0      	b.n	80063b6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 811f 	beq.w	800605c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e22:	4b8b      	ldr	r3, [pc, #556]	; (8006050 <HAL_UART_IRQHandler+0x2b0>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e2e:	4b89      	ldr	r3, [pc, #548]	; (8006054 <HAL_UART_IRQHandler+0x2b4>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8112 	beq.w	800605c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d011      	beq.n	8005e68 <HAL_UART_IRQHandler+0xc8>
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5e:	f043 0201 	orr.w	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d011      	beq.n	8005e98 <HAL_UART_IRQHandler+0xf8>
 8005e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2202      	movs	r2, #2
 8005e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8e:	f043 0204 	orr.w	r2, r3, #4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d011      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x128>
 8005ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ebe:	f043 0202 	orr.w	r2, r3, #2
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ee0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005ee4:	4b5a      	ldr	r3, [pc, #360]	; (8006050 <HAL_UART_IRQHandler+0x2b0>)
 8005ee6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efa:	f043 0208 	orr.w	r2, r3, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d012      	beq.n	8005f36 <HAL_UART_IRQHandler+0x196>
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00c      	beq.n	8005f36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f2c:	f043 0220 	orr.w	r2, r3, #32
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 823c 	beq.w	80063ba <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d013      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d105      	bne.n	8005f66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d007      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04f      	beq.n	800603a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 f814 	bl	8006fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d141      	bne.n	8006032 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1d9      	bne.n	8005fae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d013      	beq.n	800602a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006006:	4a14      	ldr	r2, [pc, #80]	; (8006058 <HAL_UART_IRQHandler+0x2b8>)
 8006008:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600e:	4618      	mov	r0, r3
 8006010:	f7fb fe33 	bl	8001c7a <HAL_DMA_Abort_IT>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d017      	beq.n	800604a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	e00f      	b.n	800604a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9da 	bl	80063e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	e00b      	b.n	800604a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f9d6 	bl	80063e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	e007      	b.n	800604a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9d2 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006048:	e1b7      	b.n	80063ba <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604a:	bf00      	nop
    return;
 800604c:	e1b5      	b.n	80063ba <HAL_UART_IRQHandler+0x61a>
 800604e:	bf00      	nop
 8006050:	10000001 	.word	0x10000001
 8006054:	04000120 	.word	0x04000120
 8006058:	08007095 	.word	0x08007095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006060:	2b01      	cmp	r3, #1
 8006062:	f040 814a 	bne.w	80062fa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8143 	beq.w	80062fa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 813c 	beq.w	80062fa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2210      	movs	r2, #16
 8006088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	f040 80b5 	bne.w	8006204 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8187 	beq.w	80063be <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ba:	429a      	cmp	r2, r3
 80060bc:	f080 817f 	bcs.w	80063be <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 8086 	bne.w	80061e8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800610a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800611e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1da      	bne.n	80060dc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006138:	f023 0301 	bic.w	r3, r3, #1
 800613c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800614a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800614e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800615c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e1      	bne.n	8006126 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3308      	adds	r3, #8
 8006182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800618c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e3      	bne.n	8006162 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b8:	f023 0310 	bic.w	r3, r3, #16
 80061bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80061cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e4      	bne.n	80061a8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fb fced 	bl	8001bc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f8fb 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006202:	e0dc      	b.n	80063be <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006210:	b29b      	uxth	r3, r3
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80ce 	beq.w	80063c2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80c9 	beq.w	80063c2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006252:	647b      	str	r3, [r7, #68]	; 0x44
 8006254:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e4      	bne.n	8006230 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3308      	adds	r3, #8
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	623b      	str	r3, [r7, #32]
   return(result);
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800628e:	633a      	str	r2, [r7, #48]	; 0x30
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e1      	bne.n	8006266 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	617b      	str	r3, [r7, #20]
   return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e4      	bne.n	80062b6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f880 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062f8:	e063      	b.n	80063c2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00e      	beq.n	8006324 <HAL_UART_IRQHandler+0x584>
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800631a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fb57 	bl	80079d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006322:	e051      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632c:	2b00      	cmp	r3, #0
 800632e:	d014      	beq.n	800635a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634c:	2b00      	cmp	r3, #0
 800634e:	d03a      	beq.n	80063c6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
    }
    return;
 8006358:	e035      	b.n	80063c6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_UART_IRQHandler+0x5da>
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fea4 	bl	80070c0 <UART_EndTransmit_IT>
    return;
 8006378:	e026      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800637a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <HAL_UART_IRQHandler+0x5fa>
 8006386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fb30 	bl	80079f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006398:	e016      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d010      	beq.n	80063c8 <HAL_UART_IRQHandler+0x628>
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da0c      	bge.n	80063c8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fb18 	bl	80079e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063b4:	e008      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
      return;
 80063b6:	bf00      	nop
 80063b8:	e006      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
    return;
 80063ba:	bf00      	nop
 80063bc:	e004      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
      return;
 80063be:	bf00      	nop
 80063c0:	e002      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
      return;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_UART_IRQHandler+0x628>
    return;
 80063c6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80063c8:	37e8      	adds	r7, #232	; 0xe8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop

080063d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006414:	b08c      	sub	sp, #48	; 0x30
 8006416:	af00      	add	r7, sp, #0
 8006418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	431a      	orrs	r2, r3
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	431a      	orrs	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4baa      	ldr	r3, [pc, #680]	; (80066e8 <UART_SetConfig+0x2d8>)
 8006440:	4013      	ands	r3, r2
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006448:	430b      	orrs	r3, r1
 800644a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a9f      	ldr	r2, [pc, #636]	; (80066ec <UART_SetConfig+0x2dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006478:	4313      	orrs	r3, r2
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006486:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006490:	430b      	orrs	r3, r1
 8006492:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	f023 010f 	bic.w	r1, r3, #15
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a90      	ldr	r2, [pc, #576]	; (80066f0 <UART_SetConfig+0x2e0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d125      	bne.n	8006500 <UART_SetConfig+0xf0>
 80064b4:	4b8f      	ldr	r3, [pc, #572]	; (80066f4 <UART_SetConfig+0x2e4>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d81a      	bhi.n	80064f8 <UART_SetConfig+0xe8>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0xb8>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064e9 	.word	0x080064e9
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	080064f1 	.word	0x080064f1
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064de:	e116      	b.n	800670e <UART_SetConfig+0x2fe>
 80064e0:	2302      	movs	r3, #2
 80064e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e6:	e112      	b.n	800670e <UART_SetConfig+0x2fe>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ee:	e10e      	b.n	800670e <UART_SetConfig+0x2fe>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f6:	e10a      	b.n	800670e <UART_SetConfig+0x2fe>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fe:	e106      	b.n	800670e <UART_SetConfig+0x2fe>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a7c      	ldr	r2, [pc, #496]	; (80066f8 <UART_SetConfig+0x2e8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d138      	bne.n	800657c <UART_SetConfig+0x16c>
 800650a:	4b7a      	ldr	r3, [pc, #488]	; (80066f4 <UART_SetConfig+0x2e4>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006510:	f003 030c 	and.w	r3, r3, #12
 8006514:	2b0c      	cmp	r3, #12
 8006516:	d82d      	bhi.n	8006574 <UART_SetConfig+0x164>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <UART_SetConfig+0x110>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006555 	.word	0x08006555
 8006524:	08006575 	.word	0x08006575
 8006528:	08006575 	.word	0x08006575
 800652c:	08006575 	.word	0x08006575
 8006530:	08006565 	.word	0x08006565
 8006534:	08006575 	.word	0x08006575
 8006538:	08006575 	.word	0x08006575
 800653c:	08006575 	.word	0x08006575
 8006540:	0800655d 	.word	0x0800655d
 8006544:	08006575 	.word	0x08006575
 8006548:	08006575 	.word	0x08006575
 800654c:	08006575 	.word	0x08006575
 8006550:	0800656d 	.word	0x0800656d
 8006554:	2300      	movs	r3, #0
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655a:	e0d8      	b.n	800670e <UART_SetConfig+0x2fe>
 800655c:	2302      	movs	r3, #2
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006562:	e0d4      	b.n	800670e <UART_SetConfig+0x2fe>
 8006564:	2304      	movs	r3, #4
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656a:	e0d0      	b.n	800670e <UART_SetConfig+0x2fe>
 800656c:	2308      	movs	r3, #8
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006572:	e0cc      	b.n	800670e <UART_SetConfig+0x2fe>
 8006574:	2310      	movs	r3, #16
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657a:	e0c8      	b.n	800670e <UART_SetConfig+0x2fe>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a5e      	ldr	r2, [pc, #376]	; (80066fc <UART_SetConfig+0x2ec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d125      	bne.n	80065d2 <UART_SetConfig+0x1c2>
 8006586:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <UART_SetConfig+0x2e4>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006590:	2b30      	cmp	r3, #48	; 0x30
 8006592:	d016      	beq.n	80065c2 <UART_SetConfig+0x1b2>
 8006594:	2b30      	cmp	r3, #48	; 0x30
 8006596:	d818      	bhi.n	80065ca <UART_SetConfig+0x1ba>
 8006598:	2b20      	cmp	r3, #32
 800659a:	d00a      	beq.n	80065b2 <UART_SetConfig+0x1a2>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d814      	bhi.n	80065ca <UART_SetConfig+0x1ba>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <UART_SetConfig+0x19a>
 80065a4:	2b10      	cmp	r3, #16
 80065a6:	d008      	beq.n	80065ba <UART_SetConfig+0x1aa>
 80065a8:	e00f      	b.n	80065ca <UART_SetConfig+0x1ba>
 80065aa:	2300      	movs	r3, #0
 80065ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b0:	e0ad      	b.n	800670e <UART_SetConfig+0x2fe>
 80065b2:	2302      	movs	r3, #2
 80065b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b8:	e0a9      	b.n	800670e <UART_SetConfig+0x2fe>
 80065ba:	2304      	movs	r3, #4
 80065bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c0:	e0a5      	b.n	800670e <UART_SetConfig+0x2fe>
 80065c2:	2308      	movs	r3, #8
 80065c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c8:	e0a1      	b.n	800670e <UART_SetConfig+0x2fe>
 80065ca:	2310      	movs	r3, #16
 80065cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d0:	e09d      	b.n	800670e <UART_SetConfig+0x2fe>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a4a      	ldr	r2, [pc, #296]	; (8006700 <UART_SetConfig+0x2f0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d125      	bne.n	8006628 <UART_SetConfig+0x218>
 80065dc:	4b45      	ldr	r3, [pc, #276]	; (80066f4 <UART_SetConfig+0x2e4>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065e6:	2bc0      	cmp	r3, #192	; 0xc0
 80065e8:	d016      	beq.n	8006618 <UART_SetConfig+0x208>
 80065ea:	2bc0      	cmp	r3, #192	; 0xc0
 80065ec:	d818      	bhi.n	8006620 <UART_SetConfig+0x210>
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d00a      	beq.n	8006608 <UART_SetConfig+0x1f8>
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d814      	bhi.n	8006620 <UART_SetConfig+0x210>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <UART_SetConfig+0x1f0>
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d008      	beq.n	8006610 <UART_SetConfig+0x200>
 80065fe:	e00f      	b.n	8006620 <UART_SetConfig+0x210>
 8006600:	2300      	movs	r3, #0
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006606:	e082      	b.n	800670e <UART_SetConfig+0x2fe>
 8006608:	2302      	movs	r3, #2
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660e:	e07e      	b.n	800670e <UART_SetConfig+0x2fe>
 8006610:	2304      	movs	r3, #4
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006616:	e07a      	b.n	800670e <UART_SetConfig+0x2fe>
 8006618:	2308      	movs	r3, #8
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661e:	e076      	b.n	800670e <UART_SetConfig+0x2fe>
 8006620:	2310      	movs	r3, #16
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006626:	e072      	b.n	800670e <UART_SetConfig+0x2fe>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a35      	ldr	r2, [pc, #212]	; (8006704 <UART_SetConfig+0x2f4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d12a      	bne.n	8006688 <UART_SetConfig+0x278>
 8006632:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <UART_SetConfig+0x2e4>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006640:	d01a      	beq.n	8006678 <UART_SetConfig+0x268>
 8006642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006646:	d81b      	bhi.n	8006680 <UART_SetConfig+0x270>
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d00c      	beq.n	8006668 <UART_SetConfig+0x258>
 800664e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006652:	d815      	bhi.n	8006680 <UART_SetConfig+0x270>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <UART_SetConfig+0x250>
 8006658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665c:	d008      	beq.n	8006670 <UART_SetConfig+0x260>
 800665e:	e00f      	b.n	8006680 <UART_SetConfig+0x270>
 8006660:	2300      	movs	r3, #0
 8006662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006666:	e052      	b.n	800670e <UART_SetConfig+0x2fe>
 8006668:	2302      	movs	r3, #2
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666e:	e04e      	b.n	800670e <UART_SetConfig+0x2fe>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e04a      	b.n	800670e <UART_SetConfig+0x2fe>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e046      	b.n	800670e <UART_SetConfig+0x2fe>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e042      	b.n	800670e <UART_SetConfig+0x2fe>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a17      	ldr	r2, [pc, #92]	; (80066ec <UART_SetConfig+0x2dc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d13a      	bne.n	8006708 <UART_SetConfig+0x2f8>
 8006692:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <UART_SetConfig+0x2e4>)
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800669c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a0:	d01a      	beq.n	80066d8 <UART_SetConfig+0x2c8>
 80066a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a6:	d81b      	bhi.n	80066e0 <UART_SetConfig+0x2d0>
 80066a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ac:	d00c      	beq.n	80066c8 <UART_SetConfig+0x2b8>
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d815      	bhi.n	80066e0 <UART_SetConfig+0x2d0>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <UART_SetConfig+0x2b0>
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d008      	beq.n	80066d0 <UART_SetConfig+0x2c0>
 80066be:	e00f      	b.n	80066e0 <UART_SetConfig+0x2d0>
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c6:	e022      	b.n	800670e <UART_SetConfig+0x2fe>
 80066c8:	2302      	movs	r3, #2
 80066ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ce:	e01e      	b.n	800670e <UART_SetConfig+0x2fe>
 80066d0:	2304      	movs	r3, #4
 80066d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066d6:	e01a      	b.n	800670e <UART_SetConfig+0x2fe>
 80066d8:	2308      	movs	r3, #8
 80066da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066de:	e016      	b.n	800670e <UART_SetConfig+0x2fe>
 80066e0:	2310      	movs	r3, #16
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e6:	e012      	b.n	800670e <UART_SetConfig+0x2fe>
 80066e8:	cfff69f3 	.word	0xcfff69f3
 80066ec:	40008000 	.word	0x40008000
 80066f0:	40013800 	.word	0x40013800
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40004400 	.word	0x40004400
 80066fc:	40004800 	.word	0x40004800
 8006700:	40004c00 	.word	0x40004c00
 8006704:	40005000 	.word	0x40005000
 8006708:	2310      	movs	r3, #16
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4aae      	ldr	r2, [pc, #696]	; (80069cc <UART_SetConfig+0x5bc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	f040 8097 	bne.w	8006848 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800671a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800671e:	2b08      	cmp	r3, #8
 8006720:	d823      	bhi.n	800676a <UART_SetConfig+0x35a>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x318>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800674d 	.word	0x0800674d
 800672c:	0800676b 	.word	0x0800676b
 8006730:	08006755 	.word	0x08006755
 8006734:	0800676b 	.word	0x0800676b
 8006738:	0800675b 	.word	0x0800675b
 800673c:	0800676b 	.word	0x0800676b
 8006740:	0800676b 	.word	0x0800676b
 8006744:	0800676b 	.word	0x0800676b
 8006748:	08006763 	.word	0x08006763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fd f962 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006752:	e010      	b.n	8006776 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006754:	4b9e      	ldr	r3, [pc, #632]	; (80069d0 <UART_SetConfig+0x5c0>)
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006758:	e00d      	b.n	8006776 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7fd f8c3 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800675e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006760:	e009      	b.n	8006776 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006768:	e005      	b.n	8006776 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006774:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8130 	beq.w	80069de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	4a94      	ldr	r2, [pc, #592]	; (80069d4 <UART_SetConfig+0x5c4>)
 8006784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006788:	461a      	mov	r2, r3
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006790:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	4413      	add	r3, r2
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d305      	bcc.n	80067ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d903      	bls.n	80067b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067b4:	e113      	b.n	80069de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	2200      	movs	r2, #0
 80067ba:	60bb      	str	r3, [r7, #8]
 80067bc:	60fa      	str	r2, [r7, #12]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	4a84      	ldr	r2, [pc, #528]	; (80069d4 <UART_SetConfig+0x5c4>)
 80067c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2200      	movs	r2, #0
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067d8:	f7f9 fd10 	bl	80001fc <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	020b      	lsls	r3, r1, #8
 80067ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067f2:	0202      	lsls	r2, r0, #8
 80067f4:	6979      	ldr	r1, [r7, #20]
 80067f6:	6849      	ldr	r1, [r1, #4]
 80067f8:	0849      	lsrs	r1, r1, #1
 80067fa:	2000      	movs	r0, #0
 80067fc:	460c      	mov	r4, r1
 80067fe:	4605      	mov	r5, r0
 8006800:	eb12 0804 	adds.w	r8, r2, r4
 8006804:	eb43 0905 	adc.w	r9, r3, r5
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	469a      	mov	sl, r3
 8006810:	4693      	mov	fp, r2
 8006812:	4652      	mov	r2, sl
 8006814:	465b      	mov	r3, fp
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7f9 fcef 	bl	80001fc <__aeabi_uldivmod>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4613      	mov	r3, r2
 8006824:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800682c:	d308      	bcc.n	8006840 <UART_SetConfig+0x430>
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006834:	d204      	bcs.n	8006840 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a3a      	ldr	r2, [r7, #32]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	e0ce      	b.n	80069de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006846:	e0ca      	b.n	80069de <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006850:	d166      	bne.n	8006920 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006852:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006856:	2b08      	cmp	r3, #8
 8006858:	d827      	bhi.n	80068aa <UART_SetConfig+0x49a>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0x450>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006885 	.word	0x08006885
 8006864:	0800688d 	.word	0x0800688d
 8006868:	08006895 	.word	0x08006895
 800686c:	080068ab 	.word	0x080068ab
 8006870:	0800689b 	.word	0x0800689b
 8006874:	080068ab 	.word	0x080068ab
 8006878:	080068ab 	.word	0x080068ab
 800687c:	080068ab 	.word	0x080068ab
 8006880:	080068a3 	.word	0x080068a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fd f8c6 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8006888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800688a:	e014      	b.n	80068b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800688c:	f7fd f8d8 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8006890:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006892:	e010      	b.n	80068b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006894:	4b4e      	ldr	r3, [pc, #312]	; (80069d0 <UART_SetConfig+0x5c0>)
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006898:	e00d      	b.n	80068b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689a:	f7fd f823 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800689e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068a0:	e009      	b.n	80068b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068a8:	e005      	b.n	80068b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8090 	beq.w	80069de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	4a44      	ldr	r2, [pc, #272]	; (80069d4 <UART_SetConfig+0x5c4>)
 80068c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d0:	005a      	lsls	r2, r3, #1
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	441a      	add	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d916      	bls.n	8006918 <UART_SetConfig+0x508>
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f0:	d212      	bcs.n	8006918 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f023 030f 	bic.w	r3, r3, #15
 80068fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	b29b      	uxth	r3, r3
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	b29a      	uxth	r2, r3
 8006908:	8bfb      	ldrh	r3, [r7, #30]
 800690a:	4313      	orrs	r3, r2
 800690c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	8bfa      	ldrh	r2, [r7, #30]
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e062      	b.n	80069de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800691e:	e05e      	b.n	80069de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006924:	2b08      	cmp	r3, #8
 8006926:	d828      	bhi.n	800697a <UART_SetConfig+0x56a>
 8006928:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x520>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	0800697b 	.word	0x0800697b
 8006940:	0800696b 	.word	0x0800696b
 8006944:	0800697b 	.word	0x0800697b
 8006948:	0800697b 	.word	0x0800697b
 800694c:	0800697b 	.word	0x0800697b
 8006950:	08006973 	.word	0x08006973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fd f85e 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800695a:	e014      	b.n	8006986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800695c:	f7fd f870 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 8006960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006962:	e010      	b.n	8006986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <UART_SetConfig+0x5c0>)
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006968:	e00d      	b.n	8006986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696a:	f7fc ffbb 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 800696e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006970:	e009      	b.n	8006986 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006978:	e005      	b.n	8006986 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006984:	bf00      	nop
    }

    if (pclk != 0U)
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d028      	beq.n	80069de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	4a10      	ldr	r2, [pc, #64]	; (80069d4 <UART_SetConfig+0x5c4>)
 8006992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006996:	461a      	mov	r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	fbb3 f2f2 	udiv	r2, r3, r2
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	441a      	add	r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	2b0f      	cmp	r3, #15
 80069b4:	d910      	bls.n	80069d8 <UART_SetConfig+0x5c8>
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069bc:	d20c      	bcs.n	80069d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e009      	b.n	80069de <UART_SetConfig+0x5ce>
 80069ca:	bf00      	nop
 80069cc:	40008000 	.word	0x40008000
 80069d0:	00f42400 	.word	0x00f42400
 80069d4:	0800ccf4 	.word	0x0800ccf4
      }
      else
      {
        ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2200      	movs	r2, #0
 80069f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2200      	movs	r2, #0
 80069f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80069fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3730      	adds	r7, #48	; 0x30
 8006a02:	46bd      	mov	sp, r7
 8006a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b06:	d10a      	bne.n	8006b1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b5c:	f7fa fef0 	bl	8001940 <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d10e      	bne.n	8006b8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f82f 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e025      	b.n	8006bda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d10e      	bne.n	8006bba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f819 	bl	8006be2 <UART_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e00f      	b.n	8006bda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b09c      	sub	sp, #112	; 0x70
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf2:	e0a9      	b.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	f000 80a5 	beq.w	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfe:	f7fa fe9f 	bl	8001940 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d302      	bcc.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d140      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c28:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e6      	bne.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c66:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e069      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d051      	beq.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb2:	d149      	bne.n	8006d48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d10:	623a      	str	r2, [r7, #32]
 8006d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e010      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69da      	ldr	r2, [r3, #28]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4013      	ands	r3, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	bf0c      	ite	eq
 8006d58:	2301      	moveq	r3, #1
 8006d5a:	2300      	movne	r3, #0
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	79fb      	ldrb	r3, [r7, #7]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	f43f af46 	beq.w	8006bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3770      	adds	r7, #112	; 0x70
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b0a3      	sub	sp, #140	; 0x8c
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	88fa      	ldrh	r2, [r7, #6]
 8006d94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da6:	d10e      	bne.n	8006dc6 <UART_Start_Receive_IT+0x52>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <UART_Start_Receive_IT+0x48>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006db6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dba:	e02d      	b.n	8006e18 <UART_Start_Receive_IT+0xa4>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	22ff      	movs	r2, #255	; 0xff
 8006dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dc4:	e028      	b.n	8006e18 <UART_Start_Receive_IT+0xa4>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10d      	bne.n	8006dea <UART_Start_Receive_IT+0x76>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <UART_Start_Receive_IT+0x6c>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	22ff      	movs	r2, #255	; 0xff
 8006dda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dde:	e01b      	b.n	8006e18 <UART_Start_Receive_IT+0xa4>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	227f      	movs	r2, #127	; 0x7f
 8006de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006de8:	e016      	b.n	8006e18 <UART_Start_Receive_IT+0xa4>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006df2:	d10d      	bne.n	8006e10 <UART_Start_Receive_IT+0x9c>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <UART_Start_Receive_IT+0x92>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	227f      	movs	r2, #127	; 0x7f
 8006e00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e04:	e008      	b.n	8006e18 <UART_Start_Receive_IT+0xa4>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	223f      	movs	r2, #63	; 0x3f
 8006e0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e0e:	e003      	b.n	8006e18 <UART_Start_Receive_IT+0xa4>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2222      	movs	r2, #34	; 0x22
 8006e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e4c:	673a      	str	r2, [r7, #112]	; 0x70
 8006e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006e52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e3      	bne.n	8006e28 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e68:	d153      	bne.n	8006f12 <UART_Start_Receive_IT+0x19e>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d34d      	bcc.n	8006f12 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7e:	d107      	bne.n	8006e90 <UART_Start_Receive_IT+0x11c>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a4b      	ldr	r2, [pc, #300]	; (8006fb8 <UART_Start_Receive_IT+0x244>)
 8006e8c:	671a      	str	r2, [r3, #112]	; 0x70
 8006e8e:	e002      	b.n	8006e96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a4a      	ldr	r2, [pc, #296]	; (8006fbc <UART_Start_Receive_IT+0x248>)
 8006e94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01a      	beq.n	8006edc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ece:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e4      	bne.n	8006ea6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006efc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006efe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e5      	bne.n	8006edc <UART_Start_Receive_IT+0x168>
 8006f10:	e04a      	b.n	8006fa8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d107      	bne.n	8006f2c <UART_Start_Receive_IT+0x1b8>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d103      	bne.n	8006f2c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <UART_Start_Receive_IT+0x24c>)
 8006f28:	671a      	str	r2, [r3, #112]	; 0x70
 8006f2a:	e002      	b.n	8006f32 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <UART_Start_Receive_IT+0x250>)
 8006f30:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d019      	beq.n	8006f76 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f56:	677b      	str	r3, [r7, #116]	; 0x74
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
 8006f62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_Start_Receive_IT+0x1ce>
 8006f74:	e018      	b.n	8006fa8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	613b      	str	r3, [r7, #16]
   return(result);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f043 0320 	orr.w	r3, r3, #32
 8006f8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f94:	623b      	str	r3, [r7, #32]
 8006f96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	69f9      	ldr	r1, [r7, #28]
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e6      	bne.n	8006f76 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	378c      	adds	r7, #140	; 0x8c
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	080076d1 	.word	0x080076d1
 8006fbc:	080073d9 	.word	0x080073d9
 8006fc0:	08007277 	.word	0x08007277
 8006fc4:	08007117 	.word	0x08007117

08006fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b095      	sub	sp, #84	; 0x54
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fee:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e6      	bne.n	8006fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	61fb      	str	r3, [r7, #28]
   return(result);
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	64bb      	str	r3, [r7, #72]	; 0x48
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800702c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e3      	bne.n	8007002 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d118      	bne.n	8007074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	647b      	str	r3, [r7, #68]	; 0x44
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e6      	bne.n	8007042 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2220      	movs	r2, #32
 8007078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007088:	bf00      	nop
 800708a:	3754      	adds	r7, #84	; 0x54
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff f996 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6979      	ldr	r1, [r7, #20]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	613b      	str	r3, [r7, #16]
   return(result);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e6      	bne.n	80070c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff f961 	bl	80063d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710e:	bf00      	nop
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b096      	sub	sp, #88	; 0x58
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007124:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712e:	2b22      	cmp	r3, #34	; 0x22
 8007130:	f040 8095 	bne.w	800725e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800713e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007142:	b2d9      	uxtb	r1, r3
 8007144:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007148:	b2da      	uxtb	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	400a      	ands	r2, r1
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d178      	bne.n	800726e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007190:	653b      	str	r3, [r7, #80]	; 0x50
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719a:	647b      	str	r3, [r7, #68]	; 0x44
 800719c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e6      	bne.n	800717c <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3308      	adds	r3, #8
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	623b      	str	r3, [r7, #32]
   return(result);
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071ce:	633a      	str	r2, [r7, #48]	; 0x30
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e5      	bne.n	80071ae <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d12e      	bne.n	8007256 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60fb      	str	r3, [r7, #12]
   return(result);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0310 	bic.w	r3, r3, #16
 8007212:	64bb      	str	r3, [r7, #72]	; 0x48
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	617b      	str	r3, [r7, #20]
   return(result);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b10      	cmp	r3, #16
 800723c:	d103      	bne.n	8007246 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2210      	movs	r2, #16
 8007244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff f8d2 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007254:	e00b      	b.n	800726e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7f9 fee8 	bl	800102c <HAL_UART_RxCpltCallback>
}
 800725c:	e007      	b.n	800726e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0208 	orr.w	r2, r2, #8
 800726c:	619a      	str	r2, [r3, #24]
}
 800726e:	bf00      	nop
 8007270:	3758      	adds	r7, #88	; 0x58
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b096      	sub	sp, #88	; 0x58
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007284:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	2b22      	cmp	r3, #34	; 0x22
 8007290:	f040 8095 	bne.w	80073be <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80072a4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80072a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072ac:	4013      	ands	r3, r2
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d178      	bne.n	80073ce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40
 80072fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e6      	bne.n	80072dc <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	61fb      	str	r3, [r7, #28]
   return(result);
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	f023 0301 	bic.w	r3, r3, #1
 8007324:	64bb      	str	r3, [r7, #72]	; 0x48
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007354:	2b01      	cmp	r3, #1
 8007356:	d12e      	bne.n	80073b6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	60bb      	str	r3, [r7, #8]
   return(result);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f023 0310 	bic.w	r3, r3, #16
 8007372:	647b      	str	r3, [r7, #68]	; 0x44
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6979      	ldr	r1, [r7, #20]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	613b      	str	r3, [r7, #16]
   return(result);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f003 0310 	and.w	r3, r3, #16
 800739a:	2b10      	cmp	r3, #16
 800739c:	d103      	bne.n	80073a6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2210      	movs	r2, #16
 80073a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff f822 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073b4:	e00b      	b.n	80073ce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7f9 fe38 	bl	800102c <HAL_UART_RxCpltCallback>
}
 80073bc:	e007      	b.n	80073ce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699a      	ldr	r2, [r3, #24]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0208 	orr.w	r2, r2, #8
 80073cc:	619a      	str	r2, [r3, #24]
}
 80073ce:	bf00      	nop
 80073d0:	3758      	adds	r7, #88	; 0x58
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b0a6      	sub	sp, #152	; 0x98
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073e6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740e:	2b22      	cmp	r3, #34	; 0x22
 8007410:	f040 814f 	bne.w	80076b2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800741a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800741e:	e0f6      	b.n	800760e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800742a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800742e:	b2d9      	uxtb	r1, r3
 8007430:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007434:	b2da      	uxtb	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743a:	400a      	ands	r2, r1
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007466:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d053      	beq.n	800751a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d011      	beq.n	80074a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800747e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007498:	f043 0201 	orr.w	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d011      	beq.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80074ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2202      	movs	r2, #2
 80074c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c8:	f043 0204 	orr.w	r2, r3, #4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d011      	beq.n	8007502 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2204      	movs	r2, #4
 80074f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f8:	f043 0202 	orr.w	r2, r3, #2
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d006      	beq.n	800751a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fe ff69 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d173      	bne.n	800760e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800753a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007548:	66bb      	str	r3, [r7, #104]	; 0x68
 800754a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800754e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e4      	bne.n	8007526 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800756c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007572:	f023 0301 	bic.w	r3, r3, #1
 8007576:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007580:	657a      	str	r2, [r7, #84]	; 0x54
 8007582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e3      	bne.n	800755c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d12e      	bne.n	8007608 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	f023 0310 	bic.w	r3, r3, #16
 80075c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ce:	643b      	str	r3, [r7, #64]	; 0x40
 80075d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e6      	bne.n	80075b0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b10      	cmp	r3, #16
 80075ee:	d103      	bne.n	80075f8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2210      	movs	r2, #16
 80075f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fe fef9 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
 8007606:	e002      	b.n	800760e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7f9 fd0f 	bl	800102c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800760e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	f47f aefe 	bne.w	8007420 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800762a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800762e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007632:	2b00      	cmp	r3, #0
 8007634:	d045      	beq.n	80076c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800763c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007640:	429a      	cmp	r2, r3
 8007642:	d23e      	bcs.n	80076c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	61fb      	str	r3, [r7, #28]
   return(result);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800765a:	673b      	str	r3, [r7, #112]	; 0x70
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007664:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800766a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a14      	ldr	r2, [pc, #80]	; (80076cc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800767c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	60bb      	str	r3, [r7, #8]
   return(result);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f043 0320 	orr.w	r3, r3, #32
 8007692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6979      	ldr	r1, [r7, #20]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	613b      	str	r3, [r7, #16]
   return(result);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e6      	bne.n	800767e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076b0:	e007      	b.n	80076c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0208 	orr.w	r2, r2, #8
 80076c0:	619a      	str	r2, [r3, #24]
}
 80076c2:	bf00      	nop
 80076c4:	3798      	adds	r7, #152	; 0x98
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	08007117 	.word	0x08007117

080076d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b0a8      	sub	sp, #160	; 0xa0
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076de:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	2b22      	cmp	r3, #34	; 0x22
 8007708:	f040 8153 	bne.w	80079b2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007712:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007716:	e0fa      	b.n	800790e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800772a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800772e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007732:	4013      	ands	r3, r2
 8007734:	b29a      	uxth	r2, r3
 8007736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800773a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007740:	1c9a      	adds	r2, r3, #2
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	2b00      	cmp	r3, #0
 800776c:	d053      	beq.n	8007816 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800776e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d011      	beq.n	800779e <UART_RxISR_16BIT_FIFOEN+0xce>
 800777a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2201      	movs	r2, #1
 800778c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007794:	f043 0201 	orr.w	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800779e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d011      	beq.n	80077ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80077aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2202      	movs	r2, #2
 80077bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077c4:	f043 0204 	orr.w	r2, r3, #4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d011      	beq.n	80077fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80077da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2204      	movs	r2, #4
 80077ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f4:	f043 0202 	orr.w	r2, r3, #2
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7fe fdeb 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d175      	bne.n	800790e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007846:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800784a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e4      	bne.n	8007822 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800786e:	f023 0301 	bic.w	r3, r3, #1
 8007872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007880:	65ba      	str	r2, [r7, #88]	; 0x58
 8007882:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800788e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e1      	bne.n	8007858 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d12e      	bne.n	8007908 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	f023 0310 	bic.w	r3, r3, #16
 80078c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078ce:	647b      	str	r3, [r7, #68]	; 0x44
 80078d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e6      	bne.n	80078b0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f003 0310 	and.w	r3, r3, #16
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d103      	bne.n	80078f8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2210      	movs	r2, #16
 80078f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fe fd79 	bl	80063f8 <HAL_UARTEx_RxEventCallback>
 8007906:	e002      	b.n	800790e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7f9 fb8f 	bl	800102c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800790e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007912:	2b00      	cmp	r3, #0
 8007914:	d006      	beq.n	8007924 <UART_RxISR_16BIT_FIFOEN+0x254>
 8007916:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	f47f aefa 	bne.w	8007718 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800792a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800792e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007932:	2b00      	cmp	r3, #0
 8007934:	d045      	beq.n	80079c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800793c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007940:	429a      	cmp	r2, r3
 8007942:	d23e      	bcs.n	80079c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3308      	adds	r3, #8
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	623b      	str	r3, [r7, #32]
   return(result);
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795a:	677b      	str	r3, [r7, #116]	; 0x74
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007964:	633a      	str	r2, [r7, #48]	; 0x30
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e5      	bne.n	8007944 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a14      	ldr	r2, [pc, #80]	; (80079cc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800797c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	60fb      	str	r3, [r7, #12]
   return(result);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f043 0320 	orr.w	r3, r3, #32
 8007992:	673b      	str	r3, [r7, #112]	; 0x70
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800799c:	61fb      	str	r3, [r7, #28]
 800799e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	69b9      	ldr	r1, [r7, #24]
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	617b      	str	r3, [r7, #20]
   return(result);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e6      	bne.n	800797e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079b0:	e007      	b.n	80079c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0208 	orr.w	r2, r2, #8
 80079c0:	619a      	str	r2, [r3, #24]
}
 80079c2:	bf00      	nop
 80079c4:	37a0      	adds	r7, #160	; 0xa0
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	08007277 	.word	0x08007277

080079d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e027      	b.n	8007a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2224      	movs	r2, #36	; 0x24
 8007a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0201 	bic.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a92:	2302      	movs	r3, #2
 8007a94:	e02d      	b.n	8007af2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2224      	movs	r2, #36	; 0x24
 8007aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f850 	bl	8007b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e02d      	b.n	8007b6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2224      	movs	r2, #36	; 0x24
 8007b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f812 	bl	8007b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d108      	bne.n	8007b9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b98:	e031      	b.n	8007bfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	0e5b      	lsrs	r3, r3, #25
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	0f5b      	lsrs	r3, r3, #29
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	7b3a      	ldrb	r2, [r7, #12]
 8007bc6:	4911      	ldr	r1, [pc, #68]	; (8007c0c <UARTEx_SetNbDataToProcess+0x94>)
 8007bc8:	5c8a      	ldrb	r2, [r1, r2]
 8007bca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bce:	7b3a      	ldrb	r2, [r7, #12]
 8007bd0:	490f      	ldr	r1, [pc, #60]	; (8007c10 <UARTEx_SetNbDataToProcess+0x98>)
 8007bd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	7b7a      	ldrb	r2, [r7, #13]
 8007be4:	4909      	ldr	r1, [pc, #36]	; (8007c0c <UARTEx_SetNbDataToProcess+0x94>)
 8007be6:	5c8a      	ldrb	r2, [r1, r2]
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bec:	7b7a      	ldrb	r2, [r7, #13]
 8007bee:	4908      	ldr	r1, [pc, #32]	; (8007c10 <UARTEx_SetNbDataToProcess+0x98>)
 8007bf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	0800cd0c 	.word	0x0800cd0c
 8007c10:	0800cd14 	.word	0x0800cd14

08007c14 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fcb2 	bl	800958e <VL53L0X_get_offset_calibration_data_micro_meter>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007c3c:	b5b0      	push	{r4, r5, r7, lr}
 8007c3e:	b096      	sub	sp, #88	; 0x58
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c44:	2300      	movs	r3, #0
 8007c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007c4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d107      	bne.n	8007c62 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007c52:	2200      	movs	r2, #0
 8007c54:	2188      	movs	r1, #136	; 0x88
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f004 feaa 	bl	800c9b0 <VL53L0X_WrByte>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c70:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007c7a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a9e      	ldr	r2, [pc, #632]	; (8007efc <VL53L0X_DataInit+0x2c0>)
 8007c82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a9d      	ldr	r2, [pc, #628]	; (8007f00 <VL53L0X_DataInit+0x2c4>)
 8007c8a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007c94:	f107 0310 	add.w	r3, r7, #16
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fac2 	bl	8008224 <VL53L0X_GetDeviceParameters>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007ca6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d112      	bne.n	8007cd4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f103 0410 	add.w	r4, r3, #16
 8007cbc:	f107 0510 	add.w	r5, r7, #16
 8007cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ccc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2264      	movs	r2, #100	; 0x64
 8007cd8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007ce2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007cec:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007cf6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007d02:	2201      	movs	r2, #1
 8007d04:	2180      	movs	r1, #128	; 0x80
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f004 fe52 	bl	800c9b0 <VL53L0X_WrByte>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	21ff      	movs	r1, #255	; 0xff
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f004 fe46 	bl	800c9b0 <VL53L0X_WrByte>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f004 fe3a 	bl	800c9b0 <VL53L0X_WrByte>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d44:	4313      	orrs	r3, r2
 8007d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007d4a:	f107 030f 	add.w	r3, r7, #15
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2191      	movs	r1, #145	; 0x91
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f004 feae 	bl	800cab4 <VL53L0X_RdByte>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007d66:	7bfa      	ldrb	r2, [r7, #15]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007d6e:	2201      	movs	r2, #1
 8007d70:	2100      	movs	r1, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f004 fe1c 	bl	800c9b0 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d86:	2200      	movs	r2, #0
 8007d88:	21ff      	movs	r1, #255	; 0xff
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f004 fe10 	bl	800c9b0 <VL53L0X_WrByte>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2180      	movs	r1, #128	; 0x80
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f004 fe04 	bl	800c9b0 <VL53L0X_WrByte>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007db6:	2300      	movs	r3, #0
 8007db8:	653b      	str	r3, [r7, #80]	; 0x50
 8007dba:	e014      	b.n	8007de6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007dbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d114      	bne.n	8007dee <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2201      	movs	r2, #1
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fd35 	bl	800883c <VL53L0X_SetLimitCheckEnable>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de2:	3301      	adds	r3, #1
 8007de4:	653b      	str	r3, [r7, #80]	; 0x50
 8007de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	dde7      	ble.n	8007dbc <VL53L0X_DataInit+0x180>
 8007dec:	e000      	b.n	8007df0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8007dee:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007df0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d107      	bne.n	8007e08 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2102      	movs	r1, #2
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fd1d 	bl	800883c <VL53L0X_SetLimitCheckEnable>
 8007e02:	4603      	mov	r3, r0
 8007e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007e08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d107      	bne.n	8007e20 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007e10:	2200      	movs	r2, #0
 8007e12:	2103      	movs	r1, #3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fd11 	bl	800883c <VL53L0X_SetLimitCheckEnable>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007e20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d107      	bne.n	8007e38 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2104      	movs	r1, #4
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fd05 	bl	800883c <VL53L0X_SetLimitCheckEnable>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007e38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d107      	bne.n	8007e50 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007e40:	2200      	movs	r2, #0
 8007e42:	2105      	movs	r1, #5
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fcf9 	bl	800883c <VL53L0X_SetLimitCheckEnable>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007e50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d108      	bne.n	8007e6a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007e58:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fd9c 	bl	800899c <VL53L0X_SetLimitCheckValue>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007e6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d108      	bne.n	8007e84 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e76:	2101      	movs	r1, #1
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fd8f 	bl	800899c <VL53L0X_SetLimitCheckValue>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d108      	bne.n	8007e9e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007e8c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007e90:	2102      	movs	r1, #2
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fd82 	bl	800899c <VL53L0X_SetLimitCheckValue>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d107      	bne.n	8007eb6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2103      	movs	r1, #3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fd76 	bl	800899c <VL53L0X_SetLimitCheckValue>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007eb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10f      	bne.n	8007ede <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	22ff      	movs	r2, #255	; 0xff
 8007ec2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007ec6:	22ff      	movs	r2, #255	; 0xff
 8007ec8:	2101      	movs	r1, #1
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f004 fd70 	bl	800c9b0 <VL53L0X_WrByte>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007ede:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8007eee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3758      	adds	r7, #88	; 0x58
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8007efa:	bf00      	nop
 8007efc:	00016b85 	.word	0x00016b85
 8007f00:	000970a4 	.word	0x000970a4

08007f04 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007f04:	b5b0      	push	{r4, r5, r7, lr}
 8007f06:	b09e      	sub	sp, #120	; 0x78
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8007f12:	f107 031c 	add.w	r3, r7, #28
 8007f16:	2240      	movs	r2, #64	; 0x40
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f004 feaa 	bl	800cc74 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8007f40:	2101      	movs	r1, #1
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f002 fa79 	bl	800a43a <VL53L0X_get_info_from_device>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007f54:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007f5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8007f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d80d      	bhi.n	8007f84 <VL53L0X_StaticInit+0x80>
 8007f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d102      	bne.n	8007f76 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8007f70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f72:	2b20      	cmp	r3, #32
 8007f74:	d806      	bhi.n	8007f84 <VL53L0X_StaticInit+0x80>
 8007f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10e      	bne.n	8007f9c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8007f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d90b      	bls.n	8007f9c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007f84:	f107 0218 	add.w	r2, r7, #24
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fcf8 	bl	8009984 <VL53L0X_perform_ref_spad_management>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007f9a:	e009      	b.n	8007fb0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 fef9 	bl	8009d9c <VL53L0X_set_reference_spads>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007fb0:	4b94      	ldr	r3, [pc, #592]	; (8008204 <VL53L0X_StaticInit+0x300>)
 8007fb2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007fb4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10f      	bne.n	8007fdc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8007fc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007fc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fd6:	e001      	b.n	8007fdc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007fd8:	4b8a      	ldr	r3, [pc, #552]	; (8008204 <VL53L0X_StaticInit+0x300>)
 8007fda:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007fdc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007fe4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f003 fdcc 	bl	800bb84 <VL53L0X_load_tuning_settings>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007ff2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10a      	bne.n	8008010 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2304      	movs	r3, #4
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 f8f1 	bl	80091ec <VL53L0X_SetGpioConfig>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008010:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008014:	2b00      	cmp	r3, #0
 8008016:	d121      	bne.n	800805c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008018:	2201      	movs	r2, #1
 800801a:	21ff      	movs	r1, #255	; 0xff
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f004 fcc7 	bl	800c9b0 <VL53L0X_WrByte>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008028:	f107 031a 	add.w	r3, r7, #26
 800802c:	461a      	mov	r2, r3
 800802e:	2184      	movs	r1, #132	; 0x84
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f004 fd69 	bl	800cb08 <VL53L0X_RdWord>
 8008036:	4603      	mov	r3, r0
 8008038:	461a      	mov	r2, r3
 800803a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800803e:	4313      	orrs	r3, r2
 8008040:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008044:	2200      	movs	r2, #0
 8008046:	21ff      	movs	r1, #255	; 0xff
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f004 fcb1 	bl	800c9b0 <VL53L0X_WrByte>
 800804e:	4603      	mov	r3, r0
 8008050:	461a      	mov	r2, r3
 8008052:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008056:	4313      	orrs	r3, r2
 8008058:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800805c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008060:	2b00      	cmp	r3, #0
 8008062:	d105      	bne.n	8008070 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8008064:	8b7b      	ldrh	r3, [r7, #26]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	461a      	mov	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8008070:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008074:	2b00      	cmp	r3, #0
 8008076:	d108      	bne.n	800808a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008078:	f107 031c 	add.w	r3, r7, #28
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8d0 	bl	8008224 <VL53L0X_GetDeviceParameters>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800808a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800808e:	2b00      	cmp	r3, #0
 8008090:	d110      	bne.n	80080b4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8008092:	f107 0319 	add.w	r3, r7, #25
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f992 	bl	80083c2 <VL53L0X_GetFractionEnable>
 800809e:	4603      	mov	r3, r0
 80080a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80080a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d103      	bne.n	80080b4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80080ac:	7e7a      	ldrb	r2, [r7, #25]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80080b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10e      	bne.n	80080da <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f103 0410 	add.w	r4, r3, #16
 80080c2:	f107 051c 	add.w	r5, r7, #28
 80080c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80080d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80080da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d111      	bne.n	8008106 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80080e2:	f107 0319 	add.w	r3, r7, #25
 80080e6:	461a      	mov	r2, r3
 80080e8:	2101      	movs	r1, #1
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f004 fce2 	bl	800cab4 <VL53L0X_RdByte>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80080f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80080fe:	7e7a      	ldrb	r2, [r7, #25]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8008106:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800810a:	2b00      	cmp	r3, #0
 800810c:	d107      	bne.n	800811e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9ca 	bl	80084ac <VL53L0X_SetSequenceStepEnable>
 8008118:	4603      	mov	r3, r0
 800811a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800811e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008122:	2b00      	cmp	r3, #0
 8008124:	d107      	bne.n	8008136 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008126:	2200      	movs	r2, #0
 8008128:	2102      	movs	r1, #2
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f9be 	bl	80084ac <VL53L0X_SetSequenceStepEnable>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8008136:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2203      	movs	r2, #3
 8008142:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008146:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800814e:	f107 0313 	add.w	r3, r7, #19
 8008152:	461a      	mov	r2, r3
 8008154:	2100      	movs	r1, #0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f990 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008162:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800816a:	7cfa      	ldrb	r2, [r7, #19]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8008172:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800817a:	f107 0313 	add.w	r3, r7, #19
 800817e:	461a      	mov	r2, r3
 8008180:	2101      	movs	r1, #1
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f97a 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 8008188:	4603      	mov	r3, r0
 800818a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800818e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008192:	2b00      	cmp	r3, #0
 8008194:	d103      	bne.n	800819e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008196:	7cfa      	ldrb	r2, [r7, #19]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800819e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80081a6:	f107 030c 	add.w	r3, r7, #12
 80081aa:	461a      	mov	r2, r3
 80081ac:	2103      	movs	r1, #3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f002 fec4 	bl	800af3c <get_sequence_step_timeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80081ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d109      	bne.n	80081e6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80081d2:	f107 030c 	add.w	r3, r7, #12
 80081d6:	461a      	mov	r2, r3
 80081d8:	2104      	movs	r1, #4
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f002 feae 	bl	800af3c <get_sequence_step_timeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d103      	bne.n	80081f6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3770      	adds	r7, #112	; 0x70
 80081fe:	46bd      	mov	sp, r7
 8008200:	bdb0      	pop	{r4, r5, r7, pc}
 8008202:	bf00      	nop
 8008204:	20000010 	.word	0x20000010

08008208 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8008210:	239d      	movs	r3, #157	; 0x9d
 8008212:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8008214:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8b0 	bl	800839c <VL53L0X_GetDeviceMode>
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d107      	bne.n	8008258 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa78 	bl	8008744 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8008266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d107      	bne.n	800827e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	3310      	adds	r3, #16
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 faae 	bl	80087d6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800827e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d107      	bne.n	8008296 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	3314      	adds	r3, #20
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f7ff fcc1 	bl	8007c14 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8008296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d134      	bne.n	8008308 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	e02a      	b.n	80082fa <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80082a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d12a      	bne.n	8008302 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	b299      	uxth	r1, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3308      	adds	r3, #8
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4413      	add	r3, r2
 80082ba:	3304      	adds	r3, #4
 80082bc:	461a      	mov	r2, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fbce 	bl	8008a60 <VL53L0X_GetLimitCheckValue>
 80082c4:	4603      	mov	r3, r0
 80082c6:	461a      	mov	r2, r3
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80082ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d117      	bne.n	8008306 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	b299      	uxth	r1, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	3318      	adds	r3, #24
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4413      	add	r3, r2
 80082e2:	461a      	mov	r2, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fb35 	bl	8008954 <VL53L0X_GetLimitCheckEnable>
 80082ea:	4603      	mov	r3, r0
 80082ec:	461a      	mov	r2, r3
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60bb      	str	r3, [r7, #8]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b05      	cmp	r3, #5
 80082fe:	ddd1      	ble.n	80082a4 <VL53L0X_GetDeviceParameters+0x80>
 8008300:	e002      	b.n	8008308 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008302:	bf00      	nop
 8008304:	e000      	b.n	8008308 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8008306:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d107      	bne.n	8008320 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	333c      	adds	r3, #60	; 0x3c
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fc30 	bl	8008b7c <VL53L0X_GetWrapAroundCheckEnable>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d107      	bne.n	8008338 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	3304      	adds	r3, #4
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f879 	bl	8008426 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b15      	cmp	r3, #21
 8008358:	bf8c      	ite	hi
 800835a:	2201      	movhi	r2, #1
 800835c:	2200      	movls	r2, #0
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	2a00      	cmp	r2, #0
 8008362:	d10e      	bne.n	8008382 <VL53L0X_SetDeviceMode+0x3e>
 8008364:	2201      	movs	r2, #1
 8008366:	409a      	lsls	r2, r3
 8008368:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <VL53L0X_SetDeviceMode+0x54>)
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	bf14      	ite	ne
 8008370:	2301      	movne	r3, #1
 8008372:	2300      	moveq	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	741a      	strb	r2, [r3, #16]
		break;
 8008380:	e001      	b.n	8008386 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008382:	23f8      	movs	r3, #248	; 0xf8
 8008384:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	0030000b 	.word	0x0030000b

0800839c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7c1a      	ldrb	r2, [r3, #16]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80083b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	2109      	movs	r1, #9
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f004 fb6d 	bl	800cab4 <VL53L0X_RdByte>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80083de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80083f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f003 fa26 	bl	800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800841a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f003 faf3 	bl	800ba22 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
 8008458:	4613      	mov	r3, r2
 800845a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8008460:	78ba      	ldrb	r2, [r7, #2]
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f002 ff3b 	bl	800b2e2 <VL53L0X_set_vcsel_pulse_period>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8008470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	460b      	mov	r3, r1
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800848a:	2300      	movs	r3, #0
 800848c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	4619      	mov	r1, r3
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f003 f9ad 	bl	800b7f4 <VL53L0X_get_vcsel_pulse_period>
 800849a:	4603      	mov	r3, r0
 800849c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800849e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
 80084b8:	4613      	mov	r3, r2
 80084ba:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084bc:	2300      	movs	r3, #0
 80084be:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80084c8:	f107 030f 	add.w	r3, r7, #15
 80084cc:	461a      	mov	r2, r3
 80084ce:	2101      	movs	r1, #1
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f004 faef 	bl	800cab4 <VL53L0X_RdByte>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80084de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d15a      	bne.n	800859c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80084e6:	78bb      	ldrb	r3, [r7, #2]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d12b      	bne.n	8008544 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d825      	bhi.n	800853e <VL53L0X_SetSequenceStepEnable+0x92>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	0800850d 	.word	0x0800850d
 80084fc:	08008517 	.word	0x08008517
 8008500:	08008521 	.word	0x08008521
 8008504:	0800852b 	.word	0x0800852b
 8008508:	08008535 	.word	0x08008535
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800850c:	7dbb      	ldrb	r3, [r7, #22]
 800850e:	f043 0310 	orr.w	r3, r3, #16
 8008512:	75bb      	strb	r3, [r7, #22]
				break;
 8008514:	e043      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8008516:	7dbb      	ldrb	r3, [r7, #22]
 8008518:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800851c:	75bb      	strb	r3, [r7, #22]
				break;
 800851e:	e03e      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8008520:	7dbb      	ldrb	r3, [r7, #22]
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	75bb      	strb	r3, [r7, #22]
				break;
 8008528:	e039      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800852a:	7dbb      	ldrb	r3, [r7, #22]
 800852c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008530:	75bb      	strb	r3, [r7, #22]
				break;
 8008532:	e034      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8008534:	7dbb      	ldrb	r3, [r7, #22]
 8008536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800853a:	75bb      	strb	r3, [r7, #22]
				break;
 800853c:	e02f      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800853e:	23fc      	movs	r3, #252	; 0xfc
 8008540:	75fb      	strb	r3, [r7, #23]
 8008542:	e02c      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	2b04      	cmp	r3, #4
 8008548:	d825      	bhi.n	8008596 <VL53L0X_SetSequenceStepEnable+0xea>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	08008565 	.word	0x08008565
 8008554:	0800856f 	.word	0x0800856f
 8008558:	08008579 	.word	0x08008579
 800855c:	08008583 	.word	0x08008583
 8008560:	0800858d 	.word	0x0800858d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8008564:	7dbb      	ldrb	r3, [r7, #22]
 8008566:	f023 0310 	bic.w	r3, r3, #16
 800856a:	75bb      	strb	r3, [r7, #22]
				break;
 800856c:	e017      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800856e:	7dbb      	ldrb	r3, [r7, #22]
 8008570:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8008574:	75bb      	strb	r3, [r7, #22]
				break;
 8008576:	e012      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8008578:	7dbb      	ldrb	r3, [r7, #22]
 800857a:	f023 0304 	bic.w	r3, r3, #4
 800857e:	75bb      	strb	r3, [r7, #22]
				break;
 8008580:	e00d      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8008582:	7dbb      	ldrb	r3, [r7, #22]
 8008584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008588:	75bb      	strb	r3, [r7, #22]
				break;
 800858a:	e008      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800858c:	7dbb      	ldrb	r3, [r7, #22]
 800858e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008592:	75bb      	strb	r3, [r7, #22]
				break;
 8008594:	e003      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008596:	23fc      	movs	r3, #252	; 0xfc
 8008598:	75fb      	strb	r3, [r7, #23]
 800859a:	e000      	b.n	800859e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800859c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	7dba      	ldrb	r2, [r7, #22]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d01e      	beq.n	80085e4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80085a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d107      	bne.n	80085be <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80085ae:	7dbb      	ldrb	r3, [r7, #22]
 80085b0:	461a      	mov	r2, r3
 80085b2:	2101      	movs	r1, #1
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f004 f9fb 	bl	800c9b0 <VL53L0X_WrByte>
 80085ba:	4603      	mov	r3, r0
 80085bc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80085be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d103      	bne.n	80085ce <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7dba      	ldrb	r2, [r7, #22]
 80085ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80085ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80085dc:	6939      	ldr	r1, [r7, #16]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff ff0e 	bl	8008400 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80085e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	607b      	str	r3, [r7, #4]
 80085fa:	460b      	mov	r3, r1
 80085fc:	72fb      	strb	r3, [r7, #11]
 80085fe:	4613      	mov	r3, r2
 8008600:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008602:	2300      	movs	r3, #0
 8008604:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	2b04      	cmp	r3, #4
 8008610:	d836      	bhi.n	8008680 <sequence_step_enabled+0x90>
 8008612:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <sequence_step_enabled+0x28>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	0800862d 	.word	0x0800862d
 800861c:	0800863f 	.word	0x0800863f
 8008620:	08008651 	.word	0x08008651
 8008624:	08008663 	.word	0x08008663
 8008628:	08008675 	.word	0x08008675
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800862c:	7abb      	ldrb	r3, [r7, #10]
 800862e:	111b      	asrs	r3, r3, #4
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	701a      	strb	r2, [r3, #0]
		break;
 800863c:	e022      	b.n	8008684 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800863e:	7abb      	ldrb	r3, [r7, #10]
 8008640:	10db      	asrs	r3, r3, #3
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	701a      	strb	r2, [r3, #0]
		break;
 800864e:	e019      	b.n	8008684 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008650:	7abb      	ldrb	r3, [r7, #10]
 8008652:	109b      	asrs	r3, r3, #2
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	b2da      	uxtb	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	701a      	strb	r2, [r3, #0]
		break;
 8008660:	e010      	b.n	8008684 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8008662:	7abb      	ldrb	r3, [r7, #10]
 8008664:	119b      	asrs	r3, r3, #6
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	b2da      	uxtb	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	701a      	strb	r2, [r3, #0]
		break;
 8008672:	e007      	b.n	8008684 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8008674:	7abb      	ldrb	r3, [r7, #10]
 8008676:	09db      	lsrs	r3, r3, #7
 8008678:	b2da      	uxtb	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	701a      	strb	r2, [r3, #0]
		break;
 800867e:	e001      	b.n	8008684 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008680:	23fc      	movs	r3, #252	; 0xfc
 8008682:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008688:	4618      	mov	r0, r3
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80086a6:	f107 030e 	add.w	r3, r7, #14
 80086aa:	461a      	mov	r2, r3
 80086ac:	2101      	movs	r1, #1
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f004 fa00 	bl	800cab4 <VL53L0X_RdByte>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80086b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d107      	bne.n	80086d0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80086c0:	7bba      	ldrb	r2, [r7, #14]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2100      	movs	r1, #0
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff ff92 	bl	80085f0 <sequence_step_enabled>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80086d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d108      	bne.n	80086ea <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80086d8:	7bba      	ldrb	r2, [r7, #14]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	3302      	adds	r3, #2
 80086de:	2101      	movs	r1, #1
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ff85 	bl	80085f0 <sequence_step_enabled>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80086ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d108      	bne.n	8008704 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80086f2:	7bba      	ldrb	r2, [r7, #14]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	2102      	movs	r1, #2
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff ff78 	bl	80085f0 <sequence_step_enabled>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d108      	bne.n	800871e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800870c:	7bba      	ldrb	r2, [r7, #14]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	3303      	adds	r3, #3
 8008712:	2103      	movs	r1, #3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ff6b 	bl	80085f0 <sequence_step_enabled>
 800871a:	4603      	mov	r3, r0
 800871c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800871e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d108      	bne.n	8008738 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8008726:	7bba      	ldrb	r2, [r7, #14]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	3304      	adds	r3, #4
 800872c:	2104      	movs	r1, #4
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff ff5e 	bl	80085f0 <sequence_step_enabled>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8008752:	f107 030c 	add.w	r3, r7, #12
 8008756:	461a      	mov	r2, r3
 8008758:	21f8      	movs	r1, #248	; 0xf8
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f004 f9d4 	bl	800cb08 <VL53L0X_RdWord>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800876c:	f107 0308 	add.w	r3, r7, #8
 8008770:	461a      	mov	r2, r3
 8008772:	2104      	movs	r1, #4
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f004 f9ff 	bl	800cb78 <VL53L0X_RdDWord>
 800877a:	4603      	mov	r3, r0
 800877c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800877e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10c      	bne.n	80087a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8008786:	89bb      	ldrh	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	89ba      	ldrh	r2, [r7, #12]
 8008790:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	7f1b      	ldrb	r3, [r3, #28]
 80087be:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	7bba      	ldrb	r2, [r7, #14]
 80087c4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80087c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80087e4:	f107 030e 	add.w	r3, r7, #14
 80087e8:	461a      	mov	r2, r3
 80087ea:	2120      	movs	r1, #32
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f004 f98b 	bl	800cb08 <VL53L0X_RdWord>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80087f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d118      	bne.n	8008830 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80087fe:	89fb      	ldrh	r3, [r7, #14]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d109      	bne.n	8008818 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	771a      	strb	r2, [r3, #28]
 8008816:	e00b      	b.n	8008830 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008818:	89fb      	ldrh	r3, [r7, #14]
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008830:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
 8008848:	4613      	mov	r3, r2
 800884a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800884c:	2300      	movs	r3, #0
 800884e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800885c:	887b      	ldrh	r3, [r7, #2]
 800885e:	2b05      	cmp	r3, #5
 8008860:	d902      	bls.n	8008868 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008862:	23fc      	movs	r3, #252	; 0xfc
 8008864:	75fb      	strb	r3, [r7, #23]
 8008866:	e05b      	b.n	8008920 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008868:	787b      	ldrb	r3, [r7, #1]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008876:	2301      	movs	r3, #1
 8008878:	73bb      	strb	r3, [r7, #14]
 800887a:	e00a      	b.n	8008892 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800887c:	887b      	ldrh	r3, [r7, #2]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	330c      	adds	r3, #12
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008892:	887b      	ldrh	r3, [r7, #2]
 8008894:	2b05      	cmp	r3, #5
 8008896:	d841      	bhi.n	800891c <VL53L0X_SetLimitCheckEnable+0xe0>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <VL53L0X_SetLimitCheckEnable+0x64>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088b9 	.word	0x080088b9
 80088a4:	080088c3 	.word	0x080088c3
 80088a8:	080088d9 	.word	0x080088d9
 80088ac:	080088e3 	.word	0x080088e3
 80088b0:	080088ed 	.word	0x080088ed
 80088b4:	08008905 	.word	0x08008905

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7bfa      	ldrb	r2, [r7, #15]
 80088bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80088c0:	e02e      	b.n	8008920 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	2144      	movs	r1, #68	; 0x44
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f004 f893 	bl	800c9f8 <VL53L0X_WrWord>
 80088d2:	4603      	mov	r3, r0
 80088d4:	75fb      	strb	r3, [r7, #23]

			break;
 80088d6:	e023      	b.n	8008920 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7bfa      	ldrb	r2, [r7, #15]
 80088dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80088e0:	e01e      	b.n	8008920 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7bfa      	ldrb	r2, [r7, #15]
 80088e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80088ea:	e019      	b.n	8008920 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80088f2:	7b7b      	ldrb	r3, [r7, #13]
 80088f4:	22fe      	movs	r2, #254	; 0xfe
 80088f6:	2160      	movs	r1, #96	; 0x60
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f004 f8a7 	bl	800ca4c <VL53L0X_UpdateByte>
 80088fe:	4603      	mov	r3, r0
 8008900:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8008902:	e00d      	b.n	8008920 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800890a:	7b7b      	ldrb	r3, [r7, #13]
 800890c:	22ef      	movs	r2, #239	; 0xef
 800890e:	2160      	movs	r1, #96	; 0x60
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f004 f89b 	bl	800ca4c <VL53L0X_UpdateByte>
 8008916:	4603      	mov	r3, r0
 8008918:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800891a:	e001      	b.n	8008920 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800891c:	23fc      	movs	r3, #252	; 0xfc
 800891e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10f      	bne.n	8008948 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008928:	787b      	ldrb	r3, [r7, #1]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800892e:	887b      	ldrh	r3, [r7, #2]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4413      	add	r3, r2
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800893a:	e005      	b.n	8008948 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800893c:	887b      	ldrh	r3, [r7, #2]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008948:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	460b      	mov	r3, r1
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008966:	897b      	ldrh	r3, [r7, #10]
 8008968:	2b05      	cmp	r3, #5
 800896a:	d905      	bls.n	8008978 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800896c:	23fc      	movs	r3, #252	; 0xfc
 800896e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e008      	b.n	800898a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008978:	897b      	ldrh	r3, [r7, #10]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008982:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7dba      	ldrb	r2, [r7, #22]
 8008988:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800898a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	460b      	mov	r3, r1
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089aa:	2300      	movs	r3, #0
 80089ac:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80089ae:	897b      	ldrh	r3, [r7, #10]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089b8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80089ba:	7dbb      	ldrb	r3, [r7, #22]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d107      	bne.n	80089d0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80089c0:	897b      	ldrh	r3, [r7, #10]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	330c      	adds	r3, #12
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	605a      	str	r2, [r3, #4]
 80089ce:	e040      	b.n	8008a52 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80089d0:	897b      	ldrh	r3, [r7, #10]
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d830      	bhi.n	8008a38 <VL53L0X_SetLimitCheckValue+0x9c>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <VL53L0X_SetLimitCheckValue+0x40>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	080089f5 	.word	0x080089f5
 80089e0:	080089fd 	.word	0x080089fd
 80089e4:	08008a13 	.word	0x08008a13
 80089e8:	08008a1b 	.word	0x08008a1b
 80089ec:	08008a23 	.word	0x08008a23
 80089f0:	08008a23 	.word	0x08008a23

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80089fa:	e01f      	b.n	8008a3c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	2144      	movs	r1, #68	; 0x44
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f003 fff6 	bl	800c9f8 <VL53L0X_WrWord>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008a10:	e014      	b.n	8008a3c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008a18:	e010      	b.n	8008a3c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008a20:	e00c      	b.n	8008a3c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2164      	movs	r1, #100	; 0x64
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f003 ffe3 	bl	800c9f8 <VL53L0X_WrWord>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008a36:	e001      	b.n	8008a3c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a38:	23fc      	movs	r3, #252	; 0xfc
 8008a3a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008a44:	897b      	ldrh	r3, [r7, #10]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008a76:	897b      	ldrh	r3, [r7, #10]
 8008a78:	2b05      	cmp	r3, #5
 8008a7a:	d847      	bhi.n	8008b0c <VL53L0X_GetLimitCheckValue+0xac>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <VL53L0X_GetLimitCheckValue+0x24>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008aa9 	.word	0x08008aa9
 8008a8c:	08008acf 	.word	0x08008acf
 8008a90:	08008adb 	.word	0x08008adb
 8008a94:	08008ae7 	.word	0x08008ae7
 8008a98:	08008ae7 	.word	0x08008ae7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	77bb      	strb	r3, [r7, #30]
		break;
 8008aa6:	e033      	b.n	8008b10 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008aa8:	f107 0316 	add.w	r3, r7, #22
 8008aac:	461a      	mov	r2, r3
 8008aae:	2144      	movs	r1, #68	; 0x44
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f004 f829 	bl	800cb08 <VL53L0X_RdWord>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008aba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008ac2:	8afb      	ldrh	r3, [r7, #22]
 8008ac4:	025b      	lsls	r3, r3, #9
 8008ac6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	77bb      	strb	r3, [r7, #30]
		break;
 8008acc:	e020      	b.n	8008b10 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	77bb      	strb	r3, [r7, #30]
		break;
 8008ad8:	e01a      	b.n	8008b10 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	77bb      	strb	r3, [r7, #30]
		break;
 8008ae4:	e014      	b.n	8008b10 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008ae6:	f107 0316 	add.w	r3, r7, #22
 8008aea:	461a      	mov	r2, r3
 8008aec:	2164      	movs	r1, #100	; 0x64
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f004 f80a 	bl	800cb08 <VL53L0X_RdWord>
 8008af4:	4603      	mov	r3, r0
 8008af6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008b00:	8afb      	ldrh	r3, [r7, #22]
 8008b02:	025b      	lsls	r3, r3, #9
 8008b04:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	77bb      	strb	r3, [r7, #30]
		break;
 8008b0a:	e001      	b.n	8008b10 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b0c:	23fc      	movs	r3, #252	; 0xfc
 8008b0e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d12a      	bne.n	8008b6e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008b18:	7fbb      	ldrb	r3, [r7, #30]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d124      	bne.n	8008b68 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d110      	bne.n	8008b46 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008b24:	897b      	ldrh	r3, [r7, #10]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	330c      	adds	r3, #12
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008b38:	897b      	ldrh	r3, [r7, #10]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008b44:	e013      	b.n	8008b6e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008b4c:	897b      	ldrh	r3, [r7, #10]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	330c      	adds	r3, #12
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008b5a:	897b      	ldrh	r3, [r7, #10]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008b66:	e002      	b.n	8008b6e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3720      	adds	r7, #32
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop

08008b7c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008b8a:	f107 030e 	add.w	r3, r7, #14
 8008b8e:	461a      	mov	r2, r3
 8008b90:	2101      	movs	r1, #1
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f003 ff8e 	bl	800cab4 <VL53L0X_RdByte>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10e      	bne.n	8008bc2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008ba4:	7bba      	ldrb	r2, [r7, #14]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da03      	bge.n	8008bbc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	e002      	b.n	8008bc2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d104      	bne.n	8008bd4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781a      	ldrb	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008bec:	f107 030e 	add.w	r3, r7, #14
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fbd2 	bl	800839c <VL53L0X_GetDeviceMode>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d107      	bne.n	8008c14 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d104      	bne.n	8008c14 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f898 	bl	8008d40 <VL53L0X_StartMeasurement>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fb3f 	bl	800a2a0 <VL53L0X_measurement_poll_for_completion>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2203      	movs	r2, #3
 8008c38:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008c58:	2301      	movs	r3, #1
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f001 fae1 	bl	800a226 <VL53L0X_perform_ref_calibration>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008c8a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008c8c:	7dbb      	ldrb	r3, [r7, #22]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d005      	beq.n	8008c9e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008c92:	7dbb      	ldrb	r3, [r7, #22]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d002      	beq.n	8008c9e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008c98:	7dbb      	ldrb	r3, [r7, #22]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d147      	bne.n	8008d2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	f107 0210 	add.w	r2, r7, #16
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fbc3 	bl	8009434 <VL53L0X_GetInterruptThresholds>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008cb8:	d803      	bhi.n	8008cc2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008cba:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008cbc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008cc0:	d935      	bls.n	8008d2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d131      	bne.n	8008d2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d006      	beq.n	8008cde <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008cd0:	491a      	ldr	r1, [pc, #104]	; (8008d3c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f002 ff56 	bl	800bb84 <VL53L0X_load_tuning_settings>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	75fb      	strb	r3, [r7, #23]
 8008cdc:	e027      	b.n	8008d2e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008cde:	2204      	movs	r2, #4
 8008ce0:	21ff      	movs	r1, #255	; 0xff
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f003 fe64 	bl	800c9b0 <VL53L0X_WrByte>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	461a      	mov	r2, r3
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2170      	movs	r1, #112	; 0x70
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f003 fe5a 	bl	800c9b0 <VL53L0X_WrByte>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d06:	2200      	movs	r2, #0
 8008d08:	21ff      	movs	r1, #255	; 0xff
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f003 fe50 	bl	800c9b0 <VL53L0X_WrByte>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2180      	movs	r1, #128	; 0x80
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f003 fe46 	bl	800c9b0 <VL53L0X_WrByte>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000104 	.word	0x20000104

08008d40 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008d50:	f107 030e 	add.w	r3, r7, #14
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff fb20 	bl	800839c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	2180      	movs	r1, #128	; 0x80
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f003 fe25 	bl	800c9b0 <VL53L0X_WrByte>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	21ff      	movs	r1, #255	; 0xff
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f003 fe1e 	bl	800c9b0 <VL53L0X_WrByte>
 8008d74:	4603      	mov	r3, r0
 8008d76:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f003 fe17 	bl	800c9b0 <VL53L0X_WrByte>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2191      	movs	r1, #145	; 0x91
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f003 fe0d 	bl	800c9b0 <VL53L0X_WrByte>
 8008d96:	4603      	mov	r3, r0
 8008d98:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f003 fe06 	bl	800c9b0 <VL53L0X_WrByte>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008da8:	2200      	movs	r2, #0
 8008daa:	21ff      	movs	r1, #255	; 0xff
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f003 fdff 	bl	800c9b0 <VL53L0X_WrByte>
 8008db2:	4603      	mov	r3, r0
 8008db4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008db6:	2200      	movs	r2, #0
 8008db8:	2180      	movs	r1, #128	; 0x80
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f003 fdf8 	bl	800c9b0 <VL53L0X_WrByte>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d054      	beq.n	8008e74 <VL53L0X_StartMeasurement+0x134>
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	dc6c      	bgt.n	8008ea8 <VL53L0X_StartMeasurement+0x168>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <VL53L0X_StartMeasurement+0x98>
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d034      	beq.n	8008e40 <VL53L0X_StartMeasurement+0x100>
 8008dd6:	e067      	b.n	8008ea8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008dd8:	2201      	movs	r2, #1
 8008dda:	2100      	movs	r1, #0
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f003 fde7 	bl	800c9b0 <VL53L0X_WrByte>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d15d      	bne.n	8008eae <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d008      	beq.n	8008e0e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008dfc:	f107 030d 	add.w	r3, r7, #13
 8008e00:	461a      	mov	r2, r3
 8008e02:	2100      	movs	r1, #0
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f003 fe55 	bl	800cab4 <VL53L0X_RdByte>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	3301      	adds	r3, #1
 8008e12:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008e14:	7b7a      	ldrb	r2, [r7, #13]
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	4013      	ands	r3, r2
 8008e1a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008e1c:	7bfa      	ldrb	r2, [r7, #15]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d107      	bne.n	8008e32 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8008e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e30:	d3e1      	bcc.n	8008df6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e38:	d339      	bcc.n	8008eae <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008e3a:	23f9      	movs	r3, #249	; 0xf9
 8008e3c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008e3e:	e036      	b.n	8008eae <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d105      	bne.n	8008e54 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008e48:	2101      	movs	r1, #1
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff ff12 	bl	8008c74 <VL53L0X_CheckAndLoadInterruptSettings>
 8008e50:	4603      	mov	r3, r0
 8008e52:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008e54:	2202      	movs	r2, #2
 8008e56:	2100      	movs	r1, #0
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f003 fda9 	bl	800c9b0 <VL53L0X_WrByte>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d123      	bne.n	8008eb2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008e72:	e01e      	b.n	8008eb2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff fef8 	bl	8008c74 <VL53L0X_CheckAndLoadInterruptSettings>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008e88:	2204      	movs	r2, #4
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f003 fd8f 	bl	800c9b0 <VL53L0X_WrByte>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8008e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2204      	movs	r2, #4
 8008ea2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008ea6:	e006      	b.n	8008eb6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008ea8:	23f8      	movs	r3, #248	; 0xf8
 8008eaa:	75fb      	strb	r3, [r7, #23]
 8008eac:	e004      	b.n	8008eb8 <VL53L0X_StartMeasurement+0x178>
		break;
 8008eae:	bf00      	nop
 8008eb0:	e002      	b.n	8008eb8 <VL53L0X_StartMeasurement+0x178>
		break;
 8008eb2:	bf00      	nop
 8008eb4:	e000      	b.n	8008eb8 <VL53L0X_StartMeasurement+0x178>
		break;
 8008eb6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008ed8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d112      	bne.n	8008f06 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008ee0:	f107 0308 	add.w	r3, r7, #8
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fb1a 	bl	8009520 <VL53L0X_GetInterruptMaskStatus>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d103      	bne.n	8008efe <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	e01c      	b.n	8008f38 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e018      	b.n	8008f38 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8008f06:	f107 030d 	add.w	r3, r7, #13
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	2114      	movs	r1, #20
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f003 fdd0 	bl	800cab4 <VL53L0X_RdByte>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10b      	bne.n	8008f38 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008f20:	7b7b      	ldrb	r3, [r7, #13]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
 8008f30:	e002      	b.n	8008f38 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2200      	movs	r2, #0
 8008f36:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008f44:	b5b0      	push	{r4, r5, r7, lr}
 8008f46:	b096      	sub	sp, #88	; 0x58
 8008f48:	af02      	add	r7, sp, #8
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008f54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f58:	230c      	movs	r3, #12
 8008f5a:	2114      	movs	r1, #20
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f003 fcfb 	bl	800c958 <VL53L0X_ReadMulti>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008f68:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f040 80d1 	bne.w	8009114 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2200      	movs	r2, #0
 8008f76:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8008f7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	021b      	lsls	r3, r3, #8
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	4413      	add	r3, r2
 8008f90:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	021b      	lsls	r3, r3, #8
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	4413      	add	r3, r2
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	025b      	lsls	r3, r3, #9
 8008fb0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fb6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4413      	add	r3, r2
 8008fca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008fce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008fd2:	025b      	lsls	r3, r3, #9
 8008fd4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008fda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4413      	add	r3, r2
 8008fec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008ff6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008ff8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ffc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8009006:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800900e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009012:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009018:	d046      	beq.n	80090a8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800901a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800901c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009020:	fb02 f303 	mul.w	r3, r2, r3
 8009024:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009028:	4a57      	ldr	r2, [pc, #348]	; (8009188 <VL53L0X_GetRangingMeasurementData+0x244>)
 800902a:	fb82 1203 	smull	r1, r2, r2, r3
 800902e:	1192      	asrs	r2, r2, #6
 8009030:	17db      	asrs	r3, r3, #31
 8009032:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009034:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7f1b      	ldrb	r3, [r3, #28]
 8009042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009046:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800904a:	2b00      	cmp	r3, #0
 800904c:	d02c      	beq.n	80090a8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800904e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009050:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009054:	fb02 f303 	mul.w	r3, r2, r3
 8009058:	121a      	asrs	r2, r3, #8
					<= 0) {
 800905a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800905c:	429a      	cmp	r2, r3
 800905e:	d10d      	bne.n	800907c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8009060:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8009068:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800906c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009070:	e016      	b.n	80090a0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8009072:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009076:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800907a:	e011      	b.n	80090a0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800907c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009082:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009086:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009088:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800908c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8009090:	121b      	asrs	r3, r3, #8
 8009092:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8009094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009096:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8009098:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800909c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80090a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80090a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80090a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80090b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80090bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	019b      	lsls	r3, r3, #6
 80090c4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	75da      	strb	r2, [r3, #23]
 80090ca:	e006      	b.n	80090da <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80090d2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2200      	movs	r2, #0
 80090d8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80090da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80090de:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80090e2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	4613      	mov	r3, r2
 80090ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f003 f9e5 	bl	800c4c0 <VL53L0X_get_pal_range_status>
 80090f6:	4603      	mov	r3, r0
 80090f8:	461a      	mov	r2, r3
 80090fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80090fe:	4313      	orrs	r3, r2
 8009100:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8009104:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800910c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009114:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009118:	2b00      	cmp	r3, #0
 800911a:	d12f      	bne.n	800917c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f107 040c 	add.w	r4, r7, #12
 8009122:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800912a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800912e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8009136:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800913c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009144:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800914a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8009150:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009156:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800915c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8009162:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800916c:	f107 050c 	add.w	r5, r7, #12
 8009170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800917c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8009180:	4618      	mov	r0, r3
 8009182:	3750      	adds	r7, #80	; 0x50
 8009184:	46bd      	mov	sp, r7
 8009186:	bdb0      	pop	{r4, r5, r7, pc}
 8009188:	10624dd3 	.word	0x10624dd3

0800918c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800919a:	2100      	movs	r1, #0
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff f8d1 	bl	8008344 <VL53L0X_SetDeviceMode>
 80091a2:	4603      	mov	r3, r0
 80091a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80091a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d104      	bne.n	80091b8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff fd16 	bl	8008be0 <VL53L0X_PerformSingleMeasurement>
 80091b4:	4603      	mov	r3, r0
 80091b6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80091b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d105      	bne.n	80091cc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff febe 	bl	8008f44 <VL53L0X_GetRangingMeasurementData>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80091cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d105      	bne.n	80091e0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80091d4:	2100      	movs	r1, #0
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f962 	bl	80094a0 <VL53L0X_ClearInterruptMask>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80091e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	4608      	mov	r0, r1
 80091f6:	4611      	mov	r1, r2
 80091f8:	461a      	mov	r2, r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	70fb      	strb	r3, [r7, #3]
 80091fe:	460b      	mov	r3, r1
 8009200:	70bb      	strb	r3, [r7, #2]
 8009202:	4613      	mov	r3, r2
 8009204:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009210:	23f6      	movs	r3, #246	; 0xf6
 8009212:	73fb      	strb	r3, [r7, #15]
 8009214:	e107      	b.n	8009426 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009216:	78bb      	ldrb	r3, [r7, #2]
 8009218:	2b14      	cmp	r3, #20
 800921a:	d110      	bne.n	800923e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800921c:	7e3b      	ldrb	r3, [r7, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d102      	bne.n	8009228 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009222:	2310      	movs	r3, #16
 8009224:	73bb      	strb	r3, [r7, #14]
 8009226:	e001      	b.n	800922c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009228:	2301      	movs	r3, #1
 800922a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	461a      	mov	r2, r3
 8009230:	2184      	movs	r1, #132	; 0x84
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f003 fbbc 	bl	800c9b0 <VL53L0X_WrByte>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
 800923c:	e0f3      	b.n	8009426 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800923e:	78bb      	ldrb	r3, [r7, #2]
 8009240:	2b15      	cmp	r3, #21
 8009242:	f040 8097 	bne.w	8009374 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009246:	2201      	movs	r2, #1
 8009248:	21ff      	movs	r1, #255	; 0xff
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f003 fbb0 	bl	800c9b0 <VL53L0X_WrByte>
 8009250:	4603      	mov	r3, r0
 8009252:	461a      	mov	r2, r3
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	4313      	orrs	r3, r2
 8009258:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800925a:	2200      	movs	r2, #0
 800925c:	2100      	movs	r1, #0
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f003 fba6 	bl	800c9b0 <VL53L0X_WrByte>
 8009264:	4603      	mov	r3, r0
 8009266:	461a      	mov	r2, r3
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4313      	orrs	r3, r2
 800926c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800926e:	2200      	movs	r2, #0
 8009270:	21ff      	movs	r1, #255	; 0xff
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f003 fb9c 	bl	800c9b0 <VL53L0X_WrByte>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4313      	orrs	r3, r2
 8009280:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009282:	2201      	movs	r2, #1
 8009284:	2180      	movs	r1, #128	; 0x80
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f003 fb92 	bl	800c9b0 <VL53L0X_WrByte>
 800928c:	4603      	mov	r3, r0
 800928e:	461a      	mov	r2, r3
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	4313      	orrs	r3, r2
 8009294:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009296:	2202      	movs	r2, #2
 8009298:	2185      	movs	r1, #133	; 0x85
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f003 fb88 	bl	800c9b0 <VL53L0X_WrByte>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461a      	mov	r2, r3
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80092aa:	2204      	movs	r2, #4
 80092ac:	21ff      	movs	r1, #255	; 0xff
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f003 fb7e 	bl	800c9b0 <VL53L0X_WrByte>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80092be:	2200      	movs	r2, #0
 80092c0:	21cd      	movs	r1, #205	; 0xcd
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f003 fb74 	bl	800c9b0 <VL53L0X_WrByte>
 80092c8:	4603      	mov	r3, r0
 80092ca:	461a      	mov	r2, r3
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80092d2:	2211      	movs	r2, #17
 80092d4:	21cc      	movs	r1, #204	; 0xcc
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f003 fb6a 	bl	800c9b0 <VL53L0X_WrByte>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80092e6:	2207      	movs	r2, #7
 80092e8:	21ff      	movs	r1, #255	; 0xff
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f003 fb60 	bl	800c9b0 <VL53L0X_WrByte>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80092fa:	2200      	movs	r2, #0
 80092fc:	21be      	movs	r1, #190	; 0xbe
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f003 fb56 	bl	800c9b0 <VL53L0X_WrByte>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	4313      	orrs	r3, r2
 800930c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800930e:	2206      	movs	r2, #6
 8009310:	21ff      	movs	r1, #255	; 0xff
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f003 fb4c 	bl	800c9b0 <VL53L0X_WrByte>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	4313      	orrs	r3, r2
 8009320:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009322:	2209      	movs	r2, #9
 8009324:	21cc      	movs	r1, #204	; 0xcc
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f003 fb42 	bl	800c9b0 <VL53L0X_WrByte>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	4313      	orrs	r3, r2
 8009334:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009336:	2200      	movs	r2, #0
 8009338:	21ff      	movs	r1, #255	; 0xff
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f003 fb38 	bl	800c9b0 <VL53L0X_WrByte>
 8009340:	4603      	mov	r3, r0
 8009342:	461a      	mov	r2, r3
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4313      	orrs	r3, r2
 8009348:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800934a:	2201      	movs	r2, #1
 800934c:	21ff      	movs	r1, #255	; 0xff
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f003 fb2e 	bl	800c9b0 <VL53L0X_WrByte>
 8009354:	4603      	mov	r3, r0
 8009356:	461a      	mov	r2, r3
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	4313      	orrs	r3, r2
 800935c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f003 fb24 	bl	800c9b0 <VL53L0X_WrByte>
 8009368:	4603      	mov	r3, r0
 800936a:	461a      	mov	r2, r3
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	4313      	orrs	r3, r2
 8009370:	73fb      	strb	r3, [r7, #15]
 8009372:	e058      	b.n	8009426 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d121      	bne.n	80093c0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800937c:	787b      	ldrb	r3, [r7, #1]
 800937e:	2b04      	cmp	r3, #4
 8009380:	d81b      	bhi.n	80093ba <VL53L0X_SetGpioConfig+0x1ce>
 8009382:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <VL53L0X_SetGpioConfig+0x19c>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	0800939d 	.word	0x0800939d
 800938c:	080093a3 	.word	0x080093a3
 8009390:	080093a9 	.word	0x080093a9
 8009394:	080093af 	.word	0x080093af
 8009398:	080093b5 	.word	0x080093b5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800939c:	2300      	movs	r3, #0
 800939e:	73bb      	strb	r3, [r7, #14]
				break;
 80093a0:	e00f      	b.n	80093c2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80093a2:	2301      	movs	r3, #1
 80093a4:	73bb      	strb	r3, [r7, #14]
				break;
 80093a6:	e00c      	b.n	80093c2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80093a8:	2302      	movs	r3, #2
 80093aa:	73bb      	strb	r3, [r7, #14]
				break;
 80093ac:	e009      	b.n	80093c2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80093ae:	2303      	movs	r3, #3
 80093b0:	73bb      	strb	r3, [r7, #14]
				break;
 80093b2:	e006      	b.n	80093c2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80093b4:	2304      	movs	r3, #4
 80093b6:	73bb      	strb	r3, [r7, #14]
				break;
 80093b8:	e003      	b.n	80093c2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80093ba:	23f5      	movs	r3, #245	; 0xf5
 80093bc:	73fb      	strb	r3, [r7, #15]
 80093be:	e000      	b.n	80093c2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80093c0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80093c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d107      	bne.n	80093da <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	461a      	mov	r2, r3
 80093ce:	210a      	movs	r1, #10
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f003 faed 	bl	800c9b0 <VL53L0X_WrByte>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80093da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10f      	bne.n	8009402 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80093e2:	7e3b      	ldrb	r3, [r7, #24]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73bb      	strb	r3, [r7, #14]
 80093ec:	e001      	b.n	80093f2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80093ee:	2310      	movs	r3, #16
 80093f0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	22ef      	movs	r2, #239	; 0xef
 80093f6:	2184      	movs	r1, #132	; 0x84
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f003 fb27 	bl	800ca4c <VL53L0X_UpdateByte>
 80093fe:	4603      	mov	r3, r0
 8009400:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d103      	bne.n	8009412 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	787a      	ldrb	r2, [r7, #1]
 800940e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f83f 	bl	80094a0 <VL53L0X_ClearInterruptMask>
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop

08009434 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	607a      	str	r2, [r7, #4]
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	460b      	mov	r3, r1
 8009442:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009444:	2300      	movs	r3, #0
 8009446:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009448:	f107 0314 	add.w	r3, r7, #20
 800944c:	461a      	mov	r2, r3
 800944e:	210e      	movs	r1, #14
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f003 fb59 	bl	800cb08 <VL53L0X_RdWord>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800945a:	8abb      	ldrh	r3, [r7, #20]
 800945c:	045b      	lsls	r3, r3, #17
 800945e:	461a      	mov	r2, r3
 8009460:	4b0e      	ldr	r3, [pc, #56]	; (800949c <VL53L0X_GetInterruptThresholds+0x68>)
 8009462:	4013      	ands	r3, r2
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8009468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10f      	bne.n	8009490 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8009470:	f107 0314 	add.w	r3, r7, #20
 8009474:	461a      	mov	r2, r3
 8009476:	210c      	movs	r1, #12
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f003 fb45 	bl	800cb08 <VL53L0X_RdWord>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009482:	8abb      	ldrh	r3, [r7, #20]
 8009484:	045b      	lsls	r3, r3, #17
 8009486:	461a      	mov	r2, r3
 8009488:	4b04      	ldr	r3, [pc, #16]	; (800949c <VL53L0X_GetInterruptThresholds+0x68>)
 800948a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	1ffe0000 	.word	0x1ffe0000

080094a0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80094b2:	2201      	movs	r2, #1
 80094b4:	210b      	movs	r1, #11
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f003 fa7a 	bl	800c9b0 <VL53L0X_WrByte>
 80094bc:	4603      	mov	r3, r0
 80094be:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80094c0:	2200      	movs	r2, #0
 80094c2:	210b      	movs	r1, #11
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f003 fa73 	bl	800c9b0 <VL53L0X_WrByte>
 80094ca:	4603      	mov	r3, r0
 80094cc:	461a      	mov	r2, r3
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80094d4:	f107 030d 	add.w	r3, r7, #13
 80094d8:	461a      	mov	r2, r3
 80094da:	2113      	movs	r1, #19
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f003 fae9 	bl	800cab4 <VL53L0X_RdByte>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	3301      	adds	r3, #1
 80094f0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80094f2:	7b7b      	ldrb	r3, [r7, #13]
 80094f4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d006      	beq.n	800950a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d803      	bhi.n	800950a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8009502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0d3      	beq.n	80094b2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d901      	bls.n	8009514 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009510:	23f4      	movs	r3, #244	; 0xf4
 8009512:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800952e:	f107 030e 	add.w	r3, r7, #14
 8009532:	461a      	mov	r2, r3
 8009534:	2113      	movs	r1, #19
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f003 fabc 	bl	800cab4 <VL53L0X_RdByte>
 800953c:	4603      	mov	r3, r0
 800953e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	f003 0207 	and.w	r2, r3, #7
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	f003 0318 	and.w	r3, r3, #24
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8009554:	23fa      	movs	r3, #250	; 0xfa
 8009556:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009570:	2300      	movs	r3, #0
 8009572:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	68b9      	ldr	r1, [r7, #8]
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fa03 	bl	8009984 <VL53L0X_perform_ref_spad_management>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8009582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800959c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80095a0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80095a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095a6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80095a8:	f107 0308 	add.w	r3, r7, #8
 80095ac:	461a      	mov	r2, r3
 80095ae:	2128      	movs	r1, #40	; 0x28
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f003 faa9 	bl	800cb08 <VL53L0X_RdWord>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80095ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d11e      	bne.n	8009600 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80095c2:	893b      	ldrh	r3, [r7, #8]
 80095c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80095cc:	893b      	ldrh	r3, [r7, #8]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	dd0b      	ble.n	80095f0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80095d8:	893a      	ldrh	r2, [r7, #8]
 80095da:	897b      	ldrh	r3, [r7, #10]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	b21b      	sxth	r3, r3
 80095e2:	461a      	mov	r2, r3
					* 250;
 80095e4:	23fa      	movs	r3, #250	; 0xfa
 80095e6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	e007      	b.n	8009600 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80095f0:	893b      	ldrh	r3, [r7, #8]
 80095f2:	b21b      	sxth	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	23fa      	movs	r3, #250	; 0xfa
 80095f8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800960c:	b480      	push	{r7}
 800960e:	b08b      	sub	sp, #44	; 0x2c
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800961a:	2308      	movs	r3, #8
 800961c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009632:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	fbb3 f2f2 	udiv	r2, r3, r2
 800963c:	69b9      	ldr	r1, [r7, #24]
 800963e:	fb01 f202 	mul.w	r2, r1, r2
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
 800964a:	e030      	b.n	80096ae <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	4413      	add	r3, r2
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800965a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	429a      	cmp	r2, r3
 8009660:	d11e      	bne.n	80096a0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8009662:	7ffa      	ldrb	r2, [r7, #31]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	fa42 f303 	asr.w	r3, r2, r3
 800966a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8009670:	e016      	b.n	80096a0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8009672:	7ffb      	ldrb	r3, [r7, #31]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <get_next_good_spad+0x88>
				success = 1;
 800967c:	2301      	movs	r3, #1
 800967e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	fb03 f202 	mul.w	r2, r3, r2
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	4413      	add	r3, r2
 800968c:	461a      	mov	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	601a      	str	r2, [r3, #0]
				break;
 8009692:	e009      	b.n	80096a8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8009694:	7ffb      	ldrb	r3, [r7, #31]
 8009696:	085b      	lsrs	r3, r3, #1
 8009698:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	3301      	adds	r3, #1
 800969e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d3e4      	bcc.n	8009672 <get_next_good_spad+0x66>
				coarseIndex++) {
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	3301      	adds	r3, #1
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80096ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d202      	bcs.n	80096bc <get_next_good_spad+0xb0>
 80096b6:	7fbb      	ldrb	r3, [r7, #30]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0c7      	beq.n	800964c <get_next_good_spad+0x40>
		}
	}
}
 80096bc:	bf00      	nop
 80096be:	372c      	adds	r7, #44	; 0x2c
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80096d0:	2301      	movs	r3, #1
 80096d2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80096da:	4a07      	ldr	r2, [pc, #28]	; (80096f8 <is_aperture+0x30>)
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <is_aperture+0x22>
		isAperture = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	200002bc 	.word	0x200002bc

080096fc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b089      	sub	sp, #36	; 0x24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009708:	2300      	movs	r3, #0
 800970a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800970c:	2308      	movs	r3, #8
 800970e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	fbb2 f3f3 	udiv	r3, r2, r3
 8009718:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009722:	69b9      	ldr	r1, [r7, #24]
 8009724:	fb01 f202 	mul.w	r2, r1, r2
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	429a      	cmp	r2, r3
 8009732:	d302      	bcc.n	800973a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009734:	23ce      	movs	r3, #206	; 0xce
 8009736:	77fb      	strb	r3, [r7, #31]
 8009738:	e010      	b.n	800975c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	4413      	add	r3, r2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	b25a      	sxtb	r2, r3
 8009744:	2101      	movs	r1, #1
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	fa01 f303 	lsl.w	r3, r1, r3
 800974c:	b25b      	sxtb	r3, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	b259      	sxtb	r1, r3
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	4413      	add	r3, r2
 8009758:	b2ca      	uxtb	r2, r1
 800975a:	701a      	strb	r2, [r3, #0]

	return status;
 800975c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3724      	adds	r7, #36	; 0x24
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009776:	2306      	movs	r3, #6
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	21b0      	movs	r1, #176	; 0xb0
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f003 f8bb 	bl	800c8f8 <VL53L0X_WriteMulti>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009786:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800979c:	2306      	movs	r3, #6
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	21b0      	movs	r1, #176	; 0xb0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f003 f8d8 	bl	800c958 <VL53L0X_ReadMulti>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80097ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b08c      	sub	sp, #48	; 0x30
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	607a      	str	r2, [r7, #4]
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	460b      	mov	r3, r1
 80097c6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80097c8:	2300      	movs	r3, #0
 80097ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80097ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80097d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80097d6:	2300      	movs	r3, #0
 80097d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80097da:	e02b      	b.n	8009834 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80097dc:	f107 031c 	add.w	r3, r7, #28
 80097e0:	6a3a      	ldr	r2, [r7, #32]
 80097e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff ff11 	bl	800960c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f0:	d103      	bne.n	80097fa <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80097f2:	23ce      	movs	r3, #206	; 0xce
 80097f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80097f8:	e020      	b.n	800983c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009800:	4413      	add	r3, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff ff60 	bl	80096c8 <is_aperture>
 8009808:	4603      	mov	r3, r0
 800980a:	461a      	mov	r2, r3
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	4293      	cmp	r3, r2
 8009810:	d003      	beq.n	800981a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009812:	23ce      	movs	r3, #206	; 0xce
 8009814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009818:	e010      	b.n	800983c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800981e:	6a3a      	ldr	r2, [r7, #32]
 8009820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009822:	6838      	ldr	r0, [r7, #0]
 8009824:	f7ff ff6a 	bl	80096fc <enable_spad_bit>
		currentSpad++;
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	3301      	adds	r3, #1
 800982c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009830:	3301      	adds	r3, #1
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28
 8009834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009838:	429a      	cmp	r2, r3
 800983a:	d3cf      	bcc.n	80097dc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800983c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983e:	6a3a      	ldr	r2, [r7, #32]
 8009840:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009842:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009846:	2b00      	cmp	r3, #0
 8009848:	d106      	bne.n	8009858 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff ff8d 	bl	800976c <set_ref_spad_map>
 8009852:	4603      	mov	r3, r0
 8009854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009858:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800985c:	2b00      	cmp	r3, #0
 800985e:	d121      	bne.n	80098a4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009860:	f107 0314 	add.w	r3, r7, #20
 8009864:	4619      	mov	r1, r3
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff ff93 	bl	8009792 <get_ref_spad_map>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009876:	e011      	b.n	800989c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	4413      	add	r3, r2
 800987e:	781a      	ldrb	r2, [r3, #0]
 8009880:	f107 0114 	add.w	r1, r7, #20
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	440b      	add	r3, r1
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	d003      	beq.n	8009896 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800988e:	23ce      	movs	r3, #206	; 0xce
 8009890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009894:	e006      	b.n	80098a4 <enable_ref_spads+0xec>
			}
			i++;
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	3301      	adds	r3, #1
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800989c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d3e9      	bcc.n	8009878 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80098a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3730      	adds	r7, #48	; 0x30
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	; 0x28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80098cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80098d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d107      	bne.n	80098e8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80098d8:	22c0      	movs	r2, #192	; 0xc0
 80098da:	2101      	movs	r1, #1
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f003 f867 	bl	800c9b0 <VL53L0X_WrByte>
 80098e2:	4603      	mov	r3, r0
 80098e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80098e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d108      	bne.n	8009902 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80098f0:	f107 0308 	add.w	r3, r7, #8
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff fc48 	bl	800918c <VL53L0X_PerformSingleRangingMeasurement>
 80098fc:	4603      	mov	r3, r0
 80098fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009906:	2b00      	cmp	r3, #0
 8009908:	d107      	bne.n	800991a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800990a:	2201      	movs	r2, #1
 800990c:	21ff      	movs	r1, #255	; 0xff
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f003 f84e 	bl	800c9b0 <VL53L0X_WrByte>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800991a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800991e:	2b00      	cmp	r3, #0
 8009920:	d107      	bne.n	8009932 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	21b6      	movs	r1, #182	; 0xb6
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f003 f8ee 	bl	800cb08 <VL53L0X_RdWord>
 800992c:	4603      	mov	r3, r0
 800992e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009932:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009936:	2b00      	cmp	r3, #0
 8009938:	d107      	bne.n	800994a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800993a:	2200      	movs	r2, #0
 800993c:	21ff      	movs	r1, #255	; 0xff
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f003 f836 	bl	800c9b0 <VL53L0X_WrByte>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800994a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800994e:	2b00      	cmp	r3, #0
 8009950:	d112      	bne.n	8009978 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009956:	461a      	mov	r2, r3
 8009958:	2101      	movs	r1, #1
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f003 f828 	bl	800c9b0 <VL53L0X_WrByte>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009966:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009974:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800997c:	4618      	mov	r0, r3
 800997e:	3728      	adds	r7, #40	; 0x28
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009984:	b590      	push	{r4, r7, lr}
 8009986:	b09d      	sub	sp, #116	; 0x74
 8009988:	af06      	add	r7, sp, #24
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009990:	2300      	movs	r3, #0
 8009992:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009996:	23b4      	movs	r3, #180	; 0xb4
 8009998:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800999c:	2303      	movs	r3, #3
 800999e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80099a0:	232c      	movs	r3, #44	; 0x2c
 80099a2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80099b0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80099b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80099be:	2306      	movs	r3, #6
 80099c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80099e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80099ea:	2300      	movs	r3, #0
 80099ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80099ee:	e009      	b.n	8009a04 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80099fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a00:	3301      	adds	r3, #1
 8009a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d3f1      	bcc.n	80099f0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	21ff      	movs	r1, #255	; 0xff
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f002 ffcd 	bl	800c9b0 <VL53L0X_WrByte>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009a1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d107      	bne.n	8009a34 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009a24:	2200      	movs	r2, #0
 8009a26:	214f      	movs	r1, #79	; 0x4f
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f002 ffc1 	bl	800c9b0 <VL53L0X_WrByte>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009a34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d107      	bne.n	8009a4c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009a3c:	222c      	movs	r2, #44	; 0x2c
 8009a3e:	214e      	movs	r1, #78	; 0x4e
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f002 ffb5 	bl	800c9b0 <VL53L0X_WrByte>
 8009a46:	4603      	mov	r3, r0
 8009a48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009a4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d107      	bne.n	8009a64 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009a54:	2200      	movs	r2, #0
 8009a56:	21ff      	movs	r1, #255	; 0xff
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f002 ffa9 	bl	800c9b0 <VL53L0X_WrByte>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009a64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d109      	bne.n	8009a80 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009a6c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009a70:	461a      	mov	r2, r3
 8009a72:	21b6      	movs	r1, #182	; 0xb6
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f002 ff9b 	bl	800c9b0 <VL53L0X_WrByte>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009a80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d107      	bne.n	8009a98 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2180      	movs	r1, #128	; 0x80
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f002 ff8f 	bl	800c9b0 <VL53L0X_WrByte>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009a98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009aa0:	f107 0210 	add.w	r2, r7, #16
 8009aa4:	f107 0111 	add.w	r1, r7, #17
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 fbbb 	bl	800a226 <VL53L0X_perform_ref_calibration>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009ab6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d121      	bne.n	8009b02 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ac4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009acc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009ada:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009ade:	f107 0218 	add.w	r2, r7, #24
 8009ae2:	9204      	str	r2, [sp, #16]
 8009ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae6:	9203      	str	r2, [sp, #12]
 8009ae8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009aea:	9202      	str	r2, [sp, #8]
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	4623      	mov	r3, r4
 8009af4:	4602      	mov	r2, r0
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7ff fe5e 	bl	80097b8 <enable_ref_spads>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b02:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d174      	bne.n	8009bf4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009b0e:	f107 0312 	add.w	r3, r7, #18
 8009b12:	4619      	mov	r1, r3
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff fecb 	bl	80098b0 <perform_ref_signal_measurement>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009b20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d161      	bne.n	8009bec <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009b28:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009b2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d25d      	bcs.n	8009bec <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009b30:	2300      	movs	r3, #0
 8009b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b34:	e009      	b.n	8009b4a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009b40:	2200      	movs	r2, #0
 8009b42:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b46:	3301      	adds	r3, #1
 8009b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d3f1      	bcc.n	8009b36 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009b52:	e002      	b.n	8009b5a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b56:	3301      	adds	r3, #1
 8009b58:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009b5a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b60:	4413      	add	r3, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fdb0 	bl	80096c8 <is_aperture>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009b6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d3ee      	bcc.n	8009b54 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009b76:	2301      	movs	r3, #1
 8009b78:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009b8a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009b8e:	f107 0218 	add.w	r2, r7, #24
 8009b92:	9204      	str	r2, [sp, #16]
 8009b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b96:	9203      	str	r2, [sp, #12]
 8009b98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b9a:	9202      	str	r2, [sp, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	4623      	mov	r3, r4
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f7ff fe06 	bl	80097b8 <enable_ref_spads>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009bb2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d11b      	bne.n	8009bf2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009bbe:	f107 0312 	add.w	r3, r7, #18
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff fe73 	bl	80098b0 <perform_ref_signal_measurement>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009bd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10c      	bne.n	8009bf2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009bd8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009bda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d208      	bcs.n	8009bf2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009be0:	2301      	movs	r3, #1
 8009be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009bea:	e002      	b.n	8009bf2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bf0:	e000      	b.n	8009bf4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009bf2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009bf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f040 80af 	bne.w	8009d5c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009bfe:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009c00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009c02:	429a      	cmp	r2, r3
 8009c04:	f240 80aa 	bls.w	8009d5c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009c18:	f107 031c 	add.w	r3, r7, #28
 8009c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f003 f81a 	bl	800cc58 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009c24:	8a7b      	ldrh	r3, [r7, #18]
 8009c26:	461a      	mov	r2, r3
 8009c28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bfb8      	it	lt
 8009c30:	425b      	neglt	r3, r3
 8009c32:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009c3a:	e086      	b.n	8009d4a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009c42:	f107 0314 	add.w	r3, r7, #20
 8009c46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c4a:	f7ff fcdf 	bl	800960c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c54:	d103      	bne.n	8009c5e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009c56:	23ce      	movs	r3, #206	; 0xce
 8009c58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009c5c:	e07e      	b.n	8009d5c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009c5e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4413      	add	r3, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff fd2e 	bl	80096c8 <is_aperture>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	461a      	mov	r2, r3
 8009c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009c76:	2301      	movs	r3, #1
 8009c78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009c7c:	e06e      	b.n	8009d5c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c80:	3301      	adds	r3, #1
 8009c82:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009c8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff fd32 	bl	80096fc <enable_spad_bit>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009c9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10c      	bne.n	8009cc0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ca8:	3301      	adds	r3, #1
 8009caa:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7ff fd59 	bl	800976c <set_ref_spad_map>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009cc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d146      	bne.n	8009d56 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009cc8:	f107 0312 	add.w	r3, r7, #18
 8009ccc:	4619      	mov	r1, r3
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f7ff fdee 	bl	80098b0 <perform_ref_signal_measurement>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009cda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d13b      	bne.n	8009d5a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009ce2:	8a7b      	ldrh	r3, [r7, #18]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfb8      	it	lt
 8009cee:	425b      	neglt	r3, r3
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009cf2:	8a7b      	ldrh	r3, [r7, #18]
 8009cf4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d21c      	bcs.n	8009d34 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d914      	bls.n	8009d2c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009d02:	f107 031c 	add.w	r3, r7, #28
 8009d06:	4619      	mov	r1, r3
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff fd2f 	bl	800976c <set_ref_spad_map>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009d1a:	f107 011c 	add.w	r1, r7, #28
 8009d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d20:	4618      	mov	r0, r3
 8009d22:	f002 ff99 	bl	800cc58 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d32:	e00a      	b.n	8009d4a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009d3e:	f107 031c 	add.w	r3, r7, #28
 8009d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d44:	4618      	mov	r0, r3
 8009d46:	f002 ff87 	bl	800cc58 <memcpy>
		while (!complete) {
 8009d4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f43f af74 	beq.w	8009c3c <VL53L0X_perform_ref_spad_management+0x2b8>
 8009d54:	e002      	b.n	8009d5c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009d56:	bf00      	nop
 8009d58:	e000      	b.n	8009d5c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009d5a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d115      	bne.n	8009d90 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d68:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009d70:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8009d90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	375c      	adds	r7, #92	; 0x5c
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd90      	pop	{r4, r7, pc}

08009d9c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009d9c:	b590      	push	{r4, r7, lr}
 8009d9e:	b093      	sub	sp, #76	; 0x4c
 8009da0:	af06      	add	r7, sp, #24
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009db4:	23b4      	movs	r3, #180	; 0xb4
 8009db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009dba:	2306      	movs	r3, #6
 8009dbc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009dbe:	232c      	movs	r3, #44	; 0x2c
 8009dc0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	21ff      	movs	r1, #255	; 0xff
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f002 fdf2 	bl	800c9b0 <VL53L0X_WrByte>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009dd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d107      	bne.n	8009dea <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009dda:	2200      	movs	r2, #0
 8009ddc:	214f      	movs	r1, #79	; 0x4f
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f002 fde6 	bl	800c9b0 <VL53L0X_WrByte>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009dea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d107      	bne.n	8009e02 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009df2:	222c      	movs	r2, #44	; 0x2c
 8009df4:	214e      	movs	r1, #78	; 0x4e
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f002 fdda 	bl	800c9b0 <VL53L0X_WrByte>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009e02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d107      	bne.n	8009e1a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	21ff      	movs	r1, #255	; 0xff
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f002 fdce 	bl	800c9b0 <VL53L0X_WrByte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009e1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d109      	bne.n	8009e36 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e26:	461a      	mov	r2, r3
 8009e28:	21b6      	movs	r1, #182	; 0xb6
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f002 fdc0 	bl	800c9b0 <VL53L0X_WrByte>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009e36:	2300      	movs	r3, #0
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
 8009e3a:	e009      	b.n	8009e50 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d3f1      	bcc.n	8009e3c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d011      	beq.n	8009e82 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009e5e:	e002      	b.n	8009e66 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	3301      	adds	r3, #1
 8009e64:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009e66:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	4413      	add	r3, r2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff fc2a 	bl	80096c8 <is_aperture>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d103      	bne.n	8009e82 <VL53L0X_set_reference_spads+0xe6>
 8009e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d3ee      	bcc.n	8009e60 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8009e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e92:	79f9      	ldrb	r1, [r7, #7]
 8009e94:	f107 0214 	add.w	r2, r7, #20
 8009e98:	9204      	str	r2, [sp, #16]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	9203      	str	r2, [sp, #12]
 8009e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ea0:	9202      	str	r2, [sp, #8]
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	4602      	mov	r2, r0
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f7ff fc83 	bl	80097b8 <enable_ref_spads>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009eb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10c      	bne.n	8009eda <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	79fa      	ldrb	r2, [r7, #7]
 8009ed6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009eda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3734      	adds	r7, #52	; 0x34
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd90      	pop	{r4, r7, pc}

08009ee6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009efe:	78fb      	ldrb	r3, [r7, #3]
 8009f00:	f043 0301 	orr.w	r3, r3, #1
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	461a      	mov	r2, r3
 8009f08:	2100      	movs	r1, #0
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f002 fd50 	bl	800c9b0 <VL53L0X_WrByte>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d104      	bne.n	8009f26 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f9bf 	bl	800a2a0 <VL53L0X_measurement_poll_for_completion>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d105      	bne.n	8009f3a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff fab5 	bl	80094a0 <VL53L0X_ClearInterruptMask>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009f42:	2200      	movs	r2, #0
 8009f44:	2100      	movs	r1, #0
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f002 fd32 	bl	800c9b0 <VL53L0X_WrByte>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	4608      	mov	r0, r1
 8009f66:	4611      	mov	r1, r2
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	70fb      	strb	r3, [r7, #3]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70bb      	strb	r3, [r7, #2]
 8009f72:	4613      	mov	r3, r2
 8009f74:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009f7e:	2201      	movs	r2, #1
 8009f80:	21ff      	movs	r1, #255	; 0xff
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f002 fd14 	bl	800c9b0 <VL53L0X_WrByte>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009f92:	2200      	movs	r2, #0
 8009f94:	2100      	movs	r1, #0
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f002 fd0a 	bl	800c9b0 <VL53L0X_WrByte>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	21ff      	movs	r1, #255	; 0xff
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f002 fd00 	bl	800c9b0 <VL53L0X_WrByte>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01e      	beq.n	8009ffe <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009fc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d009      	beq.n	8009fdc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	21cb      	movs	r1, #203	; 0xcb
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f002 fd71 	bl	800cab4 <VL53L0X_RdByte>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d02a      	beq.n	800a03a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009fe4:	f107 030e 	add.w	r3, r7, #14
 8009fe8:	461a      	mov	r2, r3
 8009fea:	21ee      	movs	r1, #238	; 0xee
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f002 fd61 	bl	800cab4 <VL53L0X_RdByte>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	73fb      	strb	r3, [r7, #15]
 8009ffc:	e01d      	b.n	800a03a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009ffe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a006:	78bb      	ldrb	r3, [r7, #2]
 800a008:	461a      	mov	r2, r3
 800a00a:	21cb      	movs	r1, #203	; 0xcb
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f002 fccf 	bl	800c9b0 <VL53L0X_WrByte>
 800a012:	4603      	mov	r3, r0
 800a014:	461a      	mov	r2, r3
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	4313      	orrs	r3, r2
 800a01a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a01c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00a      	beq.n	800a03a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a024:	787b      	ldrb	r3, [r7, #1]
 800a026:	2280      	movs	r2, #128	; 0x80
 800a028:	21ee      	movs	r1, #238	; 0xee
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f002 fd0e 	bl	800ca4c <VL53L0X_UpdateByte>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	4313      	orrs	r3, r2
 800a038:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a03a:	2201      	movs	r2, #1
 800a03c:	21ff      	movs	r1, #255	; 0xff
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f002 fcb6 	bl	800c9b0 <VL53L0X_WrByte>
 800a044:	4603      	mov	r3, r0
 800a046:	461a      	mov	r2, r3
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a04e:	2201      	movs	r2, #1
 800a050:	2100      	movs	r1, #0
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f002 fcac 	bl	800c9b0 <VL53L0X_WrByte>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	4313      	orrs	r3, r2
 800a060:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a062:	2200      	movs	r2, #0
 800a064:	21ff      	movs	r1, #255	; 0xff
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f002 fca2 	bl	800c9b0 <VL53L0X_WrByte>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	4313      	orrs	r3, r2
 800a074:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	f023 0310 	bic.w	r3, r3, #16
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	701a      	strb	r2, [r3, #0]

	return Status;
 800a082:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b08a      	sub	sp, #40	; 0x28
 800a092:	af04      	add	r7, sp, #16
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	4611      	mov	r1, r2
 800a09a:	461a      	mov	r2, r3
 800a09c:	460b      	mov	r3, r1
 800a09e:	71fb      	strb	r3, [r7, #7]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a0b8:	79bb      	ldrb	r3, [r7, #6]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d003      	beq.n	800a0c6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a0c4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f002 fc70 	bl	800c9b0 <VL53L0X_WrByte>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a0d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a0dc:	2140      	movs	r1, #64	; 0x40
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f7ff ff01 	bl	8009ee6 <VL53L0X_perform_single_ref_calibration>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a0e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d115      	bne.n	800a11c <VL53L0X_perform_vhv_calibration+0x8e>
 800a0f0:	79fb      	ldrb	r3, [r7, #7]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d112      	bne.n	800a11c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a0f6:	7d39      	ldrb	r1, [r7, #20]
 800a0f8:	7d7a      	ldrb	r2, [r7, #21]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	9303      	str	r3, [sp, #12]
 800a0fe:	2301      	movs	r3, #1
 800a100:	9302      	str	r3, [sp, #8]
 800a102:	f107 0313 	add.w	r3, r7, #19
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	460b      	mov	r3, r1
 800a10e:	2101      	movs	r1, #1
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff ff23 	bl	8009f5c <VL53L0X_ref_calibration_io>
 800a116:	4603      	mov	r3, r0
 800a118:	75fb      	strb	r3, [r7, #23]
 800a11a:	e002      	b.n	800a122 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d112      	bne.n	800a150 <VL53L0X_perform_vhv_calibration+0xc2>
 800a12a:	79bb      	ldrb	r3, [r7, #6]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00f      	beq.n	800a150 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a130:	7dbb      	ldrb	r3, [r7, #22]
 800a132:	461a      	mov	r2, r3
 800a134:	2101      	movs	r1, #1
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f002 fc3a 	bl	800c9b0 <VL53L0X_WrByte>
 800a13c:	4603      	mov	r3, r0
 800a13e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d103      	bne.n	800a150 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	7dba      	ldrb	r2, [r7, #22]
 800a14c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a150:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08a      	sub	sp, #40	; 0x28
 800a160:	af04      	add	r7, sp, #16
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4611      	mov	r1, r2
 800a168:	461a      	mov	r2, r3
 800a16a:	460b      	mov	r3, r1
 800a16c:	71fb      	strb	r3, [r7, #7]
 800a16e:	4613      	mov	r3, r2
 800a170:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a176:	2300      	movs	r3, #0
 800a178:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a17e:	2300      	movs	r3, #0
 800a180:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a182:	79bb      	ldrb	r3, [r7, #6]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a18e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a190:	2202      	movs	r2, #2
 800a192:	2101      	movs	r1, #1
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f002 fc0b 	bl	800c9b0 <VL53L0X_WrByte>
 800a19a:	4603      	mov	r3, r0
 800a19c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a19e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d105      	bne.n	800a1b2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f7ff fe9c 	bl	8009ee6 <VL53L0X_perform_single_ref_calibration>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a1b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d115      	bne.n	800a1e6 <VL53L0X_perform_phase_calibration+0x8a>
 800a1ba:	79fb      	ldrb	r3, [r7, #7]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d112      	bne.n	800a1e6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a1c0:	7d39      	ldrb	r1, [r7, #20]
 800a1c2:	7d7a      	ldrb	r2, [r7, #21]
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	9302      	str	r3, [sp, #8]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	f107 0313 	add.w	r3, r7, #19
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	2101      	movs	r1, #1
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f7ff febe 	bl	8009f5c <VL53L0X_ref_calibration_io>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]
 800a1e4:	e002      	b.n	800a1ec <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a1ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d112      	bne.n	800a21a <VL53L0X_perform_phase_calibration+0xbe>
 800a1f4:	79bb      	ldrb	r3, [r7, #6]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00f      	beq.n	800a21a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a1fa:	7dbb      	ldrb	r3, [r7, #22]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	2101      	movs	r1, #1
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f002 fbd5 	bl	800c9b0 <VL53L0X_WrByte>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a20a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d103      	bne.n	800a21a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	7dba      	ldrb	r2, [r7, #22]
 800a216:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a21a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b086      	sub	sp, #24
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	60f8      	str	r0, [r7, #12]
 800a22e:	60b9      	str	r1, [r7, #8]
 800a230:	607a      	str	r2, [r7, #4]
 800a232:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a234:	2300      	movs	r3, #0
 800a236:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a242:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	2300      	movs	r3, #0
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7ff ff1f 	bl	800a08e <VL53L0X_perform_vhv_calibration>
 800a250:	4603      	mov	r3, r0
 800a252:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d107      	bne.n	800a26c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a25c:	78fa      	ldrb	r2, [r7, #3]
 800a25e:	2300      	movs	r3, #0
 800a260:	6879      	ldr	r1, [r7, #4]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff ff7a 	bl	800a15c <VL53L0X_perform_phase_calibration>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10f      	bne.n	800a294 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a274:	7dbb      	ldrb	r3, [r7, #22]
 800a276:	461a      	mov	r2, r3
 800a278:	2101      	movs	r1, #1
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f002 fb98 	bl	800c9b0 <VL53L0X_WrByte>
 800a280:	4603      	mov	r3, r0
 800a282:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d103      	bne.n	800a294 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	7dba      	ldrb	r2, [r7, #22]
 800a290:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a2b4:	f107 030f 	add.w	r3, r7, #15
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7fe fe02 	bl	8008ec4 <VL53L0X_GetMeasurementDataReady>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d110      	bne.n	800a2ee <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d00f      	beq.n	800a2f2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a2de:	d302      	bcc.n	800a2e6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a2e0:	23f9      	movs	r3, #249	; 0xf9
 800a2e2:	75fb      	strb	r3, [r7, #23]
			break;
 800a2e4:	e006      	b.n	800a2f4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f002 fc82 	bl	800cbf0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a2ec:	e7e2      	b.n	800a2b4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a2ee:	bf00      	nop
 800a2f0:	e000      	b.n	800a2f4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800a2f2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a30e:	79fb      	ldrb	r3, [r7, #7]
 800a310:	3301      	adds	r3, #1
 800a312:	b2db      	uxtb	r3, r3
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	4603      	mov	r3, r0
 800a32e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	085b      	lsrs	r3, r3, #1
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a35c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a35e:	e002      	b.n	800a366 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	089b      	lsrs	r3, r3, #2
 800a364:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d8f8      	bhi.n	800a360 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a36e:	e017      	b.n	800a3a0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	4413      	add	r3, r2
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d30b      	bcc.n	800a394 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	4413      	add	r3, r2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	085b      	lsrs	r3, r3, #1
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	4413      	add	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e002      	b.n	800a39a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	089b      	lsrs	r3, r3, #2
 800a39e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e4      	bne.n	800a370 <VL53L0X_isqrt+0x24>
	}

	return res;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2183      	movs	r1, #131	; 0x83
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f002 faf3 	bl	800c9b0 <VL53L0X_WrByte>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d11e      	bne.n	800a41a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a3e0:	f107 030f 	add.w	r3, r7, #15
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	2183      	movs	r1, #131	; 0x83
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f002 fb63 	bl	800cab4 <VL53L0X_RdByte>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <VL53L0X_device_read_strobe+0x5a>
 800a3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d106      	bne.n	800a40e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	3301      	adds	r3, #1
 800a404:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a40c:	d3e8      	bcc.n	800a3e0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a414:	d301      	bcc.n	800a41a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a416:	23f9      	movs	r3, #249	; 0xf9
 800a418:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a41a:	2201      	movs	r2, #1
 800a41c:	2183      	movs	r1, #131	; 0x83
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f002 fac6 	bl	800c9b0 <VL53L0X_WrByte>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a42e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b098      	sub	sp, #96	; 0x60
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a446:	2300      	movs	r3, #0
 800a448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a46a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a46e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a486:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a48a:	2b07      	cmp	r3, #7
 800a48c:	f000 8408 	beq.w	800aca0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a490:	2201      	movs	r2, #1
 800a492:	2180      	movs	r1, #128	; 0x80
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f002 fa8b 	bl	800c9b0 <VL53L0X_WrByte>
 800a49a:	4603      	mov	r3, r0
 800a49c:	461a      	mov	r2, r3
 800a49e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	21ff      	movs	r1, #255	; 0xff
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f002 fa7f 	bl	800c9b0 <VL53L0X_WrByte>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f002 fa73 	bl	800c9b0 <VL53L0X_WrByte>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a4d8:	2206      	movs	r2, #6
 800a4da:	21ff      	movs	r1, #255	; 0xff
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f002 fa67 	bl	800c9b0 <VL53L0X_WrByte>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a4f0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2183      	movs	r1, #131	; 0x83
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f002 fadb 	bl	800cab4 <VL53L0X_RdByte>
 800a4fe:	4603      	mov	r3, r0
 800a500:	461a      	mov	r2, r3
 800a502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a506:	4313      	orrs	r3, r2
 800a508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a50c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a510:	f043 0304 	orr.w	r3, r3, #4
 800a514:	b2db      	uxtb	r3, r3
 800a516:	461a      	mov	r2, r3
 800a518:	2183      	movs	r1, #131	; 0x83
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f002 fa48 	bl	800c9b0 <VL53L0X_WrByte>
 800a520:	4603      	mov	r3, r0
 800a522:	461a      	mov	r2, r3
 800a524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a528:	4313      	orrs	r3, r2
 800a52a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a52e:	2207      	movs	r2, #7
 800a530:	21ff      	movs	r1, #255	; 0xff
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f002 fa3c 	bl	800c9b0 <VL53L0X_WrByte>
 800a538:	4603      	mov	r3, r0
 800a53a:	461a      	mov	r2, r3
 800a53c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a540:	4313      	orrs	r3, r2
 800a542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a546:	2201      	movs	r2, #1
 800a548:	2181      	movs	r1, #129	; 0x81
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f002 fa30 	bl	800c9b0 <VL53L0X_WrByte>
 800a550:	4603      	mov	r3, r0
 800a552:	461a      	mov	r2, r3
 800a554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a558:	4313      	orrs	r3, r2
 800a55a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f002 fb46 	bl	800cbf0 <VL53L0X_PollingDelay>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a56c:	4313      	orrs	r3, r2
 800a56e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a572:	2201      	movs	r2, #1
 800a574:	2180      	movs	r1, #128	; 0x80
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f002 fa1a 	bl	800c9b0 <VL53L0X_WrByte>
 800a57c:	4603      	mov	r3, r0
 800a57e:	461a      	mov	r2, r3
 800a580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a584:	4313      	orrs	r3, r2
 800a586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8098 	beq.w	800a6c6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a596:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a59a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f040 8091 	bne.w	800a6c6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a5a4:	226b      	movs	r2, #107	; 0x6b
 800a5a6:	2194      	movs	r1, #148	; 0x94
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f002 fa01 	bl	800c9b0 <VL53L0X_WrByte>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fef9 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a5d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2190      	movs	r1, #144	; 0x90
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f002 facd 	bl	800cb78 <VL53L0X_RdDWord>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ee:	0a1b      	lsrs	r3, r3, #8
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	0bdb      	lsrs	r3, r3, #15
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a608:	2224      	movs	r2, #36	; 0x24
 800a60a:	2194      	movs	r1, #148	; 0x94
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f002 f9cf 	bl	800c9b0 <VL53L0X_WrByte>
 800a612:	4603      	mov	r3, r0
 800a614:	461a      	mov	r2, r3
 800a616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a61a:	4313      	orrs	r3, r2
 800a61c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff fec7 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a626:	4603      	mov	r3, r0
 800a628:	461a      	mov	r2, r3
 800a62a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a62e:	4313      	orrs	r3, r2
 800a630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a638:	461a      	mov	r2, r3
 800a63a:	2190      	movs	r1, #144	; 0x90
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f002 fa9b 	bl	800cb78 <VL53L0X_RdDWord>
 800a642:	4603      	mov	r3, r0
 800a644:	461a      	mov	r2, r3
 800a646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a64a:	4313      	orrs	r3, r2
 800a64c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	0e1b      	lsrs	r3, r3, #24
 800a654:	b2db      	uxtb	r3, r3
 800a656:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	0c1b      	lsrs	r3, r3, #16
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	0a1b      	lsrs	r3, r3, #8
 800a664:	b2db      	uxtb	r3, r3
 800a666:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a66e:	2225      	movs	r2, #37	; 0x25
 800a670:	2194      	movs	r1, #148	; 0x94
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f002 f99c 	bl	800c9b0 <VL53L0X_WrByte>
 800a678:	4603      	mov	r3, r0
 800a67a:	461a      	mov	r2, r3
 800a67c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a680:	4313      	orrs	r3, r2
 800a682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fe94 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a68c:	4603      	mov	r3, r0
 800a68e:	461a      	mov	r2, r3
 800a690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a694:	4313      	orrs	r3, r2
 800a696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a69a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a69e:	461a      	mov	r2, r3
 800a6a0:	2190      	movs	r1, #144	; 0x90
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f002 fa68 	bl	800cb78 <VL53L0X_RdDWord>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	0e1b      	lsrs	r3, r3, #24
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	0c1b      	lsrs	r3, r3, #16
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	f003 0302 	and.w	r3, r3, #2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 8189 	beq.w	800a9e4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a6d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6d6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f040 8182 	bne.w	800a9e4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	2194      	movs	r1, #148	; 0x94
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f002 f963 	bl	800c9b0 <VL53L0X_WrByte>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff fe5b 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a6fe:	4603      	mov	r3, r0
 800a700:	461a      	mov	r2, r3
 800a702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a706:	4313      	orrs	r3, r2
 800a708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a70c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a710:	461a      	mov	r2, r3
 800a712:	2190      	movs	r1, #144	; 0x90
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f002 f9cd 	bl	800cab4 <VL53L0X_RdByte>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a722:	4313      	orrs	r3, r2
 800a724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a728:	227b      	movs	r2, #123	; 0x7b
 800a72a:	2194      	movs	r1, #148	; 0x94
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f002 f93f 	bl	800c9b0 <VL53L0X_WrByte>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a73a:	4313      	orrs	r3, r2
 800a73c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fe37 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a746:	4603      	mov	r3, r0
 800a748:	461a      	mov	r2, r3
 800a74a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a74e:	4313      	orrs	r3, r2
 800a750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a754:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a758:	461a      	mov	r2, r3
 800a75a:	2190      	movs	r1, #144	; 0x90
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f002 f9a9 	bl	800cab4 <VL53L0X_RdByte>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a76a:	4313      	orrs	r3, r2
 800a76c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a770:	2277      	movs	r2, #119	; 0x77
 800a772:	2194      	movs	r1, #148	; 0x94
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 f91b 	bl	800c9b0 <VL53L0X_WrByte>
 800a77a:	4603      	mov	r3, r0
 800a77c:	461a      	mov	r2, r3
 800a77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a782:	4313      	orrs	r3, r2
 800a784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff fe13 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a78e:	4603      	mov	r3, r0
 800a790:	461a      	mov	r2, r3
 800a792:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a796:	4313      	orrs	r3, r2
 800a798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a79c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	2190      	movs	r1, #144	; 0x90
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f002 f9e7 	bl	800cb78 <VL53L0X_RdDWord>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	0e5b      	lsrs	r3, r3, #25
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	0c9b      	lsrs	r3, r3, #18
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d6:	0adb      	lsrs	r3, r3, #11
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	091b      	lsrs	r3, r3, #4
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a802:	2278      	movs	r2, #120	; 0x78
 800a804:	2194      	movs	r1, #148	; 0x94
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f002 f8d2 	bl	800c9b0 <VL53L0X_WrByte>
 800a80c:	4603      	mov	r3, r0
 800a80e:	461a      	mov	r2, r3
 800a810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a814:	4313      	orrs	r3, r2
 800a816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff fdca 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a820:	4603      	mov	r3, r0
 800a822:	461a      	mov	r2, r3
 800a824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a828:	4313      	orrs	r3, r2
 800a82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a82e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a832:	461a      	mov	r2, r3
 800a834:	2190      	movs	r1, #144	; 0x90
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f002 f99e 	bl	800cb78 <VL53L0X_RdDWord>
 800a83c:	4603      	mov	r3, r0
 800a83e:	461a      	mov	r2, r3
 800a840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a844:	4313      	orrs	r3, r2
 800a846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	0f5b      	lsrs	r3, r3, #29
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a854:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a85a:	4413      	add	r3, r2
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	0d9b      	lsrs	r3, r3, #22
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	0bdb      	lsrs	r3, r3, #15
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	0a1b      	lsrs	r3, r3, #8
 800a880:	b2db      	uxtb	r3, r3
 800a882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a886:	b2db      	uxtb	r3, r3
 800a888:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	085b      	lsrs	r3, r3, #1
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a894:	b2db      	uxtb	r3, r3
 800a896:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	019b      	lsls	r3, r3, #6
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a8aa:	2279      	movs	r2, #121	; 0x79
 800a8ac:	2194      	movs	r1, #148	; 0x94
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f002 f87e 	bl	800c9b0 <VL53L0X_WrByte>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7ff fd76 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a8d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8da:	461a      	mov	r2, r3
 800a8dc:	2190      	movs	r1, #144	; 0x90
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f002 f94a 	bl	800cb78 <VL53L0X_RdDWord>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	0e9b      	lsrs	r3, r3, #26
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a8fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a902:	4413      	add	r3, r2
 800a904:	b2db      	uxtb	r3, r3
 800a906:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	0cdb      	lsrs	r3, r3, #19
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a912:	b2db      	uxtb	r3, r3
 800a914:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	0b1b      	lsrs	r3, r3, #12
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a920:	b2db      	uxtb	r3, r3
 800a922:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	095b      	lsrs	r3, r3, #5
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	b2db      	uxtb	r3, r3
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a944:	227a      	movs	r2, #122	; 0x7a
 800a946:	2194      	movs	r1, #148	; 0x94
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f002 f831 	bl	800c9b0 <VL53L0X_WrByte>
 800a94e:	4603      	mov	r3, r0
 800a950:	461a      	mov	r2, r3
 800a952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a956:	4313      	orrs	r3, r2
 800a958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff fd29 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
 800a966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a96a:	4313      	orrs	r3, r2
 800a96c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a974:	461a      	mov	r2, r3
 800a976:	2190      	movs	r1, #144	; 0x90
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f002 f8fd 	bl	800cb78 <VL53L0X_RdDWord>
 800a97e:	4603      	mov	r3, r0
 800a980:	461a      	mov	r2, r3
 800a982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a986:	4313      	orrs	r3, r2
 800a988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98e:	0f9b      	lsrs	r3, r3, #30
 800a990:	b2db      	uxtb	r3, r3
 800a992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a996:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a99c:	4413      	add	r3, r2
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	0ddb      	lsrs	r3, r3, #23
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	0c1b      	lsrs	r3, r3, #16
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	0a5b      	lsrs	r3, r3, #9
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	089b      	lsrs	r3, r3, #2
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	f003 0304 	and.w	r3, r3, #4
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 80f1 	beq.w	800abd2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a9f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9f4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f040 80ea 	bne.w	800abd2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a9fe:	227b      	movs	r2, #123	; 0x7b
 800aa00:	2194      	movs	r1, #148	; 0x94
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f001 ffd4 	bl	800c9b0 <VL53L0X_WrByte>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa10:	4313      	orrs	r3, r2
 800aa12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7ff fccc 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa24:	4313      	orrs	r3, r2
 800aa26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800aa2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa2e:	461a      	mov	r2, r3
 800aa30:	2190      	movs	r1, #144	; 0x90
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f002 f8a0 	bl	800cb78 <VL53L0X_RdDWord>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa40:	4313      	orrs	r3, r2
 800aa42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800aa46:	227c      	movs	r2, #124	; 0x7c
 800aa48:	2194      	movs	r1, #148	; 0x94
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 ffb0 	bl	800c9b0 <VL53L0X_WrByte>
 800aa50:	4603      	mov	r3, r0
 800aa52:	461a      	mov	r2, r3
 800aa54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff fca8 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800aa72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa76:	461a      	mov	r2, r3
 800aa78:	2190      	movs	r1, #144	; 0x90
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f002 f87c 	bl	800cb78 <VL53L0X_RdDWord>
 800aa80:	4603      	mov	r3, r0
 800aa82:	461a      	mov	r2, r3
 800aa84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800aa8e:	2273      	movs	r2, #115	; 0x73
 800aa90:	2194      	movs	r1, #148	; 0x94
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f001 ff8c 	bl	800c9b0 <VL53L0X_WrByte>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff fc84 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800aaac:	4603      	mov	r3, r0
 800aaae:	461a      	mov	r2, r3
 800aab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aab4:	4313      	orrs	r3, r2
 800aab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aaba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aabe:	461a      	mov	r2, r3
 800aac0:	2190      	movs	r1, #144	; 0x90
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f002 f858 	bl	800cb78 <VL53L0X_RdDWord>
 800aac8:	4603      	mov	r3, r0
 800aaca:	461a      	mov	r2, r3
 800aacc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aad0:	4313      	orrs	r3, r2
 800aad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800aada:	b29b      	uxth	r3, r3
 800aadc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800aade:	2274      	movs	r2, #116	; 0x74
 800aae0:	2194      	movs	r1, #148	; 0x94
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 ff64 	bl	800c9b0 <VL53L0X_WrByte>
 800aae8:	4603      	mov	r3, r0
 800aaea:	461a      	mov	r2, r3
 800aaec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff fc5c 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800aafc:	4603      	mov	r3, r0
 800aafe:	461a      	mov	r2, r3
 800ab00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab04:	4313      	orrs	r3, r2
 800ab06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ab0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab0e:	461a      	mov	r2, r3
 800ab10:	2190      	movs	r1, #144	; 0x90
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f002 f830 	bl	800cb78 <VL53L0X_RdDWord>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab20:	4313      	orrs	r3, r2
 800ab22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ab2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ab30:	2275      	movs	r2, #117	; 0x75
 800ab32:	2194      	movs	r1, #148	; 0x94
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 ff3b 	bl	800c9b0 <VL53L0X_WrByte>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab42:	4313      	orrs	r3, r2
 800ab44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fc33 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	461a      	mov	r2, r3
 800ab52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab56:	4313      	orrs	r3, r2
 800ab58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ab5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab60:	461a      	mov	r2, r3
 800ab62:	2190      	movs	r1, #144	; 0x90
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f002 f807 	bl	800cb78 <VL53L0X_RdDWord>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab72:	4313      	orrs	r3, r2
 800ab74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800ab80:	2276      	movs	r2, #118	; 0x76
 800ab82:	2194      	movs	r1, #148	; 0x94
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f001 ff13 	bl	800c9b0 <VL53L0X_WrByte>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab92:	4313      	orrs	r3, r2
 800ab94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fc0b 	bl	800a3b4 <VL53L0X_device_read_strobe>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	461a      	mov	r2, r3
 800aba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aba6:	4313      	orrs	r3, r2
 800aba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800abac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800abb0:	461a      	mov	r2, r3
 800abb2:	2190      	movs	r1, #144	; 0x90
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f001 ffdf 	bl	800cb78 <VL53L0X_RdDWord>
 800abba:	4603      	mov	r3, r0
 800abbc:	461a      	mov	r2, r3
 800abbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abc2:	4313      	orrs	r3, r2
 800abc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800abcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abce:	4313      	orrs	r3, r2
 800abd0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800abd2:	2200      	movs	r2, #0
 800abd4:	2181      	movs	r1, #129	; 0x81
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f001 feea 	bl	800c9b0 <VL53L0X_WrByte>
 800abdc:	4603      	mov	r3, r0
 800abde:	461a      	mov	r2, r3
 800abe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe4:	4313      	orrs	r3, r2
 800abe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800abea:	2206      	movs	r2, #6
 800abec:	21ff      	movs	r1, #255	; 0xff
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f001 fede 	bl	800c9b0 <VL53L0X_WrByte>
 800abf4:	4603      	mov	r3, r0
 800abf6:	461a      	mov	r2, r3
 800abf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800ac02:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ac06:	461a      	mov	r2, r3
 800ac08:	2183      	movs	r1, #131	; 0x83
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f001 ff52 	bl	800cab4 <VL53L0X_RdByte>
 800ac10:	4603      	mov	r3, r0
 800ac12:	461a      	mov	r2, r3
 800ac14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800ac1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac22:	f023 0304 	bic.w	r3, r3, #4
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	461a      	mov	r2, r3
 800ac2a:	2183      	movs	r1, #131	; 0x83
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f001 febf 	bl	800c9b0 <VL53L0X_WrByte>
 800ac32:	4603      	mov	r3, r0
 800ac34:	461a      	mov	r2, r3
 800ac36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ac40:	2201      	movs	r2, #1
 800ac42:	21ff      	movs	r1, #255	; 0xff
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 feb3 	bl	800c9b0 <VL53L0X_WrByte>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac52:	4313      	orrs	r3, r2
 800ac54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ac58:	2201      	movs	r2, #1
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f001 fea7 	bl	800c9b0 <VL53L0X_WrByte>
 800ac62:	4603      	mov	r3, r0
 800ac64:	461a      	mov	r2, r3
 800ac66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ac70:	2200      	movs	r2, #0
 800ac72:	21ff      	movs	r1, #255	; 0xff
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 fe9b 	bl	800c9b0 <VL53L0X_WrByte>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac82:	4313      	orrs	r3, r2
 800ac84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800ac88:	2200      	movs	r2, #0
 800ac8a:	2180      	movs	r1, #128	; 0x80
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 fe8f 	bl	800c9b0 <VL53L0X_WrByte>
 800ac92:	4603      	mov	r3, r0
 800ac94:	461a      	mov	r2, r3
 800ac96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800aca0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f040 808f 	bne.w	800adc8 <VL53L0X_get_info_from_device+0x98e>
 800acaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acae:	2b07      	cmp	r3, #7
 800acb0:	f000 808a 	beq.w	800adc8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800acb4:	78fb      	ldrb	r3, [r7, #3]
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d024      	beq.n	800ad08 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800acbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acc2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d11e      	bne.n	800ad08 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800acd0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800acda:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800acde:	2300      	movs	r3, #0
 800ace0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ace2:	e00e      	b.n	800ad02 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800ace4:	f107 0208 	add.w	r2, r7, #8
 800ace8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acea:	4413      	add	r3, r2
 800acec:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800acf8:	460a      	mov	r2, r1
 800acfa:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800acfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfe:	3301      	adds	r3, #1
 800ad00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad04:	2b05      	cmp	r3, #5
 800ad06:	dded      	ble.n	800ace4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	f003 0302 	and.w	r3, r3, #2
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d018      	beq.n	800ad44 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ad12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad16:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d112      	bne.n	800ad44 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ad1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ad28:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	33f3      	adds	r3, #243	; 0xf3
 800ad36:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800ad38:	f107 0310 	add.w	r3, r7, #16
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad40:	f001 ffa0 	bl	800cc84 <strcpy>

		}

		if (((option & 4) == 4) &&
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 0304 	and.w	r3, r3, #4
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d030      	beq.n	800adb0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ad4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad52:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d12a      	bne.n	800adb0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ad5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ad62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800ad6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad6c:	025b      	lsls	r3, r3, #9
 800ad6e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800ad7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d011      	beq.n	800ada8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800ad84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800ad8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad92:	fb02 f303 	mul.w	r3, r2, r3
 800ad96:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800ad98:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800ad9c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800ada0:	425b      	negs	r3, r3
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800ada8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800adb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800adb4:	78fb      	ldrb	r3, [r7, #3]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800adbe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800adc8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3760      	adds	r7, #96	; 0x60
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	460b      	mov	r3, r1
 800adde:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800ade0:	f240 6277 	movw	r2, #1655	; 0x677
 800ade4:	f04f 0300 	mov.w	r3, #0
 800ade8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800adec:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800adf0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800ae02:	68bb      	ldr	r3, [r7, #8]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	371c      	adds	r7, #28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d017      	beq.n	800ae5a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ae30:	e005      	b.n	800ae3e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	085b      	lsrs	r3, r3, #1
 800ae36:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800ae38:	89fb      	ldrh	r3, [r7, #14]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1f4      	bne.n	800ae32 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800ae48:	89fb      	ldrh	r3, [r7, #14]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800ae56:	4413      	add	r3, r2
 800ae58:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800ae5a:	8afb      	ldrh	r3, [r7, #22]

}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ae76:	88fb      	ldrh	r3, [r7, #6]
 800ae78:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800ae7a:	88fa      	ldrh	r2, [r7, #6]
 800ae7c:	0a12      	lsrs	r2, r2, #8
 800ae7e:	b292      	uxth	r2, r2
 800ae80:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ae82:	3301      	adds	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800ae86:	68fb      	ldr	r3, [r7, #12]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff ff92 	bl	800add4 <VL53L0X_calc_macro_period_ps>
 800aeb0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aeb8:	4a0a      	ldr	r2, [pc, #40]	; (800aee4 <VL53L0X_calc_timeout_mclks+0x50>)
 800aeba:	fba2 2303 	umull	r2, r3, r2, r3
 800aebe:	099b      	lsrs	r3, r3, #6
 800aec0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aec8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	085b      	lsrs	r3, r3, #1
 800aed0:	441a      	add	r2, r3
	timeout_period_mclks =
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800aeda:	69fb      	ldr	r3, [r7, #28]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3720      	adds	r7, #32
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	10624dd3 	.word	0x10624dd3

0800aee8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	807b      	strh	r3, [r7, #2]
 800aef4:	4613      	mov	r3, r2
 800aef6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800aefc:	787b      	ldrb	r3, [r7, #1]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff ff67 	bl	800add4 <VL53L0X_calc_macro_period_ps>
 800af06:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800af0e:	4a0a      	ldr	r2, [pc, #40]	; (800af38 <VL53L0X_calc_timeout_us+0x50>)
 800af10:	fba2 2303 	umull	r2, r3, r2, r3
 800af14:	099b      	lsrs	r3, r3, #6
 800af16:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800af18:	887b      	ldrh	r3, [r7, #2]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	fb02 f303 	mul.w	r3, r2, r3
 800af20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800af24:	4a04      	ldr	r2, [pc, #16]	; (800af38 <VL53L0X_calc_timeout_us+0x50>)
 800af26:	fba2 2303 	umull	r2, r3, r2, r3
 800af2a:	099b      	lsrs	r3, r3, #6
 800af2c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800af2e:	697b      	ldr	r3, [r7, #20]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	10624dd3 	.word	0x10624dd3

0800af3c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08c      	sub	sp, #48	; 0x30
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	460b      	mov	r3, r1
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800af62:	7afb      	ldrb	r3, [r7, #11]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <get_sequence_step_timeout+0x38>
 800af68:	7afb      	ldrb	r3, [r7, #11]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d002      	beq.n	800af74 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800af6e:	7afb      	ldrb	r3, [r7, #11]
 800af70:	2b02      	cmp	r3, #2
 800af72:	d128      	bne.n	800afc6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800af74:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800af78:	461a      	mov	r2, r3
 800af7a:	2100      	movs	r1, #0
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7fd fa7d 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800af82:	4603      	mov	r3, r0
 800af84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800af88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d109      	bne.n	800afa4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800af90:	f107 0320 	add.w	r3, r7, #32
 800af94:	461a      	mov	r2, r3
 800af96:	2146      	movs	r1, #70	; 0x46
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f001 fd8b 	bl	800cab4 <VL53L0X_RdByte>
 800af9e:	4603      	mov	r3, r0
 800afa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800afa4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff ff5c 	bl	800ae68 <VL53L0X_decode_timeout>
 800afb0:	4603      	mov	r3, r0
 800afb2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800afb4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800afb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afba:	4619      	mov	r1, r3
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7ff ff93 	bl	800aee8 <VL53L0X_calc_timeout_us>
 800afc2:	62b8      	str	r0, [r7, #40]	; 0x28
 800afc4:	e092      	b.n	800b0ec <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d135      	bne.n	800b038 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800afcc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800afd0:	461a      	mov	r2, r3
 800afd2:	2100      	movs	r1, #0
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7fd fa51 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800afda:	4603      	mov	r3, r0
 800afdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800afe0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f040 8081 	bne.w	800b0ec <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800afea:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800afee:	461a      	mov	r2, r3
 800aff0:	2100      	movs	r1, #0
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7fd fa42 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800aff8:	4603      	mov	r3, r0
 800affa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800affe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b002:	2b00      	cmp	r3, #0
 800b004:	d109      	bne.n	800b01a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b006:	f107 031e 	add.w	r3, r7, #30
 800b00a:	461a      	mov	r2, r3
 800b00c:	2151      	movs	r1, #81	; 0x51
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f001 fd7a 	bl	800cb08 <VL53L0X_RdWord>
 800b014:	4603      	mov	r3, r0
 800b016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b01a:	8bfb      	ldrh	r3, [r7, #30]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff ff23 	bl	800ae68 <VL53L0X_decode_timeout>
 800b022:	4603      	mov	r3, r0
 800b024:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b026:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b02a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b02c:	4619      	mov	r1, r3
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff ff5a 	bl	800aee8 <VL53L0X_calc_timeout_us>
 800b034:	62b8      	str	r0, [r7, #40]	; 0x28
 800b036:	e059      	b.n	800b0ec <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d156      	bne.n	800b0ec <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b03e:	f107 0314 	add.w	r3, r7, #20
 800b042:	4619      	mov	r1, r3
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7fd fb25 	bl	8008694 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b04e:	7dfb      	ldrb	r3, [r7, #23]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d01d      	beq.n	800b090 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b054:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b058:	461a      	mov	r2, r3
 800b05a:	2100      	movs	r1, #0
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7fd fa0d 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800b062:	4603      	mov	r3, r0
 800b064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b068:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10f      	bne.n	800b090 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b070:	f107 031e 	add.w	r3, r7, #30
 800b074:	461a      	mov	r2, r3
 800b076:	2151      	movs	r1, #81	; 0x51
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f001 fd45 	bl	800cb08 <VL53L0X_RdWord>
 800b07e:	4603      	mov	r3, r0
 800b080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b084:	8bfb      	ldrh	r3, [r7, #30]
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff feee 	bl	800ae68 <VL53L0X_decode_timeout>
 800b08c:	4603      	mov	r3, r0
 800b08e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b094:	2b00      	cmp	r3, #0
 800b096:	d109      	bne.n	800b0ac <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b098:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b09c:	461a      	mov	r2, r3
 800b09e:	2101      	movs	r1, #1
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7fd f9eb 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b0ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10f      	bne.n	800b0d4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b0b4:	f107 031c 	add.w	r3, r7, #28
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	2171      	movs	r1, #113	; 0x71
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f001 fd23 	bl	800cb08 <VL53L0X_RdWord>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b0c8:	8bbb      	ldrh	r3, [r7, #28]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7ff fecc 	bl	800ae68 <VL53L0X_decode_timeout>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b0d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b0d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b0dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b0e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7ff feff 	bl	800aee8 <VL53L0X_calc_timeout_us>
 800b0ea:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f0:	601a      	str	r2, [r3, #0]

	return Status;
 800b0f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3730      	adds	r7, #48	; 0x30
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b08a      	sub	sp, #40	; 0x28
 800b102:	af00      	add	r7, sp, #0
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	460b      	mov	r3, r1
 800b108:	607a      	str	r2, [r7, #4]
 800b10a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b112:	7afb      	ldrb	r3, [r7, #11]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d005      	beq.n	800b124 <set_sequence_step_timeout+0x26>
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d002      	beq.n	800b124 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b11e:	7afb      	ldrb	r3, [r7, #11]
 800b120:	2b02      	cmp	r3, #2
 800b122:	d138      	bne.n	800b196 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b124:	f107 031b 	add.w	r3, r7, #27
 800b128:	461a      	mov	r2, r3
 800b12a:	2100      	movs	r1, #0
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f7fd f9a5 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800b132:	4603      	mov	r3, r0
 800b134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b138:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d11a      	bne.n	800b176 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b140:	7efb      	ldrb	r3, [r7, #27]
 800b142:	461a      	mov	r2, r3
 800b144:	6879      	ldr	r1, [r7, #4]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7ff fea4 	bl	800ae94 <VL53L0X_calc_timeout_mclks>
 800b14c:	4603      	mov	r3, r0
 800b14e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b150:	8bbb      	ldrh	r3, [r7, #28]
 800b152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b156:	d903      	bls.n	800b160 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b158:	23ff      	movs	r3, #255	; 0xff
 800b15a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b15e:	e004      	b.n	800b16a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b160:	8bbb      	ldrh	r3, [r7, #28]
 800b162:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b164:	3b01      	subs	r3, #1
 800b166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b16a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b16e:	b29a      	uxth	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b176:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f040 80ab 	bne.w	800b2d6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b184:	461a      	mov	r2, r3
 800b186:	2146      	movs	r1, #70	; 0x46
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f001 fc11 	bl	800c9b0 <VL53L0X_WrByte>
 800b18e:	4603      	mov	r3, r0
 800b190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b194:	e09f      	b.n	800b2d6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b196:	7afb      	ldrb	r3, [r7, #11]
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d135      	bne.n	800b208 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b19c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d11b      	bne.n	800b1dc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b1a4:	f107 031b 	add.w	r3, r7, #27
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7fd f965 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b1b8:	7efb      	ldrb	r3, [r7, #27]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f7ff fe68 	bl	800ae94 <VL53L0X_calc_timeout_mclks>
 800b1c4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b1c6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff fe20 	bl	800ae10 <VL53L0X_encode_timeout>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b1d4:	8b3a      	ldrh	r2, [r7, #24]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b1dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d108      	bne.n	800b1f6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b1e4:	8b3b      	ldrh	r3, [r7, #24]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	2151      	movs	r1, #81	; 0x51
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f001 fc04 	bl	800c9f8 <VL53L0X_WrWord>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b1f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d16b      	bne.n	800b2d6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b206:	e066      	b.n	800b2d6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b208:	7afb      	ldrb	r3, [r7, #11]
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d160      	bne.n	800b2d0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b20e:	f107 0310 	add.w	r3, r7, #16
 800b212:	4619      	mov	r1, r3
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7fd fa3d 	bl	8008694 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b21e:	7cfb      	ldrb	r3, [r7, #19]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01d      	beq.n	800b260 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b224:	f107 031b 	add.w	r3, r7, #27
 800b228:	461a      	mov	r2, r3
 800b22a:	2100      	movs	r1, #0
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7fd f925 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800b232:	4603      	mov	r3, r0
 800b234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10f      	bne.n	800b260 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b240:	f107 0318 	add.w	r3, r7, #24
 800b244:	461a      	mov	r2, r3
 800b246:	2151      	movs	r1, #81	; 0x51
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f001 fc5d 	bl	800cb08 <VL53L0X_RdWord>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b254:	8b3b      	ldrh	r3, [r7, #24]
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff fe06 	bl	800ae68 <VL53L0X_decode_timeout>
 800b25c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b25e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b268:	f107 031b 	add.w	r3, r7, #27
 800b26c:	461a      	mov	r2, r3
 800b26e:	2101      	movs	r1, #1
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7fd f903 	bl	800847c <VL53L0X_GetVcselPulsePeriod>
 800b276:	4603      	mov	r3, r0
 800b278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b27c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b280:	2b00      	cmp	r3, #0
 800b282:	d128      	bne.n	800b2d6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b284:	7efb      	ldrb	r3, [r7, #27]
 800b286:	461a      	mov	r2, r3
 800b288:	6879      	ldr	r1, [r7, #4]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f7ff fe02 	bl	800ae94 <VL53L0X_calc_timeout_mclks>
 800b290:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b294:	6a3a      	ldr	r2, [r7, #32]
 800b296:	4413      	add	r3, r2
 800b298:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b29a:	6a38      	ldr	r0, [r7, #32]
 800b29c:	f7ff fdb8 	bl	800ae10 <VL53L0X_encode_timeout>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800b2a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d108      	bne.n	800b2be <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b2ac:	8bfb      	ldrh	r3, [r7, #30]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	2171      	movs	r1, #113	; 0x71
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f001 fba0 	bl	800c9f8 <VL53L0X_WrWord>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b2be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d107      	bne.n	800b2d6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b2ce:	e002      	b.n	800b2d6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b2d0:	23fc      	movs	r3, #252	; 0xfc
 800b2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b2d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3728      	adds	r7, #40	; 0x28
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b08a      	sub	sp, #40	; 0x28
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	70fb      	strb	r3, [r7, #3]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800b2f8:	230c      	movs	r3, #12
 800b2fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800b2fe:	2312      	movs	r3, #18
 800b300:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800b304:	2308      	movs	r3, #8
 800b306:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800b30a:	230e      	movs	r3, #14
 800b30c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800b314:	78bb      	ldrb	r3, [r7, #2]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b320:	23fc      	movs	r3, #252	; 0xfc
 800b322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b326:	e020      	b.n	800b36a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800b328:	78fb      	ldrb	r3, [r7, #3]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10d      	bne.n	800b34a <VL53L0X_set_vcsel_pulse_period+0x68>
 800b32e:	78ba      	ldrb	r2, [r7, #2]
 800b330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b334:	429a      	cmp	r2, r3
 800b336:	d304      	bcc.n	800b342 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800b338:	78ba      	ldrb	r2, [r7, #2]
 800b33a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b33e:	429a      	cmp	r2, r3
 800b340:	d903      	bls.n	800b34a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b342:	23fc      	movs	r3, #252	; 0xfc
 800b344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b348:	e00f      	b.n	800b36a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800b34a:	78fb      	ldrb	r3, [r7, #3]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10c      	bne.n	800b36a <VL53L0X_set_vcsel_pulse_period+0x88>
 800b350:	78ba      	ldrb	r2, [r7, #2]
 800b352:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b356:	429a      	cmp	r2, r3
 800b358:	d304      	bcc.n	800b364 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800b35a:	78ba      	ldrb	r2, [r7, #2]
 800b35c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b360:	429a      	cmp	r2, r3
 800b362:	d902      	bls.n	800b36a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b364:	23fc      	movs	r3, #252	; 0xfc
 800b366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800b36a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d002      	beq.n	800b378 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800b372:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b376:	e239      	b.n	800b7ec <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800b378:	78fb      	ldrb	r3, [r7, #3]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d150      	bne.n	800b420 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800b37e:	78bb      	ldrb	r3, [r7, #2]
 800b380:	2b0c      	cmp	r3, #12
 800b382:	d110      	bne.n	800b3a6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800b384:	2218      	movs	r2, #24
 800b386:	2157      	movs	r1, #87	; 0x57
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f001 fb11 	bl	800c9b0 <VL53L0X_WrByte>
 800b38e:	4603      	mov	r3, r0
 800b390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800b394:	2208      	movs	r2, #8
 800b396:	2156      	movs	r1, #86	; 0x56
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f001 fb09 	bl	800c9b0 <VL53L0X_WrByte>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3a4:	e17f      	b.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b3a6:	78bb      	ldrb	r3, [r7, #2]
 800b3a8:	2b0e      	cmp	r3, #14
 800b3aa:	d110      	bne.n	800b3ce <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800b3ac:	2230      	movs	r2, #48	; 0x30
 800b3ae:	2157      	movs	r1, #87	; 0x57
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 fafd 	bl	800c9b0 <VL53L0X_WrByte>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800b3bc:	2208      	movs	r2, #8
 800b3be:	2156      	movs	r1, #86	; 0x56
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 faf5 	bl	800c9b0 <VL53L0X_WrByte>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3cc:	e16b      	b.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800b3ce:	78bb      	ldrb	r3, [r7, #2]
 800b3d0:	2b10      	cmp	r3, #16
 800b3d2:	d110      	bne.n	800b3f6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800b3d4:	2240      	movs	r2, #64	; 0x40
 800b3d6:	2157      	movs	r1, #87	; 0x57
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 fae9 	bl	800c9b0 <VL53L0X_WrByte>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800b3e4:	2208      	movs	r2, #8
 800b3e6:	2156      	movs	r1, #86	; 0x56
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f001 fae1 	bl	800c9b0 <VL53L0X_WrByte>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3f4:	e157      	b.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800b3f6:	78bb      	ldrb	r3, [r7, #2]
 800b3f8:	2b12      	cmp	r3, #18
 800b3fa:	f040 8154 	bne.w	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b3fe:	2250      	movs	r2, #80	; 0x50
 800b400:	2157      	movs	r1, #87	; 0x57
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 fad4 	bl	800c9b0 <VL53L0X_WrByte>
 800b408:	4603      	mov	r3, r0
 800b40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800b40e:	2208      	movs	r2, #8
 800b410:	2156      	movs	r1, #86	; 0x56
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 facc 	bl	800c9b0 <VL53L0X_WrByte>
 800b418:	4603      	mov	r3, r0
 800b41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b41e:	e142      	b.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	2b01      	cmp	r3, #1
 800b424:	f040 813f 	bne.w	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800b428:	78bb      	ldrb	r3, [r7, #2]
 800b42a:	2b08      	cmp	r3, #8
 800b42c:	d14c      	bne.n	800b4c8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800b42e:	2210      	movs	r2, #16
 800b430:	2148      	movs	r1, #72	; 0x48
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f001 fabc 	bl	800c9b0 <VL53L0X_WrByte>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800b43e:	2208      	movs	r2, #8
 800b440:	2147      	movs	r1, #71	; 0x47
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f001 fab4 	bl	800c9b0 <VL53L0X_WrByte>
 800b448:	4603      	mov	r3, r0
 800b44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b44e:	2202      	movs	r2, #2
 800b450:	2132      	movs	r1, #50	; 0x32
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 faac 	bl	800c9b0 <VL53L0X_WrByte>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b460:	4313      	orrs	r3, r2
 800b462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800b466:	220c      	movs	r2, #12
 800b468:	2130      	movs	r1, #48	; 0x30
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 faa0 	bl	800c9b0 <VL53L0X_WrByte>
 800b470:	4603      	mov	r3, r0
 800b472:	461a      	mov	r2, r3
 800b474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b478:	4313      	orrs	r3, r2
 800b47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b47e:	2201      	movs	r2, #1
 800b480:	21ff      	movs	r1, #255	; 0xff
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f001 fa94 	bl	800c9b0 <VL53L0X_WrByte>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b490:	4313      	orrs	r3, r2
 800b492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b496:	2230      	movs	r2, #48	; 0x30
 800b498:	2130      	movs	r1, #48	; 0x30
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 fa88 	bl	800c9b0 <VL53L0X_WrByte>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	21ff      	movs	r1, #255	; 0xff
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 fa7c 	bl	800c9b0 <VL53L0X_WrByte>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4c6:	e0ee      	b.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800b4c8:	78bb      	ldrb	r3, [r7, #2]
 800b4ca:	2b0a      	cmp	r3, #10
 800b4cc:	d14c      	bne.n	800b568 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800b4ce:	2228      	movs	r2, #40	; 0x28
 800b4d0:	2148      	movs	r1, #72	; 0x48
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 fa6c 	bl	800c9b0 <VL53L0X_WrByte>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800b4de:	2208      	movs	r2, #8
 800b4e0:	2147      	movs	r1, #71	; 0x47
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 fa64 	bl	800c9b0 <VL53L0X_WrByte>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b4ee:	2203      	movs	r2, #3
 800b4f0:	2132      	movs	r1, #50	; 0x32
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f001 fa5c 	bl	800c9b0 <VL53L0X_WrByte>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b500:	4313      	orrs	r3, r2
 800b502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b506:	2209      	movs	r2, #9
 800b508:	2130      	movs	r1, #48	; 0x30
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 fa50 	bl	800c9b0 <VL53L0X_WrByte>
 800b510:	4603      	mov	r3, r0
 800b512:	461a      	mov	r2, r3
 800b514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b518:	4313      	orrs	r3, r2
 800b51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b51e:	2201      	movs	r2, #1
 800b520:	21ff      	movs	r1, #255	; 0xff
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 fa44 	bl	800c9b0 <VL53L0X_WrByte>
 800b528:	4603      	mov	r3, r0
 800b52a:	461a      	mov	r2, r3
 800b52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b530:	4313      	orrs	r3, r2
 800b532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b536:	2220      	movs	r2, #32
 800b538:	2130      	movs	r1, #48	; 0x30
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 fa38 	bl	800c9b0 <VL53L0X_WrByte>
 800b540:	4603      	mov	r3, r0
 800b542:	461a      	mov	r2, r3
 800b544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b548:	4313      	orrs	r3, r2
 800b54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b54e:	2200      	movs	r2, #0
 800b550:	21ff      	movs	r1, #255	; 0xff
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f001 fa2c 	bl	800c9b0 <VL53L0X_WrByte>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b560:	4313      	orrs	r3, r2
 800b562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b566:	e09e      	b.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800b568:	78bb      	ldrb	r3, [r7, #2]
 800b56a:	2b0c      	cmp	r3, #12
 800b56c:	d14c      	bne.n	800b608 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800b56e:	2238      	movs	r2, #56	; 0x38
 800b570:	2148      	movs	r1, #72	; 0x48
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f001 fa1c 	bl	800c9b0 <VL53L0X_WrByte>
 800b578:	4603      	mov	r3, r0
 800b57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800b57e:	2208      	movs	r2, #8
 800b580:	2147      	movs	r1, #71	; 0x47
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fa14 	bl	800c9b0 <VL53L0X_WrByte>
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b58e:	2203      	movs	r2, #3
 800b590:	2132      	movs	r1, #50	; 0x32
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f001 fa0c 	bl	800c9b0 <VL53L0X_WrByte>
 800b598:	4603      	mov	r3, r0
 800b59a:	461a      	mov	r2, r3
 800b59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b5a6:	2208      	movs	r2, #8
 800b5a8:	2130      	movs	r1, #48	; 0x30
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f001 fa00 	bl	800c9b0 <VL53L0X_WrByte>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b5be:	2201      	movs	r2, #1
 800b5c0:	21ff      	movs	r1, #255	; 0xff
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f9f4 	bl	800c9b0 <VL53L0X_WrByte>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	2130      	movs	r1, #48	; 0x30
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 f9e8 	bl	800c9b0 <VL53L0X_WrByte>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	21ff      	movs	r1, #255	; 0xff
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 f9dc 	bl	800c9b0 <VL53L0X_WrByte>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b600:	4313      	orrs	r3, r2
 800b602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b606:	e04e      	b.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b608:	78bb      	ldrb	r3, [r7, #2]
 800b60a:	2b0e      	cmp	r3, #14
 800b60c:	d14b      	bne.n	800b6a6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b60e:	2248      	movs	r2, #72	; 0x48
 800b610:	2148      	movs	r1, #72	; 0x48
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f001 f9cc 	bl	800c9b0 <VL53L0X_WrByte>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b61e:	2208      	movs	r2, #8
 800b620:	2147      	movs	r1, #71	; 0x47
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 f9c4 	bl	800c9b0 <VL53L0X_WrByte>
 800b628:	4603      	mov	r3, r0
 800b62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b62e:	2203      	movs	r2, #3
 800b630:	2132      	movs	r1, #50	; 0x32
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f001 f9bc 	bl	800c9b0 <VL53L0X_WrByte>
 800b638:	4603      	mov	r3, r0
 800b63a:	461a      	mov	r2, r3
 800b63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b640:	4313      	orrs	r3, r2
 800b642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b646:	2207      	movs	r2, #7
 800b648:	2130      	movs	r1, #48	; 0x30
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 f9b0 	bl	800c9b0 <VL53L0X_WrByte>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b658:	4313      	orrs	r3, r2
 800b65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b65e:	2201      	movs	r2, #1
 800b660:	21ff      	movs	r1, #255	; 0xff
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f001 f9a4 	bl	800c9b0 <VL53L0X_WrByte>
 800b668:	4603      	mov	r3, r0
 800b66a:	461a      	mov	r2, r3
 800b66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b670:	4313      	orrs	r3, r2
 800b672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b676:	2220      	movs	r2, #32
 800b678:	2130      	movs	r1, #48	; 0x30
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f001 f998 	bl	800c9b0 <VL53L0X_WrByte>
 800b680:	4603      	mov	r3, r0
 800b682:	461a      	mov	r2, r3
 800b684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b688:	4313      	orrs	r3, r2
 800b68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b68e:	2200      	movs	r2, #0
 800b690:	21ff      	movs	r1, #255	; 0xff
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 f98c 	bl	800c9b0 <VL53L0X_WrByte>
 800b698:	4603      	mov	r3, r0
 800b69a:	461a      	mov	r2, r3
 800b69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800b6a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d17f      	bne.n	800b7ae <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800b6ae:	78bb      	ldrb	r3, [r7, #2]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fe38 	bl	800a326 <VL53L0X_encode_vcsel_period>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800b6bc:	78fb      	ldrb	r3, [r7, #3]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d002      	beq.n	800b6c8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d045      	beq.n	800b752 <VL53L0X_set_vcsel_pulse_period+0x470>
 800b6c6:	e06e      	b.n	800b7a6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b6c8:	f107 0314 	add.w	r3, r7, #20
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	2103      	movs	r1, #3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff fc33 	bl	800af3c <get_sequence_step_timeout>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b6dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d109      	bne.n	800b6f8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800b6e4:	f107 0310 	add.w	r3, r7, #16
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	2102      	movs	r1, #2
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff fc25 	bl	800af3c <get_sequence_step_timeout>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b6f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d109      	bne.n	800b714 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800b700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b704:	461a      	mov	r2, r3
 800b706:	2150      	movs	r1, #80	; 0x50
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f001 f951 	bl	800c9b0 <VL53L0X_WrByte>
 800b70e:	4603      	mov	r3, r0
 800b710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b714:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d108      	bne.n	800b72e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	461a      	mov	r2, r3
 800b720:	2103      	movs	r1, #3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fceb 	bl	800b0fe <set_sequence_step_timeout>
 800b728:	4603      	mov	r3, r0
 800b72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800b72e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b732:	2b00      	cmp	r3, #0
 800b734:	d108      	bne.n	800b748 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	461a      	mov	r2, r3
 800b73a:	2102      	movs	r1, #2
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff fcde 	bl	800b0fe <set_sequence_step_timeout>
 800b742:	4603      	mov	r3, r0
 800b744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	78ba      	ldrb	r2, [r7, #2]
 800b74c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b750:	e02e      	b.n	800b7b0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b752:	f107 0318 	add.w	r3, r7, #24
 800b756:	461a      	mov	r2, r3
 800b758:	2104      	movs	r1, #4
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fbee 	bl	800af3c <get_sequence_step_timeout>
 800b760:	4603      	mov	r3, r0
 800b762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d109      	bne.n	800b782 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800b76e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b772:	461a      	mov	r2, r3
 800b774:	2170      	movs	r1, #112	; 0x70
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 f91a 	bl	800c9b0 <VL53L0X_WrByte>
 800b77c:	4603      	mov	r3, r0
 800b77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b786:	2b00      	cmp	r3, #0
 800b788:	d108      	bne.n	800b79c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	461a      	mov	r2, r3
 800b78e:	2104      	movs	r1, #4
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7ff fcb4 	bl	800b0fe <set_sequence_step_timeout>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	78ba      	ldrb	r2, [r7, #2]
 800b7a0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b7a4:	e004      	b.n	800b7b0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b7a6:	23fc      	movs	r3, #252	; 0xfc
 800b7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7ac:	e000      	b.n	800b7b0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800b7ae:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800b7b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d109      	bne.n	800b7cc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b7be:	69f9      	ldr	r1, [r7, #28]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7fc fe1d 	bl	8008400 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800b7cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d109      	bne.n	800b7e8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800b7d4:	f107 010f 	add.w	r1, r7, #15
 800b7d8:	2301      	movs	r3, #1
 800b7da:	2200      	movs	r2, #0
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7fe fcbd 	bl	800a15c <VL53L0X_perform_phase_calibration>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800b7e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3728      	adds	r7, #40	; 0x28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b802:	2300      	movs	r3, #0
 800b804:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b806:	7afb      	ldrb	r3, [r7, #11]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d00a      	beq.n	800b826 <VL53L0X_get_vcsel_pulse_period+0x32>
 800b810:	e013      	b.n	800b83a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b812:	f107 0316 	add.w	r3, r7, #22
 800b816:	461a      	mov	r2, r3
 800b818:	2150      	movs	r1, #80	; 0x50
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f001 f94a 	bl	800cab4 <VL53L0X_RdByte>
 800b820:	4603      	mov	r3, r0
 800b822:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b824:	e00b      	b.n	800b83e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b826:	f107 0316 	add.w	r3, r7, #22
 800b82a:	461a      	mov	r2, r3
 800b82c:	2170      	movs	r1, #112	; 0x70
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f001 f940 	bl	800cab4 <VL53L0X_RdByte>
 800b834:	4603      	mov	r3, r0
 800b836:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b838:	e001      	b.n	800b83e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b83a:	23fc      	movs	r3, #252	; 0xfc
 800b83c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b83e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d107      	bne.n	800b856 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b846:	7dbb      	ldrb	r3, [r7, #22]
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fe fd59 	bl	800a300 <VL53L0X_decode_vcsel_period>
 800b84e:	4603      	mov	r3, r0
 800b850:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	701a      	strb	r2, [r3, #0]

	return Status;
 800b856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b092      	sub	sp, #72	; 0x48
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b86c:	2300      	movs	r3, #0
 800b86e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b872:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b876:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b878:	f240 7376 	movw	r3, #1910	; 0x776
 800b87c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800b87e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b882:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b884:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b888:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800b88a:	f240 234e 	movw	r3, #590	; 0x24e
 800b88e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800b890:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b894:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b896:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b89a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b89c:	f240 2326 	movw	r3, #550	; 0x226
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800b8a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b8aa:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d205      	bcs.n	800b8c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b8b8:	23fc      	movs	r3, #252	; 0xfc
 800b8ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800b8be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b8c2:	e0aa      	b.n	800ba1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800b8c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b8d0:	f107 0314 	add.w	r3, r7, #20
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7fc fedc 	bl	8008694 <VL53L0X_GetSequenceStepEnables>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800b8e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d15b      	bne.n	800b9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800b8ea:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d105      	bne.n	800b8fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800b8f0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800b8f6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d052      	beq.n	800b9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800b8fc:	f107 0310 	add.w	r3, r7, #16
 800b900:	461a      	mov	r2, r3
 800b902:	2102      	movs	r1, #2
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff fb19 	bl	800af3c <get_sequence_step_timeout>
 800b90a:	4603      	mov	r3, r0
 800b90c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800b910:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800b918:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b91c:	e07d      	b.n	800ba1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800b91e:	7d3b      	ldrb	r3, [r7, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00f      	beq.n	800b944 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800b924:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800b926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b928:	4413      	add	r3, r2
 800b92a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800b92c:	69fa      	ldr	r2, [r7, #28]
 800b92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b930:	429a      	cmp	r2, r3
 800b932:	d204      	bcs.n	800b93e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800b934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	643b      	str	r3, [r7, #64]	; 0x40
 800b93c:	e002      	b.n	800b944 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b93e:	23fc      	movs	r3, #252	; 0xfc
 800b940:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800b944:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800b94c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b950:	e063      	b.n	800ba1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800b952:	7dbb      	ldrb	r3, [r7, #22]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d011      	beq.n	800b97c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	4413      	add	r3, r2
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b962:	69fa      	ldr	r2, [r7, #28]
 800b964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b966:	429a      	cmp	r2, r3
 800b968:	d204      	bcs.n	800b974 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b96a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	643b      	str	r3, [r7, #64]	; 0x40
 800b972:	e016      	b.n	800b9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b974:	23fc      	movs	r3, #252	; 0xfc
 800b976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b97a:	e012      	b.n	800b9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b97c:	7d7b      	ldrb	r3, [r7, #21]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00f      	beq.n	800b9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b986:	4413      	add	r3, r2
 800b988:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b98a:	69fa      	ldr	r2, [r7, #28]
 800b98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b98e:	429a      	cmp	r2, r3
 800b990:	d204      	bcs.n	800b99c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	643b      	str	r3, [r7, #64]	; 0x40
 800b99a:	e002      	b.n	800b9a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b99c:	23fc      	movs	r3, #252	; 0xfc
 800b99e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b9a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b9aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b9ae:	e034      	b.n	800ba1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d019      	beq.n	800b9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b9b6:	f107 030c 	add.w	r3, r7, #12
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	2103      	movs	r1, #3
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7ff fabc 	bl	800af3c <get_sequence_step_timeout>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9ce:	4413      	add	r3, r2
 800b9d0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b9d2:	69fa      	ldr	r2, [r7, #28]
 800b9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d204      	bcs.n	800b9e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b9da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9e2:	e002      	b.n	800b9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b9e4:	23fc      	movs	r3, #252	; 0xfc
 800b9e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b9ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d111      	bne.n	800ba16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b9f2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00e      	beq.n	800ba16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800b9f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800ba00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba02:	2104      	movs	r1, #4
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff fb7a 	bl	800b0fe <set_sequence_step_timeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ba16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3748      	adds	r7, #72	; 0x48
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b090      	sub	sp, #64	; 0x40
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ba32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ba36:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ba38:	f240 7376 	movw	r3, #1910	; 0x776
 800ba3c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ba3e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ba42:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ba44:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ba48:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ba4a:	f240 234e 	movw	r3, #590	; 0x24e
 800ba4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ba50:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ba54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ba56:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ba5a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ba5c:	f240 2326 	movw	r3, #550	; 0x226
 800ba60:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ba66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6a:	441a      	add	r2, r3
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ba70:	f107 0318 	add.w	r3, r7, #24
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7fc fe0c 	bl	8008694 <VL53L0X_GetSequenceStepEnables>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ba82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ba8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba8e:	e075      	b.n	800bb7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ba90:	7e3b      	ldrb	r3, [r7, #24]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ba96:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ba9c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d030      	beq.n	800bb04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800baa2:	f107 0310 	add.w	r3, r7, #16
 800baa6:	461a      	mov	r2, r3
 800baa8:	2102      	movs	r1, #2
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff fa46 	bl	800af3c <get_sequence_step_timeout>
 800bab0:	4603      	mov	r3, r0
 800bab2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800bab6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800baba:	2b00      	cmp	r3, #0
 800babc:	d122      	bne.n	800bb04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800babe:	7e3b      	ldrb	r3, [r7, #24]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d007      	beq.n	800bad4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800bac8:	6939      	ldr	r1, [r7, #16]
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bace:	441a      	add	r2, r3
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800bad4:	7ebb      	ldrb	r3, [r7, #26]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d009      	beq.n	800baee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800bade:	6939      	ldr	r1, [r7, #16]
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	440b      	add	r3, r1
 800bae4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bae6:	441a      	add	r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	e00a      	b.n	800bb04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800baee:	7e7b      	ldrb	r3, [r7, #25]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800baf8:	6939      	ldr	r1, [r7, #16]
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800bafe:	441a      	add	r2, r3
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d114      	bne.n	800bb36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800bb0c:	7efb      	ldrb	r3, [r7, #27]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d011      	beq.n	800bb36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800bb12:	f107 030c 	add.w	r3, r7, #12
 800bb16:	461a      	mov	r2, r3
 800bb18:	2103      	movs	r1, #3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff fa0e 	bl	800af3c <get_sequence_step_timeout>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bb30:	441a      	add	r2, r3
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d114      	bne.n	800bb68 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800bb3e:	7f3b      	ldrb	r3, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d011      	beq.n	800bb68 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800bb44:	f107 0314 	add.w	r3, r7, #20
 800bb48:	461a      	mov	r2, r3
 800bb4a:	2104      	movs	r1, #4
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff f9f5 	bl	800af3c <get_sequence_step_timeout>
 800bb52:	4603      	mov	r3, r0
 800bb54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800bb5c:	6979      	ldr	r1, [r7, #20]
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800bb62:	441a      	add	r2, r3
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d103      	bne.n	800bb78 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3740      	adds	r7, #64	; 0x40
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bb96:	e0c6      	b.n	800bd26 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	3301      	adds	r3, #1
 800bba6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800bba8:	7cfb      	ldrb	r3, [r7, #19]
 800bbaa:	2bff      	cmp	r3, #255	; 0xff
 800bbac:	f040 808d 	bne.w	800bcca <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	747b      	strb	r3, [r7, #17]
			Index++;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800bbc0:	7c7b      	ldrb	r3, [r7, #17]
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	d87e      	bhi.n	800bcc4 <VL53L0X_load_tuning_settings+0x140>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <VL53L0X_load_tuning_settings+0x48>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bbdd 	.word	0x0800bbdd
 800bbd0:	0800bc17 	.word	0x0800bc17
 800bbd4:	0800bc51 	.word	0x0800bc51
 800bbd8:	0800bc8b 	.word	0x0800bc8b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	743b      	strb	r3, [r7, #16]
				Index++;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bbfc:	7c3b      	ldrb	r3, [r7, #16]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	4413      	add	r3, r2
 800bc0a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	89ba      	ldrh	r2, [r7, #12]
 800bc10:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800bc14:	e087      	b.n	800bd26 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	743b      	strb	r3, [r7, #16]
				Index++;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	3301      	adds	r3, #1
 800bc24:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	3301      	adds	r3, #1
 800bc34:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bc36:	7c3b      	ldrb	r3, [r7, #16]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	021b      	lsls	r3, r3, #8
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	4413      	add	r3, r2
 800bc44:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	89ba      	ldrh	r2, [r7, #12]
 800bc4a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800bc4e:	e06a      	b.n	800bd26 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	4413      	add	r3, r2
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	743b      	strb	r3, [r7, #16]
				Index++;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	4413      	add	r3, r2
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bc70:	7c3b      	ldrb	r3, [r7, #16]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	021b      	lsls	r3, r3, #8
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	4413      	add	r3, r2
 800bc7e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	89ba      	ldrh	r2, [r7, #12]
 800bc84:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800bc88:	e04d      	b.n	800bd26 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	4413      	add	r3, r2
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	743b      	strb	r3, [r7, #16]
				Index++;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	3301      	adds	r3, #1
 800bc98:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	683a      	ldr	r2, [r7, #0]
 800bc9e:	4413      	add	r3, r2
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	3301      	adds	r3, #1
 800bca8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bcaa:	7c3b      	ldrb	r3, [r7, #16]
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	021b      	lsls	r3, r3, #8
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	4413      	add	r3, r2
 800bcb8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	89ba      	ldrh	r2, [r7, #12]
 800bcbe:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800bcc2:	e030      	b.n	800bd26 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bcc4:	23fc      	movs	r3, #252	; 0xfc
 800bcc6:	77fb      	strb	r3, [r7, #31]
 800bcc8:	e02d      	b.n	800bd26 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800bcca:	7cfb      	ldrb	r3, [r7, #19]
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d828      	bhi.n	800bd22 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800bce0:	2300      	movs	r3, #0
 800bce2:	61bb      	str	r3, [r7, #24]
 800bce4:	e00f      	b.n	800bd06 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	4413      	add	r3, r2
 800bcec:	7819      	ldrb	r1, [r3, #0]
 800bcee:	f107 0208 	add.w	r2, r7, #8
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	460a      	mov	r2, r1
 800bcf8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	3301      	adds	r3, #1
 800bd04:	61bb      	str	r3, [r7, #24]
 800bd06:	7cfb      	ldrb	r3, [r7, #19]
 800bd08:	69ba      	ldr	r2, [r7, #24]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	dbeb      	blt.n	800bce6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800bd0e:	7cfb      	ldrb	r3, [r7, #19]
 800bd10:	f107 0208 	add.w	r2, r7, #8
 800bd14:	7cb9      	ldrb	r1, [r7, #18]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fdee 	bl	800c8f8 <VL53L0X_WriteMulti>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	77fb      	strb	r3, [r7, #31]
 800bd20:	e001      	b.n	800bd26 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bd22:	23fc      	movs	r3, #252	; 0xfc
 800bd24:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d004      	beq.n	800bd3c <VL53L0X_load_tuning_settings+0x1b8>
 800bd32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f43f af2e 	beq.w	800bb98 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3720      	adds	r7, #32
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b088      	sub	sp, #32
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd54:	2300      	movs	r3, #0
 800bd56:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800bd5e:	f107 0313 	add.w	r3, r7, #19
 800bd62:	4619      	mov	r1, r3
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7fc fd21 	bl	80087ac <VL53L0X_GetXTalkCompensationEnable>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800bd6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d111      	bne.n	800bd9a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800bd76:	7cfb      	ldrb	r3, [r7, #19]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00e      	beq.n	800bd9a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	8a9b      	ldrh	r3, [r3, #20]
 800bd86:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	fb02 f303 	mul.w	r3, r2, r3
 800bd8e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	3380      	adds	r3, #128	; 0x80
 800bd94:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800bd9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3720      	adds	r7, #32
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b086      	sub	sp, #24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	60f8      	str	r0, [r7, #12]
 800bdae:	60b9      	str	r1, [r7, #8]
 800bdb0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800bdbe:	f107 0310 	add.w	r3, r7, #16
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff ffbe 	bl	800bd48 <VL53L0X_get_total_xtalk_rate>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800bdd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d105      	bne.n	800bde4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	441a      	add	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	601a      	str	r2, [r3, #0]

	return Status;
 800bde4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b09a      	sub	sp, #104	; 0x68
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800bdfe:	2312      	movs	r3, #18
 800be00:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800be02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be06:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800be08:	2342      	movs	r3, #66	; 0x42
 800be0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800be0c:	2306      	movs	r3, #6
 800be0e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800be10:	2307      	movs	r3, #7
 800be12:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be14:	2300      	movs	r3, #0
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800be28:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800be2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be2e:	fb02 f303 	mul.w	r3, r2, r3
 800be32:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800be34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be36:	3380      	adds	r3, #128	; 0x80
 800be38:	0a1b      	lsrs	r3, r3, #8
 800be3a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800be3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be40:	fb02 f303 	mul.w	r3, r2, r3
 800be44:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800be46:	2300      	movs	r3, #0
 800be48:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d01a      	beq.n	800be86 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	029b      	lsls	r3, r3, #10
 800be54:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800be5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5c:	4413      	add	r3, r2
 800be5e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800be60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	fbb2 f3f3 	udiv	r3, r2, r3
 800be68:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800be6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be6c:	4613      	mov	r3, r2
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	4413      	add	r3, r2
 800be72:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800be74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be76:	fb03 f303 	mul.w	r3, r3, r3
 800be7a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800be7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800be82:	0c1b      	lsrs	r3, r3, #16
 800be84:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be8a:	fb02 f303 	mul.w	r3, r2, r3
 800be8e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800be96:	0c1b      	lsrs	r3, r3, #16
 800be98:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800be9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9c:	fb03 f303 	mul.w	r3, r3, r3
 800bea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800bea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bea4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bea8:	0c1b      	lsrs	r3, r3, #16
 800beaa:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800beac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beae:	085a      	lsrs	r2, r3, #1
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	441a      	add	r2, r3
 800beb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beba:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bec0:	fb02 f303 	mul.w	r3, r2, r3
 800bec4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800becc:	d302      	bcc.n	800bed4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800bece:	4b54      	ldr	r3, [pc, #336]	; (800c020 <VL53L0X_calc_dmax+0x230>)
 800bed0:	663b      	str	r3, [r7, #96]	; 0x60
 800bed2:	e015      	b.n	800bf00 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800bed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed6:	085a      	lsrs	r2, r3, #1
 800bed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beda:	441a      	add	r2, r3
 800bedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bede:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800bee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bee8:	fb02 f303 	mul.w	r3, r2, r3
 800beec:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800beee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bef0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bef4:	0c1b      	lsrs	r3, r3, #16
 800bef6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800bef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800befa:	fb03 f303 	mul.w	r3, r3, r3
 800befe:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800bf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf02:	039b      	lsls	r3, r3, #14
 800bf04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bf08:	4a46      	ldr	r2, [pc, #280]	; (800c024 <VL53L0X_calc_dmax+0x234>)
 800bf0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0e:	099b      	lsrs	r3, r3, #6
 800bf10:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf14:	fb03 f303 	mul.w	r3, r3, r3
 800bf18:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800bf1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1c:	fb03 f303 	mul.w	r3, r3, r3
 800bf20:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	3308      	adds	r3, #8
 800bf26:	091b      	lsrs	r3, r3, #4
 800bf28:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800bf2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800bf32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf34:	4613      	mov	r3, r2
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	4413      	add	r3, r2
 800bf3a:	011b      	lsls	r3, r3, #4
 800bf3c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bf44:	0b9b      	lsrs	r3, r3, #14
 800bf46:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800bf48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf4c:	4413      	add	r3, r2
 800bf4e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800bf50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf52:	085b      	lsrs	r3, r3, #1
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	4413      	add	r3, r2
 800bf58:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800bf5a:	69ba      	ldr	r2, [r7, #24]
 800bf5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf62:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	039b      	lsls	r3, r3, #14
 800bf68:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	085b      	lsrs	r3, r3, #1
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	4413      	add	r3, r2
 800bf72:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800bf74:	69ba      	ldr	r2, [r7, #24]
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf7c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bf82:	fb02 f303 	mul.w	r3, r2, r3
 800bf86:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bf8e:	4a25      	ldr	r2, [pc, #148]	; (800c024 <VL53L0X_calc_dmax+0x234>)
 800bf90:	fba2 2303 	umull	r2, r3, r2, r3
 800bf94:	099b      	lsrs	r3, r3, #6
 800bf96:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	011b      	lsls	r3, r3, #4
 800bf9c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bfa4:	4a1f      	ldr	r2, [pc, #124]	; (800c024 <VL53L0X_calc_dmax+0x234>)
 800bfa6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfaa:	099b      	lsrs	r3, r3, #6
 800bfac:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800bfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb0:	3380      	adds	r3, #128	; 0x80
 800bfb2:	0a1b      	lsrs	r3, r3, #8
 800bfb4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d008      	beq.n	800bfce <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	085a      	lsrs	r2, r3, #1
 800bfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfc2:	441a      	add	r2, r3
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfca:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfcc:	e001      	b.n	800bfd2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800bfd2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bfd4:	f7fe f9ba 	bl	800a34c <VL53L0X_isqrt>
 800bfd8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d008      	beq.n	800bff2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	085a      	lsrs	r2, r3, #1
 800bfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe6:	441a      	add	r2, r3
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bff0:	e001      	b.n	800bff6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800bff6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bff8:	f7fe f9a8 	bl	800a34c <VL53L0X_isqrt>
 800bffc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800bffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c008:	429a      	cmp	r2, r3
 800c00a:	d902      	bls.n	800c012 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800c00c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c00e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c010:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800c012:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800c016:	4618      	mov	r0, r3
 800c018:	3768      	adds	r7, #104	; 0x68
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	fff00000 	.word	0xfff00000
 800c024:	10624dd3 	.word	0x10624dd3

0800c028 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b0b4      	sub	sp, #208	; 0xd0
 800c02c:	af04      	add	r7, sp, #16
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800c036:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c03a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c03e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800c046:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800c04a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800c04e:	f241 235c 	movw	r3, #4700	; 0x125c
 800c052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800c056:	4b9e      	ldr	r3, [pc, #632]	; (800c2d0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800c058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800c05c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c060:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800c062:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800c066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c06e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800c070:	4b98      	ldr	r3, [pc, #608]	; (800c2d4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800c072:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800c074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c078:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800c07a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c07e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800c080:	f240 6377 	movw	r3, #1655	; 0x677
 800c084:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c086:	2300      	movs	r3, #0
 800c088:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c09a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800c09e:	0c1b      	lsrs	r3, r3, #16
 800c0a0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800c0a8:	f107 0310 	add.w	r3, r7, #16
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	68b9      	ldr	r1, [r7, #8]
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f7ff fe78 	bl	800bda6 <VL53L0X_get_total_signal_rate>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800c0bc:	f107 0314 	add.w	r3, r7, #20
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff fe3f 	bl	800bd48 <VL53L0X_get_total_xtalk_rate>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c0d6:	fb02 f303 	mul.w	r3, r2, r3
 800c0da:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c0dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c0e2:	0c1b      	lsrs	r3, r3, #16
 800c0e4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c0ec:	fb02 f303 	mul.w	r3, r2, r3
 800c0f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c0f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d902      	bls.n	800c104 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c0fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800c104:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d168      	bne.n	800c1de <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c112:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c11c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c120:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c124:	461a      	mov	r2, r3
 800c126:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7fe feb2 	bl	800ae94 <VL53L0X_calc_timeout_mclks>
 800c130:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c142:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c146:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c14a:	461a      	mov	r2, r3
 800c14c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f7fe fe9f 	bl	800ae94 <VL53L0X_calc_timeout_mclks>
 800c156:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800c158:	2303      	movs	r3, #3
 800c15a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800c15e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c162:	2b08      	cmp	r3, #8
 800c164:	d102      	bne.n	800c16c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800c166:	2302      	movs	r3, #2
 800c168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c16c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c170:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800c172:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c176:	fb02 f303 	mul.w	r3, r2, r3
 800c17a:	02db      	lsls	r3, r3, #11
 800c17c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c180:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c184:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c188:	4a53      	ldr	r2, [pc, #332]	; (800c2d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c18a:	fba2 2303 	umull	r2, r3, r2, r3
 800c18e:	099b      	lsrs	r3, r3, #6
 800c190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800c194:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c198:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c19a:	fb02 f303 	mul.w	r3, r2, r3
 800c19e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800c1a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c1a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c1aa:	4a4b      	ldr	r2, [pc, #300]	; (800c2d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b0:	099b      	lsrs	r3, r3, #6
 800c1b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	3380      	adds	r3, #128	; 0x80
 800c1ba:	0a1b      	lsrs	r3, r3, #8
 800c1bc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c1c4:	fb02 f303 	mul.w	r3, r2, r3
 800c1c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c1cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c1d0:	3380      	adds	r3, #128	; 0x80
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	021b      	lsls	r3, r3, #8
 800c1dc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c1de:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800c1e6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800c1ea:	e15e      	b.n	800c4aa <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800c1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10c      	bne.n	800c20c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1f8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c200:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	e14c      	b.n	800c4a6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800c20c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c210:	2b00      	cmp	r3, #0
 800c212:	d102      	bne.n	800c21a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800c214:	2301      	movs	r3, #1
 800c216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c21a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c21e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c222:	041a      	lsls	r2, r3, #16
 800c224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c226:	fbb2 f3f3 	udiv	r3, r2, r3
 800c22a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c22e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c234:	429a      	cmp	r2, r3
 800c236:	d902      	bls.n	800c23e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c23a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c23e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c242:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c246:	fb02 f303 	mul.w	r3, r2, r3
 800c24a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c24e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c252:	4613      	mov	r3, r2
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe f876 	bl	800a34c <VL53L0X_isqrt>
 800c260:	4603      	mov	r3, r0
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	891b      	ldrh	r3, [r3, #8]
 800c26a:	461a      	mov	r2, r3
 800c26c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c26e:	fb02 f303 	mul.w	r3, r2, r3
 800c272:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c276:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c27c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c27e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c280:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c284:	4a14      	ldr	r2, [pc, #80]	; (800c2d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c286:	fba2 2303 	umull	r2, r3, r2, r3
 800c28a:	099b      	lsrs	r3, r3, #6
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c290:	041b      	lsls	r3, r3, #16
 800c292:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c296:	4a10      	ldr	r2, [pc, #64]	; (800c2d8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c298:	fba2 2303 	umull	r2, r3, r2, r3
 800c29c:	099b      	lsrs	r3, r3, #6
 800c29e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c2a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfb8      	it	lt
 800c2b2:	425b      	neglt	r3, r3
 800c2b4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b8:	021b      	lsls	r3, r3, #8
 800c2ba:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	7e1b      	ldrb	r3, [r3, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00b      	beq.n	800c2dc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c2c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c2c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2cc:	e033      	b.n	800c336 <VL53L0X_calc_sigma_estimate+0x30e>
 800c2ce:	bf00      	nop
 800c2d0:	028f87ae 	.word	0x028f87ae
 800c2d4:	0006999a 	.word	0x0006999a
 800c2d8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c2dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ec:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c2f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2f4:	fb02 f303 	mul.w	r3, r2, r3
 800c2f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c2fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c302:	4413      	add	r3, r2
 800c304:	0c1b      	lsrs	r3, r3, #16
 800c306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c30a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c30e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800c316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c31a:	085b      	lsrs	r3, r3, #1
 800c31c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c324:	fb03 f303 	mul.w	r3, r3, r3
 800c328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c32c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c330:	0b9b      	lsrs	r3, r3, #14
 800c332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c33a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c348:	0c1b      	lsrs	r3, r3, #16
 800c34a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	fb03 f303 	mul.w	r3, r3, r3
 800c352:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800c354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c360:	0c1b      	lsrs	r3, r3, #16
 800c362:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	fb03 f303 	mul.w	r3, r3, r3
 800c36a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	4413      	add	r3, r2
 800c372:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c376:	f7fd ffe9 	bl	800a34c <VL53L0X_isqrt>
 800c37a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	041b      	lsls	r3, r3, #16
 800c380:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	3332      	adds	r3, #50	; 0x32
 800c386:	4a4b      	ldr	r2, [pc, #300]	; (800c4b4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800c388:	fba2 2303 	umull	r2, r3, r2, r3
 800c38c:	095a      	lsrs	r2, r3, #5
 800c38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c390:	fbb2 f3f3 	udiv	r3, r2, r3
 800c394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c39c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c3a0:	fb02 f303 	mul.w	r3, r2, r3
 800c3a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c3a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3ac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800c3b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3ba:	4a3f      	ldr	r2, [pc, #252]	; (800c4b8 <VL53L0X_calc_sigma_estimate+0x490>)
 800c3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c0:	0b5b      	lsrs	r3, r3, #13
 800c3c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c3c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c3ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d902      	bls.n	800c3d6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c3d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c3d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c3da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c3e4:	4a35      	ldr	r2, [pc, #212]	; (800c4bc <VL53L0X_calc_sigma_estimate+0x494>)
 800c3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ea:	099b      	lsrs	r3, r3, #6
 800c3ec:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800c3ee:	6a3b      	ldr	r3, [r7, #32]
 800c3f0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c3f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3f6:	441a      	add	r2, r3
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fd ffa4 	bl	800a34c <VL53L0X_isqrt>
 800c404:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c412:	4a2a      	ldr	r2, [pc, #168]	; (800c4bc <VL53L0X_calc_sigma_estimate+0x494>)
 800c414:	fba2 2303 	umull	r2, r3, r2, r3
 800c418:	099b      	lsrs	r3, r3, #6
 800c41a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c41c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c420:	fb03 f303 	mul.w	r3, r3, r3
 800c424:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	fb03 f303 	mul.w	r3, r3, r3
 800c42c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	4413      	add	r3, r2
 800c434:	4618      	mov	r0, r3
 800c436:	f7fd ff89 	bl	800a34c <VL53L0X_isqrt>
 800c43a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c442:	fb02 f303 	mul.w	r3, r2, r3
 800c446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c44a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d009      	beq.n	800c464 <VL53L0X_calc_sigma_estimate+0x43c>
 800c450:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c454:	2b00      	cmp	r3, #0
 800c456:	d005      	beq.n	800c464 <VL53L0X_calc_sigma_estimate+0x43c>
 800c458:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c45c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c460:	429a      	cmp	r2, r3
 800c462:	d903      	bls.n	800c46c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c464:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c472:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800c47e:	6939      	ldr	r1, [r7, #16]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	9303      	str	r3, [sp, #12]
 800c484:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c488:	9302      	str	r3, [sp, #8]
 800c48a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7ff fca8 	bl	800bdf0 <VL53L0X_calc_dmax>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c4a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	37c0      	adds	r7, #192	; 0xc0
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	51eb851f 	.word	0x51eb851f
 800c4b8:	d1b71759 	.word	0xd1b71759
 800c4bc:	10624dd3 	.word	0x10624dd3

0800c4c0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b090      	sub	sp, #64	; 0x40
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	607a      	str	r2, [r7, #4]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	72fb      	strb	r3, [r7, #11]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c512:	7afb      	ldrb	r3, [r7, #11]
 800c514:	10db      	asrs	r3, r3, #3
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 030f 	and.w	r3, r3, #15
 800c51c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c520:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c524:	2b00      	cmp	r3, #0
 800c526:	d017      	beq.n	800c558 <VL53L0X_get_pal_range_status+0x98>
 800c528:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c52c:	2b05      	cmp	r3, #5
 800c52e:	d013      	beq.n	800c558 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c530:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c534:	2b07      	cmp	r3, #7
 800c536:	d00f      	beq.n	800c558 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c538:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c53c:	2b0c      	cmp	r3, #12
 800c53e:	d00b      	beq.n	800c558 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c540:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c544:	2b0d      	cmp	r3, #13
 800c546:	d007      	beq.n	800c558 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c548:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c54c:	2b0e      	cmp	r3, #14
 800c54e:	d003      	beq.n	800c558 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c550:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c554:	2b0f      	cmp	r3, #15
 800c556:	d103      	bne.n	800c560 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c558:	2301      	movs	r3, #1
 800c55a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c55e:	e002      	b.n	800c566 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c566:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d109      	bne.n	800c582 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c56e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c572:	461a      	mov	r2, r3
 800c574:	2100      	movs	r1, #0
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7fc f9ec 	bl	8008954 <VL53L0X_GetLimitCheckEnable>
 800c57c:	4603      	mov	r3, r0
 800c57e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c586:	2b00      	cmp	r3, #0
 800c588:	d02e      	beq.n	800c5e8 <VL53L0X_get_pal_range_status+0x128>
 800c58a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d12a      	bne.n	800c5e8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c592:	f107 0310 	add.w	r3, r7, #16
 800c596:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c59a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f7ff fd43 	bl	800c028 <VL53L0X_calc_sigma_estimate>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c5a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5b6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c5b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d113      	bne.n	800c5e8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c5c0:	f107 0320 	add.w	r3, r7, #32
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f7fc fa49 	bl	8008a60 <VL53L0X_GetLimitCheckValue>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d006      	beq.n	800c5e8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d902      	bls.n	800c5e8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c5e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d109      	bne.n	800c604 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c5f0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	2102      	movs	r1, #2
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f7fc f9ab 	bl	8008954 <VL53L0X_GetLimitCheckEnable>
 800c5fe:	4603      	mov	r3, r0
 800c600:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c604:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d044      	beq.n	800c696 <VL53L0X_get_pal_range_status+0x1d6>
 800c60c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c610:	2b00      	cmp	r3, #0
 800c612:	d140      	bne.n	800c696 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c614:	f107 031c 	add.w	r3, r7, #28
 800c618:	461a      	mov	r2, r3
 800c61a:	2102      	movs	r1, #2
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f7fc fa1f 	bl	8008a60 <VL53L0X_GetLimitCheckValue>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c628:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d107      	bne.n	800c640 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c630:	2201      	movs	r2, #1
 800c632:	21ff      	movs	r1, #255	; 0xff
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 f9bb 	bl	800c9b0 <VL53L0X_WrByte>
 800c63a:	4603      	mov	r3, r0
 800c63c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c640:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c644:	2b00      	cmp	r3, #0
 800c646:	d109      	bne.n	800c65c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c648:	f107 0316 	add.w	r3, r7, #22
 800c64c:	461a      	mov	r2, r3
 800c64e:	21b6      	movs	r1, #182	; 0xb6
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 fa59 	bl	800cb08 <VL53L0X_RdWord>
 800c656:	4603      	mov	r3, r0
 800c658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c65c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c660:	2b00      	cmp	r3, #0
 800c662:	d107      	bne.n	800c674 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c664:	2200      	movs	r2, #0
 800c666:	21ff      	movs	r1, #255	; 0xff
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 f9a1 	bl	800c9b0 <VL53L0X_WrByte>
 800c66e:	4603      	mov	r3, r0
 800c670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c674:	8afb      	ldrh	r3, [r7, #22]
 800c676:	025b      	lsls	r3, r3, #9
 800c678:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d006      	beq.n	800c696 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c688:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d902      	bls.n	800c696 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c690:	2301      	movs	r3, #1
 800c692:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c696:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d109      	bne.n	800c6b2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c69e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	2103      	movs	r1, #3
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f7fc f954 	bl	8008954 <VL53L0X_GetLimitCheckEnable>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c6b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d023      	beq.n	800c702 <VL53L0X_get_pal_range_status+0x242>
 800c6ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d11f      	bne.n	800c702 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c6c2:	893b      	ldrh	r3, [r7, #8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d102      	bne.n	800c6ce <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c6cc:	e005      	b.n	800c6da <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	021a      	lsls	r2, r3, #8
 800c6d2:	893b      	ldrh	r3, [r7, #8]
 800c6d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c6da:	f107 0318 	add.w	r3, r7, #24
 800c6de:	461a      	mov	r2, r3
 800c6e0:	2103      	movs	r1, #3
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f7fc f9bc 	bl	8008a60 <VL53L0X_GetLimitCheckValue>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d006      	beq.n	800c702 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c6f4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d202      	bcs.n	800c702 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c702:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c706:	2b00      	cmp	r3, #0
 800c708:	d14a      	bne.n	800c7a0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c70a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d103      	bne.n	800c71a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c714:	22ff      	movs	r2, #255	; 0xff
 800c716:	701a      	strb	r2, [r3, #0]
 800c718:	e042      	b.n	800c7a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c71a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d007      	beq.n	800c732 <VL53L0X_get_pal_range_status+0x272>
 800c722:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c726:	2b02      	cmp	r3, #2
 800c728:	d003      	beq.n	800c732 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c72a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d103      	bne.n	800c73a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c734:	2205      	movs	r2, #5
 800c736:	701a      	strb	r2, [r3, #0]
 800c738:	e032      	b.n	800c7a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c73a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c73e:	2b06      	cmp	r3, #6
 800c740:	d003      	beq.n	800c74a <VL53L0X_get_pal_range_status+0x28a>
 800c742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c746:	2b09      	cmp	r3, #9
 800c748:	d103      	bne.n	800c752 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c74c:	2204      	movs	r2, #4
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	e026      	b.n	800c7a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c752:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c756:	2b08      	cmp	r3, #8
 800c758:	d007      	beq.n	800c76a <VL53L0X_get_pal_range_status+0x2aa>
 800c75a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c75e:	2b0a      	cmp	r3, #10
 800c760:	d003      	beq.n	800c76a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c762:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c766:	2b01      	cmp	r3, #1
 800c768:	d103      	bne.n	800c772 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c76c:	2203      	movs	r2, #3
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	e016      	b.n	800c7a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c772:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c776:	2b04      	cmp	r3, #4
 800c778:	d003      	beq.n	800c782 <VL53L0X_get_pal_range_status+0x2c2>
 800c77a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d103      	bne.n	800c78a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c784:	2202      	movs	r2, #2
 800c786:	701a      	strb	r2, [r3, #0]
 800c788:	e00a      	b.n	800c7a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c78a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d103      	bne.n	800c79a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c794:	2201      	movs	r2, #1
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	e002      	b.n	800c7a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c79c:	2200      	movs	r2, #0
 800c79e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c7a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c7a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c7ae:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f7fc f8cc 	bl	8008954 <VL53L0X_GetLimitCheckEnable>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c7c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d14f      	bne.n	800c86a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c7ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <VL53L0X_get_pal_range_status+0x31a>
 800c7d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d103      	bne.n	800c7e2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7e0:	e002      	b.n	800c7e8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c7ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c7f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c7f6:	2b04      	cmp	r3, #4
 800c7f8:	d003      	beq.n	800c802 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c7fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d103      	bne.n	800c80a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c802:	2301      	movs	r3, #1
 800c804:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c808:	e002      	b.n	800c810 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c816:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c81a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <VL53L0X_get_pal_range_status+0x36a>
 800c822:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c826:	2b01      	cmp	r3, #1
 800c828:	d103      	bne.n	800c832 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c82a:	2301      	movs	r3, #1
 800c82c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c830:	e002      	b.n	800c838 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c83e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c846:	2b00      	cmp	r3, #0
 800c848:	d003      	beq.n	800c852 <VL53L0X_get_pal_range_status+0x392>
 800c84a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d103      	bne.n	800c85a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c852:	2301      	movs	r3, #1
 800c854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c858:	e002      	b.n	800c860 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c866:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c86a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c86e:	4618      	mov	r0, r3
 800c870:	3740      	adds	r7, #64	; 0x40
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c876:	b580      	push	{r7, lr}
 800c878:	b088      	sub	sp, #32
 800c87a:	af02      	add	r7, sp, #8
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	330a      	adds	r3, #10
 800c886:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c894:	b299      	uxth	r1, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	b29a      	uxth	r2, r3
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	f7f5 fc9b 	bl	80021dc <HAL_I2C_Master_Transmit>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800c8aa:	693b      	ldr	r3, [r7, #16]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af02      	add	r7, sp, #8
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	330a      	adds	r3, #10
 800c8c4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c8d2:	f043 0301 	orr.w	r3, r3, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	b299      	uxth	r1, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	f7f5 fd6d 	bl	80023c4 <HAL_I2C_Master_Receive>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800c8ee:	693b      	ldr	r3, [r7, #16]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	607a      	str	r2, [r7, #4]
 800c902:	603b      	str	r3, [r7, #0]
 800c904:	460b      	mov	r3, r1
 800c906:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c908:	2300      	movs	r3, #0
 800c90a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b3f      	cmp	r3, #63	; 0x3f
 800c910:	d902      	bls.n	800c918 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800c912:	f06f 0303 	mvn.w	r3, #3
 800c916:	e016      	b.n	800c946 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800c918:	4a0d      	ldr	r2, [pc, #52]	; (800c950 <VL53L0X_WriteMulti+0x58>)
 800c91a:	7afb      	ldrb	r3, [r7, #11]
 800c91c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	6879      	ldr	r1, [r7, #4]
 800c922:	480c      	ldr	r0, [pc, #48]	; (800c954 <VL53L0X_WriteMulti+0x5c>)
 800c924:	f000 f998 	bl	800cc58 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	3301      	adds	r3, #1
 800c92c:	461a      	mov	r2, r3
 800c92e:	4908      	ldr	r1, [pc, #32]	; (800c950 <VL53L0X_WriteMulti+0x58>)
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f7ff ffa0 	bl	800c876 <_I2CWrite>
 800c936:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c93e:	23ec      	movs	r3, #236	; 0xec
 800c940:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	200007ac 	.word	0x200007ac
 800c954:	200007ad 	.word	0x200007ad

0800c958 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	607a      	str	r2, [r7, #4]
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	460b      	mov	r3, r1
 800c966:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c968:	2300      	movs	r3, #0
 800c96a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c96c:	f107 030b 	add.w	r3, r7, #11
 800c970:	2201      	movs	r2, #1
 800c972:	4619      	mov	r1, r3
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f7ff ff7e 	bl	800c876 <_I2CWrite>
 800c97a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d002      	beq.n	800c988 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c982:	23ec      	movs	r3, #236	; 0xec
 800c984:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c986:	e00c      	b.n	800c9a2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800c988:	683a      	ldr	r2, [r7, #0]
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff ff91 	bl	800c8b4 <_I2CRead>
 800c992:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c99a:	23ec      	movs	r3, #236	; 0xec
 800c99c:	75fb      	strb	r3, [r7, #23]
 800c99e:	e000      	b.n	800c9a2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c9a0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	70fb      	strb	r3, [r7, #3]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c9c4:	4a0b      	ldr	r2, [pc, #44]	; (800c9f4 <VL53L0X_WrByte+0x44>)
 800c9c6:	78fb      	ldrb	r3, [r7, #3]
 800c9c8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800c9ca:	4a0a      	ldr	r2, [pc, #40]	; (800c9f4 <VL53L0X_WrByte+0x44>)
 800c9cc:	78bb      	ldrb	r3, [r7, #2]
 800c9ce:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800c9d0:	2202      	movs	r2, #2
 800c9d2:	4908      	ldr	r1, [pc, #32]	; (800c9f4 <VL53L0X_WrByte+0x44>)
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff ff4e 	bl	800c876 <_I2CWrite>
 800c9da:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c9e2:	23ec      	movs	r3, #236	; 0xec
 800c9e4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	200007ac 	.word	0x200007ac

0800c9f8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
 800ca04:	4613      	mov	r3, r2
 800ca06:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ca0c:	4a0e      	ldr	r2, [pc, #56]	; (800ca48 <VL53L0X_WrWord+0x50>)
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ca12:	883b      	ldrh	r3, [r7, #0]
 800ca14:	0a1b      	lsrs	r3, r3, #8
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	4b0b      	ldr	r3, [pc, #44]	; (800ca48 <VL53L0X_WrWord+0x50>)
 800ca1c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ca1e:	883b      	ldrh	r3, [r7, #0]
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <VL53L0X_WrWord+0x50>)
 800ca24:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ca26:	2203      	movs	r2, #3
 800ca28:	4907      	ldr	r1, [pc, #28]	; (800ca48 <VL53L0X_WrWord+0x50>)
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7ff ff23 	bl	800c876 <_I2CWrite>
 800ca30:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ca38:	23ec      	movs	r3, #236	; 0xec
 800ca3a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ca3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	200007ac 	.word	0x200007ac

0800ca4c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	4608      	mov	r0, r1
 800ca56:	4611      	mov	r1, r2
 800ca58:	461a      	mov	r2, r3
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	70fb      	strb	r3, [r7, #3]
 800ca5e:	460b      	mov	r3, r1
 800ca60:	70bb      	strb	r3, [r7, #2]
 800ca62:	4613      	mov	r3, r2
 800ca64:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca66:	2300      	movs	r3, #0
 800ca68:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ca6a:	f107 020e 	add.w	r2, r7, #14
 800ca6e:	78fb      	ldrb	r3, [r7, #3]
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f81e 	bl	800cab4 <VL53L0X_RdByte>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ca7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d110      	bne.n	800caa6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ca84:	7bba      	ldrb	r2, [r7, #14]
 800ca86:	78bb      	ldrb	r3, [r7, #2]
 800ca88:	4013      	ands	r3, r2
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	787b      	ldrb	r3, [r7, #1]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ca94:	7bba      	ldrb	r2, [r7, #14]
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff ff88 	bl	800c9b0 <VL53L0X_WrByte>
 800caa0:	4603      	mov	r3, r0
 800caa2:	73fb      	strb	r3, [r7, #15]
 800caa4:	e000      	b.n	800caa8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800caa6:	bf00      	nop
done:
    return Status;
 800caa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	460b      	mov	r3, r1
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cac2:	2300      	movs	r3, #0
 800cac4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cac6:	f107 030b 	add.w	r3, r7, #11
 800caca:	2201      	movs	r2, #1
 800cacc:	4619      	mov	r1, r3
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7ff fed1 	bl	800c876 <_I2CWrite>
 800cad4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cadc:	23ec      	movs	r3, #236	; 0xec
 800cade:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cae0:	e00c      	b.n	800cafc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800cae2:	2201      	movs	r2, #1
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f7ff fee4 	bl	800c8b4 <_I2CRead>
 800caec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800caf4:	23ec      	movs	r3, #236	; 0xec
 800caf6:	75fb      	strb	r3, [r7, #23]
 800caf8:	e000      	b.n	800cafc <VL53L0X_RdByte+0x48>
    }
done:
 800cafa:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800cafc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	460b      	mov	r3, r1
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb16:	2300      	movs	r3, #0
 800cb18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cb1a:	f107 030b 	add.w	r3, r7, #11
 800cb1e:	2201      	movs	r2, #1
 800cb20:	4619      	mov	r1, r3
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f7ff fea7 	bl	800c876 <_I2CWrite>
 800cb28:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cb30:	23ec      	movs	r3, #236	; 0xec
 800cb32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cb34:	e017      	b.n	800cb66 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800cb36:	2202      	movs	r2, #2
 800cb38:	490e      	ldr	r1, [pc, #56]	; (800cb74 <VL53L0X_RdWord+0x6c>)
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f7ff feba 	bl	800c8b4 <_I2CRead>
 800cb40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cb48:	23ec      	movs	r3, #236	; 0xec
 800cb4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cb4c:	e00b      	b.n	800cb66 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800cb4e:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <VL53L0X_RdWord+0x6c>)
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	021b      	lsls	r3, r3, #8
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <VL53L0X_RdWord+0x6c>)
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	4413      	add	r3, r2
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800cb66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3718      	adds	r7, #24
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	200007ac 	.word	0x200007ac

0800cb78 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	460b      	mov	r3, r1
 800cb82:	607a      	str	r2, [r7, #4]
 800cb84:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb86:	2300      	movs	r3, #0
 800cb88:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800cb8a:	f107 030b 	add.w	r3, r7, #11
 800cb8e:	2201      	movs	r2, #1
 800cb90:	4619      	mov	r1, r3
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f7ff fe6f 	bl	800c876 <_I2CWrite>
 800cb98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cba0:	23ec      	movs	r3, #236	; 0xec
 800cba2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cba4:	e01b      	b.n	800cbde <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800cba6:	2204      	movs	r2, #4
 800cba8:	4910      	ldr	r1, [pc, #64]	; (800cbec <VL53L0X_RdDWord+0x74>)
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7ff fe82 	bl	800c8b4 <_I2CRead>
 800cbb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cbb8:	23ec      	movs	r3, #236	; 0xec
 800cbba:	75fb      	strb	r3, [r7, #23]
        goto done;
 800cbbc:	e00f      	b.n	800cbde <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800cbbe:	4b0b      	ldr	r3, [pc, #44]	; (800cbec <VL53L0X_RdDWord+0x74>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	061a      	lsls	r2, r3, #24
 800cbc4:	4b09      	ldr	r3, [pc, #36]	; (800cbec <VL53L0X_RdDWord+0x74>)
 800cbc6:	785b      	ldrb	r3, [r3, #1]
 800cbc8:	041b      	lsls	r3, r3, #16
 800cbca:	441a      	add	r2, r3
 800cbcc:	4b07      	ldr	r3, [pc, #28]	; (800cbec <VL53L0X_RdDWord+0x74>)
 800cbce:	789b      	ldrb	r3, [r3, #2]
 800cbd0:	021b      	lsls	r3, r3, #8
 800cbd2:	4413      	add	r3, r2
 800cbd4:	4a05      	ldr	r2, [pc, #20]	; (800cbec <VL53L0X_RdDWord+0x74>)
 800cbd6:	78d2      	ldrb	r2, [r2, #3]
 800cbd8:	441a      	add	r2, r3
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800cbde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200007ac 	.word	0x200007ac

0800cbf0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800cbfc:	2002      	movs	r0, #2
 800cbfe:	f7f4 feab 	bl	8001958 <HAL_Delay>
    return status;
 800cc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
	...

0800cc10 <__libc_init_array>:
 800cc10:	b570      	push	{r4, r5, r6, lr}
 800cc12:	4d0d      	ldr	r5, [pc, #52]	; (800cc48 <__libc_init_array+0x38>)
 800cc14:	4c0d      	ldr	r4, [pc, #52]	; (800cc4c <__libc_init_array+0x3c>)
 800cc16:	1b64      	subs	r4, r4, r5
 800cc18:	10a4      	asrs	r4, r4, #2
 800cc1a:	2600      	movs	r6, #0
 800cc1c:	42a6      	cmp	r6, r4
 800cc1e:	d109      	bne.n	800cc34 <__libc_init_array+0x24>
 800cc20:	4d0b      	ldr	r5, [pc, #44]	; (800cc50 <__libc_init_array+0x40>)
 800cc22:	4c0c      	ldr	r4, [pc, #48]	; (800cc54 <__libc_init_array+0x44>)
 800cc24:	f000 f836 	bl	800cc94 <_init>
 800cc28:	1b64      	subs	r4, r4, r5
 800cc2a:	10a4      	asrs	r4, r4, #2
 800cc2c:	2600      	movs	r6, #0
 800cc2e:	42a6      	cmp	r6, r4
 800cc30:	d105      	bne.n	800cc3e <__libc_init_array+0x2e>
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc38:	4798      	blx	r3
 800cc3a:	3601      	adds	r6, #1
 800cc3c:	e7ee      	b.n	800cc1c <__libc_init_array+0xc>
 800cc3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc42:	4798      	blx	r3
 800cc44:	3601      	adds	r6, #1
 800cc46:	e7f2      	b.n	800cc2e <__libc_init_array+0x1e>
 800cc48:	0800cd24 	.word	0x0800cd24
 800cc4c:	0800cd24 	.word	0x0800cd24
 800cc50:	0800cd24 	.word	0x0800cd24
 800cc54:	0800cd28 	.word	0x0800cd28

0800cc58 <memcpy>:
 800cc58:	440a      	add	r2, r1
 800cc5a:	4291      	cmp	r1, r2
 800cc5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc60:	d100      	bne.n	800cc64 <memcpy+0xc>
 800cc62:	4770      	bx	lr
 800cc64:	b510      	push	{r4, lr}
 800cc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc6e:	4291      	cmp	r1, r2
 800cc70:	d1f9      	bne.n	800cc66 <memcpy+0xe>
 800cc72:	bd10      	pop	{r4, pc}

0800cc74 <memset>:
 800cc74:	4402      	add	r2, r0
 800cc76:	4603      	mov	r3, r0
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d100      	bne.n	800cc7e <memset+0xa>
 800cc7c:	4770      	bx	lr
 800cc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc82:	e7f9      	b.n	800cc78 <memset+0x4>

0800cc84 <strcpy>:
 800cc84:	4603      	mov	r3, r0
 800cc86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc8a:	f803 2b01 	strb.w	r2, [r3], #1
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	d1f9      	bne.n	800cc86 <strcpy+0x2>
 800cc92:	4770      	bx	lr

0800cc94 <_init>:
 800cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc96:	bf00      	nop
 800cc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc9a:	bc08      	pop	{r3}
 800cc9c:	469e      	mov	lr, r3
 800cc9e:	4770      	bx	lr

0800cca0 <_fini>:
 800cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca2:	bf00      	nop
 800cca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca6:	bc08      	pop	{r3}
 800cca8:	469e      	mov	lr, r3
 800ccaa:	4770      	bx	lr
