
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e66c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800e82c  0800e82c  0001e82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e89c  0800e89c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e89c  0800e89c  0001e89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8a4  0800e8a4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8a4  0800e8a4  0001e8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800e8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200002d0  0800eb78  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  0800eb78  00020878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247c1  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003adb  00000000  00000000  00044abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00048598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  0004a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef7d  00000000  00000000  0004b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fffe  00000000  00000000  0007a88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011afce  00000000  00000000  0009a88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b5859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007358  00000000  00000000  001b58ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e814 	.word	0x0800e814

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d4 	.word	0x200002d4
 80001fc:	0800e814 	.word	0x0800e814

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9bf 	b.w	8000e4c <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b974 	b.w	8000e4c <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	4604      	mov	r4, r0
 8000b84:	468e      	mov	lr, r1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d14d      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b8a:	428a      	cmp	r2, r1
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	d969      	bls.n	8000c64 <__udivmoddi4+0xe8>
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	b152      	cbz	r2, 8000bac <__udivmoddi4+0x30>
 8000b96:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9a:	f1c2 0120 	rsb	r1, r2, #32
 8000b9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba6:	ea41 0e03 	orr.w	lr, r1, r3
 8000baa:	4094      	lsls	r4, r2
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	0c21      	lsrs	r1, r4, #16
 8000bb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb6:	fa1f f78c 	uxth.w	r7, ip
 8000bba:	fb08 e316 	mls	r3, r8, r6, lr
 8000bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc2:	fb06 f107 	mul.w	r1, r6, r7
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd2:	f080 811f 	bcs.w	8000e14 <__udivmoddi4+0x298>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 811c 	bls.w	8000e14 <__udivmoddi4+0x298>
 8000bdc:	3e02      	subs	r6, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 f707 	mul.w	r7, r0, r7
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x92>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c00:	f080 810a 	bcs.w	8000e18 <__udivmoddi4+0x29c>
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	f240 8107 	bls.w	8000e18 <__udivmoddi4+0x29c>
 8000c0a:	4464      	add	r4, ip
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	1be4      	subs	r4, r4, r7
 8000c14:	2600      	movs	r6, #0
 8000c16:	b11d      	cbz	r5, 8000c20 <__udivmoddi4+0xa4>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xc2>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80ef 	beq.w	8000e0e <__udivmoddi4+0x292>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x160>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd4>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80f9 	bhi.w	8000e42 <__udivmoddi4+0x2c6>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	469e      	mov	lr, r3
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa4>
 8000c5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xec>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 8092 	bne.w	8000d96 <__udivmoddi4+0x21a>
 8000c72:	eba1 010c 	sub.w	r1, r1, ip
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2601      	movs	r6, #1
 8000c80:	0c20      	lsrs	r0, r4, #16
 8000c82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c86:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8e:	fb0e f003 	mul.w	r0, lr, r3
 8000c92:	4288      	cmp	r0, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x12c>
 8000c96:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x12a>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2c0>
 8000ca6:	4643      	mov	r3, r8
 8000ca8:	1a09      	subs	r1, r1, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x156>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x154>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2ca>
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x9a>
 8000cdc:	f1c6 0720 	rsb	r7, r6, #32
 8000ce0:	40b3      	lsls	r3, r6
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa20 f407 	lsr.w	r4, r0, r7
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	40f9      	lsrs	r1, r7
 8000cf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d02:	0c20      	lsrs	r0, r4, #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fb09 1118 	mls	r1, r9, r8, r1
 8000d0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d10:	fb08 f00e 	mul.w	r0, r8, lr
 8000d14:	4288      	cmp	r0, r1
 8000d16:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b8>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2bc>
 8000d28:	4288      	cmp	r0, r1
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2bc>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	458e      	cmp	lr, r1
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1e2>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2b4>
 8000d56:	458e      	cmp	lr, r1
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2b4>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4461      	add	r1, ip
 8000d5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d62:	fba0 9402 	umull	r9, r4, r0, r2
 8000d66:	eba1 010e 	sub.w	r1, r1, lr
 8000d6a:	42a1      	cmp	r1, r4
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46a6      	mov	lr, r4
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x2a4>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x2a0>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x212>
 8000d76:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d82:	fa22 f306 	lsr.w	r3, r2, r6
 8000d86:	40f1      	lsrs	r1, r6
 8000d88:	431f      	orrs	r7, r3
 8000d8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	f1c2 0320 	rsb	r3, r2, #32
 8000d9a:	40d8      	lsrs	r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	fa21 f303 	lsr.w	r3, r1, r3
 8000da4:	4091      	lsls	r1, r2
 8000da6:	4301      	orrs	r1, r0
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db4:	fb07 3610 	mls	r6, r7, r0, r3
 8000db8:	0c0b      	lsrs	r3, r1, #16
 8000dba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x260>
 8000dca:	eb1c 0303 	adds.w	r3, ip, r3
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd4:	429e      	cmp	r6, r3
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b8>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1b9b      	subs	r3, r3, r6
 8000dde:	b289      	uxth	r1, r1
 8000de0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de4:	fb07 3316 	mls	r3, r7, r6, r3
 8000de8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dec:	fb06 f30e 	mul.w	r3, r6, lr
 8000df0:	428b      	cmp	r3, r1
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x28a>
 8000df4:	eb1c 0101 	adds.w	r1, ip, r1
 8000df8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000e02:	3e02      	subs	r6, #2
 8000e04:	4461      	add	r1, ip
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0x104>
 8000e0e:	462e      	mov	r6, r5
 8000e10:	4628      	mov	r0, r5
 8000e12:	e705      	b.n	8000c20 <__udivmoddi4+0xa4>
 8000e14:	4606      	mov	r6, r0
 8000e16:	e6e3      	b.n	8000be0 <__udivmoddi4+0x64>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6f8      	b.n	8000c0e <__udivmoddi4+0x92>
 8000e1c:	454b      	cmp	r3, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f8>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e28:	3801      	subs	r0, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f8>
 8000e2c:	4646      	mov	r6, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x28a>
 8000e30:	4620      	mov	r0, r4
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1e2>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x260>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b8>
 8000e3c:	3b02      	subs	r3, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x12c>
 8000e42:	4630      	mov	r0, r6
 8000e44:	e709      	b.n	8000c5a <__udivmoddi4+0xde>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x156>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us (hx711_t *hx711)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	uint32_t delay = _HX711_DELAY_US_LOOP;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(hx711->timer,0);  // set the counter value a 0
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(hx711->timer) < delay);  // wait for the counter to reach the us input in the parameter
 8000e66:	bf00      	nop
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d8f8      	bhi.n	8000e68 <hx711_delay_us+0x18>
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <hx711_lock>:

//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8000e8c:	e002      	b.n	8000e94 <hx711_lock+0x10>
    hx711_delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f002 fa74 	bl	800337c <HAL_Delay>
  while (hx711->lock)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7d1b      	ldrb	r3, [r3, #20]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f8      	bne.n	8000e8e <hx711_lock+0xa>
  hx711->lock = 1;      
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	751a      	strb	r2, [r3, #20]
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	751a      	strb	r2, [r3, #20]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin,TIM_HandleTypeDef *timer)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff ffd5 	bl	8000e84 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ef0:	815a      	strh	r2, [r3, #10]
  hx711->timer = timer;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ef6:	619a      	str	r2, [r3, #24]
  GPIO_InitTypeDef  gpio = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	68b8      	ldr	r0, [r7, #8]
 8000f20:	f002 fc1c 	bl	800375c <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000f30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f002 fc0e 	bl	800375c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	891b      	ldrh	r3, [r3, #8]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f002 fdb0 	bl	8003ab0 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f002 fa13 	bl	800337c <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	891b      	ldrh	r3, [r3, #8]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4619      	mov	r1, r3
 8000f62:	f002 fda5 	bl	8003ab0 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 8000f66:	200a      	movs	r0, #10
 8000f68:	f002 fa08 	bl	800337c <HAL_Delay>
  hx711_value(hx711);
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f000 f80a 	bl	8000f86 <hx711_value>
  hx711_value(hx711);
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f000 f807 	bl	8000f86 <hx711_value>
  hx711_unlock(hx711); 
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ff96 	bl	8000eaa <hx711_unlock>
}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8000f92:	f002 f9e7 	bl	8003364 <HAL_GetTick>
 8000f96:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000f98:	e00b      	b.n	8000fb2 <hx711_value+0x2c>
  {
    hx711_delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f002 f9ee 	bl	800337c <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8000fa0:	f002 f9e0 	bl	8003364 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b96      	cmp	r3, #150	; 0x96
 8000fac:	d901      	bls.n	8000fb2 <hx711_value+0x2c>
      return 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e059      	b.n	8001066 <hx711_value+0xe0>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	895b      	ldrh	r3, [r3, #10]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	f002 fd5f 	bl	8003a80 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d0e8      	beq.n	8000f9a <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	74fb      	strb	r3, [r7, #19]
 8000fcc:	e02c      	b.n	8001028 <hx711_value+0xa2>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	891b      	ldrh	r3, [r3, #8]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f002 fd69 	bl	8003ab0 <HAL_GPIO_WritePin>
    hx711_delay_us(hx711);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff36 	bl	8000e50 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f002 fd5e 	bl	8003ab0 <HAL_GPIO_WritePin>
    hx711_delay_us(hx711);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff2b 	bl	8000e50 <hx711_delay_us>
    data = data << 1;    
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	895b      	ldrh	r3, [r3, #10]
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f002 fd38 	bl	8003a80 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d102      	bne.n	800101c <hx711_value+0x96>
      data ++;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 800101c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3301      	adds	r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
 8001028:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800102c:	2b17      	cmp	r3, #23
 800102e:	ddce      	ble.n	8000fce <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001036:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	891b      	ldrh	r3, [r3, #8]
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	f002 fd34 	bl	8003ab0 <HAL_GPIO_WritePin>
  hx711_delay_us(hx711);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff01 	bl	8000e50 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	891b      	ldrh	r3, [r3, #8]
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	f002 fd29 	bl	8003ab0 <HAL_GPIO_WritePin>
  hx711_delay_us(hx711);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fef6 	bl	8000e50 <hx711_delay_us>
  return data;    
 8001064:	697b      	ldr	r3, [r7, #20]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <hx711_value_ave>:
//#############################################################################################
int32_t hx711_value_ave(hx711_t *hx711, uint16_t sample)
{
 800106e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff01 	bl	8000e84 <hx711_lock>
  int64_t  ave = 0;
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	81fb      	strh	r3, [r7, #14]
 8001092:	e014      	b.n	80010be <hx711_value_ave+0x50>
  {
    ave += hx711_value(hx711);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff76 	bl	8000f86 <hx711_value>
 800109a:	4603      	mov	r3, r0
 800109c:	17da      	asrs	r2, r3, #31
 800109e:	461c      	mov	r4, r3
 80010a0:	4615      	mov	r5, r2
 80010a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a6:	eb12 0804 	adds.w	r8, r2, r4
 80010aa:	eb43 0905 	adc.w	r9, r3, r5
 80010ae:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f002 f962 	bl	800337c <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	81fb      	strh	r3, [r7, #14]
 80010be:	89fa      	ldrh	r2, [r7, #14]
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3e6      	bcc.n	8001094 <hx711_value_ave+0x26>
  }
  int32_t answer = (int32_t)(ave / sample);
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	2200      	movs	r2, #0
 80010ca:	469a      	mov	sl, r3
 80010cc:	4693      	mov	fp, r2
 80010ce:	4652      	mov	r2, sl
 80010d0:	465b      	mov	r3, fp
 80010d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010d6:	f7ff fce9 	bl	8000aac <__aeabi_ldivmod>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4613      	mov	r3, r2
 80010e0:	60bb      	str	r3, [r7, #8]
  hx711_unlock(hx711);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fee1 	bl	8000eaa <hx711_unlock>
  return answer;
 80010e8:	68bb      	ldr	r3, [r7, #8]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080010f4 <modeSwitch>:
	filter->index = lastValIndex;

	return average;
}

void modeSwitch(RTP_MODE mode){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	rtpMode = mode;
 80010fe:	4a59      	ldr	r2, [pc, #356]	; (8001264 <modeSwitch+0x170>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	7013      	strb	r3, [r2, #0]

	//reset sub FSMs
	zeroMode = 0;
 8001104:	4b58      	ldr	r3, [pc, #352]	; (8001268 <modeSwitch+0x174>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]

	//adjust LED config and motor speed
	switch(mode){
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b03      	cmp	r3, #3
 800110e:	f200 80a5 	bhi.w	800125c <modeSwitch+0x168>
 8001112:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <modeSwitch+0x24>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001129 	.word	0x08001129
 800111c:	0800115b 	.word	0x0800115b
 8001120:	080011b1 	.word	0x080011b1
 8001124:	08001207 	.word	0x08001207
	case RTP_STANDBY:
		//write to LED
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	484f      	ldr	r0, [pc, #316]	; (800126c <modeSwitch+0x178>)
 8001130:	f002 fcbe 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	484d      	ldr	r0, [pc, #308]	; (8001270 <modeSwitch+0x17c>)
 800113c:	f002 fcb8 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001146:	484a      	ldr	r0, [pc, #296]	; (8001270 <modeSwitch+0x17c>)
 8001148:	f002 fcb2 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001152:	4846      	ldr	r0, [pc, #280]	; (800126c <modeSwitch+0x178>)
 8001154:	f002 fcac 	bl	8003ab0 <HAL_GPIO_WritePin>
		break;
 8001158:	e080      	b.n	800125c <modeSwitch+0x168>
	case RTP_ZERO:
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4842      	ldr	r0, [pc, #264]	; (800126c <modeSwitch+0x178>)
 8001162:	f002 fca5 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 1);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4840      	ldr	r0, [pc, #256]	; (8001270 <modeSwitch+0x17c>)
 800116e:	f002 fc9f 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	483d      	ldr	r0, [pc, #244]	; (8001270 <modeSwitch+0x17c>)
 800117a:	f002 fc99 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001184:	4839      	ldr	r0, [pc, #228]	; (800126c <modeSwitch+0x178>)
 8001186:	f002 fc93 	bl	8003ab0 <HAL_GPIO_WritePin>
		setSpeed(&rMotor, rMotor.PPS_ZeroDefault);
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <modeSwitch+0x180>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	4619      	mov	r1, r3
 8001190:	4838      	ldr	r0, [pc, #224]	; (8001274 <modeSwitch+0x180>)
 8001192:	f001 fcf3 	bl	8002b7c <setSpeed>
		setSpeed(&thetaMotor, thetaMotor.PPS_ZeroDefault);
 8001196:	4b38      	ldr	r3, [pc, #224]	; (8001278 <modeSwitch+0x184>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4619      	mov	r1, r3
 800119c:	4836      	ldr	r0, [pc, #216]	; (8001278 <modeSwitch+0x184>)
 800119e:	f001 fced 	bl	8002b7c <setSpeed>
		setSpeed(&yMotor, yMotor.PPS_ZeroDefault);
 80011a2:	4b36      	ldr	r3, [pc, #216]	; (800127c <modeSwitch+0x188>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4834      	ldr	r0, [pc, #208]	; (800127c <modeSwitch+0x188>)
 80011aa:	f001 fce7 	bl	8002b7c <setSpeed>
		break;
 80011ae:	e055      	b.n	800125c <modeSwitch+0x168>
	case RTP_TATTOO:
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	482d      	ldr	r0, [pc, #180]	; (800126c <modeSwitch+0x178>)
 80011b8:	f002 fc7a 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	482b      	ldr	r0, [pc, #172]	; (8001270 <modeSwitch+0x17c>)
 80011c4:	f002 fc74 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ce:	4828      	ldr	r0, [pc, #160]	; (8001270 <modeSwitch+0x17c>)
 80011d0:	f002 fc6e 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011da:	4824      	ldr	r0, [pc, #144]	; (800126c <modeSwitch+0x178>)
 80011dc:	f002 fc68 	bl	8003ab0 <HAL_GPIO_WritePin>
		setSpeed(&rMotor, rMotor.PPS_TattooDefault);
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <modeSwitch+0x180>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4619      	mov	r1, r3
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <modeSwitch+0x180>)
 80011e8:	f001 fcc8 	bl	8002b7c <setSpeed>
		setSpeed(&thetaMotor, thetaMotor.PPS_TattooDefault);
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <modeSwitch+0x184>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4821      	ldr	r0, [pc, #132]	; (8001278 <modeSwitch+0x184>)
 80011f4:	f001 fcc2 	bl	8002b7c <setSpeed>
		setSpeed(&yMotor, yMotor.PPS_TattooDefault);
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <modeSwitch+0x188>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4619      	mov	r1, r3
 80011fe:	481f      	ldr	r0, [pc, #124]	; (800127c <modeSwitch+0x188>)
 8001200:	f001 fcbc 	bl	8002b7c <setSpeed>
		break;
 8001204:	e02a      	b.n	800125c <modeSwitch+0x168>
	case RTP_SCAN:
		HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 1);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120c:	4817      	ldr	r0, [pc, #92]	; (800126c <modeSwitch+0x178>)
 800120e:	f002 fc4f 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed2_GPIO_Port, statusLed2_Pin, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <modeSwitch+0x17c>)
 800121a:	f002 fc49 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed3_GPIO_Port, statusLed3_Pin, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <modeSwitch+0x17c>)
 8001226:	f002 fc43 	bl	8003ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(statusLed4_GPIO_Port, statusLed4_Pin, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001230:	480e      	ldr	r0, [pc, #56]	; (800126c <modeSwitch+0x178>)
 8001232:	f002 fc3d 	bl	8003ab0 <HAL_GPIO_WritePin>
		setSpeed(&rMotor, rMotor.PPS_ScanDefault);
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <modeSwitch+0x180>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4619      	mov	r1, r3
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <modeSwitch+0x180>)
 800123e:	f001 fc9d 	bl	8002b7c <setSpeed>
		setSpeed(&thetaMotor, thetaMotor.PPS_ScanDefault);
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <modeSwitch+0x184>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4619      	mov	r1, r3
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <modeSwitch+0x184>)
 800124a:	f001 fc97 	bl	8002b7c <setSpeed>
		setSpeed(&yMotor, yMotor.PPS_ScanDefault);
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <modeSwitch+0x188>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4619      	mov	r1, r3
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <modeSwitch+0x188>)
 8001256:	f001 fc91 	bl	8002b7c <setSpeed>
		break;
 800125a:	bf00      	nop
	}

}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000500 	.word	0x20000500
 8001268:	20000501 	.word	0x20000501
 800126c:	48001400 	.word	0x48001400
 8001270:	48001000 	.word	0x48001000
 8001274:	20000578 	.word	0x20000578
 8001278:	20000508 	.word	0x20000508
 800127c:	20000540 	.word	0x20000540

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	b0a4      	sub	sp, #144	; 0x90
 8001286:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f002 f803 	bl	8003292 <HAL_Init>

  /* USER CODE BEGIN Init */

	InitSerialFromPC(&hlpuart1,rxBuffer);
 800128c:	49ba      	ldr	r1, [pc, #744]	; (8001578 <main+0x2f8>)
 800128e:	48bb      	ldr	r0, [pc, #748]	; (800157c <main+0x2fc>)
 8001290:	f001 fb86 	bl	80029a0 <InitSerialFromPC>
	movingAverageFilter pressureMAF = {0};
 8001294:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001298:	2320      	movs	r3, #32
 800129a:	461a      	mov	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f00d faa9 	bl	800e7f4 <memset>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 fc3f 	bl	8001b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 fed1 	bl	800204c <MX_GPIO_Init>
  MX_TIM2_Init();
 80012aa:	f000 fd19 	bl	8001ce0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80012ae:	f000 fe07 	bl	8001ec0 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 80012b2:	f000 fcc9 	bl	8001c48 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80012b6:	f000 fc87 	bl	8001bc8 <MX_I2C2_Init>
  MX_TIM3_Init();
 80012ba:	f000 fd89 	bl	8001dd0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012be:	f000 fe77 	bl	8001fb0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 80012c2:	4baf      	ldr	r3, [pc, #700]	; (8001580 <main+0x300>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	4bad      	ldr	r3, [pc, #692]	; (8001580 <main+0x300>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f041 0301 	orr.w	r3, r1, #1
 80012d0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80012d2:	4bac      	ldr	r3, [pc, #688]	; (8001584 <main+0x304>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68d9      	ldr	r1, [r3, #12]
 80012d8:	4baa      	ldr	r3, [pc, #680]	; (8001584 <main+0x304>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f041 0301 	orr.w	r3, r1, #1
 80012e0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80012e2:	4ba9      	ldr	r3, [pc, #676]	; (8001588 <main+0x308>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68d9      	ldr	r1, [r3, #12]
 80012e8:	4ba7      	ldr	r3, [pc, #668]	; (8001588 <main+0x308>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	f041 0301 	orr.w	r3, r1, #1
 80012f0:	60d3      	str	r3, [r2, #12]
	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 400);
 80012f2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2320      	movs	r3, #32
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001300:	2200      	movs	r2, #0
 8001302:	499f      	ldr	r1, [pc, #636]	; (8001580 <main+0x300>)
 8001304:	48a1      	ldr	r0, [pc, #644]	; (800158c <main+0x30c>)
 8001306:	f001 fbba 	bl	8002a7e <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 400);
 800130a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001318:	2200      	movs	r2, #0
 800131a:	499a      	ldr	r1, [pc, #616]	; (8001584 <main+0x304>)
 800131c:	489c      	ldr	r0, [pc, #624]	; (8001590 <main+0x310>)
 800131e:	f001 fbae 	bl	8002a7e <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 400);
 8001322:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001330:	2208      	movs	r2, #8
 8001332:	4995      	ldr	r1, [pc, #596]	; (8001588 <main+0x308>)
 8001334:	4897      	ldr	r0, [pc, #604]	; (8001594 <main+0x314>)
 8001336:	f001 fba2 	bl	8002a7e <initStepper>

	yMotor.PPS_ZeroDefault = 200;
 800133a:	4a95      	ldr	r2, [pc, #596]	; (8001590 <main+0x310>)
 800133c:	23c8      	movs	r3, #200	; 0xc8
 800133e:	6153      	str	r3, [r2, #20]
	thetaMotor.PPS_ZeroDefault = 200;
 8001340:	4a92      	ldr	r2, [pc, #584]	; (800158c <main+0x30c>)
 8001342:	23c8      	movs	r3, #200	; 0xc8
 8001344:	6153      	str	r3, [r2, #20]
	rMotor.PPS_ZeroDefault = 200;
 8001346:	4a93      	ldr	r2, [pc, #588]	; (8001594 <main+0x314>)
 8001348:	23c8      	movs	r3, #200	; 0xc8
 800134a:	6153      	str	r3, [r2, #20]

	thetaMotor.PPS_ScanDefault = 400;
 800134c:	4a8f      	ldr	r2, [pc, #572]	; (800158c <main+0x30c>)
 800134e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001352:	61d3      	str	r3, [r2, #28]
	yMotor.PPS_ScanDefault = 400;
 8001354:	4a8e      	ldr	r2, [pc, #568]	; (8001590 <main+0x310>)
 8001356:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800135a:	61d3      	str	r3, [r2, #28]
	rMotor.PPS_ScanDefault = 400;
 800135c:	4a8d      	ldr	r2, [pc, #564]	; (8001594 <main+0x314>)
 800135e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001362:	61d3      	str	r3, [r2, #28]

	thetaMotor.PPS_TattooDefault = 400;
 8001364:	4a89      	ldr	r2, [pc, #548]	; (800158c <main+0x30c>)
 8001366:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800136a:	6193      	str	r3, [r2, #24]
	yMotor.PPS_TattooDefault = 400;
 800136c:	4a88      	ldr	r2, [pc, #544]	; (8001590 <main+0x310>)
 800136e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001372:	6193      	str	r3, [r2, #24]
	rMotor.PPS_TattooDefault = 400;
 8001374:	4a87      	ldr	r2, [pc, #540]	; (8001594 <main+0x314>)
 8001376:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800137a:	6193      	str	r3, [r2, #24]

	Dev->I2cHandle = &hi2c2;
 800137c:	4b86      	ldr	r3, [pc, #536]	; (8001598 <main+0x318>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b86      	ldr	r3, [pc, #536]	; (800159c <main+0x31c>)
 8001382:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8001386:	4b84      	ldr	r3, [pc, #528]	; (8001598 <main+0x318>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2352      	movs	r3, #82	; 0x52
 800138c:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160

	// VL53L0X init for Single Measurement
	//

    VL53L0X_WaitDeviceBooted( Dev );
 8001390:	4b81      	ldr	r3, [pc, #516]	; (8001598 <main+0x318>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f008 fcf7 	bl	8009d88 <VL53L0X_WaitDeviceBooted>
    VL53L0X_DataInit( Dev );
 800139a:	4b7f      	ldr	r3, [pc, #508]	; (8001598 <main+0x318>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fa0c 	bl	80097bc <VL53L0X_DataInit>
    VL53L0X_StaticInit( Dev );
 80013a4:	4b7c      	ldr	r3, [pc, #496]	; (8001598 <main+0x318>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f008 fb6b 	bl	8009a84 <VL53L0X_StaticInit>
    VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80013ae:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <main+0x318>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	f107 0281 	add.w	r2, r7, #129	; 0x81
 80013b6:	f107 0382 	add.w	r3, r7, #130	; 0x82
 80013ba:	4619      	mov	r1, r3
 80013bc:	f009 fa04 	bl	800a7c8 <VL53L0X_PerformRefCalibration>
    VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80013c0:	4b75      	ldr	r3, [pc, #468]	; (8001598 <main+0x318>)
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	f107 0283 	add.w	r2, r7, #131	; 0x83
 80013c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013cc:	4619      	mov	r1, r3
 80013ce:	f009 fe89 	bl	800b0e4 <VL53L0X_PerformRefSpadManagement>
    VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80013d2:	4b71      	ldr	r3, [pc, #452]	; (8001598 <main+0x318>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f008 fd73 	bl	8009ec4 <VL53L0X_SetDeviceMode>

    // Enable/Disable Sigma and Signal check
    VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80013de:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <main+0x318>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2201      	movs	r2, #1
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f008 ffe8 	bl	800a3bc <VL53L0X_SetLimitCheckEnable>
    VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80013ec:	4b6a      	ldr	r3, [pc, #424]	; (8001598 <main+0x318>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	2101      	movs	r1, #1
 80013f4:	4618      	mov	r0, r3
 80013f6:	f008 ffe1 	bl	800a3bc <VL53L0X_SetLimitCheckEnable>
    VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80013fa:	4b67      	ldr	r3, [pc, #412]	; (8001598 <main+0x318>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f641 1299 	movw	r2, #6553	; 0x1999
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f009 f889 	bl	800a51c <VL53L0X_SetLimitCheckValue>
    VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <main+0x318>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f009 f881 	bl	800a51c <VL53L0X_SetLimitCheckValue>
    VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <main+0x318>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001422:	4618      	mov	r0, r3
 8001424:	f008 fdac 	bl	8009f80 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001428:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <main+0x318>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2212      	movs	r2, #18
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f008 fdcb 	bl	8009fcc <VL53L0X_SetVcselPulsePeriod>
    VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001436:	4b58      	ldr	r3, [pc, #352]	; (8001598 <main+0x318>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	220e      	movs	r2, #14
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f008 fdc4 	bl	8009fcc <VL53L0X_SetVcselPulsePeriod>

	//Enable UART Enable IT
	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes
 8001444:	2206      	movs	r2, #6
 8001446:	494c      	ldr	r1, [pc, #304]	; (8001578 <main+0x2f8>)
 8001448:	484c      	ldr	r0, [pc, #304]	; (800157c <main+0x2fc>)
 800144a:	f006 fa13 	bl	8007874 <HAL_UART_Receive_IT>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 800144e:	4854      	ldr	r0, [pc, #336]	; (80015a0 <main+0x320>)
 8001450:	f004 fea2 	bl	8006198 <HAL_TIM_Base_Start>
	//Init load cell
	hx711_init(&loadCell, loadCLK_GPIO_Port, loadCLK_Pin, loadDATA_GPIO_Port, loadDATA_Pin, &htim5);
 8001454:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <main+0x320>)
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <main+0x324>)
 8001460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001464:	494f      	ldr	r1, [pc, #316]	; (80015a4 <main+0x324>)
 8001466:	4850      	ldr	r0, [pc, #320]	; (80015a8 <main+0x328>)
 8001468:	f7ff fd2c 	bl	8000ec4 <hx711_init>
	HAL_Delay(1000);
 800146c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001470:	f001 ff84 	bl	800337c <HAL_Delay>
	pressureZero = hx711_value_ave(&loadCell, 10);
 8001474:	210a      	movs	r1, #10
 8001476:	484c      	ldr	r0, [pc, #304]	; (80015a8 <main+0x328>)
 8001478:	f7ff fdf9 	bl	800106e <hx711_value_ave>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <main+0x32c>)
 8001482:	601a      	str	r2, [r3, #0]
	//	setTarget(&thetaMotor, 1000, 1);
	//	setTarget(&yMotor, 800, 1);
	//	setTarget(&rMotor,500,1);

	//PID Setup
	setPoint = 17000;
 8001484:	494a      	ldr	r1, [pc, #296]	; (80015b0 <main+0x330>)
 8001486:	a332      	add	r3, pc, #200	; (adr r3, 8001550 <main+0x2d0>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	e9c1 2300 	strd	r2, r3, [r1]
	PID(&pressPID, &pressureVal, &deltaR, &setPoint, 0.01, 0, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8001490:	2300      	movs	r3, #0
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	2301      	movs	r3, #1
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	ed9f 2b2f 	vldr	d2, [pc, #188]	; 8001558 <main+0x2d8>
 800149c:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001558 <main+0x2d8>
 80014a0:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001560 <main+0x2e0>
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <main+0x330>)
 80014a6:	4a43      	ldr	r2, [pc, #268]	; (80015b4 <main+0x334>)
 80014a8:	4943      	ldr	r1, [pc, #268]	; (80015b8 <main+0x338>)
 80014aa:	4844      	ldr	r0, [pc, #272]	; (80015bc <main+0x33c>)
 80014ac:	f001 f87c 	bl	80025a8 <PID>
	PID_SetMode(&pressPID, _PID_MODE_AUTOMATIC);
 80014b0:	2101      	movs	r1, #1
 80014b2:	4842      	ldr	r0, [pc, #264]	; (80015bc <main+0x33c>)
 80014b4:	f001 f8c4 	bl	8002640 <PID_SetMode>
	PID_SetSampleTime(&pressPID, 100);
 80014b8:	2164      	movs	r1, #100	; 0x64
 80014ba:	4840      	ldr	r0, [pc, #256]	; (80015bc <main+0x33c>)
 80014bc:	f001 fa34 	bl	8002928 <PID_SetSampleTime>
	PID_SetOutputLimits(&pressPID, -200, 200);
 80014c0:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001568 <main+0x2e8>
 80014c4:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001570 <main+0x2f0>
 80014c8:	483c      	ldr	r0, [pc, #240]	; (80015bc <main+0x33c>)
 80014ca:	f001 f8d7 	bl	800267c <PID_SetOutputLimits>
	//	HAL_Delay(10000);
	//	GoHome(&yMotor);
	//	HAL_Delay(10000);
	//	GoHome(&rMotor);
	//	HAL_Delay(10000);
	timer = HAL_GetTick();
 80014ce:	f001 ff49 	bl	8003364 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <main+0x340>)
 80014d6:	601a      	str	r2, [r3, #0]
	modeSwitch(RTP_STANDBY);
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fe0b 	bl	80010f4 <modeSwitch>
	//HAL_GPIO_WritePin(statusLed1_GPIO_Port, statusLed1_Pin, 1);

	while (1)
	{
		/*** STANDBY MODE ***/
		if(rtpMode == RTP_STANDBY){
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <main+0x344>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0fb      	beq.n	80014de <main+0x25e>

		}

		/*** ZEROING MODE ***/
		else if(rtpMode == RTP_ZERO){
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <main+0x344>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	f040 80a5 	bne.w	800163a <main+0x3ba>
			//zeroing FSM
			switch(zeroMode){
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <main+0x348>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b06      	cmp	r3, #6
 80014f6:	d8f2      	bhi.n	80014de <main+0x25e>
 80014f8:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <main+0x280>)
 80014fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fe:	bf00      	nop
 8001500:	0800151d 	.word	0x0800151d
 8001504:	08001531 	.word	0x08001531
 8001508:	080015cd 	.word	0x080015cd
 800150c:	080015e1 	.word	0x080015e1
 8001510:	080015fd 	.word	0x080015fd
 8001514:	08001611 	.word	0x08001611
 8001518:	0800162d 	.word	0x0800162d
			case 0:
				GoHome(&rMotor);
 800151c:	481d      	ldr	r0, [pc, #116]	; (8001594 <main+0x314>)
 800151e:	f001 fe67 	bl	80031f0 <GoHome>
				zeroMode++;
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <main+0x348>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <main+0x348>)
 800152c:	7013      	strb	r3, [r2, #0]
				break;
 800152e:	e2db      	b.n	8001ae8 <main+0x868>
			case 1:
				if(rMotor.Status == Stopped) zeroMode++;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <main+0x314>)
 8001532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b03      	cmp	r3, #3
 800153a:	f040 82d0 	bne.w	8001ade <main+0x85e>
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <main+0x348>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <main+0x348>)
 8001548:	7013      	strb	r3, [r2, #0]
				break;
 800154a:	e2c8      	b.n	8001ade <main+0x85e>
 800154c:	f3af 8000 	nop.w
 8001550:	00000000 	.word	0x00000000
 8001554:	40d09a00 	.word	0x40d09a00
	...
 8001560:	47ae147b 	.word	0x47ae147b
 8001564:	3f847ae1 	.word	0x3f847ae1
 8001568:	00000000 	.word	0x00000000
 800156c:	40690000 	.word	0x40690000
 8001570:	00000000 	.word	0x00000000
 8001574:	c0690000 	.word	0xc0690000
 8001578:	20000810 	.word	0x20000810
 800157c:	20000340 	.word	0x20000340
 8001580:	2000041c 	.word	0x2000041c
 8001584:	200003d0 	.word	0x200003d0
 8001588:	20000468 	.word	0x20000468
 800158c:	20000508 	.word	0x20000508
 8001590:	20000540 	.word	0x20000540
 8001594:	20000578 	.word	0x20000578
 8001598:	20000000 	.word	0x20000000
 800159c:	200002ec 	.word	0x200002ec
 80015a0:	200004b4 	.word	0x200004b4
 80015a4:	48000c00 	.word	0x48000c00
 80015a8:	20000764 	.word	0x20000764
 80015ac:	20000780 	.word	0x20000780
 80015b0:	20000790 	.word	0x20000790
 80015b4:	20000808 	.word	0x20000808
 80015b8:	20000788 	.word	0x20000788
 80015bc:	20000798 	.word	0x20000798
 80015c0:	20000760 	.word	0x20000760
 80015c4:	20000500 	.word	0x20000500
 80015c8:	20000501 	.word	0x20000501
			case 2:
				GoHome(&thetaMotor);
 80015cc:	48a8      	ldr	r0, [pc, #672]	; (8001870 <main+0x5f0>)
 80015ce:	f001 fe0f 	bl	80031f0 <GoHome>
				zeroMode++;
 80015d2:	4ba8      	ldr	r3, [pc, #672]	; (8001874 <main+0x5f4>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4aa6      	ldr	r2, [pc, #664]	; (8001874 <main+0x5f4>)
 80015dc:	7013      	strb	r3, [r2, #0]
				break;
 80015de:	e283      	b.n	8001ae8 <main+0x868>
			case 3:
				if(thetaMotor.Status == Stopped) zeroMode++;
 80015e0:	4ba3      	ldr	r3, [pc, #652]	; (8001870 <main+0x5f0>)
 80015e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	f040 827a 	bne.w	8001ae2 <main+0x862>
 80015ee:	4ba1      	ldr	r3, [pc, #644]	; (8001874 <main+0x5f4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4a9f      	ldr	r2, [pc, #636]	; (8001874 <main+0x5f4>)
 80015f8:	7013      	strb	r3, [r2, #0]
				break;
 80015fa:	e272      	b.n	8001ae2 <main+0x862>
			case 4:
				GoHome(&yMotor);
 80015fc:	489e      	ldr	r0, [pc, #632]	; (8001878 <main+0x5f8>)
 80015fe:	f001 fdf7 	bl	80031f0 <GoHome>
				zeroMode++;
 8001602:	4b9c      	ldr	r3, [pc, #624]	; (8001874 <main+0x5f4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4a9a      	ldr	r2, [pc, #616]	; (8001874 <main+0x5f4>)
 800160c:	7013      	strb	r3, [r2, #0]
				break;
 800160e:	e26b      	b.n	8001ae8 <main+0x868>
			case 5:
				if(yMotor.Status == Stopped) zeroMode++;
 8001610:	4b99      	ldr	r3, [pc, #612]	; (8001878 <main+0x5f8>)
 8001612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b03      	cmp	r3, #3
 800161a:	f040 8264 	bne.w	8001ae6 <main+0x866>
 800161e:	4b95      	ldr	r3, [pc, #596]	; (8001874 <main+0x5f4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4a93      	ldr	r2, [pc, #588]	; (8001874 <main+0x5f4>)
 8001628:	7013      	strb	r3, [r2, #0]
				break;
 800162a:	e25c      	b.n	8001ae6 <main+0x866>
			case 6:
				zeroMode = 0;
 800162c:	4a91      	ldr	r2, [pc, #580]	; (8001874 <main+0x5f4>)
 800162e:	2300      	movs	r3, #0
 8001630:	7013      	strb	r3, [r2, #0]
				modeSwitch(RTP_STANDBY);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fd5e 	bl	80010f4 <modeSwitch>
				break;
 8001638:	e256      	b.n	8001ae8 <main+0x868>
			}

		}

		/*** TATTOO MODE ***/
		else if(rtpMode == RTP_TATTOO){
 800163a:	4b90      	ldr	r3, [pc, #576]	; (800187c <main+0x5fc>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	f040 812e 	bne.w	80018a0 <main+0x620>
			//Tattooing sequence
			if(tattooState == posReceiveTat && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 8001644:	4b8e      	ldr	r3, [pc, #568]	; (8001880 <main+0x600>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d12d      	bne.n	80016a8 <main+0x428>
 800164c:	4b8a      	ldr	r3, [pc, #552]	; (8001878 <main+0x5f8>)
 800164e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b03      	cmp	r3, #3
 8001656:	d127      	bne.n	80016a8 <main+0x428>
 8001658:	4b85      	ldr	r3, [pc, #532]	; (8001870 <main+0x5f0>)
 800165a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d121      	bne.n	80016a8 <main+0x428>
				HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	4886      	ldr	r0, [pc, #536]	; (8001884 <main+0x604>)
 800166a:	f002 fa21 	bl	8003ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	4885      	ldr	r0, [pc, #532]	; (8001888 <main+0x608>)
 8001674:	f002 fa1c 	bl	8003ab0 <HAL_GPIO_WritePin>
				if(uartRecievedFlag){
 8001678:	4b84      	ldr	r3, [pc, #528]	; (800188c <main+0x60c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <main+0x428>
					//retrieve instructions
					ParseInstructions(rxBuffer, &nextInstr);
 8001680:	4983      	ldr	r1, [pc, #524]	; (8001890 <main+0x610>)
 8001682:	4884      	ldr	r0, [pc, #528]	; (8001894 <main+0x614>)
 8001684:	f001 f9c6 	bl	8002a14 <ParseInstructions>
					//enable receive interrupt
					uartRecievedFlag = 0;
 8001688:	4a80      	ldr	r2, [pc, #512]	; (800188c <main+0x60c>)
 800168a:	2300      	movs	r3, #0
 800168c:	7013      	strb	r3, [r2, #0]
					HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6);
 800168e:	2206      	movs	r2, #6
 8001690:	4980      	ldr	r1, [pc, #512]	; (8001894 <main+0x614>)
 8001692:	4881      	ldr	r0, [pc, #516]	; (8001898 <main+0x618>)
 8001694:	f006 f8ee 	bl	8007874 <HAL_UART_Receive_IT>
					HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	487a      	ldr	r0, [pc, #488]	; (8001888 <main+0x608>)
 800169e:	f002 fa07 	bl	8003ab0 <HAL_GPIO_WritePin>
					tattooState = goToPosTat ;
 80016a2:	4a77      	ldr	r2, [pc, #476]	; (8001880 <main+0x600>)
 80016a4:	2301      	movs	r3, #1
 80016a6:	7013      	strb	r3, [r2, #0]
				}
			}
			if(tattooState == goToPosTat && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <main+0x600>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 80bf 	bne.w	8001830 <main+0x5b0>
 80016b2:	4b71      	ldr	r3, [pc, #452]	; (8001878 <main+0x5f8>)
 80016b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	f040 80b8 	bne.w	8001830 <main+0x5b0>
 80016c0:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <main+0x5f0>)
 80016c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	f040 80b1 	bne.w	8001830 <main+0x5b0>
				HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d4:	486c      	ldr	r0, [pc, #432]	; (8001888 <main+0x608>)
 80016d6:	f002 f9eb 	bl	8003ab0 <HAL_GPIO_WritePin>
				//Increment theta based on direction
				if(nextInstr.th>=thetaMotor.TargetPosition){
 80016da:	4b6d      	ldr	r3, [pc, #436]	; (8001890 <main+0x610>)
 80016dc:	885b      	ldrh	r3, [r3, #2]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2200      	movs	r2, #0
 80016e2:	461c      	mov	r4, r3
 80016e4:	4615      	mov	r5, r2
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <main+0x5f0>)
 80016e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016ec:	4294      	cmp	r4, r2
 80016ee:	eb75 0303 	sbcs.w	r3, r5, r3
 80016f2:	d315      	bcc.n	8001720 <main+0x4a0>
					setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 1);
 80016f4:	4b66      	ldr	r3, [pc, #408]	; (8001890 <main+0x610>)
 80016f6:	885b      	ldrh	r3, [r3, #2]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <main+0x5f0>)
 80016fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001700:	4613      	mov	r3, r2
 8001702:	1acb      	subs	r3, r1, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	bfb8      	it	lt
 8001708:	425b      	neglt	r3, r3
 800170a:	17da      	asrs	r2, r3, #31
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
 800170e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001710:	2301      	movs	r3, #1
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001718:	4855      	ldr	r0, [pc, #340]	; (8001870 <main+0x5f0>)
 800171a:	f001 f9e8 	bl	8002aee <setTarget>
 800171e:	e014      	b.n	800174a <main+0x4ca>
				}
				else{
					setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 0);
 8001720:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <main+0x610>)
 8001722:	885b      	ldrh	r3, [r3, #2]
 8001724:	4619      	mov	r1, r3
 8001726:	4b52      	ldr	r3, [pc, #328]	; (8001870 <main+0x5f0>)
 8001728:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800172c:	4613      	mov	r3, r2
 800172e:	1acb      	subs	r3, r1, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	bfb8      	it	lt
 8001734:	425b      	neglt	r3, r3
 8001736:	17da      	asrs	r2, r3, #31
 8001738:	643b      	str	r3, [r7, #64]	; 0x40
 800173a:	647a      	str	r2, [r7, #68]	; 0x44
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001744:	484a      	ldr	r0, [pc, #296]	; (8001870 <main+0x5f0>)
 8001746:	f001 f9d2 	bl	8002aee <setTarget>
				}
				//Increment Y based on direction
				if(nextInstr.y >= yMotor.TargetPosition){
 800174a:	4b51      	ldr	r3, [pc, #324]	; (8001890 <main+0x610>)
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	b29b      	uxth	r3, r3
 8001750:	2200      	movs	r2, #0
 8001752:	4698      	mov	r8, r3
 8001754:	4691      	mov	r9, r2
 8001756:	4b48      	ldr	r3, [pc, #288]	; (8001878 <main+0x5f8>)
 8001758:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800175c:	4590      	cmp	r8, r2
 800175e:	eb79 0303 	sbcs.w	r3, r9, r3
 8001762:	d315      	bcc.n	8001790 <main+0x510>
					setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 1);
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <main+0x610>)
 8001766:	889b      	ldrh	r3, [r3, #4]
 8001768:	4619      	mov	r1, r3
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <main+0x5f8>)
 800176c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001770:	4613      	mov	r3, r2
 8001772:	1acb      	subs	r3, r1, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	bfb8      	it	lt
 8001778:	425b      	neglt	r3, r3
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
 800177e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001780:	2301      	movs	r3, #1
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001788:	483b      	ldr	r0, [pc, #236]	; (8001878 <main+0x5f8>)
 800178a:	f001 f9b0 	bl	8002aee <setTarget>
 800178e:	e014      	b.n	80017ba <main+0x53a>
				}
				else{
					setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 0);
 8001790:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <main+0x610>)
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	4619      	mov	r1, r3
 8001796:	4b38      	ldr	r3, [pc, #224]	; (8001878 <main+0x5f8>)
 8001798:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800179c:	4613      	mov	r3, r2
 800179e:	1acb      	subs	r3, r1, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bfb8      	it	lt
 80017a4:	425b      	neglt	r3, r3
 80017a6:	17da      	asrs	r2, r3, #31
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
 80017aa:	637a      	str	r2, [r7, #52]	; 0x34
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017b4:	4830      	ldr	r0, [pc, #192]	; (8001878 <main+0x5f8>)
 80017b6:	f001 f99a 	bl	8002aee <setTarget>
				}
				//Increment R based on direction
				if(nextInstr.r >= rMotor.TargetPosition){
 80017ba:	4b35      	ldr	r3, [pc, #212]	; (8001890 <main+0x610>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2200      	movs	r2, #0
 80017c2:	469a      	mov	sl, r3
 80017c4:	4693      	mov	fp, r2
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <main+0x61c>)
 80017c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017cc:	4592      	cmp	sl, r2
 80017ce:	eb7b 0303 	sbcs.w	r3, fp, r3
 80017d2:	d315      	bcc.n	8001800 <main+0x580>
					setTarget(&rMotor, (uint64_t)abs(nextInstr.r - rMotor.TargetPosition), 1);
 80017d4:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <main+0x610>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <main+0x61c>)
 80017dc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017e0:	4613      	mov	r3, r2
 80017e2:	1acb      	subs	r3, r1, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfb8      	it	lt
 80017e8:	425b      	neglt	r3, r3
 80017ea:	17da      	asrs	r2, r3, #31
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017f0:	2301      	movs	r3, #1
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f8:	4828      	ldr	r0, [pc, #160]	; (800189c <main+0x61c>)
 80017fa:	f001 f978 	bl	8002aee <setTarget>
 80017fe:	e014      	b.n	800182a <main+0x5aa>
				}
				else{
					setTarget(&rMotor, (uint64_t)abs(nextInstr.r - rMotor.TargetPosition), 0);
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <main+0x610>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <main+0x61c>)
 8001808:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800180c:	4613      	mov	r3, r2
 800180e:	1acb      	subs	r3, r1, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	bfb8      	it	lt
 8001814:	425b      	neglt	r3, r3
 8001816:	17da      	asrs	r2, r3, #31
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	627a      	str	r2, [r7, #36]	; 0x24
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001824:	481d      	ldr	r0, [pc, #116]	; (800189c <main+0x61c>)
 8001826:	f001 f962 	bl	8002aee <setTarget>
				}
				tattooState = travellingTat;
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <main+0x600>)
 800182c:	2302      	movs	r3, #2
 800182e:	7013      	strb	r3, [r2, #0]
			}
			if(tattooState == travellingTat && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <main+0x600>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f47f ae52 	bne.w	80014de <main+0x25e>
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <main+0x5f8>)
 800183c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b03      	cmp	r3, #3
 8001844:	f47f ae4b 	bne.w	80014de <main+0x25e>
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <main+0x5f0>)
 800184a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b03      	cmp	r3, #3
 8001852:	f47f ae44 	bne.w	80014de <main+0x25e>
				HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <main+0x608>)
 800185e:	f002 f927 	bl	8003ab0 <HAL_GPIO_WritePin>
				SendSerialChar('a');
 8001862:	2061      	movs	r0, #97	; 0x61
 8001864:	f001 f8b2 	bl	80029cc <SendSerialChar>
				tattooState = posReceiveTat;
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <main+0x600>)
 800186a:	2300      	movs	r3, #0
 800186c:	7013      	strb	r3, [r2, #0]
 800186e:	e636      	b.n	80014de <main+0x25e>
 8001870:	20000508 	.word	0x20000508
 8001874:	20000501 	.word	0x20000501
 8001878:	20000540 	.word	0x20000540
 800187c:	20000500 	.word	0x20000500
 8001880:	200005b1 	.word	0x200005b1
 8001884:	48000800 	.word	0x48000800
 8001888:	48000400 	.word	0x48000400
 800188c:	20000820 	.word	0x20000820
 8001890:	20000824 	.word	0x20000824
 8001894:	20000810 	.word	0x20000810
 8001898:	20000340 	.word	0x20000340
 800189c:	20000578 	.word	0x20000578
			}
		}

		/*** SCAN MODE ***/
		else if(rtpMode == RTP_SCAN){
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <main+0x86c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	f47f ae1a 	bne.w	80014de <main+0x25e>
			//Scanning Sequence
			//check if data has been received
			if(scanState == posReceive && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 80018aa:	4b91      	ldr	r3, [pc, #580]	; (8001af0 <main+0x870>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d12a      	bne.n	8001908 <main+0x688>
 80018b2:	4b90      	ldr	r3, [pc, #576]	; (8001af4 <main+0x874>)
 80018b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d124      	bne.n	8001908 <main+0x688>
 80018be:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <main+0x878>)
 80018c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d11e      	bne.n	8001908 <main+0x688>
				HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	488b      	ldr	r0, [pc, #556]	; (8001afc <main+0x87c>)
 80018d0:	f002 f8ee 	bl	8003ab0 <HAL_GPIO_WritePin>
				if(uartRecievedFlag){
 80018d4:	4b8a      	ldr	r3, [pc, #552]	; (8001b00 <main+0x880>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8105 	beq.w	8001ae8 <main+0x868>
					//retrieve instructions
					ParseInstructions(rxBuffer, &nextInstr);
 80018de:	4989      	ldr	r1, [pc, #548]	; (8001b04 <main+0x884>)
 80018e0:	4889      	ldr	r0, [pc, #548]	; (8001b08 <main+0x888>)
 80018e2:	f001 f897 	bl	8002a14 <ParseInstructions>
					//enable receive interrupt
					uartRecievedFlag = 0;
 80018e6:	4a86      	ldr	r2, [pc, #536]	; (8001b00 <main+0x880>)
 80018e8:	2300      	movs	r3, #0
 80018ea:	7013      	strb	r3, [r2, #0]
					HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6);
 80018ec:	2206      	movs	r2, #6
 80018ee:	4986      	ldr	r1, [pc, #536]	; (8001b08 <main+0x888>)
 80018f0:	4886      	ldr	r0, [pc, #536]	; (8001b0c <main+0x88c>)
 80018f2:	f005 ffbf 	bl	8007874 <HAL_UART_Receive_IT>
					HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	4880      	ldr	r0, [pc, #512]	; (8001afc <main+0x87c>)
 80018fc:	f002 f8d8 	bl	8003ab0 <HAL_GPIO_WritePin>
					scanState = goToPos;
 8001900:	4a7b      	ldr	r2, [pc, #492]	; (8001af0 <main+0x870>)
 8001902:	2301      	movs	r3, #1
 8001904:	7013      	strb	r3, [r2, #0]
				if(uartRecievedFlag){
 8001906:	e0ef      	b.n	8001ae8 <main+0x868>
				}
			}
			else if(scanState == goToPos && yMotor.Status == Stopped && thetaMotor.Status == Stopped && rMotor.Status == Stopped){
 8001908:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <main+0x870>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	f040 808b 	bne.w	8001a28 <main+0x7a8>
 8001912:	4b78      	ldr	r3, [pc, #480]	; (8001af4 <main+0x874>)
 8001914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b03      	cmp	r3, #3
 800191c:	f040 8084 	bne.w	8001a28 <main+0x7a8>
 8001920:	4b75      	ldr	r3, [pc, #468]	; (8001af8 <main+0x878>)
 8001922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d17d      	bne.n	8001a28 <main+0x7a8>
 800192c:	4b78      	ldr	r3, [pc, #480]	; (8001b10 <main+0x890>)
 800192e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b03      	cmp	r3, #3
 8001936:	d177      	bne.n	8001a28 <main+0x7a8>
				//HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, SET);
				//Increment theta based on direction
				if(nextInstr.th>=thetaMotor.TargetPosition){
 8001938:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <main+0x884>)
 800193a:	885b      	ldrh	r3, [r3, #2]
 800193c:	b29b      	uxth	r3, r3
 800193e:	2200      	movs	r2, #0
 8001940:	65bb      	str	r3, [r7, #88]	; 0x58
 8001942:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <main+0x878>)
 8001946:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800194a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800194c:	4291      	cmp	r1, r2
 800194e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001950:	eb71 0303 	sbcs.w	r3, r1, r3
 8001954:	d315      	bcc.n	8001982 <main+0x702>
					setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 1);
 8001956:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <main+0x884>)
 8001958:	885b      	ldrh	r3, [r3, #2]
 800195a:	4619      	mov	r1, r3
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <main+0x878>)
 800195e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001962:	4613      	mov	r3, r2
 8001964:	1acb      	subs	r3, r1, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	bfb8      	it	lt
 800196a:	425b      	neglt	r3, r3
 800196c:	17da      	asrs	r2, r3, #31
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	61fa      	str	r2, [r7, #28]
 8001972:	2301      	movs	r3, #1
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197a:	485f      	ldr	r0, [pc, #380]	; (8001af8 <main+0x878>)
 800197c:	f001 f8b7 	bl	8002aee <setTarget>
 8001980:	e014      	b.n	80019ac <main+0x72c>
				}
				else{
					setTarget(&thetaMotor, (uint64_t)abs(nextInstr.th - thetaMotor.TargetPosition), 0);
 8001982:	4b60      	ldr	r3, [pc, #384]	; (8001b04 <main+0x884>)
 8001984:	885b      	ldrh	r3, [r3, #2]
 8001986:	4619      	mov	r1, r3
 8001988:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <main+0x878>)
 800198a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800198e:	4613      	mov	r3, r2
 8001990:	1acb      	subs	r3, r1, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	bfb8      	it	lt
 8001996:	425b      	neglt	r3, r3
 8001998:	17da      	asrs	r2, r3, #31
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	617a      	str	r2, [r7, #20]
 800199e:	2300      	movs	r3, #0
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019a6:	4854      	ldr	r0, [pc, #336]	; (8001af8 <main+0x878>)
 80019a8:	f001 f8a1 	bl	8002aee <setTarget>
				}
				//Increment Y based on direction
				if(nextInstr.y >= yMotor.TargetPosition){
 80019ac:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <main+0x884>)
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2200      	movs	r2, #0
 80019b4:	653b      	str	r3, [r7, #80]	; 0x50
 80019b6:	657a      	str	r2, [r7, #84]	; 0x54
 80019b8:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <main+0x874>)
 80019ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80019c0:	4291      	cmp	r1, r2
 80019c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019c4:	eb71 0303 	sbcs.w	r3, r1, r3
 80019c8:	d315      	bcc.n	80019f6 <main+0x776>
					setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 1);
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <main+0x884>)
 80019cc:	889b      	ldrh	r3, [r3, #4]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4b48      	ldr	r3, [pc, #288]	; (8001af4 <main+0x874>)
 80019d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019d6:	4613      	mov	r3, r2
 80019d8:	1acb      	subs	r3, r1, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bfb8      	it	lt
 80019de:	425b      	neglt	r3, r3
 80019e0:	17da      	asrs	r2, r3, #31
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	60fa      	str	r2, [r7, #12]
 80019e6:	2301      	movs	r3, #1
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ee:	4841      	ldr	r0, [pc, #260]	; (8001af4 <main+0x874>)
 80019f0:	f001 f87d 	bl	8002aee <setTarget>
 80019f4:	e014      	b.n	8001a20 <main+0x7a0>
				}
				else{
					setTarget(&yMotor, (uint64_t)abs(nextInstr.y - yMotor.TargetPosition), 0);
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <main+0x884>)
 80019f8:	889b      	ldrh	r3, [r3, #4]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <main+0x874>)
 80019fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a02:	4613      	mov	r3, r2
 8001a04:	1acb      	subs	r3, r1, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bfb8      	it	lt
 8001a0a:	425b      	neglt	r3, r3
 8001a0c:	17da      	asrs	r2, r3, #31
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1a:	4836      	ldr	r0, [pc, #216]	; (8001af4 <main+0x874>)
 8001a1c:	f001 f867 	bl	8002aee <setTarget>
				}

				//HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, RESET);
				scanState = distGet;
 8001a20:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <main+0x870>)
 8001a22:	2302      	movs	r3, #2
 8001a24:	7013      	strb	r3, [r2, #0]
 8001a26:	e05f      	b.n	8001ae8 <main+0x868>
			}
			else if(scanState == distGet && (yMotor.Status != Stopped || thetaMotor.Status != Stopped)){
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <main+0x870>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d116      	bne.n	8001a5e <main+0x7de>
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <main+0x874>)
 8001a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d105      	bne.n	8001a48 <main+0x7c8>
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <main+0x878>)
 8001a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d00a      	beq.n	8001a5e <main+0x7de>
				HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	4831      	ldr	r0, [pc, #196]	; (8001b14 <main+0x894>)
 8001a4e:	f002 f82f 	bl	8003ab0 <HAL_GPIO_WritePin>
				timer = HAL_GetTick();
 8001a52:	f001 fc87 	bl	8003364 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <main+0x898>)
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e044      	b.n	8001ae8 <main+0x868>
			}
			else if(scanState == distGet && yMotor.Status == Stopped && thetaMotor.Status == Stopped){
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <main+0x870>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	f47f ad3b 	bne.w	80014de <main+0x25e>
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <main+0x874>)
 8001a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	f47f ad34 	bne.w	80014de <main+0x25e>
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <main+0x878>)
 8001a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	f47f ad2d 	bne.w	80014de <main+0x25e>
				HAL_GPIO_WritePin(state2LED_GPIO_Port, state2LED_Pin, RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	4822      	ldr	r0, [pc, #136]	; (8001b14 <main+0x894>)
 8001a8a:	f002 f811 	bl	8003ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a94:	481f      	ldr	r0, [pc, #124]	; (8001b14 <main+0x894>)
 8001a96:	f002 f80b 	bl	8003ab0 <HAL_GPIO_WritePin>
				VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <main+0x89c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4920      	ldr	r1, [pc, #128]	; (8001b20 <main+0x8a0>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f009 f933 	bl	800ad0c <VL53L0X_PerformSingleRangingMeasurement>
				if(RangingData.RangeStatus == 0){
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <main+0x8a0>)
 8001aa8:	7e1b      	ldrb	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f47f ad17 	bne.w	80014de <main+0x25e>
					SendSerialInt(RangingData.RangeMilliMeter);
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <main+0x8a0>)
 8001ab2:	891b      	ldrh	r3, [r3, #8]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 ff9b 	bl	80029f0 <SendSerialInt>
					timer = HAL_GetTick()-timer;
 8001aba:	f001 fc53 	bl	8003364 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <main+0x898>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1ad2      	subs	r2, r2, r3
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <main+0x898>)
 8001ac8:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(state3LED_GPIO_Port, state3LED_Pin, RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad0:	4810      	ldr	r0, [pc, #64]	; (8001b14 <main+0x894>)
 8001ad2:	f001 ffed 	bl	8003ab0 <HAL_GPIO_WritePin>
					scanState = posReceive;
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <main+0x870>)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	7013      	strb	r3, [r2, #0]
 8001adc:	e4ff      	b.n	80014de <main+0x25e>
				break;
 8001ade:	bf00      	nop
 8001ae0:	e4fd      	b.n	80014de <main+0x25e>
				break;
 8001ae2:	bf00      	nop
 8001ae4:	e4fb      	b.n	80014de <main+0x25e>
				break;
 8001ae6:	bf00      	nop
		if(rtpMode == RTP_STANDBY){
 8001ae8:	e4f9      	b.n	80014de <main+0x25e>
 8001aea:	bf00      	nop
 8001aec:	20000500 	.word	0x20000500
 8001af0:	200005b0 	.word	0x200005b0
 8001af4:	20000540 	.word	0x20000540
 8001af8:	20000508 	.word	0x20000508
 8001afc:	48000800 	.word	0x48000800
 8001b00:	20000820 	.word	0x20000820
 8001b04:	20000824 	.word	0x20000824
 8001b08:	20000810 	.word	0x20000810
 8001b0c:	20000340 	.word	0x20000340
 8001b10:	20000578 	.word	0x20000578
 8001b14:	48000400 	.word	0x48000400
 8001b18:	20000760 	.word	0x20000760
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	200005b4 	.word	0x200005b4

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b098      	sub	sp, #96	; 0x60
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	2248      	movs	r2, #72	; 0x48
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00c fe5e 	bl	800e7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001b46:	2000      	movs	r0, #0
 8001b48:	f002 fd8c 	bl	8004664 <HAL_PWREx_ControlVoltageScaling>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001b52:	f000 fce9 	bl	8002528 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b56:	2310      	movs	r3, #16
 8001b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b62:	2360      	movs	r3, #96	; 0x60
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b66:	2302      	movs	r3, #2
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001b72:	2332      	movs	r3, #50	; 0x32
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b82:	f107 0318 	add.w	r3, r7, #24
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fe20 	bl	80047cc <HAL_RCC_OscConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b92:	f000 fcc9 	bl	8002528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	230f      	movs	r3, #15
 8001b98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2104      	movs	r1, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fa88 	bl	80050c4 <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bba:	f000 fcb5 	bl	8002528 <Error_Handler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3760      	adds	r7, #96	; 0x60
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <MX_I2C2_Init+0x78>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <MX_I2C2_Init+0x7c>)
 8001bd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c02:	480e      	ldr	r0, [pc, #56]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001c04:	f001 ff84 	bl	8003b10 <HAL_I2C_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c0e:	f000 fc8b 	bl	8002528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c12:	2100      	movs	r1, #0
 8001c14:	4809      	ldr	r0, [pc, #36]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001c16:	f002 fc6d 	bl	80044f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c20:	f000 fc82 	bl	8002528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c24:	2100      	movs	r1, #0
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_I2C2_Init+0x74>)
 8001c28:	f002 fcaf 	bl	800458a <HAL_I2CEx_ConfigDigitalFilter>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f000 fc79 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002ec 	.word	0x200002ec
 8001c40:	40005800 	.word	0x40005800
 8001c44:	10c0ecff 	.word	0x10c0ecff

08001c48 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c4e:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <MX_LPUART1_UART_Init+0x94>)
 8001c50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c90:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001c92:	f005 fd09 	bl	80076a8 <HAL_UART_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c9c:	f000 fc44 	bl	8002528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001ca4:	f007 fcab 	bl	80095fe <HAL_UARTEx_SetTxFifoThreshold>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cae:	f000 fc3b 	bl	8002528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001cb6:	f007 fce0 	bl	800967a <HAL_UARTEx_SetRxFifoThreshold>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc0:	f000 fc32 	bl	8002528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_LPUART1_UART_Init+0x90>)
 8001cc6:	f007 fc61 	bl	800958c <HAL_UARTEx_DisableFifoMode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd0:	f000 fc2a 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000340 	.word	0x20000340
 8001cdc:	40008000 	.word	0x40008000

08001ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08e      	sub	sp, #56	; 0x38
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d00:	463b      	mov	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d12:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d1c:	2263      	movs	r2, #99	; 0x63
 8001d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1200-1;
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d28:	f240 42af 	movw	r2, #1199	; 0x4af
 8001d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d3a:	4824      	ldr	r0, [pc, #144]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d3c:	f004 f9d4 	bl	80060e8 <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001d46:	f000 fbef 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d54:	4619      	mov	r1, r3
 8001d56:	481d      	ldr	r0, [pc, #116]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d58:	f004 fede 	bl	8006b18 <HAL_TIM_ConfigClockSource>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d62:	f000 fbe1 	bl	8002528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d68:	f004 faa5 	bl	80062b6 <HAL_TIM_PWM_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d72:	f000 fbd9 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4811      	ldr	r0, [pc, #68]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001d86:	f005 fbe9 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d90:	f000 fbca 	bl	8002528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d94:	2360      	movs	r3, #96	; 0x60
 8001d96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001d98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da6:	463b      	mov	r3, r7
 8001da8:	2200      	movs	r2, #0
 8001daa:	4619      	mov	r1, r3
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001dae:	f004 fd9f 	bl	80068f0 <HAL_TIM_PWM_ConfigChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001db8:	f000 fbb6 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <MX_TIM2_Init+0xec>)
 8001dbe:	f001 f909 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 8001dc2:	bf00      	nop
 8001dc4:	3738      	adds	r7, #56	; 0x38
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003d0 	.word	0x200003d0

08001dd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08e      	sub	sp, #56	; 0x38
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df0:	463b      	mov	r3, r7
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	615a      	str	r2, [r3, #20]
 8001e00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e04:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <MX_TIM3_Init+0xec>)
 8001e06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e0a:	2263      	movs	r2, #99	; 0x63
 8001e0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e16:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001e1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e22:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e28:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e2a:	f004 f95d 	bl	80060e8 <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001e34:	f000 fb78 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e42:	4619      	mov	r1, r3
 8001e44:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e46:	f004 fe67 	bl	8006b18 <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001e50:	f000 fb6a 	bl	8002528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e54:	4818      	ldr	r0, [pc, #96]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e56:	f004 fa2e 	bl	80062b6 <HAL_TIM_PWM_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e60:	f000 fb62 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e74:	f005 fb72 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e7e:	f000 fb53 	bl	8002528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	2360      	movs	r3, #96	; 0x60
 8001e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001e86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001e9c:	f004 fd28 	bl	80068f0 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001ea6:	f000 fb3f 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM3_Init+0xe8>)
 8001eac:	f001 f892 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3738      	adds	r7, #56	; 0x38
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	2000041c 	.word	0x2000041c
 8001ebc:	40000400 	.word	0x40000400

08001ec0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	; 0x38
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001ef4:	4a2d      	ldr	r2, [pc, #180]	; (8001fac <MX_TIM4_Init+0xec>)
 8001ef6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001efa:	2263      	movs	r2, #99	; 0x63
 8001efc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f06:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001f0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f18:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f1a:	f004 f8e5 	bl	80060e8 <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f24:	f000 fb00 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f32:	4619      	mov	r1, r3
 8001f34:	481c      	ldr	r0, [pc, #112]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f36:	f004 fdef 	bl	8006b18 <HAL_TIM_ConfigClockSource>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f40:	f000 faf2 	bl	8002528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f44:	4818      	ldr	r0, [pc, #96]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f46:	f004 f9b6 	bl	80062b6 <HAL_TIM_PWM_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001f50:	f000 faea 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f64:	f005 fafa 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f6e:	f000 fadb 	bl	8002528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f72:	2360      	movs	r3, #96	; 0x60
 8001f74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 8001f76:	23c8      	movs	r3, #200	; 0xc8
 8001f78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f82:	463b      	mov	r3, r7
 8001f84:	2208      	movs	r2, #8
 8001f86:	4619      	mov	r1, r3
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f8a:	f004 fcb1 	bl	80068f0 <HAL_TIM_PWM_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001f94:	f000 fac8 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001f9a:	f001 f81b 	bl	8002fd4 <HAL_TIM_MspPostInit>

}
 8001f9e:	bf00      	nop
 8001fa0:	3738      	adds	r7, #56	; 0x38
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000468 	.word	0x20000468
 8001fac:	40000800 	.word	0x40000800

08001fb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_TIM5_Init+0x94>)
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <MX_TIM5_Init+0x98>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <MX_TIM5_Init+0x94>)
 8001fd6:	2263      	movs	r2, #99	; 0x63
 8001fd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_TIM5_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <MX_TIM5_Init+0x94>)
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_TIM5_Init+0x94>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_TIM5_Init+0x94>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ff4:	4813      	ldr	r0, [pc, #76]	; (8002044 <MX_TIM5_Init+0x94>)
 8001ff6:	f004 f877 	bl	80060e8 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002000:	f000 fa92 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4619      	mov	r1, r3
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <MX_TIM5_Init+0x94>)
 8002012:	f004 fd81 	bl	8006b18 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800201c:	f000 fa84 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_TIM5_Init+0x94>)
 800202e:	f005 fa95 	bl	800755c <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002038:	f000 fa76 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200004b4 	.word	0x200004b4
 8002048:	40000c00 	.word	0x40000c00

0800204c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002062:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	4a8e      	ldr	r2, [pc, #568]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206e:	4b8c      	ldr	r3, [pc, #560]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800207a:	4b89      	ldr	r3, [pc, #548]	; (80022a0 <MX_GPIO_Init+0x254>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a88      	ldr	r2, [pc, #544]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002080:	f043 0320 	orr.w	r3, r3, #32
 8002084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002086:	4b86      	ldr	r3, [pc, #536]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b83      	ldr	r3, [pc, #524]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a82      	ldr	r2, [pc, #520]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	4a7c      	ldr	r2, [pc, #496]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b6:	4b7a      	ldr	r3, [pc, #488]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c2:	4b77      	ldr	r3, [pc, #476]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a76      	ldr	r2, [pc, #472]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020da:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	4a70      	ldr	r2, [pc, #448]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e6:	4b6e      	ldr	r3, [pc, #440]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80020f2:	f002 fb5b 	bl	80047ac <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <MX_GPIO_Init+0x254>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <MX_GPIO_Init+0x254>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	21e0      	movs	r1, #224	; 0xe0
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f001 fccb 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, statusLed4_Pin|statusLed1_Pin, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8002120:	4860      	ldr	r0, [pc, #384]	; (80022a4 <MX_GPIO_Init+0x258>)
 8002122:	f001 fcc5 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, statusLed2_Pin|statusLed3_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800212c:	485e      	ldr	r0, [pc, #376]	; (80022a8 <MX_GPIO_Init+0x25c>)
 800212e:	f001 fcbf 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, state3LED_Pin|state2LED_Pin, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002138:	485c      	ldr	r0, [pc, #368]	; (80022ac <MX_GPIO_Init+0x260>)
 800213a:	f001 fcb9 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, loadCLK_Pin|tofXSHUT_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002144:	485a      	ldr	r0, [pc, #360]	; (80022b0 <MX_GPIO_Init+0x264>)
 8002146:	f001 fcb3 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(state1LED_GPIO_Port, state1LED_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	4859      	ldr	r0, [pc, #356]	; (80022b4 <MX_GPIO_Init+0x268>)
 8002150:	f001 fcae 	bl	8003ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8002154:	23e0      	movs	r3, #224	; 0xe0
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f001 faf5 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : statusLed4_Pin statusLed1_Pin */
  GPIO_InitStruct.Pin = statusLed4_Pin|statusLed1_Pin;
 8002172:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002178:	2301      	movs	r3, #1
 800217a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002184:	f107 031c 	add.w	r3, r7, #28
 8002188:	4619      	mov	r1, r3
 800218a:	4846      	ldr	r0, [pc, #280]	; (80022a4 <MX_GPIO_Init+0x258>)
 800218c:	f001 fae6 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : statusLed2_Pin statusLed3_Pin */
  GPIO_InitStruct.Pin = statusLed2_Pin|statusLed3_Pin;
 8002190:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	483f      	ldr	r0, [pc, #252]	; (80022a8 <MX_GPIO_Init+0x25c>)
 80021aa:	f001 fad7 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : thLim_Pin yLim_Pin rLim_Pin */
  GPIO_InitStruct.Pin = thLim_Pin|yLim_Pin|rLim_Pin;
 80021ae:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80021b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	4838      	ldr	r0, [pc, #224]	; (80022a8 <MX_GPIO_Init+0x25c>)
 80021c6:	f001 fac9 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : state3LED_Pin state2LED_Pin */
  GPIO_InitStruct.Pin = state3LED_Pin|state2LED_Pin;
 80021ca:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	2301      	movs	r3, #1
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4832      	ldr	r0, [pc, #200]	; (80022ac <MX_GPIO_Init+0x260>)
 80021e4:	f001 faba 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : loadCLK_Pin tofXSHUT_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin|tofXSHUT_Pin;
 80021e8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	482b      	ldr	r0, [pc, #172]	; (80022b0 <MX_GPIO_Init+0x264>)
 8002202:	f001 faab 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 8002206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4825      	ldr	r0, [pc, #148]	; (80022b0 <MX_GPIO_Init+0x264>)
 800221c:	f001 fa9e 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : state1LED_Pin */
  GPIO_InitStruct.Pin = state1LED_Pin;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(state1LED_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	481f      	ldr	r0, [pc, #124]	; (80022b4 <MX_GPIO_Init+0x268>)
 8002238:	f001 fa90 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : modeStandby_Pin modeZero_Pin modeTattoo_Pin modeScan_Pin */
  GPIO_InitStruct.Pin = modeStandby_Pin|modeZero_Pin|modeTattoo_Pin|modeScan_Pin;
 800223c:	2378      	movs	r3, #120	; 0x78
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002240:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002246:	2301      	movs	r3, #1
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4817      	ldr	r0, [pc, #92]	; (80022b0 <MX_GPIO_Init+0x264>)
 8002252:	f001 fa83 	bl	800375c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2009      	movs	r0, #9
 800225c:	f001 f98d 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002260:	2009      	movs	r0, #9
 8002262:	f001 f9a6 	bl	80035b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	200a      	movs	r0, #10
 800226c:	f001 f985 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002270:	200a      	movs	r0, #10
 8002272:	f001 f99e 	bl	80035b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2017      	movs	r0, #23
 800227c:	f001 f97d 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002280:	2017      	movs	r0, #23
 8002282:	f001 f996 	bl	80035b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2028      	movs	r0, #40	; 0x28
 800228c:	f001 f975 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002290:	2028      	movs	r0, #40	; 0x28
 8002292:	f001 f98e 	bl	80035b2 <HAL_NVIC_EnableIRQ>

}
 8002296:	bf00      	nop
 8002298:	3730      	adds	r7, #48	; 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	48001400 	.word	0x48001400
 80022a8:	48001000 	.word	0x48001000
 80022ac:	48000400 	.word	0x48000400
 80022b0:	48000c00 	.word	0x48000c00
 80022b4:	48000800 	.word	0x48000800

080022b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80022b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022bc:	b088      	sub	sp, #32
 80022be:	af00      	add	r7, sp, #0
 80022c0:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == thetaMotor.Timer){
 80022c2:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d141      	bne.n	8002350 <HAL_TIM_PeriodElapsedCallback+0x98>
		if(thetaMotor.Status == RunningForward){
 80022cc:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10d      	bne.n	80022f4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			thetaMotor.CurrentPosition++;
 80022d8:	4b62      	ldr	r3, [pc, #392]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80022de:	1c51      	adds	r1, r2, #1
 80022e0:	6139      	str	r1, [r7, #16]
 80022e2:	f143 0300 	adc.w	r3, r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022ee:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80022f2:	e012      	b.n	800231a <HAL_TIM_PeriodElapsedCallback+0x62>
		}
		else if (thetaMotor.Status == RunningBackward){
 80022f4:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d10c      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x62>
			thetaMotor.CurrentPosition--;
 8002300:	4b58      	ldr	r3, [pc, #352]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002302:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002306:	1e51      	subs	r1, r2, #1
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	4b54      	ldr	r3, [pc, #336]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002312:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002316:	e9c3 1208 	strd	r1, r2, [r3, #32]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 800231a:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800231c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002322:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002326:	4299      	cmp	r1, r3
 8002328:	bf08      	it	eq
 800232a:	4290      	cmpeq	r0, r2
 800232c:	d110      	bne.n	8002350 <HAL_TIM_PeriodElapsedCallback+0x98>
			HAL_TIM_PWM_Stop(thetaMotor.Timer, thetaMotor.Channel);
 800232e:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002334:	6852      	ldr	r2, [r2, #4]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f004 f923 	bl	8006584 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(thetaMotor.Timer);
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f003 ff90 	bl	8006268 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800234a:	2203      	movs	r2, #3
 800234c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//yMotor Interrupts
	if(htim == yMotor.Timer){
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	429a      	cmp	r2, r3
 8002358:	d13e      	bne.n	80023d8 <HAL_TIM_PeriodElapsedCallback+0x120>
		if(yMotor.Status == RunningForward){
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800235c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10d      	bne.n	8002382 <HAL_TIM_PeriodElapsedCallback+0xca>
			yMotor.CurrentPosition++;
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800236c:	1c51      	adds	r1, r2, #1
 800236e:	6039      	str	r1, [r7, #0]
 8002370:	f143 0300 	adc.w	r3, r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	4b3c      	ldr	r3, [pc, #240]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002378:	e9d7 1200 	ldrd	r1, r2, [r7]
 800237c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8002380:	e00f      	b.n	80023a2 <HAL_TIM_PeriodElapsedCallback+0xea>
		}
		else if (yMotor.Status == RunningBackward){
 8002382:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d109      	bne.n	80023a2 <HAL_TIM_PeriodElapsedCallback+0xea>
			yMotor.CurrentPosition--;
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002394:	f112 3aff 	adds.w	sl, r2, #4294967295
 8002398:	f143 3bff 	adc.w	fp, r3, #4294967295
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800239e:	e9c3 ab08 	strd	sl, fp, [r3, #32]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80023a4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80023a8:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80023aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80023ae:	4299      	cmp	r1, r3
 80023b0:	bf08      	it	eq
 80023b2:	4290      	cmpeq	r0, r2
 80023b4:	d110      	bne.n	80023d8 <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_TIM_PWM_Stop(yMotor.Timer, yMotor.Channel);
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80023bc:	6852      	ldr	r2, [r2, #4]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 f8df 	bl	8006584 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(yMotor.Timer);
 80023c6:	4b28      	ldr	r3, [pc, #160]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 ff4c 	bl	8006268 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	//rMotor Interrupts
	if(htim == rMotor.Timer){
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d13a      	bne.n	8002458 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		if(rMotor.Status == RunningForward){
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80023e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10a      	bne.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition++;
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80023f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023f4:	f112 0801 	adds.w	r8, r2, #1
 80023f8:	f143 0900 	adc.w	r9, r3, #0
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80023fe:	e9c3 8908 	strd	r8, r9, [r3, #32]
 8002402:	e00e      	b.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x16a>
		}
		else if (rMotor.Status == RunningBackward){
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d108      	bne.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x16a>
			rMotor.CurrentPosition--;
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002412:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002416:	1e54      	subs	r4, r2, #1
 8002418:	f143 35ff 	adc.w	r5, r3, #4294967295
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800241e:	e9c3 4508 	strd	r4, r5, [r3, #32]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002424:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800242a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800242e:	4299      	cmp	r1, r3
 8002430:	bf08      	it	eq
 8002432:	4290      	cmpeq	r0, r2
 8002434:	d110      	bne.n	8002458 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			HAL_TIM_PWM_Stop(rMotor.Timer, rMotor.Channel);
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a0c      	ldr	r2, [pc, #48]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800243c:	6852      	ldr	r2, [r2, #4]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f004 f89f 	bl	8006584 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(rMotor.Timer);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 ff0c 	bl	8006268 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002452:	2203      	movs	r2, #3
 8002454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}

	}
}
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002462:	bf00      	nop
 8002464:	20000508 	.word	0x20000508
 8002468:	20000540 	.word	0x20000540
 800246c:	20000578 	.word	0x20000578

08002470 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	//set flag
	uartRecievedFlag = 1;
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_UART_RxCpltCallback+0x1c>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000820 	.word	0x20000820

08002490 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin){
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a0:	d01b      	beq.n	80024da <HAL_GPIO_EXTI_Callback+0x4a>
 80024a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a6:	dc34      	bgt.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ac:	d01d      	beq.n	80024ea <HAL_GPIO_EXTI_Callback+0x5a>
 80024ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024b2:	dc2e      	bgt.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
 80024b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_EXTI_Callback+0x52>
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	dc28      	bgt.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d022      	beq.n	800250a <HAL_GPIO_EXTI_Callback+0x7a>
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	dc24      	bgt.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d01a      	beq.n	8002502 <HAL_GPIO_EXTI_Callback+0x72>
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	dc20      	bgt.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d00e      	beq.n	80024f2 <HAL_GPIO_EXTI_Callback+0x62>
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d010      	beq.n	80024fa <HAL_GPIO_EXTI_Callback+0x6a>
	case modeScan_Pin:
		modeSwitch(RTP_SCAN);
		break;
	}

}
 80024d8:	e01b      	b.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&rMotor);
 80024da:	4810      	ldr	r0, [pc, #64]	; (800251c <HAL_GPIO_EXTI_Callback+0x8c>)
 80024dc:	f000 fc06 	bl	8002cec <zeroStepper>
		break;
 80024e0:	e017      	b.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&thetaMotor);
 80024e2:	480f      	ldr	r0, [pc, #60]	; (8002520 <HAL_GPIO_EXTI_Callback+0x90>)
 80024e4:	f000 fc02 	bl	8002cec <zeroStepper>
		break;
 80024e8:	e013      	b.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
		zeroStepper(&yMotor);
 80024ea:	480e      	ldr	r0, [pc, #56]	; (8002524 <HAL_GPIO_EXTI_Callback+0x94>)
 80024ec:	f000 fbfe 	bl	8002cec <zeroStepper>
		break;
 80024f0:	e00f      	b.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_STANDBY);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe fdfe 	bl	80010f4 <modeSwitch>
		break;
 80024f8:	e00b      	b.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_ZERO);
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7fe fdfa 	bl	80010f4 <modeSwitch>
		break;
 8002500:	e007      	b.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_TATTOO);
 8002502:	2002      	movs	r0, #2
 8002504:	f7fe fdf6 	bl	80010f4 <modeSwitch>
		break;
 8002508:	e003      	b.n	8002512 <HAL_GPIO_EXTI_Callback+0x82>
		modeSwitch(RTP_SCAN);
 800250a:	2003      	movs	r0, #3
 800250c:	f7fe fdf2 	bl	80010f4 <modeSwitch>
		break;
 8002510:	bf00      	nop
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000578 	.word	0x20000578
 8002520:	20000508 	.word	0x20000508
 8002524:	20000540 	.word	0x20000540

08002528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
}
 800252e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002530:	e7fe      	b.n	8002530 <Error_Handler+0x8>

08002532 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002562:	f7fe fa99 	bl	8000a98 <__aeabi_dcmpgt>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8002578:	e011      	b.n	800259e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002586:	f7fe fa69 	bl	8000a5c <__aeabi_dcmplt>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d100      	bne.n	8002592 <PID_Init+0x60>
}
 8002590:	e005      	b.n	800259e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6278      	str	r0, [r7, #36]	; 0x24
 80025b0:	6239      	str	r1, [r7, #32]
 80025b2:	61fa      	str	r2, [r7, #28]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	ed87 0b04 	vstr	d0, [r7, #16]
 80025ba:	ed87 1b02 	vstr	d1, [r7, #8]
 80025be:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	6a3a      	ldr	r2, [r7, #32]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	2200      	movs	r2, #0
 80025d8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80025da:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002630 <PID+0x88>
 80025de:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002638 <PID+0x90>
 80025e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025e4:	f000 f84a 	bl	800267c <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2264      	movs	r2, #100	; 0x64
 80025ec:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80025ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025f2:	4619      	mov	r1, r3
 80025f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025f6:	f000 f957 	bl	80028a8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80025fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025fe:	4619      	mov	r1, r3
 8002600:	ed97 2b00 	vldr	d2, [r7]
 8002604:	ed97 1b02 	vldr	d1, [r7, #8]
 8002608:	ed97 0b04 	vldr	d0, [r7, #16]
 800260c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800260e:	f000 f8a3 	bl	8002758 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002612:	f000 fea7 	bl	8003364 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	1ad2      	subs	r2, r2, r3
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	605a      	str	r2, [r3, #4]

}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	f3af 8000 	nop.w
 8002630:	00000000 	.word	0x00000000
 8002634:	406fe000 	.word	0x406fe000
	...

08002640 <PID_SetMode>:

}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <PID_SetMode+0x2e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff62 	bl	8002532 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	705a      	strb	r2, [r3, #1]

}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6178      	str	r0, [r7, #20]
 8002684:	ed87 0b02 	vstr	d0, [r7, #8]
 8002688:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800268c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002694:	f7fe f9f6 	bl	8000a84 <__aeabi_dcmpge>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d158      	bne.n	8002750 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80026a8:	6979      	ldr	r1, [r7, #20]
 80026aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026ae:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d04b      	beq.n	8002752 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026c8:	f7fe f9e6 	bl	8000a98 <__aeabi_dcmpgt>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026dc:	e9c1 2300 	strd	r2, r3, [r1]
 80026e0:	e012      	b.n	8002708 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80026f0:	f7fe f9b4 	bl	8000a5c <__aeabi_dcmplt>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002704:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002714:	f7fe f9c0 	bl	8000a98 <__aeabi_dcmpgt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002724:	6979      	ldr	r1, [r7, #20]
 8002726:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800272a:	e012      	b.n	8002752 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002738:	f7fe f990 	bl	8000a5c <__aeabi_dcmplt>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800274e:	e000      	b.n	8002752 <PID_SetOutputLimits+0xd6>
		return;
 8002750:	bf00      	nop
		}
		else { }

	}

}
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	61f8      	str	r0, [r7, #28]
 8002760:	ed87 0b04 	vstr	d0, [r7, #16]
 8002764:	ed87 1b02 	vstr	d1, [r7, #8]
 8002768:	ed87 2b00 	vstr	d2, [r7]
 800276c:	460b      	mov	r3, r1
 800276e:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800277c:	f7fe f96e 	bl	8000a5c <__aeabi_dcmplt>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 8089 	bne.w	800289a <PID_SetTunings2+0x142>
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002794:	f7fe f962 	bl	8000a5c <__aeabi_dcmplt>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d17d      	bne.n	800289a <PID_SetTunings2+0x142>
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027aa:	f7fe f957 	bl	8000a5c <__aeabi_dcmplt>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d172      	bne.n	800289a <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	7efa      	ldrb	r2, [r7, #27]
 80027b8:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80027ba:	7efb      	ldrb	r3, [r7, #27]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80027cc:	69f9      	ldr	r1, [r7, #28]
 80027ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80027d6:	69f9      	ldr	r1, [r7, #28]
 80027d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80027e0:	69f9      	ldr	r1, [r7, #28]
 80027e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027e6:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe48 	bl	8000484 <__aeabi_ui2d>
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <PID_SetTunings2+0x14c>)
 80027fa:	f7fd ffe7 	bl	80007cc <__aeabi_ddiv>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002806:	69f9      	ldr	r1, [r7, #28]
 8002808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800280c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002810:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002818:	f7fd feae 	bl	8000578 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	69f9      	ldr	r1, [r7, #28]
 8002822:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800282a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282e:	f7fd ffcd 	bl	80007cc <__aeabi_ddiv>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	69f9      	ldr	r1, [r7, #28]
 8002838:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d12b      	bne.n	800289c <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800284a:	f04f 0000 	mov.w	r0, #0
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	f7fd fcd9 	bl	8000208 <__aeabi_dsub>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	69f9      	ldr	r1, [r7, #28]
 800285c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002866:	f04f 0000 	mov.w	r0, #0
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	f7fd fccb 	bl	8000208 <__aeabi_dsub>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	69f9      	ldr	r1, [r7, #28]
 8002878:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	f7fd fcbd 	bl	8000208 <__aeabi_dsub>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	69f9      	ldr	r1, [r7, #28]
 8002894:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002898:	e000      	b.n	800289c <PID_SetTunings2+0x144>
		return;
 800289a:	bf00      	nop

	}

}
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	408f4000 	.word	0x408f4000

080028a8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	785b      	ldrb	r3, [r3, #1]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02e      	beq.n	800291a <PID_SetControllerDirection+0x72>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	78db      	ldrb	r3, [r3, #3]
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d029      	beq.n	800291a <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028cc:	f04f 0000 	mov.w	r0, #0
 80028d0:	f04f 0100 	mov.w	r1, #0
 80028d4:	f7fd fc98 	bl	8000208 <__aeabi_dsub>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80028e8:	f04f 0000 	mov.w	r0, #0
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f7fd fc8a 	bl	8000208 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002904:	f04f 0000 	mov.w	r0, #0
 8002908:	f04f 0100 	mov.w	r1, #0
 800290c:	f7fd fc7c 	bl	8000208 <__aeabi_dsub>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	70da      	strb	r2, [r3, #3]

}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dd2e      	ble.n	8002996 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002938:	6838      	ldr	r0, [r7, #0]
 800293a:	f7fd fdb3 	bl	80004a4 <__aeabi_i2d>
 800293e:	4604      	mov	r4, r0
 8002940:	460d      	mov	r5, r1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fd9c 	bl	8000484 <__aeabi_ui2d>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4620      	mov	r0, r4
 8002952:	4629      	mov	r1, r5
 8002954:	f7fd ff3a 	bl	80007cc <__aeabi_ddiv>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800296a:	f7fd fe05 	bl	8000578 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800297e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002982:	f7fd ff23 	bl	80007cc <__aeabi_ddiv>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	609a      	str	r2, [r3, #8]

	}

}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029a0 <InitSerialFromPC>:
uint8_t newLine = '\n';
uint8_t carriageReturn = '\r';

UART_HandleTypeDef* huart;

void InitSerialFromPC(UART_HandleTypeDef* huartHandler, uint8_t* rxBuffer){
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 80029aa:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <InitSerialFromPC+0x24>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 80029b0:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <InitSerialFromPC+0x28>)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000830 	.word	0x20000830
 80029c8:	2000082c 	.word	0x2000082c

080029cc <SendSerialChar>:
//	//print to usart
//	HAL_UART_Transmit(huart,usartOutputBuffer,length,10);
//	SendSerialNewLine();
//}

void SendSerialChar(uint8_t c){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(huart,&c,1,10);
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <SendSerialChar+0x20>)
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	1df9      	adds	r1, r7, #7
 80029dc:	230a      	movs	r3, #10
 80029de:	2201      	movs	r2, #1
 80029e0:	f004 feb2 	bl	8007748 <HAL_UART_Transmit>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000830 	.word	0x20000830

080029f0 <SendSerialInt>:

void SendSerialInt(uint16_t i){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(huart,(uint8_t*)(&i),sizeof(uint16_t),10);
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SendSerialInt+0x20>)
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	1db9      	adds	r1, r7, #6
 8002a00:	230a      	movs	r3, #10
 8002a02:	2202      	movs	r2, #2
 8002a04:	f004 fea0 	bl	8007748 <HAL_UART_Transmit>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000830 	.word	0x20000830

08002a14 <ParseInstructions>:

void ParseInstructions(uint8_t* rxBuffer, Instruction* i){
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	//assume that the characters were sent r,th,y

	uint16_t temp[3];

	for(int a = 0; a < 3; a++){
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e01a      	b.n	8002a5a <ParseInstructions+0x46>
		temp[a] = rxBuffer[2*a] | (rxBuffer[2*a+1] << 8);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b21a      	sxth	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	3301      	adds	r3, #1
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	440b      	add	r3, r1
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	443b      	add	r3, r7
 8002a50:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for(int a = 0; a < 3; a++){
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	dde1      	ble.n	8002a24 <ParseInstructions+0x10>
	}

	i->r = temp[0];
 8002a60:	89ba      	ldrh	r2, [r7, #12]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	801a      	strh	r2, [r3, #0]
	i->th = temp[1];
 8002a66:	89fa      	ldrh	r2, [r7, #14]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	805a      	strh	r2, [r3, #2]
	i->y = temp[2];
 8002a6c:	8a3a      	ldrh	r2, [r7, #16]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	809a      	strh	r2, [r3, #4]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8b3a      	ldrh	r2, [r7, #24]
 8002aa2:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 8002aaa:	68f9      	ldr	r1, [r7, #12]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition =0;
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	//Set status
	stepper->Status = Stopped;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f851 	bl	8002b7c <setSpeed>
	//return stepper structure pointer

	//set default speeds
	stepper->PPS_ZeroDefault;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695b      	ldr	r3, [r3, #20]
	stepper->PPS_TattooDefault;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
	stepper->PPS_ScanDefault;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	69db      	ldr	r3, [r3, #28]
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 8002aee:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8002afc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <setTarget+0x30>
		stepper->TargetPosition+= increment;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b0e:	eb10 0802 	adds.w	r8, r0, r2
 8002b12:	eb41 0903 	adc.w	r9, r1, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	e9c3 890a 	strd	r8, r9, [r3, #40]	; 0x28
 8002b1c:	e00a      	b.n	8002b34 <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b28:	1a84      	subs	r4, r0, r2
 8002b2a:	eb61 0503 	sbc.w	r5, r1, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped && stepper->TargetPosition != stepper->CurrentPosition){
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d111      	bne.n	8002b6a <setTarget+0x7c>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002b52:	4299      	cmp	r1, r3
 8002b54:	bf08      	it	eq
 8002b56:	4290      	cmpeq	r0, r2
 8002b58:	d007      	beq.n	8002b6a <setTarget+0x7c>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f003 fc07 	bl	8006378 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f86a 	bl	8002c44 <setDirection>
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002b7c <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
	//set duty cycle
	switch(stepper->Channel){
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d845      	bhi.n	8002c20 <setSpeed+0xa4>
 8002b94:	a201      	add	r2, pc, #4	; (adr r2, 8002b9c <setSpeed+0x20>)
 8002b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9a:	bf00      	nop
 8002b9c:	08002bd1 	.word	0x08002bd1
 8002ba0:	08002c21 	.word	0x08002c21
 8002ba4:	08002c21 	.word	0x08002c21
 8002ba8:	08002c21 	.word	0x08002c21
 8002bac:	08002be5 	.word	0x08002be5
 8002bb0:	08002c21 	.word	0x08002c21
 8002bb4:	08002c21 	.word	0x08002c21
 8002bb8:	08002c21 	.word	0x08002c21
 8002bbc:	08002bf9 	.word	0x08002bf9
 8002bc0:	08002c21 	.word	0x08002c21
 8002bc4:	08002c21 	.word	0x08002c21
 8002bc8:	08002c21 	.word	0x08002c21
 8002bcc:	08002c0d 	.word	0x08002c0d
		case TIM_CHANNEL_1:{
			stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	005a      	lsls	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4919      	ldr	r1, [pc, #100]	; (8002c40 <setSpeed+0xc4>)
 8002bdc:	fbb1 f2f2 	udiv	r2, r1, r2
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002be2:	e01d      	b.n	8002c20 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_2:{
			stepper->Timer->Instance->CCR2=1000000/(2*speed);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	005a      	lsls	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4914      	ldr	r1, [pc, #80]	; (8002c40 <setSpeed+0xc4>)
 8002bf0:	fbb1 f2f2 	udiv	r2, r1, r2
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8002bf6:	e013      	b.n	8002c20 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_3:{
			stepper->Timer->Instance->CCR3=1000000/(2*speed);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	005a      	lsls	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	490f      	ldr	r1, [pc, #60]	; (8002c40 <setSpeed+0xc4>)
 8002c04:	fbb1 f2f2 	udiv	r2, r1, r2
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002c0a:	e009      	b.n	8002c20 <setSpeed+0xa4>
		}
		case TIM_CHANNEL_4:{
			stepper->Timer->Instance->CCR4=1000000/(2*speed);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	005a      	lsls	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <setSpeed+0xc4>)
 8002c18:	fbb1 f2f2 	udiv	r2, r1, r2
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002c1e:	bf00      	nop
		}
	}

	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <setSpeed+0xc4>)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3a01      	subs	r2, #1
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	000f4240 	.word	0x000f4240

08002c44 <setDirection>:
	stepper->PPS_ScanDefault;

}

//set direction
void setDirection(stepper *stepper){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
 8002c58:	4290      	cmp	r0, r2
 8002c5a:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c5e:	d20c      	bcs.n	8002c7a <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6898      	ldr	r0, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	899b      	ldrh	r3, [r3, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f000 ff20 	bl	8003ab0 <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
	else if(stepper->CurrentPosition < stepper->TargetPosition){
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 8002c78:	e015      	b.n	8002ca6 <setDirection+0x62>
	else if(stepper->CurrentPosition < stepper->TargetPosition){
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c86:	4290      	cmp	r0, r2
 8002c88:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c8c:	d20b      	bcs.n	8002ca6 <setDirection+0x62>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6898      	ldr	r0, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	899b      	ldrh	r3, [r3, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f000 ff09 	bl	8003ab0 <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <stopStepper>:

void stopStepper(stepper *stepper){
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->Timer, stepper->Channel);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f003 fc5f 	bl	8006584 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(stepper->Timer);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 facc 	bl	8006268 <HAL_TIM_Base_Stop>
	stepper->Status = Stopped;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	stepper->TargetPosition = stepper->CurrentPosition;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <zeroStepper>:

void zeroStepper(stepper *stepper){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	stopStepper(stepper);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ffda 	bl	8002cae <stopStepper>
	stepper->CurrentPosition = 0;
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9c1 2308 	strd	r2, r3, [r1, #32]
	stepper->TargetPosition = 0;
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_MspInit+0x44>)
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_MspInit+0x44>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6613      	str	r3, [r2, #96]	; 0x60
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_MspInit+0x44>)
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_MspInit+0x44>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <HAL_MspInit+0x44>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6593      	str	r3, [r2, #88]	; 0x58
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_MspInit+0x44>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0b0      	sub	sp, #192	; 0xc0
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	2298      	movs	r2, #152	; 0x98
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00b fd33 	bl	800e7f4 <memset>
  if(hi2c->Instance==I2C2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_I2C_MspInit+0xb0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d13a      	bne.n	8002e0e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 fc4b 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002db0:	f7ff fbba 	bl	8002528 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db8:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002dba:	f043 0320 	orr.w	r3, r3, #32
 8002dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd2:	2312      	movs	r3, #18
 8002dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002de4:	2304      	movs	r3, #4
 8002de6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002dee:	4619      	mov	r1, r3
 8002df0:	480b      	ldr	r0, [pc, #44]	; (8002e20 <HAL_I2C_MspInit+0xb8>)
 8002df2:	f000 fcb3 	bl	800375c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002dfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e0e:	bf00      	nop
 8002e10:	37c0      	adds	r7, #192	; 0xc0
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40005800 	.word	0x40005800
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	48001400 	.word	0x48001400

08002e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0b0      	sub	sp, #192	; 0xc0
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2298      	movs	r2, #152	; 0x98
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f00b fcd5 	bl	800e7f4 <memset>
  if(huart->Instance==LPUART1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <HAL_UART_MspInit+0xc4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d145      	bne.n	8002ee0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e54:	2320      	movs	r3, #32
 8002e56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fbed 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e6c:	f7ff fb5c 	bl	8002528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_UART_MspInit+0xc8>)
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_UART_MspInit+0xc8>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_UART_MspInit+0xc8>)
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_UART_MspInit+0xc8>)
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_UART_MspInit+0xc8>)
 8002e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e94:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_UART_MspInit+0xc8>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002ea0:	f001 fc84 	bl	80047ac <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ea4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ec4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <HAL_UART_MspInit+0xcc>)
 8002ecc:	f000 fc46 	bl	800375c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2046      	movs	r0, #70	; 0x46
 8002ed6:	f000 fb50 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002eda:	2046      	movs	r0, #70	; 0x46
 8002edc:	f000 fb69 	bl	80035b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002ee0:	bf00      	nop
 8002ee2:	37c0      	adds	r7, #192	; 0xc0
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40008000 	.word	0x40008000
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	48001800 	.word	0x48001800

08002ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d114      	bne.n	8002f30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6593      	str	r3, [r2, #88]	; 0x58
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	201c      	movs	r0, #28
 8002f24:	f000 fb29 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f28:	201c      	movs	r0, #28
 8002f2a:	f000 fb42 	bl	80035b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f2e:	e044      	b.n	8002fba <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d114      	bne.n	8002f64 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	4a21      	ldr	r2, [pc, #132]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6593      	str	r3, [r2, #88]	; 0x58
 8002f46:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	201d      	movs	r0, #29
 8002f58:	f000 fb0f 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f5c:	201d      	movs	r0, #29
 8002f5e:	f000 fb28 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002f62:	e02a      	b.n	8002fba <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_TIM_Base_MspInit+0xd8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d114      	bne.n	8002f98 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	201e      	movs	r0, #30
 8002f8c:	f000 faf5 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f90:	201e      	movs	r0, #30
 8002f92:	f000 fb0e 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002f96:	e010      	b.n	8002fba <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <HAL_TIM_Base_MspInit+0xdc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10b      	bne.n	8002fba <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002fa8:	f043 0308 	orr.w	r3, r3, #8
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_TIM_Base_MspInit+0xd0>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00

08002fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d11d      	bne.n	8003032 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	4a32      	ldr	r2, [pc, #200]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800300e:	2301      	movs	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800301e:	2301      	movs	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800302c:	f000 fb96 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003030:	e043      	b.n	80030ba <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a24      	ldr	r2, [pc, #144]	; (80030c8 <HAL_TIM_MspPostInit+0xf4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d11c      	bne.n	8003076 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 800303e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 800304a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003054:	2308      	movs	r3, #8
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003064:	2302      	movs	r3, #2
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4817      	ldr	r0, [pc, #92]	; (80030cc <HAL_TIM_MspPostInit+0xf8>)
 8003070:	f000 fb74 	bl	800375c <HAL_GPIO_Init>
}
 8003074:	e021      	b.n	80030ba <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <HAL_TIM_MspPostInit+0xfc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d11c      	bne.n	80030ba <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 8003086:	f043 0308 	orr.w	r3, r3, #8
 800308a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_TIM_MspPostInit+0xf0>)
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003098:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030aa:	2302      	movs	r3, #2
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	4619      	mov	r1, r3
 80030b4:	4807      	ldr	r0, [pc, #28]	; (80030d4 <HAL_TIM_MspPostInit+0x100>)
 80030b6:	f000 fb51 	bl	800375c <HAL_GPIO_Init>
}
 80030ba:	bf00      	nop
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	48001000 	.word	0x48001000
 80030d0:	40000800 	.word	0x40000800
 80030d4:	48000c00 	.word	0x48000c00

080030d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <NMI_Handler+0x4>

080030de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <HardFault_Handler+0x4>

080030e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <MemManage_Handler+0x4>

080030ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ee:	e7fe      	b.n	80030ee <BusFault_Handler+0x4>

080030f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <UsageFault_Handler+0x4>

080030f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003124:	f000 f90a 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(modeStandby_Pin);
 8003130:	2008      	movs	r0, #8
 8003132:	f000 fcd5 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}

0800313a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(modeZero_Pin);
 800313e:	2010      	movs	r0, #16
 8003140:	f000 fcce 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}

08003148 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(modeTattoo_Pin);
 800314c:	2020      	movs	r0, #32
 800314e:	f000 fcc7 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(modeScan_Pin);
 8003152:	2040      	movs	r0, #64	; 0x40
 8003154:	f000 fcc4 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}

0800315c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <TIM2_IRQHandler+0x10>)
 8003162:	f003 faa5 	bl	80066b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200003d0 	.word	0x200003d0

08003170 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <TIM3_IRQHandler+0x10>)
 8003176:	f003 fa9b 	bl	80066b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2000041c 	.word	0x2000041c

08003184 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <TIM4_IRQHandler+0x10>)
 800318a:	f003 fa91 	bl	80066b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000468 	.word	0x20000468

08003198 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(thLim_Pin);
 800319c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031a0:	f000 fc9e 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(yLim_Pin);
 80031a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031a8:	f000 fc9a 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(rLim_Pin);
 80031ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80031b0:	f000 fc96 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <LPUART1_IRQHandler+0x10>)
 80031be:	f004 fbaf 	bl	8007920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000340 	.word	0x20000340

080031cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <SystemInit+0x20>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <SystemInit+0x20>)
 80031d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <GoHome>:
 *      Author: kylei
 */

#include "zeroing.h"

void GoHome(stepper* motor){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	6078      	str	r0, [r7, #4]
	//stop any current motion
	stopStepper(motor);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fd58 	bl	8002cae <stopStepper>
	//make stepper think its far from zero
	motor->CurrentPosition = 0xFFFF;
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9c1 2308 	strd	r2, r3, [r1, #32]
	motor->TargetPosition = 0xFFFF;
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	/*make motor go backward "forever"
	Note: make sure there is some mechanism in main()
	to stop otherwise this will go until it breaks something*/
	setSpeed(motor,motor->PPS_ZeroDefault);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fcab 	bl	8002b7c <setSpeed>
	setTarget(motor, 0xFFFE,0);
 8003226:	2300      	movs	r3, #0
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fc5b 	bl	8002aee <setTarget>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8003240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003244:	f7ff ffc2 	bl	80031cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003248:	480c      	ldr	r0, [pc, #48]	; (800327c <LoopForever+0x6>)
  ldr r1, =_edata
 800324a:	490d      	ldr	r1, [pc, #52]	; (8003280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <LoopForever+0xe>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003250:	e002      	b.n	8003258 <LoopCopyDataInit>

08003252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003256:	3304      	adds	r3, #4

08003258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800325c:	d3f9      	bcc.n	8003252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003260:	4c0a      	ldr	r4, [pc, #40]	; (800328c <LoopForever+0x16>)
  movs r3, #0
 8003262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003264:	e001      	b.n	800326a <LoopFillZerobss>

08003266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003268:	3204      	adds	r2, #4

0800326a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800326c:	d3fb      	bcc.n	8003266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800326e:	f00b fa8f 	bl	800e790 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003272:	f7fe f805 	bl	8001280 <main>

08003276 <LoopForever>:

LoopForever:
    b LoopForever
 8003276:	e7fe      	b.n	8003276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003278:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800327c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003280:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8003284:	0800e8ac 	.word	0x0800e8ac
  ldr r2, =_sbss
 8003288:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800328c:	20000878 	.word	0x20000878

08003290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003290:	e7fe      	b.n	8003290 <ADC1_2_IRQHandler>

08003292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f000 f961 	bl	8003564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a2:	200f      	movs	r0, #15
 80032a4:	f000 f80e 	bl	80032c4 <HAL_InitTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	e001      	b.n	80032b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032b4:	f7ff fd34 	bl	8002d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032b8:	79fb      	ldrb	r3, [r7, #7]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_InitTick+0x6c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d023      	beq.n	8003320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <HAL_InitTick+0x70>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_InitTick+0x6c>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4619      	mov	r1, r3
 80032e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f96d 	bl	80035ce <HAL_SYSTICK_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d809      	bhi.n	8003314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003300:	2200      	movs	r2, #0
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	f000 f937 	bl	800357a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800330c:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <HAL_InitTick+0x74>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e007      	b.n	8003324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e004      	b.n	8003324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e001      	b.n	8003324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000000c 	.word	0x2000000c
 8003334:	20000004 	.word	0x20000004
 8003338:	20000008 	.word	0x20000008

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	2000000c 	.word	0x2000000c
 8003360:	20000834 	.word	0x20000834

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000834 	.word	0x20000834

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d005      	beq.n	80033a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_Delay+0x44>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a2:	bf00      	nop
 80033a4:	f7ff ffde 	bl	8003364 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d8f7      	bhi.n	80033a4 <HAL_Delay+0x28>
  {
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e0:	4013      	ands	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f6:	4a04      	ldr	r2, [pc, #16]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	60d3      	str	r3, [r2, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__NVIC_GetPriorityGrouping+0x18>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 0307 	and.w	r3, r3, #7
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db0b      	blt.n	8003452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <__NVIC_EnableIRQ+0x38>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
         );
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d301      	bcc.n	8003536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003532:	2301      	movs	r3, #1
 8003534:	e00f      	b.n	8003556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <SysTick_Config+0x40>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353e:	210f      	movs	r1, #15
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	f7ff ff8e 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <SysTick_Config+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <SysTick_Config+0x40>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff29 	bl	80033c4 <__NVIC_SetPriorityGrouping>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800358c:	f7ff ff3e 	bl	800340c <__NVIC_GetPriorityGrouping>
 8003590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff8e 	bl	80034b8 <NVIC_EncodePriority>
 800359c:	4602      	mov	r2, r0
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff5d 	bl	8003464 <__NVIC_SetPriority>
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff31 	bl	8003428 <__NVIC_EnableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ffa2 	bl	8003520 <SysTick_Config>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b085      	sub	sp, #20
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d008      	beq.n	8003610 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e040      	b.n	8003692 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 020e 	bic.w	r2, r2, #14
 800361e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800362e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f003 021c 	and.w	r2, r3, #28
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f202 	lsl.w	r2, r1, r2
 8003652:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800365c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00c      	beq.n	8003680 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800367e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d005      	beq.n	80036c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e047      	b.n	8003752 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 020e 	bic.w	r2, r2, #14
 80036d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f003 021c 	and.w	r2, r3, #28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800370e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003726:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003730:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
    }
  }
  return status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376a:	e166      	b.n	8003a3a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8158 	beq.w	8003a34 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d005      	beq.n	800379c <HAL_GPIO_Init+0x40>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d130      	bne.n	80037fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037d2:	2201      	movs	r2, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0201 	and.w	r2, r3, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b03      	cmp	r3, #3
 8003808:	d017      	beq.n	800383a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d123      	bne.n	800388e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	6939      	ldr	r1, [r7, #16]
 800388a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80b2 	beq.w	8003a34 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_GPIO_Init+0x2fc>)
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	4a60      	ldr	r2, [pc, #384]	; (8003a58 <HAL_GPIO_Init+0x2fc>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6613      	str	r3, [r2, #96]	; 0x60
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_GPIO_Init+0x2fc>)
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038e8:	4a5c      	ldr	r2, [pc, #368]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	220f      	movs	r2, #15
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003912:	d02b      	beq.n	800396c <HAL_GPIO_Init+0x210>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_GPIO_Init+0x304>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d025      	beq.n	8003968 <HAL_GPIO_Init+0x20c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a51      	ldr	r2, [pc, #324]	; (8003a64 <HAL_GPIO_Init+0x308>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01f      	beq.n	8003964 <HAL_GPIO_Init+0x208>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <HAL_GPIO_Init+0x30c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d019      	beq.n	8003960 <HAL_GPIO_Init+0x204>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a4f      	ldr	r2, [pc, #316]	; (8003a6c <HAL_GPIO_Init+0x310>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_GPIO_Init+0x200>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a4e      	ldr	r2, [pc, #312]	; (8003a70 <HAL_GPIO_Init+0x314>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00d      	beq.n	8003958 <HAL_GPIO_Init+0x1fc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a4d      	ldr	r2, [pc, #308]	; (8003a74 <HAL_GPIO_Init+0x318>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_GPIO_Init+0x1f8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a4c      	ldr	r2, [pc, #304]	; (8003a78 <HAL_GPIO_Init+0x31c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_GPIO_Init+0x1f4>
 800394c:	2307      	movs	r3, #7
 800394e:	e00e      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003950:	2308      	movs	r3, #8
 8003952:	e00c      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003954:	2306      	movs	r3, #6
 8003956:	e00a      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003958:	2305      	movs	r3, #5
 800395a:	e008      	b.n	800396e <HAL_GPIO_Init+0x212>
 800395c:	2304      	movs	r3, #4
 800395e:	e006      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003960:	2303      	movs	r3, #3
 8003962:	e004      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003964:	2302      	movs	r3, #2
 8003966:	e002      	b.n	800396e <HAL_GPIO_Init+0x212>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_GPIO_Init+0x212>
 800396c:	2300      	movs	r3, #0
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	f002 0203 	and.w	r2, r2, #3
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	4093      	lsls	r3, r2
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397e:	4937      	ldr	r1, [pc, #220]	; (8003a5c <HAL_GPIO_Init+0x300>)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_GPIO_Init+0x320>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039b0:	4a32      	ldr	r2, [pc, #200]	; (8003a7c <HAL_GPIO_Init+0x320>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_GPIO_Init+0x320>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039da:	4a28      	ldr	r2, [pc, #160]	; (8003a7c <HAL_GPIO_Init+0x320>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <HAL_GPIO_Init+0x320>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a04:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <HAL_GPIO_Init+0x320>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_GPIO_Init+0x320>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_GPIO_Init+0x320>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3301      	adds	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f ae91 	bne.w	800376c <HAL_GPIO_Init+0x10>
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000c00 	.word	0x48000c00
 8003a6c:	48001000 	.word	0x48001000
 8003a70:	48001400 	.word	0x48001400
 8003a74:	48001800 	.word	0x48001800
 8003a78:	48001c00 	.word	0x48001c00
 8003a7c:	40010400 	.word	0x40010400

08003a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e001      	b.n	8003aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	807b      	strh	r3, [r7, #2]
 8003abc:	4613      	mov	r3, r2
 8003abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ac0:	787b      	ldrb	r3, [r7, #1]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003acc:	e002      	b.n	8003ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fcc6 	bl	8002490 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40010400 	.word	0x40010400

08003b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e081      	b.n	8003c26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff f916 	bl	8002d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d107      	bne.n	8003b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e006      	b.n	8003b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d104      	bne.n	8003baa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	817b      	strh	r3, [r7, #10]
 8003c40:	4613      	mov	r3, r2
 8003c42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	f040 80da 	bne.w	8003e06 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2C_Master_Transmit+0x30>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0d3      	b.n	8003e08 <HAL_I2C_Master_Transmit+0x1d8>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c68:	f7ff fb7c 	bl	8003364 <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2319      	movs	r3, #25
 8003c74:	2201      	movs	r2, #1
 8003c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f9e6 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e0be      	b.n	8003e08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2221      	movs	r2, #33	; 0x21
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2210      	movs	r2, #16
 8003c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2bff      	cmp	r3, #255	; 0xff
 8003cba:	d90e      	bls.n	8003cda <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	22ff      	movs	r2, #255	; 0xff
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	8979      	ldrh	r1, [r7, #10]
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fbdc 	bl	8004490 <I2C_TransferConfig>
 8003cd8:	e06c      	b.n	8003db4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <HAL_I2C_Master_Transmit+0x1e0>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fbcb 	bl	8004490 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cfa:	e05b      	b.n	8003db4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	6a39      	ldr	r1, [r7, #32]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f9e3 	bl	80040cc <I2C_WaitOnTXISFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e07b      	b.n	8003e08 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d034      	beq.n	8003db4 <HAL_I2C_Master_Transmit+0x184>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d130      	bne.n	8003db4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f975 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e04d      	b.n	8003e08 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d90e      	bls.n	8003d94 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	8979      	ldrh	r1, [r7, #10]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fb7f 	bl	8004490 <I2C_TransferConfig>
 8003d92:	e00f      	b.n	8003db4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	8979      	ldrh	r1, [r7, #10]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fb6e 	bl	8004490 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d19e      	bne.n	8003cfc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	6a39      	ldr	r1, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9c2 	bl	800414c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01a      	b.n	8003e08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_I2C_Master_Transmit+0x1e4>)
 8003de6:	400b      	ands	r3, r1
 8003de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	80002000 	.word	0x80002000
 8003e14:	fe00e800 	.word	0xfe00e800

08003e18 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	461a      	mov	r2, r3
 8003e24:	460b      	mov	r3, r1
 8003e26:	817b      	strh	r3, [r7, #10]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	f040 80db 	bne.w	8003ff0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_I2C_Master_Receive+0x30>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e0d4      	b.n	8003ff2 <HAL_I2C_Master_Receive+0x1da>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e50:	f7ff fa88 	bl	8003364 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	2319      	movs	r3, #25
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f8f2 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0bf      	b.n	8003ff2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2222      	movs	r2, #34	; 0x22
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	893a      	ldrh	r2, [r7, #8]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2bff      	cmp	r3, #255	; 0xff
 8003ea2:	d90e      	bls.n	8003ec2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	8979      	ldrh	r1, [r7, #10]
 8003eb2:	4b52      	ldr	r3, [pc, #328]	; (8003ffc <HAL_I2C_Master_Receive+0x1e4>)
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fae8 	bl	8004490 <I2C_TransferConfig>
 8003ec0:	e06d      	b.n	8003f9e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	8979      	ldrh	r1, [r7, #10]
 8003ed4:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <HAL_I2C_Master_Receive+0x1e4>)
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fad7 	bl	8004490 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ee2:	e05c      	b.n	8003f9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f96b 	bl	80041c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e07c      	b.n	8003ff2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d034      	beq.n	8003f9e <HAL_I2C_Master_Receive+0x186>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d130      	bne.n	8003f9e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2200      	movs	r2, #0
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f880 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e04d      	b.n	8003ff2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2bff      	cmp	r3, #255	; 0xff
 8003f5e:	d90e      	bls.n	8003f7e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	22ff      	movs	r2, #255	; 0xff
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	8979      	ldrh	r1, [r7, #10]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa8a 	bl	8004490 <I2C_TransferConfig>
 8003f7c:	e00f      	b.n	8003f9e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa79 	bl	8004490 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d19d      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	6a39      	ldr	r1, [r7, #32]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f8cd 	bl	800414c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e01a      	b.n	8003ff2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_I2C_Master_Receive+0x1e8>)
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	80002400 	.word	0x80002400
 8004000:	fe00e800 	.word	0xfe00e800

08004004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d103      	bne.n	8004022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d007      	beq.n	8004040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	619a      	str	r2, [r3, #24]
  }
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405c:	e022      	b.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d01e      	beq.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7ff f97d 	bl	8003364 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d113      	bne.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e00f      	b.n	80040c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d0cd      	beq.n	800405e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040d8:	e02c      	b.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f8ea 	bl	80042b8 <I2C_IsErrorOccurred>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e02a      	b.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d01e      	beq.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7ff f935 	bl	8003364 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d113      	bne.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	f043 0220 	orr.w	r2, r3, #32
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e007      	b.n	8004144 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d1cb      	bne.n	80040da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004158:	e028      	b.n	80041ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f8aa 	bl	80042b8 <I2C_IsErrorOccurred>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e026      	b.n	80041bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7ff f8f9 	bl	8003364 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d113      	bne.n	80041ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e007      	b.n	80041bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d1cf      	bne.n	800415a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d0:	e064      	b.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f86e 	bl	80042b8 <I2C_IsErrorOccurred>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e062      	b.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d138      	bne.n	8004266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d105      	bne.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e04e      	b.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b10      	cmp	r3, #16
 800421a:	d107      	bne.n	800422c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2210      	movs	r2, #16
 8004222:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2204      	movs	r2, #4
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
 800422a:	e002      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2220      	movs	r2, #32
 8004238:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004246:	400b      	ands	r3, r1
 8004248:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e022      	b.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7ff f87d 	bl	8003364 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10f      	bne.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e007      	b.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d193      	bne.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	fe00e800 	.word	0xfe00e800

080042b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d075      	beq.n	80043d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2210      	movs	r2, #16
 80042ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042ec:	e056      	b.n	800439c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d052      	beq.n	800439c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	f7ff f835 	bl	8003364 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <I2C_IsErrorOccurred+0x54>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d147      	bne.n	800439c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004316:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800431e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432e:	d12e      	bne.n	800438e <I2C_IsErrorOccurred+0xd6>
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004336:	d02a      	beq.n	800438e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	2b20      	cmp	r3, #32
 800433c:	d027      	beq.n	800438e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800434e:	f7ff f809 	bl	8003364 <HAL_GetTick>
 8004352:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004354:	e01b      	b.n	800438e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004356:	f7ff f805 	bl	8003364 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b19      	cmp	r3, #25
 8004362:	d914      	bls.n	800438e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b20      	cmp	r3, #32
 800439a:	d1dc      	bne.n	8004356 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d003      	beq.n	80043b2 <I2C_IsErrorOccurred+0xfa>
 80043aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d09d      	beq.n	80042ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2220      	movs	r2, #32
 80043c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f043 0304 	orr.w	r3, r3, #4
 80043c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00b      	beq.n	800441c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f043 0308 	orr.w	r3, r3, #8
 800440a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004414:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004436:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800443e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01c      	beq.n	8004480 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff fddc 	bl	8004004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b0d      	ldr	r3, [pc, #52]	; (800448c <I2C_IsErrorOccurred+0x1d4>)
 8004458:	400b      	ands	r3, r1
 800445a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004484:	4618      	mov	r0, r3
 8004486:	3728      	adds	r7, #40	; 0x28
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	fe00e800 	.word	0xfe00e800

08004490 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	817b      	strh	r3, [r7, #10]
 800449e:	4613      	mov	r3, r2
 80044a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044a2:	897b      	ldrh	r3, [r7, #10]
 80044a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044a8:	7a7b      	ldrb	r3, [r7, #9]
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	0d5b      	lsrs	r3, r3, #21
 80044ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <I2C_TransferConfig+0x60>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	43db      	mvns	r3, r3
 80044d4:	ea02 0103 	and.w	r1, r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	03ff63ff 	.word	0x03ff63ff

080044f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b20      	cmp	r3, #32
 8004508:	d138      	bne.n	800457c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004514:	2302      	movs	r3, #2
 8004516:	e032      	b.n	800457e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004546:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	d139      	bne.n	8004614 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e033      	b.n	8004616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2224      	movs	r2, #36	; 0x24
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_PWREx_GetVoltageRange+0x3c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004634:	d102      	bne.n	800463c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463a:	e00b      	b.n	8004654 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_PWREx_GetVoltageRange+0x3c>)
 800463e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d102      	bne.n	8004652 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800464c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004650:	e000      	b.n	8004654 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004652:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40007000 	.word	0x40007000

08004664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d141      	bne.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004672:	4b4b      	ldr	r3, [pc, #300]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467e:	d131      	bne.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004680:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004686:	4a46      	ldr	r2, [pc, #280]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800468c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004690:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004698:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800469e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80046a0:	4b40      	ldr	r3, [pc, #256]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2232      	movs	r2, #50	; 0x32
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	0c9b      	lsrs	r3, r3, #18
 80046b2:	3301      	adds	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b6:	e002      	b.n	80046be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046be:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ca:	d102      	bne.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f2      	bne.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d158      	bne.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e057      	b.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e4:	4b2e      	ldr	r3, [pc, #184]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ea:	4a2d      	ldr	r2, [pc, #180]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046f4:	e04d      	b.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fc:	d141      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046fe:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d131      	bne.n	8004770 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800470c:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004712:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004724:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800472c:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2232      	movs	r2, #50	; 0x32
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	0c9b      	lsrs	r3, r3, #18
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004742:	e002      	b.n	800474a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3b01      	subs	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d102      	bne.n	800475e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f2      	bne.n	8004744 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d112      	bne.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e011      	b.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004780:	e007      	b.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800478a:	4a05      	ldr	r2, [pc, #20]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004790:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40007000 	.word	0x40007000
 80047a4:	20000004 	.word	0x20000004
 80047a8:	431bde83 	.word	0x431bde83

080047ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ba:	6053      	str	r3, [r2, #4]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40007000 	.word	0x40007000

080047cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f000 bc68 	b.w	80050b0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e0:	4b97      	ldr	r3, [pc, #604]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ea:	4b95      	ldr	r3, [pc, #596]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80e6 	beq.w	80049ce <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_RCC_OscConfig+0x4c>
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	f040 808d 	bne.w	800492a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b01      	cmp	r3, #1
 8004814:	f040 8089 	bne.w	800492a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004818:	4b89      	ldr	r3, [pc, #548]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d006      	beq.n	8004832 <HAL_RCC_OscConfig+0x66>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f000 bc3f 	b.w	80050b0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004836:	4b82      	ldr	r3, [pc, #520]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <HAL_RCC_OscConfig+0x80>
 8004842:	4b7f      	ldr	r3, [pc, #508]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800484a:	e005      	b.n	8004858 <HAL_RCC_OscConfig+0x8c>
 800484c:	4b7c      	ldr	r3, [pc, #496]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800484e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	4293      	cmp	r3, r2
 800485a:	d224      	bcs.n	80048a6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fe2d 	bl	80054c0 <RCC_SetFlashLatencyFromMSIRange>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f000 bc1f 	b.w	80050b0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004872:	4b73      	ldr	r3, [pc, #460]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a72      	ldr	r2, [pc, #456]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004878:	f043 0308 	orr.w	r3, r3, #8
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b70      	ldr	r3, [pc, #448]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	496d      	ldr	r1, [pc, #436]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004890:	4b6b      	ldr	r3, [pc, #428]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	4968      	ldr	r1, [pc, #416]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	e025      	b.n	80048f2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a6:	4b66      	ldr	r3, [pc, #408]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a65      	ldr	r2, [pc, #404]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b63      	ldr	r3, [pc, #396]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	4960      	ldr	r1, [pc, #384]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048c4:	4b5e      	ldr	r3, [pc, #376]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	495b      	ldr	r1, [pc, #364]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fdec 	bl	80054c0 <RCC_SetFlashLatencyFromMSIRange>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e3de      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048f2:	f000 fd21 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	4950      	ldr	r1, [pc, #320]	; (8004a44 <HAL_RCC_OscConfig+0x278>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a4e      	ldr	r2, [pc, #312]	; (8004a48 <HAL_RCC_OscConfig+0x27c>)
 8004910:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004912:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <HAL_RCC_OscConfig+0x280>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fcd4 	bl	80032c4 <HAL_InitTick>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d052      	beq.n	80049cc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	e3c2      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d032      	beq.n	8004998 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004932:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800493e:	f7fe fd11 	bl	8003364 <HAL_GetTick>
 8004942:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004946:	f7fe fd0d 	bl	8003364 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e3ab      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004958:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004964:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a35      	ldr	r2, [pc, #212]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800496a:	f043 0308 	orr.w	r3, r3, #8
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	4930      	ldr	r1, [pc, #192]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004982:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	492b      	ldr	r1, [pc, #172]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
 8004996:	e01a      	b.n	80049ce <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004998:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049a4:	f7fe fcde 	bl	8003364 <HAL_GetTick>
 80049a8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ac:	f7fe fcda 	bl	8003364 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e378      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x1e0>
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d073      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d005      	beq.n	80049ec <HAL_RCC_OscConfig+0x220>
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d10e      	bne.n	8004a04 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d10b      	bne.n	8004a04 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d063      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x2f4>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d15f      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e355      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d106      	bne.n	8004a1c <HAL_RCC_OscConfig+0x250>
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e025      	b.n	8004a68 <HAL_RCC_OscConfig+0x29c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a24:	d114      	bne.n	8004a50 <HAL_RCC_OscConfig+0x284>
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a02      	ldr	r2, [pc, #8]	; (8004a40 <HAL_RCC_OscConfig+0x274>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e013      	b.n	8004a68 <HAL_RCC_OscConfig+0x29c>
 8004a40:	40021000 	.word	0x40021000
 8004a44:	0800e82c 	.word	0x0800e82c
 8004a48:	20000004 	.word	0x20000004
 8004a4c:	20000008 	.word	0x20000008
 8004a50:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a8e      	ldr	r2, [pc, #568]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b8c      	ldr	r3, [pc, #560]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a8b      	ldr	r2, [pc, #556]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fe fc78 	bl	8003364 <HAL_GetTick>
 8004a74:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fe fc74 	bl	8003364 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	; 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e312      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a8a:	4b81      	ldr	r3, [pc, #516]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x2ac>
 8004a96:	e014      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fe fc64 	bl	8003364 <HAL_GetTick>
 8004a9c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fe fc60 	bl	8003364 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e2fe      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ab2:	4b77      	ldr	r3, [pc, #476]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x2d4>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d060      	beq.n	8004b90 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x314>
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d119      	bne.n	8004b0e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d116      	bne.n	8004b0e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	4b6b      	ldr	r3, [pc, #428]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_OscConfig+0x32c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e2db      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b65      	ldr	r3, [pc, #404]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	4962      	ldr	r1, [pc, #392]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	e040      	b.n	8004b90 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d023      	beq.n	8004b5e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b16:	4b5e      	ldr	r3, [pc, #376]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5d      	ldr	r2, [pc, #372]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fe fc1f 	bl	8003364 <HAL_GetTick>
 8004b26:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fe fc1b 	bl	8003364 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e2b9      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b3c:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	494e      	ldr	r1, [pc, #312]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
 8004b5c:	e018      	b.n	8004b90 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5e:	4b4c      	ldr	r3, [pc, #304]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a4b      	ldr	r2, [pc, #300]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fe fbfb 	bl	8003364 <HAL_GetTick>
 8004b6e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b72:	f7fe fbf7 	bl	8003364 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e295      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b84:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8082 	beq.w	8004ca2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d05f      	beq.n	8004c66 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004ba6:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bac:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d037      	beq.n	8004c2c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e26d      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01b      	beq.n	8004c16 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bee:	f7fe fbb9 	bl	8003364 <HAL_GetTick>
 8004bf2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf6:	f7fe fbb5 	bl	8003364 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b11      	cmp	r3, #17
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e253      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c08:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1ef      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1c:	f023 0210 	bic.w	r2, r3, #16
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	491a      	ldr	r1, [pc, #104]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c32:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fe fb92 	bl	8003364 <HAL_GetTick>
 8004c40:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fe fb8e 	bl	8003364 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b11      	cmp	r3, #17
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e22c      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ef      	beq.n	8004c44 <HAL_RCC_OscConfig+0x478>
 8004c64:	e01d      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6c:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <HAL_RCC_OscConfig+0x4c4>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fe fb75 	bl	8003364 <HAL_GetTick>
 8004c7a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe fb71 	bl	8003364 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b11      	cmp	r3, #17
 8004c8a:	d903      	bls.n	8004c94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e20f      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
 8004c90:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c94:	4b83      	ldr	r3, [pc, #524]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1ed      	bne.n	8004c7e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80bd 	beq.w	8004e2a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cb6:	4b7b      	ldr	r3, [pc, #492]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b78      	ldr	r3, [pc, #480]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	4a77      	ldr	r2, [pc, #476]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cce:	4b75      	ldr	r3, [pc, #468]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce0:	4b71      	ldr	r3, [pc, #452]	; (8004ea8 <HAL_RCC_OscConfig+0x6dc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d118      	bne.n	8004d1e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cec:	4b6e      	ldr	r3, [pc, #440]	; (8004ea8 <HAL_RCC_OscConfig+0x6dc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6d      	ldr	r2, [pc, #436]	; (8004ea8 <HAL_RCC_OscConfig+0x6dc>)
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf8:	f7fe fb34 	bl	8003364 <HAL_GetTick>
 8004cfc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d00:	f7fe fb30 	bl	8003364 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1ce      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d12:	4b65      	ldr	r3, [pc, #404]	; (8004ea8 <HAL_RCC_OscConfig+0x6dc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004d2a:	4b5e      	ldr	r3, [pc, #376]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	4959      	ldr	r1, [pc, #356]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d010      	beq.n	8004d72 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d50:	4b54      	ldr	r3, [pc, #336]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	4a53      	ldr	r2, [pc, #332]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d60:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	4a4f      	ldr	r2, [pc, #316]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d70:	e018      	b.n	8004da4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d72:	4b4c      	ldr	r3, [pc, #304]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	4a4a      	ldr	r2, [pc, #296]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d82:	e00f      	b.n	8004da4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d84:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	4a42      	ldr	r2, [pc, #264]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d016      	beq.n	8004dda <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fe fada 	bl	8003364 <HAL_GetTick>
 8004db0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db4:	f7fe fad6 	bl	8003364 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e172      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ed      	beq.n	8004db4 <HAL_RCC_OscConfig+0x5e8>
 8004dd8:	e01d      	b.n	8004e16 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dda:	f7fe fac3 	bl	8003364 <HAL_GetTick>
 8004dde:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fe fabf 	bl	8003364 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e15b      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1ed      	bne.n	8004de2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1e:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	4a20      	ldr	r2, [pc, #128]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d041      	beq.n	8004eba <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e3e:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e44:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fe fa89 	bl	8003364 <HAL_GetTick>
 8004e52:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e56:	f7fe fa85 	bl	8003364 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e123      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e68:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <HAL_RCC_OscConfig+0x68a>
 8004e76:	e020      	b.n	8004eba <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x6d8>)
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fe fa6c 	bl	8003364 <HAL_GetTick>
 8004e8c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e8e:	e00d      	b.n	8004eac <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e90:	f7fe fa68 	bl	8003364 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d906      	bls.n	8004eac <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e106      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eac:	4b82      	ldr	r3, [pc, #520]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ea      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80f5 	beq.w	80050ae <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	f040 80cb 	bne.w	8005064 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ece:	4b7a      	ldr	r3, [pc, #488]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 0203 	and.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d12c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eec:	3b01      	subs	r3, #1
 8004eee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d123      	bne.n	8004f3c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d11b      	bne.n	8004f3c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d113      	bne.n	8004f3c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d109      	bne.n	8004f3c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d06d      	beq.n	8005018 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d068      	beq.n	8005014 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f42:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f4e:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0a8      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f5e:	4b56      	ldr	r3, [pc, #344]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a55      	ldr	r2, [pc, #340]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f6a:	f7fe f9fb 	bl	8003364 <HAL_GetTick>
 8004f6e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f72:	f7fe f9f7 	bl	8003364 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e095      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f84:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f90:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	4b49      	ldr	r3, [pc, #292]	; (80050bc <HAL_RCC_OscConfig+0x8f0>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004faa:	0212      	lsls	r2, r2, #8
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fb2:	0852      	lsrs	r2, r2, #1
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0552      	lsls	r2, r2, #21
 8004fb8:	4311      	orrs	r1, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fbe:	0852      	lsrs	r2, r2, #1
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	0652      	lsls	r2, r2, #25
 8004fc4:	4311      	orrs	r1, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fca:	06d2      	lsls	r2, r2, #27
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	493a      	ldr	r1, [pc, #232]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fd4:	4b38      	ldr	r3, [pc, #224]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a37      	ldr	r2, [pc, #220]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a34      	ldr	r2, [pc, #208]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8004fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fec:	f7fe f9ba 	bl	8003364 <HAL_GetTick>
 8004ff0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fe f9b6 	bl	8003364 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e054      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005012:	e04c      	b.n	80050ae <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e04b      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005018:	4b27      	ldr	r3, [pc, #156]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d144      	bne.n	80050ae <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 800502a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005030:	4b21      	ldr	r3, [pc, #132]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a20      	ldr	r2, [pc, #128]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8005036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800503a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800503c:	f7fe f992 	bl	8003364 <HAL_GetTick>
 8005040:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fe f98e 	bl	8003364 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e02c      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005056:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x878>
 8005062:	e024      	b.n	80050ae <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d01f      	beq.n	80050aa <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a12      	ldr	r2, [pc, #72]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8005070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005076:	f7fe f975 	bl	8003364 <HAL_GetTick>
 800507a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507e:	f7fe f971 	bl	8003364 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e00f      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	4905      	ldr	r1, [pc, #20]	; (80050b8 <HAL_RCC_OscConfig+0x8ec>)
 80050a2:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_RCC_OscConfig+0x8f4>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	60cb      	str	r3, [r1, #12]
 80050a8:	e001      	b.n	80050ae <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3728      	adds	r7, #40	; 0x28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40021000 	.word	0x40021000
 80050bc:	019d800c 	.word	0x019d800c
 80050c0:	feeefffc 	.word	0xfeeefffc

080050c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e11d      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050dc:	4b90      	ldr	r3, [pc, #576]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d910      	bls.n	800510c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b8d      	ldr	r3, [pc, #564]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f023 020f 	bic.w	r2, r3, #15
 80050f2:	498b      	ldr	r1, [pc, #556]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b89      	ldr	r3, [pc, #548]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e105      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d010      	beq.n	800513a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	4b81      	ldr	r3, [pc, #516]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005124:	429a      	cmp	r2, r3
 8005126:	d908      	bls.n	800513a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005128:	4b7e      	ldr	r3, [pc, #504]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	497b      	ldr	r1, [pc, #492]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d079      	beq.n	800523a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b03      	cmp	r3, #3
 800514c:	d11e      	bne.n	800518c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514e:	4b75      	ldr	r3, [pc, #468]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0dc      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800515e:	f000 fa09 	bl	8005574 <RCC_GetSysClockFreqFromPLLSource>
 8005162:	4603      	mov	r3, r0
 8005164:	4a70      	ldr	r2, [pc, #448]	; (8005328 <HAL_RCC_ClockConfig+0x264>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d946      	bls.n	80051f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800516a:	4b6e      	ldr	r3, [pc, #440]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d140      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005176:	4b6b      	ldr	r3, [pc, #428]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800517e:	4a69      	ldr	r2, [pc, #420]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005184:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e035      	b.n	80051f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d107      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005194:	4b63      	ldr	r3, [pc, #396]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d115      	bne.n	80051cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0b9      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051ac:	4b5d      	ldr	r3, [pc, #372]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d109      	bne.n	80051cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0ad      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051bc:	4b59      	ldr	r3, [pc, #356]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0a5      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80051cc:	f000 f8b4 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4a55      	ldr	r2, [pc, #340]	; (8005328 <HAL_RCC_ClockConfig+0x264>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d90f      	bls.n	80051f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80051d8:	4b52      	ldr	r3, [pc, #328]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051e4:	4b4f      	ldr	r3, [pc, #316]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ec:	4a4d      	ldr	r2, [pc, #308]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80051ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f8:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4947      	ldr	r1, [pc, #284]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520a:	f7fe f8ab 	bl	8003364 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005210:	e00a      	b.n	8005228 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005212:	f7fe f8a7 	bl	8003364 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e077      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005228:	4b3e      	ldr	r3, [pc, #248]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 020c 	and.w	r2, r3, #12
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	429a      	cmp	r2, r3
 8005238:	d1eb      	bne.n	8005212 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b80      	cmp	r3, #128	; 0x80
 800523e:	d105      	bne.n	800524c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005240:	4b38      	ldr	r3, [pc, #224]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	4a37      	ldr	r2, [pc, #220]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d010      	beq.n	800527a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	4b31      	ldr	r3, [pc, #196]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005264:	429a      	cmp	r2, r3
 8005266:	d208      	bcs.n	800527a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005268:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	492b      	ldr	r1, [pc, #172]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d210      	bcs.n	80052aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f023 020f 	bic.w	r2, r3, #15
 8005290:	4923      	ldr	r1, [pc, #140]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	4313      	orrs	r3, r2
 8005296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005298:	4b21      	ldr	r3, [pc, #132]	; (8005320 <HAL_RCC_ClockConfig+0x25c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e036      	b.n	8005318 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b6:	4b1b      	ldr	r3, [pc, #108]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4918      	ldr	r1, [pc, #96]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4910      	ldr	r1, [pc, #64]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052e8:	f000 f826 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <HAL_RCC_ClockConfig+0x260>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	091b      	lsrs	r3, r3, #4
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	490c      	ldr	r1, [pc, #48]	; (800532c <HAL_RCC_ClockConfig+0x268>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
 8005304:	4a0a      	ldr	r2, [pc, #40]	; (8005330 <HAL_RCC_ClockConfig+0x26c>)
 8005306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <HAL_RCC_ClockConfig+0x270>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fd ffd9 	bl	80032c4 <HAL_InitTick>
 8005312:	4603      	mov	r3, r0
 8005314:	73fb      	strb	r3, [r7, #15]

  return status;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40022000 	.word	0x40022000
 8005324:	40021000 	.word	0x40021000
 8005328:	04c4b400 	.word	0x04c4b400
 800532c:	0800e82c 	.word	0x0800e82c
 8005330:	20000004 	.word	0x20000004
 8005334:	20000008 	.word	0x20000008

08005338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	2300      	movs	r3, #0
 8005344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005346:	4b3e      	ldr	r3, [pc, #248]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x34>
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b0c      	cmp	r3, #12
 8005364:	d121      	bne.n	80053aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d11e      	bne.n	80053aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800536c:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d107      	bne.n	8005388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005378:	4b31      	ldr	r3, [pc, #196]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 800537a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	e005      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005388:	4b2d      	ldr	r3, [pc, #180]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005394:	4a2b      	ldr	r2, [pc, #172]	; (8005444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d102      	bne.n	80053b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053b0:	4b25      	ldr	r3, [pc, #148]	; (8005448 <HAL_RCC_GetSysClockFreq+0x110>)
 80053b2:	61bb      	str	r3, [r7, #24]
 80053b4:	e004      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053bc:	4b23      	ldr	r3, [pc, #140]	; (800544c <HAL_RCC_GetSysClockFreq+0x114>)
 80053be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b0c      	cmp	r3, #12
 80053c4:	d134      	bne.n	8005430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053c6:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d003      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0xa6>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d003      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0xac>
 80053dc:	e005      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053de:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <HAL_RCC_GetSysClockFreq+0x110>)
 80053e0:	617b      	str	r3, [r7, #20]
      break;
 80053e2:	e005      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_RCC_GetSysClockFreq+0x114>)
 80053e6:	617b      	str	r3, [r7, #20]
      break;
 80053e8:	e002      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	617b      	str	r3, [r7, #20]
      break;
 80053ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	3301      	adds	r3, #1
 80053fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	fb03 f202 	mul.w	r2, r3, r2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <HAL_RCC_GetSysClockFreq+0x108>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	0e5b      	lsrs	r3, r3, #25
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	3301      	adds	r3, #1
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005430:	69bb      	ldr	r3, [r7, #24]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3724      	adds	r7, #36	; 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000
 8005444:	0800e844 	.word	0x0800e844
 8005448:	00f42400 	.word	0x00f42400
 800544c:	007a1200 	.word	0x007a1200

08005450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <HAL_RCC_GetHCLKFreq+0x14>)
 8005456:	681b      	ldr	r3, [r3, #0]
}
 8005458:	4618      	mov	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000004 	.word	0x20000004

08005468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800546c:	f7ff fff0 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	; (8005490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	0800e83c 	.word	0x0800e83c

08005494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005498:	f7ff ffda 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	0adb      	lsrs	r3, r3, #11
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4904      	ldr	r1, [pc, #16]	; (80054bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40021000 	.word	0x40021000
 80054bc:	0800e83c 	.word	0x0800e83c

080054c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054cc:	4b27      	ldr	r3, [pc, #156]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054d8:	f7ff f8a4 	bl	8004624 <HAL_PWREx_GetVoltageRange>
 80054dc:	6178      	str	r0, [r7, #20]
 80054de:	e014      	b.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	4a21      	ldr	r2, [pc, #132]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ea:	6593      	str	r3, [r2, #88]	; 0x58
 80054ec:	4b1f      	ldr	r3, [pc, #124]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054f8:	f7ff f894 	bl	8004624 <HAL_PWREx_GetVoltageRange>
 80054fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054fe:	4b1b      	ldr	r3, [pc, #108]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	4a1a      	ldr	r2, [pc, #104]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005508:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005510:	d10b      	bne.n	800552a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d913      	bls.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2ba0      	cmp	r3, #160	; 0xa0
 800551c:	d902      	bls.n	8005524 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800551e:	2302      	movs	r3, #2
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e00d      	b.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005524:	2301      	movs	r3, #1
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e00a      	b.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b7f      	cmp	r3, #127	; 0x7f
 800552e:	d902      	bls.n	8005536 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005530:	2302      	movs	r3, #2
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	e004      	b.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b70      	cmp	r3, #112	; 0x70
 800553a:	d101      	bne.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800553c:	2301      	movs	r3, #1
 800553e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 020f 	bic.w	r2, r3, #15
 8005548:	4909      	ldr	r1, [pc, #36]	; (8005570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	429a      	cmp	r2, r3
 800555c:	d001      	beq.n	8005562 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	40022000 	.word	0x40022000

08005574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800557a:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d00b      	beq.n	80055a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b03      	cmp	r3, #3
 800558e:	d825      	bhi.n	80055dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d008      	beq.n	80055a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d11f      	bne.n	80055dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800559e:	613b      	str	r3, [r7, #16]
    break;
 80055a0:	e01f      	b.n	80055e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80055a2:	4b25      	ldr	r3, [pc, #148]	; (8005638 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80055a4:	613b      	str	r3, [r7, #16]
    break;
 80055a6:	e01c      	b.n	80055e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e005      	b.n	80055d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055c4:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80055d0:	4a1a      	ldr	r2, [pc, #104]	; (800563c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d8:	613b      	str	r3, [r7, #16]
    break;
 80055da:	e002      	b.n	80055e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
    break;
 80055e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	3301      	adds	r3, #1
 80055ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	fb03 f202 	mul.w	r2, r3, r2
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	0e5b      	lsrs	r3, r3, #25
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005622:	683b      	ldr	r3, [r7, #0]
}
 8005624:	4618      	mov	r0, r3
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40021000 	.word	0x40021000
 8005634:	00f42400 	.word	0x00f42400
 8005638:	007a1200 	.word	0x007a1200
 800563c:	0800e844 	.word	0x0800e844

08005640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005648:	2300      	movs	r3, #0
 800564a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800564c:	2300      	movs	r3, #0
 800564e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005658:	2b00      	cmp	r3, #0
 800565a:	d040      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d02a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005664:	2b80      	cmp	r3, #128	; 0x80
 8005666:	d825      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005668:	2b60      	cmp	r3, #96	; 0x60
 800566a:	d026      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800566c:	2b60      	cmp	r3, #96	; 0x60
 800566e:	d821      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d006      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d81d      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d010      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005680:	e018      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005682:	4b89      	ldr	r3, [pc, #548]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4a88      	ldr	r2, [pc, #544]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800568e:	e015      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fb3e 	bl	8005d18 <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056a0:	e00c      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3320      	adds	r3, #32
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fc29 	bl	8005f00 <RCCEx_PLLSAI2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	74fb      	strb	r3, [r7, #19]
      break;
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80056ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056bc:	7cfb      	ldrb	r3, [r7, #19]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c2:	4b79      	ldr	r3, [pc, #484]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d0:	4975      	ldr	r1, [pc, #468]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80056d8:	e001      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d047      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f2:	d030      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f8:	d82a      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fe:	d02a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005704:	d824      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800570a:	d008      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800570c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005710:	d81e      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571a:	d010      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800571c:	e018      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800571e:	4b62      	ldr	r3, [pc, #392]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4a61      	ldr	r2, [pc, #388]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800572a:	e015      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 faf0 	bl	8005d18 <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800573c:	e00c      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3320      	adds	r3, #32
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fbdb 	bl	8005f00 <RCCEx_PLLSAI2_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800574e:	e003      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	74fb      	strb	r3, [r7, #19]
      break;
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005758:	7cfb      	ldrb	r3, [r7, #19]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800575e:	4b52      	ldr	r3, [pc, #328]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	494e      	ldr	r1, [pc, #312]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005774:	e001      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 809f 	beq.w	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005788:	2300      	movs	r3, #0
 800578a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800578c:	4b46      	ldr	r3, [pc, #280]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a2:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	4a40      	ldr	r2, [pc, #256]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ac:	6593      	str	r3, [r2, #88]	; 0x58
 80057ae:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ba:	2301      	movs	r3, #1
 80057bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057be:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3a      	ldr	r2, [pc, #232]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ca:	f7fd fdcb 	bl	8003364 <HAL_GetTick>
 80057ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057d0:	e009      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d2:	f7fd fdc7 	bl	8003364 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d902      	bls.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	74fb      	strb	r3, [r7, #19]
        break;
 80057e4:	e005      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057e6:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0ef      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80057f2:	7cfb      	ldrb	r3, [r7, #19]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d15b      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005802:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01f      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	429a      	cmp	r2, r3
 8005814:	d019      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005820:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005822:	4b21      	ldr	r3, [pc, #132]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005838:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800583a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005842:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d016      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fd fd86 	bl	8003364 <HAL_GetTick>
 8005858:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585a:	e00b      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585c:	f7fd fd82 	bl	8003364 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	f241 3288 	movw	r2, #5000	; 0x1388
 800586a:	4293      	cmp	r3, r2
 800586c:	d902      	bls.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	74fb      	strb	r3, [r7, #19]
            break;
 8005872:	e006      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0ec      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005882:	7cfb      	ldrb	r3, [r7, #19]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10c      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005898:	4903      	ldr	r1, [pc, #12]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058a0:	e008      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058a2:	7cfb      	ldrb	r3, [r7, #19]
 80058a4:	74bb      	strb	r3, [r7, #18]
 80058a6:	e005      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	7cfb      	ldrb	r3, [r7, #19]
 80058b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b4:	7c7b      	ldrb	r3, [r7, #17]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ba:	4ba0      	ldr	r3, [pc, #640]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	4a9f      	ldr	r2, [pc, #636]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058d2:	4b9a      	ldr	r3, [pc, #616]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	f023 0203 	bic.w	r2, r3, #3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e0:	4996      	ldr	r1, [pc, #600]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058f4:	4b91      	ldr	r3, [pc, #580]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f023 020c 	bic.w	r2, r3, #12
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	498e      	ldr	r1, [pc, #568]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005916:	4b89      	ldr	r3, [pc, #548]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005924:	4985      	ldr	r1, [pc, #532]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005938:	4b80      	ldr	r3, [pc, #512]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005946:	497d      	ldr	r1, [pc, #500]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800595a:	4b78      	ldr	r3, [pc, #480]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005968:	4974      	ldr	r1, [pc, #464]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800597c:	4b6f      	ldr	r3, [pc, #444]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598a:	496c      	ldr	r1, [pc, #432]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800599e:	4b67      	ldr	r3, [pc, #412]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ac:	4963      	ldr	r1, [pc, #396]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059c0:	4b5e      	ldr	r3, [pc, #376]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ce:	495b      	ldr	r1, [pc, #364]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e2:	4b56      	ldr	r3, [pc, #344]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	4952      	ldr	r1, [pc, #328]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a04:	4b4d      	ldr	r3, [pc, #308]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	494a      	ldr	r1, [pc, #296]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a26:	4b45      	ldr	r3, [pc, #276]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	4941      	ldr	r1, [pc, #260]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a48:	4b3c      	ldr	r3, [pc, #240]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4e:	f023 0203 	bic.w	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	4939      	ldr	r1, [pc, #228]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d028      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a6a:	4b34      	ldr	r3, [pc, #208]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	4930      	ldr	r1, [pc, #192]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a88:	d106      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a8a:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	4a2b      	ldr	r2, [pc, #172]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a94:	60d3      	str	r3, [r2, #12]
 8005a96:	e011      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 f935 	bl	8005d18 <RCCEx_PLLSAI1_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ab8:	7cfb      	ldrb	r3, [r7, #19]
 8005aba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d04d      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad0:	d108      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ade:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005ae2:	e012      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ae4:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aea:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005af4:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b02:	490e      	ldr	r1, [pc, #56]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b12:	d106      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1e:	60d3      	str	r3, [r2, #12]
 8005b20:	e020      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b2a:	d109      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b2c:	4b03      	ldr	r3, [pc, #12]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a02      	ldr	r2, [pc, #8]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b36:	60d3      	str	r3, [r2, #12]
 8005b38:	e014      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2101      	movs	r1, #1
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f8e1 	bl	8005d18 <RCCEx_PLLSAI1_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b5a:	7cfb      	ldrb	r3, [r7, #19]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d028      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b70:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7e:	4965      	ldr	r1, [pc, #404]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b8e:	d106      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b90:	4b60      	ldr	r3, [pc, #384]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a5f      	ldr	r2, [pc, #380]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b9a:	60d3      	str	r3, [r2, #12]
 8005b9c:	e011      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ba6:	d10c      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	2101      	movs	r1, #1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f8b2 	bl	8005d18 <RCCEx_PLLSAI1_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bb8:	7cfb      	ldrb	r3, [r7, #19]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005bbe:	7cfb      	ldrb	r3, [r7, #19]
 8005bc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d01e      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bce:	4b51      	ldr	r3, [pc, #324]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bde:	494d      	ldr	r1, [pc, #308]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f88d 	bl	8005d18 <RCCEx_PLLSAI1_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005c08:	7cfb      	ldrb	r3, [r7, #19]
 8005c0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c18:	4b3e      	ldr	r3, [pc, #248]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c1e:	f023 0204 	bic.w	r2, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	493a      	ldr	r1, [pc, #232]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c3c:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c42:	f023 0218 	bic.w	r2, r3, #24
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	4931      	ldr	r1, [pc, #196]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d035      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c60:	4b2c      	ldr	r3, [pc, #176]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6c:	f7fd fb7a 	bl	8003364 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c72:	e009      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c74:	f7fd fb76 	bl	8003364 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d902      	bls.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	74fb      	strb	r3, [r7, #19]
        break;
 8005c86:	e005      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c88:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1ef      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005c94:	7cfb      	ldrb	r3, [r7, #19]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d113      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005c9a:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005caa:	491a      	ldr	r1, [pc, #104]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3320      	adds	r3, #32
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f921 	bl	8005f00 <RCCEx_PLLSAI2_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d017      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cd8:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce8:	490a      	ldr	r1, [pc, #40]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cfa:	d105      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	4a04      	ldr	r2, [pc, #16]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8005d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d08:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000

08005d18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d26:	4b72      	ldr	r3, [pc, #456]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00e      	beq.n	8005d50 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d32:	4b6f      	ldr	r3, [pc, #444]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0203 	and.w	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d103      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
       ||
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d142      	bne.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
 8005d4e:	e03f      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d018      	beq.n	8005d8a <RCCEx_PLLSAI1_Config+0x72>
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d825      	bhi.n	8005da8 <RCCEx_PLLSAI1_Config+0x90>
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d002      	beq.n	8005d66 <RCCEx_PLLSAI1_Config+0x4e>
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d009      	beq.n	8005d78 <RCCEx_PLLSAI1_Config+0x60>
 8005d64:	e020      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d66:	4b62      	ldr	r3, [pc, #392]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11d      	bne.n	8005dae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d76:	e01a      	b.n	8005dae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d78:	4b5d      	ldr	r3, [pc, #372]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d116      	bne.n	8005db2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d88:	e013      	b.n	8005db2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d8a:	4b59      	ldr	r3, [pc, #356]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d96:	4b56      	ldr	r3, [pc, #344]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005da6:	e006      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dac:	e004      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d108      	bne.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005dbe:	4b4c      	ldr	r3, [pc, #304]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f023 0203 	bic.w	r2, r3, #3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4949      	ldr	r1, [pc, #292]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f040 8086 	bne.w	8005ee4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dd8:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a44      	ldr	r2, [pc, #272]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de4:	f7fd fabe 	bl	8003364 <HAL_GetTick>
 8005de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dea:	e009      	b.n	8005e00 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dec:	f7fd faba 	bl	8003364 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d902      	bls.n	8005e00 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8005dfe:	e005      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e00:	4b3b      	ldr	r3, [pc, #236]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1ef      	bne.n	8005dec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d168      	bne.n	8005ee4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d113      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e18:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6892      	ldr	r2, [r2, #8]
 8005e24:	0211      	lsls	r1, r2, #8
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68d2      	ldr	r2, [r2, #12]
 8005e2a:	06d2      	lsls	r2, r2, #27
 8005e2c:	4311      	orrs	r1, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6852      	ldr	r2, [r2, #4]
 8005e32:	3a01      	subs	r2, #1
 8005e34:	0112      	lsls	r2, r2, #4
 8005e36:	430a      	orrs	r2, r1
 8005e38:	492d      	ldr	r1, [pc, #180]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	610b      	str	r3, [r1, #16]
 8005e3e:	e02d      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d115      	bne.n	8005e72 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e46:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6892      	ldr	r2, [r2, #8]
 8005e52:	0211      	lsls	r1, r2, #8
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6912      	ldr	r2, [r2, #16]
 8005e58:	0852      	lsrs	r2, r2, #1
 8005e5a:	3a01      	subs	r2, #1
 8005e5c:	0552      	lsls	r2, r2, #21
 8005e5e:	4311      	orrs	r1, r2
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6852      	ldr	r2, [r2, #4]
 8005e64:	3a01      	subs	r2, #1
 8005e66:	0112      	lsls	r2, r2, #4
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	4921      	ldr	r1, [pc, #132]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]
 8005e70:	e014      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e72:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	4b21      	ldr	r3, [pc, #132]	; (8005efc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6892      	ldr	r2, [r2, #8]
 8005e7e:	0211      	lsls	r1, r2, #8
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6952      	ldr	r2, [r2, #20]
 8005e84:	0852      	lsrs	r2, r2, #1
 8005e86:	3a01      	subs	r2, #1
 8005e88:	0652      	lsls	r2, r2, #25
 8005e8a:	4311      	orrs	r1, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6852      	ldr	r2, [r2, #4]
 8005e90:	3a01      	subs	r2, #1
 8005e92:	0112      	lsls	r2, r2, #4
 8005e94:	430a      	orrs	r2, r1
 8005e96:	4916      	ldr	r1, [pc, #88]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea8:	f7fd fa5c 	bl	8003364 <HAL_GetTick>
 8005eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eae:	e009      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eb0:	f7fd fa58 	bl	8003364 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d902      	bls.n	8005ec4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ec2:	e005      	b.n	8005ed0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0ef      	beq.n	8005eb0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ed6:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	4904      	ldr	r1, [pc, #16]	; (8005ef0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	07ff800f 	.word	0x07ff800f
 8005ef8:	ff9f800f 	.word	0xff9f800f
 8005efc:	f9ff800f 	.word	0xf9ff800f

08005f00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f0e:	4b72      	ldr	r3, [pc, #456]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00e      	beq.n	8005f38 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f1a:	4b6f      	ldr	r3, [pc, #444]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f003 0203 	and.w	r2, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d103      	bne.n	8005f32 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d142      	bne.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e03f      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d018      	beq.n	8005f72 <RCCEx_PLLSAI2_Config+0x72>
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d825      	bhi.n	8005f90 <RCCEx_PLLSAI2_Config+0x90>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d002      	beq.n	8005f4e <RCCEx_PLLSAI2_Config+0x4e>
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d009      	beq.n	8005f60 <RCCEx_PLLSAI2_Config+0x60>
 8005f4c:	e020      	b.n	8005f90 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f4e:	4b62      	ldr	r3, [pc, #392]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d11d      	bne.n	8005f96 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f5e:	e01a      	b.n	8005f96 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f60:	4b5d      	ldr	r3, [pc, #372]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d116      	bne.n	8005f9a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f70:	e013      	b.n	8005f9a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f72:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f7e:	4b56      	ldr	r3, [pc, #344]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f8e:	e006      	b.n	8005f9e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
      break;
 8005f94:	e004      	b.n	8005fa0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f96:	bf00      	nop
 8005f98:	e002      	b.n	8005fa0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e000      	b.n	8005fa0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005fa6:	4b4c      	ldr	r3, [pc, #304]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f023 0203 	bic.w	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4949      	ldr	r1, [pc, #292]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 8086 	bne.w	80060cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fc0:	4b45      	ldr	r3, [pc, #276]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a44      	ldr	r2, [pc, #272]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fcc:	f7fd f9ca 	bl	8003364 <HAL_GetTick>
 8005fd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fd2:	e009      	b.n	8005fe8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fd4:	f7fd f9c6 	bl	8003364 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d902      	bls.n	8005fe8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	73fb      	strb	r3, [r7, #15]
        break;
 8005fe6:	e005      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fe8:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1ef      	bne.n	8005fd4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d168      	bne.n	80060cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d113      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006000:	4b35      	ldr	r3, [pc, #212]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	4b35      	ldr	r3, [pc, #212]	; (80060dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8006006:	4013      	ands	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6892      	ldr	r2, [r2, #8]
 800600c:	0211      	lsls	r1, r2, #8
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68d2      	ldr	r2, [r2, #12]
 8006012:	06d2      	lsls	r2, r2, #27
 8006014:	4311      	orrs	r1, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6852      	ldr	r2, [r2, #4]
 800601a:	3a01      	subs	r2, #1
 800601c:	0112      	lsls	r2, r2, #4
 800601e:	430a      	orrs	r2, r1
 8006020:	492d      	ldr	r1, [pc, #180]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	614b      	str	r3, [r1, #20]
 8006026:	e02d      	b.n	8006084 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d115      	bne.n	800605a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800602e:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006034:	4013      	ands	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6892      	ldr	r2, [r2, #8]
 800603a:	0211      	lsls	r1, r2, #8
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6912      	ldr	r2, [r2, #16]
 8006040:	0852      	lsrs	r2, r2, #1
 8006042:	3a01      	subs	r2, #1
 8006044:	0552      	lsls	r2, r2, #21
 8006046:	4311      	orrs	r1, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6852      	ldr	r2, [r2, #4]
 800604c:	3a01      	subs	r2, #1
 800604e:	0112      	lsls	r2, r2, #4
 8006050:	430a      	orrs	r2, r1
 8006052:	4921      	ldr	r1, [pc, #132]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006054:	4313      	orrs	r3, r2
 8006056:	614b      	str	r3, [r1, #20]
 8006058:	e014      	b.n	8006084 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	4b21      	ldr	r3, [pc, #132]	; (80060e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006060:	4013      	ands	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6892      	ldr	r2, [r2, #8]
 8006066:	0211      	lsls	r1, r2, #8
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6952      	ldr	r2, [r2, #20]
 800606c:	0852      	lsrs	r2, r2, #1
 800606e:	3a01      	subs	r2, #1
 8006070:	0652      	lsls	r2, r2, #25
 8006072:	4311      	orrs	r1, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6852      	ldr	r2, [r2, #4]
 8006078:	3a01      	subs	r2, #1
 800607a:	0112      	lsls	r2, r2, #4
 800607c:	430a      	orrs	r2, r1
 800607e:	4916      	ldr	r1, [pc, #88]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006080:	4313      	orrs	r3, r2
 8006082:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006084:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800608a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006090:	f7fd f968 	bl	8003364 <HAL_GetTick>
 8006094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006096:	e009      	b.n	80060ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006098:	f7fd f964 	bl	8003364 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d902      	bls.n	80060ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	73fb      	strb	r3, [r7, #15]
          break;
 80060aa:	e005      	b.n	80060b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0ef      	beq.n	8006098 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060be:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	4904      	ldr	r1, [pc, #16]	; (80060d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40021000 	.word	0x40021000
 80060dc:	07ff800f 	.word	0x07ff800f
 80060e0:	ff9f800f 	.word	0xff9f800f
 80060e4:	f9ff800f 	.word	0xf9ff800f

080060e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e049      	b.n	800618e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fc fef0 	bl	8002ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f000 fde8 	bl	8006cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d001      	beq.n	80061b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e047      	b.n	8006240 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a23      	ldr	r2, [pc, #140]	; (800624c <HAL_TIM_Base_Start+0xb4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01d      	beq.n	80061fe <HAL_TIM_Base_Start+0x66>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ca:	d018      	beq.n	80061fe <HAL_TIM_Base_Start+0x66>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <HAL_TIM_Base_Start+0xb8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <HAL_TIM_Base_Start+0x66>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <HAL_TIM_Base_Start+0xbc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00e      	beq.n	80061fe <HAL_TIM_Base_Start+0x66>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1c      	ldr	r2, [pc, #112]	; (8006258 <HAL_TIM_Base_Start+0xc0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d009      	beq.n	80061fe <HAL_TIM_Base_Start+0x66>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1b      	ldr	r2, [pc, #108]	; (800625c <HAL_TIM_Base_Start+0xc4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d004      	beq.n	80061fe <HAL_TIM_Base_Start+0x66>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a19      	ldr	r2, [pc, #100]	; (8006260 <HAL_TIM_Base_Start+0xc8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d115      	bne.n	800622a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	4b17      	ldr	r3, [pc, #92]	; (8006264 <HAL_TIM_Base_Start+0xcc>)
 8006206:	4013      	ands	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b06      	cmp	r3, #6
 800620e:	d015      	beq.n	800623c <HAL_TIM_Base_Start+0xa4>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006216:	d011      	beq.n	800623c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	e008      	b.n	800623c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e000      	b.n	800623e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40013400 	.word	0x40013400
 8006260:	40014000 	.word	0x40014000
 8006264:	00010007 	.word	0x00010007

08006268 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	f241 1311 	movw	r3, #4369	; 0x1111
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10f      	bne.n	80062a0 <HAL_TIM_Base_Stop+0x38>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	f240 4344 	movw	r3, #1092	; 0x444
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d107      	bne.n	80062a0 <HAL_TIM_Base_Stop+0x38>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e049      	b.n	800635c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f841 	bl	8006364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 fd01 	bl	8006cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_TIM_PWM_Start+0x24>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e03c      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d109      	bne.n	80063b6 <HAL_TIM_PWM_Start+0x3e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	e02f      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d109      	bne.n	80063d0 <HAL_TIM_PWM_Start+0x58>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e022      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d109      	bne.n	80063ea <HAL_TIM_PWM_Start+0x72>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	bf14      	ite	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	2300      	moveq	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	e015      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d109      	bne.n	8006404 <HAL_TIM_PWM_Start+0x8c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	e008      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e09c      	b.n	8006558 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xb6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800642c:	e023      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xc6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800643c:	e01b      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0xd6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800644c:	e013      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b0c      	cmp	r3, #12
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Start+0xe6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800645c:	e00b      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b10      	cmp	r3, #16
 8006462:	d104      	bne.n	800646e <HAL_TIM_PWM_Start+0xf6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800646c:	e003      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2201      	movs	r2, #1
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f001 f846 	bl	8007510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a35      	ldr	r2, [pc, #212]	; (8006560 <HAL_TIM_PWM_Start+0x1e8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_TIM_PWM_Start+0x13e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a34      	ldr	r2, [pc, #208]	; (8006564 <HAL_TIM_PWM_Start+0x1ec>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIM_PWM_Start+0x13e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a32      	ldr	r2, [pc, #200]	; (8006568 <HAL_TIM_PWM_Start+0x1f0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIM_PWM_Start+0x13e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a31      	ldr	r2, [pc, #196]	; (800656c <HAL_TIM_PWM_Start+0x1f4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIM_PWM_Start+0x13e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a2f      	ldr	r2, [pc, #188]	; (8006570 <HAL_TIM_PWM_Start+0x1f8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_PWM_Start+0x142>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <HAL_TIM_PWM_Start+0x144>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a22      	ldr	r2, [pc, #136]	; (8006560 <HAL_TIM_PWM_Start+0x1e8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_TIM_PWM_Start+0x19e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e2:	d018      	beq.n	8006516 <HAL_TIM_PWM_Start+0x19e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a22      	ldr	r2, [pc, #136]	; (8006574 <HAL_TIM_PWM_Start+0x1fc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_TIM_PWM_Start+0x19e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a21      	ldr	r2, [pc, #132]	; (8006578 <HAL_TIM_PWM_Start+0x200>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIM_PWM_Start+0x19e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1f      	ldr	r2, [pc, #124]	; (800657c <HAL_TIM_PWM_Start+0x204>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_TIM_PWM_Start+0x19e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a17      	ldr	r2, [pc, #92]	; (8006564 <HAL_TIM_PWM_Start+0x1ec>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIM_PWM_Start+0x19e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a15      	ldr	r2, [pc, #84]	; (8006568 <HAL_TIM_PWM_Start+0x1f0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d115      	bne.n	8006542 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	4b18      	ldr	r3, [pc, #96]	; (8006580 <HAL_TIM_PWM_Start+0x208>)
 800651e:	4013      	ands	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b06      	cmp	r3, #6
 8006526:	d015      	beq.n	8006554 <HAL_TIM_PWM_Start+0x1dc>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652e:	d011      	beq.n	8006554 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006540:	e008      	b.n	8006554 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e000      	b.n	8006556 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006554:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40000c00 	.word	0x40000c00
 8006580:	00010007 	.word	0x00010007

08006584 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f000 ffba 	bl	8007510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a3e      	ldr	r2, [pc, #248]	; (800669c <HAL_TIM_PWM_Stop+0x118>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_TIM_PWM_Stop+0x4a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3d      	ldr	r2, [pc, #244]	; (80066a0 <HAL_TIM_PWM_Stop+0x11c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_TIM_PWM_Stop+0x4a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a3b      	ldr	r2, [pc, #236]	; (80066a4 <HAL_TIM_PWM_Stop+0x120>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_TIM_PWM_Stop+0x4a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a3a      	ldr	r2, [pc, #232]	; (80066a8 <HAL_TIM_PWM_Stop+0x124>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_TIM_PWM_Stop+0x4a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a38      	ldr	r2, [pc, #224]	; (80066ac <HAL_TIM_PWM_Stop+0x128>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_PWM_Stop+0x4e>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <HAL_TIM_PWM_Stop+0x50>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d017      	beq.n	8006608 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6a1a      	ldr	r2, [r3, #32]
 80065de:	f241 1311 	movw	r3, #4369	; 0x1111
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <HAL_TIM_PWM_Stop+0x84>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	f240 4344 	movw	r3, #1092	; 0x444
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <HAL_TIM_PWM_Stop+0x84>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006606:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006612:	4013      	ands	r3, r2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10f      	bne.n	8006638 <HAL_TIM_PWM_Stop+0xb4>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	f240 4344 	movw	r3, #1092	; 0x444
 8006622:	4013      	ands	r3, r2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d107      	bne.n	8006638 <HAL_TIM_PWM_Stop+0xb4>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0201 	bic.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_TIM_PWM_Stop+0xc4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006646:	e023      	b.n	8006690 <HAL_TIM_PWM_Stop+0x10c>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d104      	bne.n	8006658 <HAL_TIM_PWM_Stop+0xd4>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006656:	e01b      	b.n	8006690 <HAL_TIM_PWM_Stop+0x10c>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b08      	cmp	r3, #8
 800665c:	d104      	bne.n	8006668 <HAL_TIM_PWM_Stop+0xe4>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006666:	e013      	b.n	8006690 <HAL_TIM_PWM_Stop+0x10c>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b0c      	cmp	r3, #12
 800666c:	d104      	bne.n	8006678 <HAL_TIM_PWM_Stop+0xf4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006676:	e00b      	b.n	8006690 <HAL_TIM_PWM_Stop+0x10c>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b10      	cmp	r3, #16
 800667c:	d104      	bne.n	8006688 <HAL_TIM_PWM_Stop+0x104>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006686:	e003      	b.n	8006690 <HAL_TIM_PWM_Stop+0x10c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40013400 	.word	0x40013400
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d122      	bne.n	800670c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d11b      	bne.n	800670c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0202 	mvn.w	r2, #2
 80066dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fae3 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fad5 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fae6 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d122      	bne.n	8006760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d11b      	bne.n	8006760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0204 	mvn.w	r2, #4
 8006730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fab9 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 faab 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fabc 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b08      	cmp	r3, #8
 800676c:	d122      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b08      	cmp	r3, #8
 800677a:	d11b      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0208 	mvn.w	r2, #8
 8006784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2204      	movs	r2, #4
 800678a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa8f 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 80067a0:	e005      	b.n	80067ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa81 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fa92 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b10      	cmp	r3, #16
 80067c0:	d122      	bne.n	8006808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d11b      	bne.n	8006808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0210 	mvn.w	r2, #16
 80067d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2208      	movs	r2, #8
 80067de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa65 	bl	8006cbe <HAL_TIM_IC_CaptureCallback>
 80067f4:	e005      	b.n	8006802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa57 	bl	8006caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fa68 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d10e      	bne.n	8006834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b01      	cmp	r3, #1
 8006822:	d107      	bne.n	8006834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0201 	mvn.w	r2, #1
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fb fd42 	bl	80022b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b80      	cmp	r3, #128	; 0x80
 8006840:	d10e      	bne.n	8006860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d107      	bne.n	8006860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 ff10 	bl	8007680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686e:	d10e      	bne.n	800688e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d107      	bne.n	800688e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 ff03 	bl	8007694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d10e      	bne.n	80068ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d107      	bne.n	80068ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa16 	bl	8006ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d10e      	bne.n	80068e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d107      	bne.n	80068e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f06f 0220 	mvn.w	r2, #32
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fec3 	bl	800766c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800690a:	2302      	movs	r3, #2
 800690c:	e0ff      	b.n	8006b0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b14      	cmp	r3, #20
 800691a:	f200 80f0 	bhi.w	8006afe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006979 	.word	0x08006979
 8006928:	08006aff 	.word	0x08006aff
 800692c:	08006aff 	.word	0x08006aff
 8006930:	08006aff 	.word	0x08006aff
 8006934:	080069b9 	.word	0x080069b9
 8006938:	08006aff 	.word	0x08006aff
 800693c:	08006aff 	.word	0x08006aff
 8006940:	08006aff 	.word	0x08006aff
 8006944:	080069fb 	.word	0x080069fb
 8006948:	08006aff 	.word	0x08006aff
 800694c:	08006aff 	.word	0x08006aff
 8006950:	08006aff 	.word	0x08006aff
 8006954:	08006a3b 	.word	0x08006a3b
 8006958:	08006aff 	.word	0x08006aff
 800695c:	08006aff 	.word	0x08006aff
 8006960:	08006aff 	.word	0x08006aff
 8006964:	08006a7d 	.word	0x08006a7d
 8006968:	08006aff 	.word	0x08006aff
 800696c:	08006aff 	.word	0x08006aff
 8006970:	08006aff 	.word	0x08006aff
 8006974:	08006abd 	.word	0x08006abd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fa56 	bl	8006e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0208 	orr.w	r2, r2, #8
 8006992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0204 	bic.w	r2, r2, #4
 80069a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6999      	ldr	r1, [r3, #24]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	619a      	str	r2, [r3, #24]
      break;
 80069b6:	e0a5      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fac6 	bl	8006f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6999      	ldr	r1, [r3, #24]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	021a      	lsls	r2, r3, #8
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	619a      	str	r2, [r3, #24]
      break;
 80069f8:	e084      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fb2f 	bl	8007064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0208 	orr.w	r2, r2, #8
 8006a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0204 	bic.w	r2, r2, #4
 8006a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69d9      	ldr	r1, [r3, #28]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	691a      	ldr	r2, [r3, #16]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	61da      	str	r2, [r3, #28]
      break;
 8006a38:	e064      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fb97 	bl	8007174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69da      	ldr	r2, [r3, #28]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69d9      	ldr	r1, [r3, #28]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	021a      	lsls	r2, r3, #8
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	61da      	str	r2, [r3, #28]
      break;
 8006a7a:	e043      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fbe0 	bl	8007248 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0208 	orr.w	r2, r2, #8
 8006a96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0204 	bic.w	r2, r2, #4
 8006aa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006aba:	e023      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fc24 	bl	8007310 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	021a      	lsls	r2, r3, #8
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006afc:	e002      	b.n	8006b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	75fb      	strb	r3, [r7, #23]
      break;
 8006b02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop

08006b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_TIM_ConfigClockSource+0x1c>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e0b6      	b.n	8006ca2 <HAL_TIM_ConfigClockSource+0x18a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b70:	d03e      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0xd8>
 8006b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b76:	f200 8087 	bhi.w	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7e:	f000 8086 	beq.w	8006c8e <HAL_TIM_ConfigClockSource+0x176>
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b86:	d87f      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b88:	2b70      	cmp	r3, #112	; 0x70
 8006b8a:	d01a      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0xaa>
 8006b8c:	2b70      	cmp	r3, #112	; 0x70
 8006b8e:	d87b      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b90:	2b60      	cmp	r3, #96	; 0x60
 8006b92:	d050      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0x11e>
 8006b94:	2b60      	cmp	r3, #96	; 0x60
 8006b96:	d877      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006b98:	2b50      	cmp	r3, #80	; 0x50
 8006b9a:	d03c      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0xfe>
 8006b9c:	2b50      	cmp	r3, #80	; 0x50
 8006b9e:	d873      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	d058      	beq.n	8006c56 <HAL_TIM_ConfigClockSource+0x13e>
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	d86f      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006ba8:	2b30      	cmp	r3, #48	; 0x30
 8006baa:	d064      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bac:	2b30      	cmp	r3, #48	; 0x30
 8006bae:	d86b      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d060      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d867      	bhi.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d05c      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d05a      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x15e>
 8006bc0:	e062      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6899      	ldr	r1, [r3, #8]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f000 fc7d 	bl	80074d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	609a      	str	r2, [r3, #8]
      break;
 8006bee:	e04f      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6899      	ldr	r1, [r3, #8]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f000 fc66 	bl	80074d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c12:	609a      	str	r2, [r3, #8]
      break;
 8006c14:	e03c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6859      	ldr	r1, [r3, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f000 fbda 	bl	80073dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2150      	movs	r1, #80	; 0x50
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fc33 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006c34:	e02c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6859      	ldr	r1, [r3, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f000 fbf9 	bl	800743a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2160      	movs	r1, #96	; 0x60
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fc23 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006c54:	e01c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6859      	ldr	r1, [r3, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f000 fbba 	bl	80073dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2140      	movs	r1, #64	; 0x40
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fc13 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006c74:	e00c      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f000 fc0a 	bl	800749a <TIM_ITRx_SetConfig>
      break;
 8006c86:	e003      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c8c:	e000      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a40      	ldr	r2, [pc, #256]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d013      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d00f      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00b      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3c      	ldr	r2, [pc, #240]	; (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3b      	ldr	r2, [pc, #236]	; (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3a      	ldr	r2, [pc, #232]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d108      	bne.n	8006d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2f      	ldr	r2, [pc, #188]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01f      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5c:	d01b      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d017      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2b      	ldr	r2, [pc, #172]	; (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2a      	ldr	r2, [pc, #168]	; (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a28      	ldr	r2, [pc, #160]	; (8006e24 <TIM_Base_SetConfig+0x128>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a27      	ldr	r2, [pc, #156]	; (8006e28 <TIM_Base_SetConfig+0x12c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_Base_SetConfig+0x9a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <TIM_Base_SetConfig+0x130>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d108      	bne.n	8006da8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a10      	ldr	r2, [pc, #64]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00f      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a12      	ldr	r2, [pc, #72]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a11      	ldr	r2, [pc, #68]	; (8006e24 <TIM_Base_SetConfig+0x128>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a10      	ldr	r2, [pc, #64]	; (8006e28 <TIM_Base_SetConfig+0x12c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <TIM_Base_SetConfig+0x130>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d103      	bne.n	8006dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	615a      	str	r2, [r3, #20]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 0302 	bic.w	r3, r3, #2
 8006e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a2c      	ldr	r2, [pc, #176]	; (8006f3c <TIM_OC1_SetConfig+0x10c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00f      	beq.n	8006eb0 <TIM_OC1_SetConfig+0x80>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a2b      	ldr	r2, [pc, #172]	; (8006f40 <TIM_OC1_SetConfig+0x110>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00b      	beq.n	8006eb0 <TIM_OC1_SetConfig+0x80>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <TIM_OC1_SetConfig+0x114>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d007      	beq.n	8006eb0 <TIM_OC1_SetConfig+0x80>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a29      	ldr	r2, [pc, #164]	; (8006f48 <TIM_OC1_SetConfig+0x118>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_OC1_SetConfig+0x80>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a28      	ldr	r2, [pc, #160]	; (8006f4c <TIM_OC1_SetConfig+0x11c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d10c      	bne.n	8006eca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f023 0308 	bic.w	r3, r3, #8
 8006eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f023 0304 	bic.w	r3, r3, #4
 8006ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1b      	ldr	r2, [pc, #108]	; (8006f3c <TIM_OC1_SetConfig+0x10c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00f      	beq.n	8006ef2 <TIM_OC1_SetConfig+0xc2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1a      	ldr	r2, [pc, #104]	; (8006f40 <TIM_OC1_SetConfig+0x110>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00b      	beq.n	8006ef2 <TIM_OC1_SetConfig+0xc2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <TIM_OC1_SetConfig+0x114>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d007      	beq.n	8006ef2 <TIM_OC1_SetConfig+0xc2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <TIM_OC1_SetConfig+0x118>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_OC1_SetConfig+0xc2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a17      	ldr	r2, [pc, #92]	; (8006f4c <TIM_OC1_SetConfig+0x11c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d111      	bne.n	8006f16 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	621a      	str	r2, [r3, #32]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40013400 	.word	0x40013400
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800

08006f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0210 	bic.w	r2, r3, #16
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a28      	ldr	r2, [pc, #160]	; (8007050 <TIM_OC2_SetConfig+0x100>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC2_SetConfig+0x6c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a27      	ldr	r2, [pc, #156]	; (8007054 <TIM_OC2_SetConfig+0x104>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d10d      	bne.n	8006fd8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <TIM_OC2_SetConfig+0x100>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00f      	beq.n	8007000 <TIM_OC2_SetConfig+0xb0>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <TIM_OC2_SetConfig+0x104>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00b      	beq.n	8007000 <TIM_OC2_SetConfig+0xb0>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a1b      	ldr	r2, [pc, #108]	; (8007058 <TIM_OC2_SetConfig+0x108>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d007      	beq.n	8007000 <TIM_OC2_SetConfig+0xb0>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a1a      	ldr	r2, [pc, #104]	; (800705c <TIM_OC2_SetConfig+0x10c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_OC2_SetConfig+0xb0>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a19      	ldr	r2, [pc, #100]	; (8007060 <TIM_OC2_SetConfig+0x110>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d113      	bne.n	8007028 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40012c00 	.word	0x40012c00
 8007054:	40013400 	.word	0x40013400
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800

08007064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a27      	ldr	r2, [pc, #156]	; (8007160 <TIM_OC3_SetConfig+0xfc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_OC3_SetConfig+0x6a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a26      	ldr	r2, [pc, #152]	; (8007164 <TIM_OC3_SetConfig+0x100>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10d      	bne.n	80070ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	021b      	lsls	r3, r3, #8
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <TIM_OC3_SetConfig+0xfc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00f      	beq.n	8007112 <TIM_OC3_SetConfig+0xae>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <TIM_OC3_SetConfig+0x100>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00b      	beq.n	8007112 <TIM_OC3_SetConfig+0xae>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <TIM_OC3_SetConfig+0x104>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d007      	beq.n	8007112 <TIM_OC3_SetConfig+0xae>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a19      	ldr	r2, [pc, #100]	; (800716c <TIM_OC3_SetConfig+0x108>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d003      	beq.n	8007112 <TIM_OC3_SetConfig+0xae>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a18      	ldr	r2, [pc, #96]	; (8007170 <TIM_OC3_SetConfig+0x10c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d113      	bne.n	800713a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	621a      	str	r2, [r3, #32]
}
 8007154:	bf00      	nop
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40013400 	.word	0x40013400
 8007168:	40014000 	.word	0x40014000
 800716c:	40014400 	.word	0x40014400
 8007170:	40014800 	.word	0x40014800

08007174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	031b      	lsls	r3, r3, #12
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a18      	ldr	r2, [pc, #96]	; (8007234 <TIM_OC4_SetConfig+0xc0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00f      	beq.n	80071f8 <TIM_OC4_SetConfig+0x84>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a17      	ldr	r2, [pc, #92]	; (8007238 <TIM_OC4_SetConfig+0xc4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00b      	beq.n	80071f8 <TIM_OC4_SetConfig+0x84>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a16      	ldr	r2, [pc, #88]	; (800723c <TIM_OC4_SetConfig+0xc8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_OC4_SetConfig+0x84>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a15      	ldr	r2, [pc, #84]	; (8007240 <TIM_OC4_SetConfig+0xcc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC4_SetConfig+0x84>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a14      	ldr	r2, [pc, #80]	; (8007244 <TIM_OC4_SetConfig+0xd0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d109      	bne.n	800720c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	019b      	lsls	r3, r3, #6
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40013400 	.word	0x40013400
 800723c:	40014000 	.word	0x40014000
 8007240:	40014400 	.word	0x40014400
 8007244:	40014800 	.word	0x40014800

08007248 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800728c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	041b      	lsls	r3, r3, #16
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a17      	ldr	r2, [pc, #92]	; (80072fc <TIM_OC5_SetConfig+0xb4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00f      	beq.n	80072c2 <TIM_OC5_SetConfig+0x7a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a16      	ldr	r2, [pc, #88]	; (8007300 <TIM_OC5_SetConfig+0xb8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00b      	beq.n	80072c2 <TIM_OC5_SetConfig+0x7a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a15      	ldr	r2, [pc, #84]	; (8007304 <TIM_OC5_SetConfig+0xbc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d007      	beq.n	80072c2 <TIM_OC5_SetConfig+0x7a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a14      	ldr	r2, [pc, #80]	; (8007308 <TIM_OC5_SetConfig+0xc0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <TIM_OC5_SetConfig+0x7a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a13      	ldr	r2, [pc, #76]	; (800730c <TIM_OC5_SetConfig+0xc4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d109      	bne.n	80072d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	621a      	str	r2, [r3, #32]
}
 80072f0:	bf00      	nop
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	40012c00 	.word	0x40012c00
 8007300:	40013400 	.word	0x40013400
 8007304:	40014000 	.word	0x40014000
 8007308:	40014400 	.word	0x40014400
 800730c:	40014800 	.word	0x40014800

08007310 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800733e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	051b      	lsls	r3, r3, #20
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a18      	ldr	r2, [pc, #96]	; (80073c8 <TIM_OC6_SetConfig+0xb8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00f      	beq.n	800738c <TIM_OC6_SetConfig+0x7c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a17      	ldr	r2, [pc, #92]	; (80073cc <TIM_OC6_SetConfig+0xbc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00b      	beq.n	800738c <TIM_OC6_SetConfig+0x7c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a16      	ldr	r2, [pc, #88]	; (80073d0 <TIM_OC6_SetConfig+0xc0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d007      	beq.n	800738c <TIM_OC6_SetConfig+0x7c>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a15      	ldr	r2, [pc, #84]	; (80073d4 <TIM_OC6_SetConfig+0xc4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_OC6_SetConfig+0x7c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <TIM_OC6_SetConfig+0xc8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d109      	bne.n	80073a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007392:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	029b      	lsls	r3, r3, #10
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40013400 	.word	0x40013400
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800

080073dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f023 0201 	bic.w	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f023 030a 	bic.w	r3, r3, #10
 8007418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800743a:	b480      	push	{r7}
 800743c:	b087      	sub	sp, #28
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f023 0210 	bic.w	r2, r3, #16
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f043 0307 	orr.w	r3, r3, #7
 80074bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	609a      	str	r2, [r3, #8]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	021a      	lsls	r2, r3, #8
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	609a      	str	r2, [r3, #8]
}
 8007504:	bf00      	nop
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	2201      	movs	r2, #1
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	43db      	mvns	r3, r3
 8007532:	401a      	ands	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1a      	ldr	r2, [r3, #32]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	6879      	ldr	r1, [r7, #4]
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	431a      	orrs	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007570:	2302      	movs	r3, #2
 8007572:	e068      	b.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a2e      	ldr	r2, [pc, #184]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a2d      	ldr	r2, [pc, #180]	; (8007658 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d108      	bne.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d01d      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e6:	d018      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1b      	ldr	r2, [pc, #108]	; (800765c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d013      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a1a      	ldr	r2, [pc, #104]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d00e      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a18      	ldr	r2, [pc, #96]	; (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d009      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a13      	ldr	r2, [pc, #76]	; (8007658 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d004      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a14      	ldr	r2, [pc, #80]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d10c      	bne.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	4313      	orrs	r3, r2
 800762a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40012c00 	.word	0x40012c00
 8007658:	40013400 	.word	0x40013400
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40014000 	.word	0x40014000

0800766c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e042      	b.n	8007740 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fb fba9 	bl	8002e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2224      	movs	r2, #36	; 0x24
 80076d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0201 	bic.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fc50 	bl	8007f90 <UART_SetConfig>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e022      	b.n	8007740 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 ff40 	bl	8008588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ffc7 	bl	80086cc <UART_CheckIdleState>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775e:	2b20      	cmp	r3, #32
 8007760:	f040 8083 	bne.w	800786a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_UART_Transmit+0x28>
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e07b      	b.n	800786c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_UART_Transmit+0x3a>
 800777e:	2302      	movs	r3, #2
 8007780:	e074      	b.n	800786c <HAL_UART_Transmit+0x124>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2221      	movs	r2, #33	; 0x21
 8007796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800779a:	f7fb fde3 	bl	8003364 <HAL_GetTick>
 800779e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	88fa      	ldrh	r2, [r7, #6]
 80077a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b8:	d108      	bne.n	80077cc <HAL_UART_Transmit+0x84>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e003      	b.n	80077d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80077dc:	e02c      	b.n	8007838 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2200      	movs	r2, #0
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 ffba 	bl	8008762 <UART_WaitOnFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e039      	b.n	800786c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800780c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	3302      	adds	r3, #2
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e007      	b.n	8007826 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3301      	adds	r3, #1
 8007824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1cc      	bne.n	80077de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2200      	movs	r2, #0
 800784c:	2140      	movs	r1, #64	; 0x40
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 ff87 	bl	8008762 <UART_WaitOnFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e006      	b.n	800786c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e000      	b.n	800786c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800786a:	2302      	movs	r3, #2
  }
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007888:	2b20      	cmp	r3, #32
 800788a:	d142      	bne.n	8007912 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_UART_Receive_IT+0x24>
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e03b      	b.n	8007914 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Receive_IT+0x36>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e034      	b.n	8007914 <HAL_UART_Receive_IT+0xa0>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a17      	ldr	r2, [pc, #92]	; (800791c <HAL_UART_Receive_IT+0xa8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d01f      	beq.n	8007902 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d018      	beq.n	8007902 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	613b      	str	r3, [r7, #16]
   return(result);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	623b      	str	r3, [r7, #32]
 80078f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	69f9      	ldr	r1, [r7, #28]
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e6      	bne.n	80078d0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	461a      	mov	r2, r3
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 fff3 	bl	80088f4 <UART_Start_Receive_IT>
 800790e:	4603      	mov	r3, r0
 8007910:	e000      	b.n	8007914 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	; 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	40008000 	.word	0x40008000

08007920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b0ba      	sub	sp, #232	; 0xe8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800794a:	f640 030f 	movw	r3, #2063	; 0x80f
 800794e:	4013      	ands	r3, r2
 8007950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007958:	2b00      	cmp	r3, #0
 800795a:	d11b      	bne.n	8007994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d015      	beq.n	8007994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d009      	beq.n	8007994 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 82d6 	beq.w	8007f36 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
      }
      return;
 8007992:	e2d0      	b.n	8007f36 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 811f 	beq.w	8007bdc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800799e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079a2:	4b8b      	ldr	r3, [pc, #556]	; (8007bd0 <HAL_UART_IRQHandler+0x2b0>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079ae:	4b89      	ldr	r3, [pc, #548]	; (8007bd4 <HAL_UART_IRQHandler+0x2b4>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8112 	beq.w	8007bdc <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d011      	beq.n	80079e8 <HAL_UART_IRQHandler+0xc8>
 80079c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2201      	movs	r2, #1
 80079d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079de:	f043 0201 	orr.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d011      	beq.n	8007a18 <HAL_UART_IRQHandler+0xf8>
 80079f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2202      	movs	r2, #2
 8007a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a0e:	f043 0204 	orr.w	r2, r3, #4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d011      	beq.n	8007a48 <HAL_UART_IRQHandler+0x128>
 8007a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2204      	movs	r2, #4
 8007a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3e:	f043 0202 	orr.w	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d017      	beq.n	8007a84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a64:	4b5a      	ldr	r3, [pc, #360]	; (8007bd0 <HAL_UART_IRQHandler+0x2b0>)
 8007a66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2208      	movs	r2, #8
 8007a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7a:	f043 0208 	orr.w	r2, r3, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d012      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x196>
 8007a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aac:	f043 0220 	orr.w	r2, r3, #32
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 823c 	beq.w	8007f3a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d013      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d105      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d005      	beq.n	8007b1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d04f      	beq.n	8007bba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f814 	bl	8008b48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d141      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1d9      	bne.n	8007b2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d013      	beq.n	8007baa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b86:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <HAL_UART_IRQHandler+0x2b8>)
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fb fd85 	bl	800369e <HAL_DMA_Abort_IT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d017      	beq.n	8007bca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba8:	e00f      	b.n	8007bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9da 	bl	8007f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	e00b      	b.n	8007bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9d6 	bl	8007f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	e007      	b.n	8007bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9d2 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007bc8:	e1b7      	b.n	8007f3a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bca:	bf00      	nop
    return;
 8007bcc:	e1b5      	b.n	8007f3a <HAL_UART_IRQHandler+0x61a>
 8007bce:	bf00      	nop
 8007bd0:	10000001 	.word	0x10000001
 8007bd4:	04000120 	.word	0x04000120
 8007bd8:	08008c15 	.word	0x08008c15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	f040 814a 	bne.w	8007e7a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 8143 	beq.w	8007e7a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 813c 	beq.w	8007e7a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2210      	movs	r2, #16
 8007c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	f040 80b5 	bne.w	8007d84 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 8187 	beq.w	8007f3e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	f080 817f 	bcs.w	8007f3e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f040 8086 	bne.w	8007d68 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1da      	bne.n	8007c5c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e1      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3308      	adds	r3, #8
 8007d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e3      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d38:	f023 0310 	bic.w	r3, r3, #16
 8007d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e4      	bne.n	8007d28 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fb fc3f 	bl	80035e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8fb 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d82:	e0dc      	b.n	8007f3e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80ce 	beq.w	8007f42 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80c9 	beq.w	8007f42 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e4      	bne.n	8007db0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	623b      	str	r3, [r7, #32]
   return(result);
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dfc:	f023 0301 	bic.w	r3, r3, #1
 8007e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3308      	adds	r3, #8
 8007e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e1      	bne.n	8007de6 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	69b9      	ldr	r1, [r7, #24]
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	617b      	str	r3, [r7, #20]
   return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e4      	bne.n	8007e36 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f880 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e78:	e063      	b.n	8007f42 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00e      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x584>
 8007e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 fb57 	bl	8009550 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ea2:	e051      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d014      	beq.n	8007eda <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d105      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d03a      	beq.n	8007f46 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
    }
    return;
 8007ed8:	e035      	b.n	8007f46 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_UART_IRQHandler+0x5da>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fea4 	bl	8008c40 <UART_EndTransmit_IT>
    return;
 8007ef8:	e026      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <HAL_UART_IRQHandler+0x5fa>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fb30 	bl	8009578 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f18:	e016      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d010      	beq.n	8007f48 <HAL_UART_IRQHandler+0x628>
 8007f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da0c      	bge.n	8007f48 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fb18 	bl	8009564 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f34:	e008      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
      return;
 8007f36:	bf00      	nop
 8007f38:	e006      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
    return;
 8007f3a:	bf00      	nop
 8007f3c:	e004      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
      return;
 8007f3e:	bf00      	nop
 8007f40:	e002      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
      return;
 8007f42:	bf00      	nop
 8007f44:	e000      	b.n	8007f48 <HAL_UART_IRQHandler+0x628>
    return;
 8007f46:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007f48:	37e8      	adds	r7, #232	; 0xe8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop

08007f50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f94:	b08c      	sub	sp, #48	; 0x30
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4baa      	ldr	r3, [pc, #680]	; (8008268 <UART_SetConfig+0x2d8>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a9f      	ldr	r2, [pc, #636]	; (800826c <UART_SetConfig+0x2dc>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d004      	beq.n	8007ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008006:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008010:	430b      	orrs	r3, r1
 8008012:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	f023 010f 	bic.w	r1, r3, #15
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a90      	ldr	r2, [pc, #576]	; (8008270 <UART_SetConfig+0x2e0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d125      	bne.n	8008080 <UART_SetConfig+0xf0>
 8008034:	4b8f      	ldr	r3, [pc, #572]	; (8008274 <UART_SetConfig+0x2e4>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b03      	cmp	r3, #3
 8008040:	d81a      	bhi.n	8008078 <UART_SetConfig+0xe8>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0xb8>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	08008059 	.word	0x08008059
 800804c:	08008069 	.word	0x08008069
 8008050:	08008061 	.word	0x08008061
 8008054:	08008071 	.word	0x08008071
 8008058:	2301      	movs	r3, #1
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e116      	b.n	800828e <UART_SetConfig+0x2fe>
 8008060:	2302      	movs	r3, #2
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008066:	e112      	b.n	800828e <UART_SetConfig+0x2fe>
 8008068:	2304      	movs	r3, #4
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806e:	e10e      	b.n	800828e <UART_SetConfig+0x2fe>
 8008070:	2308      	movs	r3, #8
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e10a      	b.n	800828e <UART_SetConfig+0x2fe>
 8008078:	2310      	movs	r3, #16
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e106      	b.n	800828e <UART_SetConfig+0x2fe>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a7c      	ldr	r2, [pc, #496]	; (8008278 <UART_SetConfig+0x2e8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d138      	bne.n	80080fc <UART_SetConfig+0x16c>
 800808a:	4b7a      	ldr	r3, [pc, #488]	; (8008274 <UART_SetConfig+0x2e4>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f003 030c 	and.w	r3, r3, #12
 8008094:	2b0c      	cmp	r3, #12
 8008096:	d82d      	bhi.n	80080f4 <UART_SetConfig+0x164>
 8008098:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <UART_SetConfig+0x110>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	080080d5 	.word	0x080080d5
 80080a4:	080080f5 	.word	0x080080f5
 80080a8:	080080f5 	.word	0x080080f5
 80080ac:	080080f5 	.word	0x080080f5
 80080b0:	080080e5 	.word	0x080080e5
 80080b4:	080080f5 	.word	0x080080f5
 80080b8:	080080f5 	.word	0x080080f5
 80080bc:	080080f5 	.word	0x080080f5
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	080080f5 	.word	0x080080f5
 80080c8:	080080f5 	.word	0x080080f5
 80080cc:	080080f5 	.word	0x080080f5
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080da:	e0d8      	b.n	800828e <UART_SetConfig+0x2fe>
 80080dc:	2302      	movs	r3, #2
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e2:	e0d4      	b.n	800828e <UART_SetConfig+0x2fe>
 80080e4:	2304      	movs	r3, #4
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ea:	e0d0      	b.n	800828e <UART_SetConfig+0x2fe>
 80080ec:	2308      	movs	r3, #8
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f2:	e0cc      	b.n	800828e <UART_SetConfig+0x2fe>
 80080f4:	2310      	movs	r3, #16
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080fa:	e0c8      	b.n	800828e <UART_SetConfig+0x2fe>
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a5e      	ldr	r2, [pc, #376]	; (800827c <UART_SetConfig+0x2ec>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d125      	bne.n	8008152 <UART_SetConfig+0x1c2>
 8008106:	4b5b      	ldr	r3, [pc, #364]	; (8008274 <UART_SetConfig+0x2e4>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008110:	2b30      	cmp	r3, #48	; 0x30
 8008112:	d016      	beq.n	8008142 <UART_SetConfig+0x1b2>
 8008114:	2b30      	cmp	r3, #48	; 0x30
 8008116:	d818      	bhi.n	800814a <UART_SetConfig+0x1ba>
 8008118:	2b20      	cmp	r3, #32
 800811a:	d00a      	beq.n	8008132 <UART_SetConfig+0x1a2>
 800811c:	2b20      	cmp	r3, #32
 800811e:	d814      	bhi.n	800814a <UART_SetConfig+0x1ba>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <UART_SetConfig+0x19a>
 8008124:	2b10      	cmp	r3, #16
 8008126:	d008      	beq.n	800813a <UART_SetConfig+0x1aa>
 8008128:	e00f      	b.n	800814a <UART_SetConfig+0x1ba>
 800812a:	2300      	movs	r3, #0
 800812c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008130:	e0ad      	b.n	800828e <UART_SetConfig+0x2fe>
 8008132:	2302      	movs	r3, #2
 8008134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008138:	e0a9      	b.n	800828e <UART_SetConfig+0x2fe>
 800813a:	2304      	movs	r3, #4
 800813c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008140:	e0a5      	b.n	800828e <UART_SetConfig+0x2fe>
 8008142:	2308      	movs	r3, #8
 8008144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008148:	e0a1      	b.n	800828e <UART_SetConfig+0x2fe>
 800814a:	2310      	movs	r3, #16
 800814c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008150:	e09d      	b.n	800828e <UART_SetConfig+0x2fe>
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a4a      	ldr	r2, [pc, #296]	; (8008280 <UART_SetConfig+0x2f0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d125      	bne.n	80081a8 <UART_SetConfig+0x218>
 800815c:	4b45      	ldr	r3, [pc, #276]	; (8008274 <UART_SetConfig+0x2e4>)
 800815e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008166:	2bc0      	cmp	r3, #192	; 0xc0
 8008168:	d016      	beq.n	8008198 <UART_SetConfig+0x208>
 800816a:	2bc0      	cmp	r3, #192	; 0xc0
 800816c:	d818      	bhi.n	80081a0 <UART_SetConfig+0x210>
 800816e:	2b80      	cmp	r3, #128	; 0x80
 8008170:	d00a      	beq.n	8008188 <UART_SetConfig+0x1f8>
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d814      	bhi.n	80081a0 <UART_SetConfig+0x210>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <UART_SetConfig+0x1f0>
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d008      	beq.n	8008190 <UART_SetConfig+0x200>
 800817e:	e00f      	b.n	80081a0 <UART_SetConfig+0x210>
 8008180:	2300      	movs	r3, #0
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008186:	e082      	b.n	800828e <UART_SetConfig+0x2fe>
 8008188:	2302      	movs	r3, #2
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818e:	e07e      	b.n	800828e <UART_SetConfig+0x2fe>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008196:	e07a      	b.n	800828e <UART_SetConfig+0x2fe>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800819e:	e076      	b.n	800828e <UART_SetConfig+0x2fe>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a6:	e072      	b.n	800828e <UART_SetConfig+0x2fe>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a35      	ldr	r2, [pc, #212]	; (8008284 <UART_SetConfig+0x2f4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d12a      	bne.n	8008208 <UART_SetConfig+0x278>
 80081b2:	4b30      	ldr	r3, [pc, #192]	; (8008274 <UART_SetConfig+0x2e4>)
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081c0:	d01a      	beq.n	80081f8 <UART_SetConfig+0x268>
 80081c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081c6:	d81b      	bhi.n	8008200 <UART_SetConfig+0x270>
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081cc:	d00c      	beq.n	80081e8 <UART_SetConfig+0x258>
 80081ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d2:	d815      	bhi.n	8008200 <UART_SetConfig+0x270>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <UART_SetConfig+0x250>
 80081d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081dc:	d008      	beq.n	80081f0 <UART_SetConfig+0x260>
 80081de:	e00f      	b.n	8008200 <UART_SetConfig+0x270>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e6:	e052      	b.n	800828e <UART_SetConfig+0x2fe>
 80081e8:	2302      	movs	r3, #2
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ee:	e04e      	b.n	800828e <UART_SetConfig+0x2fe>
 80081f0:	2304      	movs	r3, #4
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081f6:	e04a      	b.n	800828e <UART_SetConfig+0x2fe>
 80081f8:	2308      	movs	r3, #8
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081fe:	e046      	b.n	800828e <UART_SetConfig+0x2fe>
 8008200:	2310      	movs	r3, #16
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e042      	b.n	800828e <UART_SetConfig+0x2fe>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a17      	ldr	r2, [pc, #92]	; (800826c <UART_SetConfig+0x2dc>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d13a      	bne.n	8008288 <UART_SetConfig+0x2f8>
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <UART_SetConfig+0x2e4>)
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008218:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800821c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008220:	d01a      	beq.n	8008258 <UART_SetConfig+0x2c8>
 8008222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008226:	d81b      	bhi.n	8008260 <UART_SetConfig+0x2d0>
 8008228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800822c:	d00c      	beq.n	8008248 <UART_SetConfig+0x2b8>
 800822e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008232:	d815      	bhi.n	8008260 <UART_SetConfig+0x2d0>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <UART_SetConfig+0x2b0>
 8008238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800823c:	d008      	beq.n	8008250 <UART_SetConfig+0x2c0>
 800823e:	e00f      	b.n	8008260 <UART_SetConfig+0x2d0>
 8008240:	2300      	movs	r3, #0
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008246:	e022      	b.n	800828e <UART_SetConfig+0x2fe>
 8008248:	2302      	movs	r3, #2
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824e:	e01e      	b.n	800828e <UART_SetConfig+0x2fe>
 8008250:	2304      	movs	r3, #4
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008256:	e01a      	b.n	800828e <UART_SetConfig+0x2fe>
 8008258:	2308      	movs	r3, #8
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800825e:	e016      	b.n	800828e <UART_SetConfig+0x2fe>
 8008260:	2310      	movs	r3, #16
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008266:	e012      	b.n	800828e <UART_SetConfig+0x2fe>
 8008268:	cfff69f3 	.word	0xcfff69f3
 800826c:	40008000 	.word	0x40008000
 8008270:	40013800 	.word	0x40013800
 8008274:	40021000 	.word	0x40021000
 8008278:	40004400 	.word	0x40004400
 800827c:	40004800 	.word	0x40004800
 8008280:	40004c00 	.word	0x40004c00
 8008284:	40005000 	.word	0x40005000
 8008288:	2310      	movs	r3, #16
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4aae      	ldr	r2, [pc, #696]	; (800854c <UART_SetConfig+0x5bc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	f040 8097 	bne.w	80083c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800829a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d823      	bhi.n	80082ea <UART_SetConfig+0x35a>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <UART_SetConfig+0x318>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082eb 	.word	0x080082eb
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082eb 	.word	0x080082eb
 80082b8:	080082db 	.word	0x080082db
 80082bc:	080082eb 	.word	0x080082eb
 80082c0:	080082eb 	.word	0x080082eb
 80082c4:	080082eb 	.word	0x080082eb
 80082c8:	080082e3 	.word	0x080082e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082cc:	f7fd f8cc 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 80082d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082d2:	e010      	b.n	80082f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d4:	4b9e      	ldr	r3, [pc, #632]	; (8008550 <UART_SetConfig+0x5c0>)
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082d8:	e00d      	b.n	80082f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082da:	f7fd f82d 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80082de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082e0:	e009      	b.n	80082f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082e8:	e005      	b.n	80082f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 8130 	beq.w	800855e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	4a94      	ldr	r2, [pc, #592]	; (8008554 <UART_SetConfig+0x5c4>)
 8008304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008308:	461a      	mov	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008310:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	4613      	mov	r3, r2
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	4413      	add	r3, r2
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	429a      	cmp	r2, r3
 8008320:	d305      	bcc.n	800832e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	429a      	cmp	r2, r3
 800832c:	d903      	bls.n	8008336 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008334:	e113      	b.n	800855e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	2200      	movs	r2, #0
 800833a:	60bb      	str	r3, [r7, #8]
 800833c:	60fa      	str	r2, [r7, #12]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	4a84      	ldr	r2, [pc, #528]	; (8008554 <UART_SetConfig+0x5c4>)
 8008344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008348:	b29b      	uxth	r3, r3
 800834a:	2200      	movs	r2, #0
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008358:	f7f8 fbf8 	bl	8000b4c <__aeabi_uldivmod>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4610      	mov	r0, r2
 8008362:	4619      	mov	r1, r3
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	020b      	lsls	r3, r1, #8
 800836e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008372:	0202      	lsls	r2, r0, #8
 8008374:	6979      	ldr	r1, [r7, #20]
 8008376:	6849      	ldr	r1, [r1, #4]
 8008378:	0849      	lsrs	r1, r1, #1
 800837a:	2000      	movs	r0, #0
 800837c:	460c      	mov	r4, r1
 800837e:	4605      	mov	r5, r0
 8008380:	eb12 0804 	adds.w	r8, r2, r4
 8008384:	eb43 0905 	adc.w	r9, r3, r5
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	469a      	mov	sl, r3
 8008390:	4693      	mov	fp, r2
 8008392:	4652      	mov	r2, sl
 8008394:	465b      	mov	r3, fp
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f8 fbd7 	bl	8000b4c <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4613      	mov	r3, r2
 80083a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ac:	d308      	bcc.n	80083c0 <UART_SetConfig+0x430>
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083b4:	d204      	bcs.n	80083c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	60da      	str	r2, [r3, #12]
 80083be:	e0ce      	b.n	800855e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083c6:	e0ca      	b.n	800855e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d0:	d166      	bne.n	80084a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80083d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d827      	bhi.n	800842a <UART_SetConfig+0x49a>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x450>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008405 	.word	0x08008405
 80083e4:	0800840d 	.word	0x0800840d
 80083e8:	08008415 	.word	0x08008415
 80083ec:	0800842b 	.word	0x0800842b
 80083f0:	0800841b 	.word	0x0800841b
 80083f4:	0800842b 	.word	0x0800842b
 80083f8:	0800842b 	.word	0x0800842b
 80083fc:	0800842b 	.word	0x0800842b
 8008400:	08008423 	.word	0x08008423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008404:	f7fd f830 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 8008408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800840a:	e014      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800840c:	f7fd f842 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008412:	e010      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008414:	4b4e      	ldr	r3, [pc, #312]	; (8008550 <UART_SetConfig+0x5c0>)
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008418:	e00d      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800841a:	f7fc ff8d 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 800841e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008420:	e009      	b.n	8008436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008428:	e005      	b.n	8008436 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8090 	beq.w	800855e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	4a44      	ldr	r2, [pc, #272]	; (8008554 <UART_SetConfig+0x5c4>)
 8008444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008448:	461a      	mov	r2, r3
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008450:	005a      	lsls	r2, r3, #1
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	441a      	add	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008462:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	2b0f      	cmp	r3, #15
 8008468:	d916      	bls.n	8008498 <UART_SetConfig+0x508>
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008470:	d212      	bcs.n	8008498 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f023 030f 	bic.w	r3, r3, #15
 800847a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	b29b      	uxth	r3, r3
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	b29a      	uxth	r2, r3
 8008488:	8bfb      	ldrh	r3, [r7, #30]
 800848a:	4313      	orrs	r3, r2
 800848c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	8bfa      	ldrh	r2, [r7, #30]
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	e062      	b.n	800855e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800849e:	e05e      	b.n	800855e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d828      	bhi.n	80084fa <UART_SetConfig+0x56a>
 80084a8:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <UART_SetConfig+0x520>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084d5 	.word	0x080084d5
 80084b4:	080084dd 	.word	0x080084dd
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	080084fb 	.word	0x080084fb
 80084c0:	080084eb 	.word	0x080084eb
 80084c4:	080084fb 	.word	0x080084fb
 80084c8:	080084fb 	.word	0x080084fb
 80084cc:	080084fb 	.word	0x080084fb
 80084d0:	080084f3 	.word	0x080084f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d4:	f7fc ffc8 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 80084d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084da:	e014      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084dc:	f7fc ffda 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 80084e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084e2:	e010      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084e4:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <UART_SetConfig+0x5c0>)
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084e8:	e00d      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ea:	f7fc ff25 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80084ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084f0:	e009      	b.n	8008506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084f8:	e005      	b.n	8008506 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008504:	bf00      	nop
    }

    if (pclk != 0U)
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	d028      	beq.n	800855e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	4a10      	ldr	r2, [pc, #64]	; (8008554 <UART_SetConfig+0x5c4>)
 8008512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008516:	461a      	mov	r2, r3
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	fbb3 f2f2 	udiv	r2, r3, r2
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	085b      	lsrs	r3, r3, #1
 8008524:	441a      	add	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	fbb2 f3f3 	udiv	r3, r2, r3
 800852e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	2b0f      	cmp	r3, #15
 8008534:	d910      	bls.n	8008558 <UART_SetConfig+0x5c8>
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800853c:	d20c      	bcs.n	8008558 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	b29a      	uxth	r2, r3
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60da      	str	r2, [r3, #12]
 8008548:	e009      	b.n	800855e <UART_SetConfig+0x5ce>
 800854a:	bf00      	nop
 800854c:	40008000 	.word	0x40008000
 8008550:	00f42400 	.word	0x00f42400
 8008554:	0800e874 	.word	0x0800e874
      }
      else
      {
        ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2201      	movs	r2, #1
 8008562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2201      	movs	r2, #1
 800856a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2200      	movs	r2, #0
 8008572:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2200      	movs	r2, #0
 8008578:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800857a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800857e:	4618      	mov	r0, r3
 8008580:	3730      	adds	r7, #48	; 0x30
 8008582:	46bd      	mov	sp, r7
 8008584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01a      	beq.n	800869e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008686:	d10a      	bne.n	800869e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	605a      	str	r2, [r3, #4]
  }
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086dc:	f7fa fe42 	bl	8003364 <HAL_GetTick>
 80086e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d10e      	bne.n	800870e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f82f 	bl	8008762 <UART_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e025      	b.n	800875a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d10e      	bne.n	800873a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f819 	bl	8008762 <UART_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e00f      	b.n	800875a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b09c      	sub	sp, #112	; 0x70
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008772:	e0a9      	b.n	80088c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	f000 80a5 	beq.w	80088c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800877e:	f7fa fdf1 	bl	8003364 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800878a:	429a      	cmp	r2, r3
 800878c:	d302      	bcc.n	8008794 <UART_WaitOnFlagUntilTimeout+0x32>
 800878e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008790:	2b00      	cmp	r3, #0
 8008792:	d140      	bne.n	8008816 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087a8:	667b      	str	r3, [r7, #100]	; 0x64
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80087c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e6      	bne.n	8008794 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	f023 0301 	bic.w	r3, r3, #1
 80087dc:	663b      	str	r3, [r7, #96]	; 0x60
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3308      	adds	r3, #8
 80087e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80087e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e5      	bne.n	80087c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e069      	b.n	80088ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d051      	beq.n	80088c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800882e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008832:	d149      	bne.n	80088c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800883c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
 800885e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008864:	e841 2300 	strex	r3, r2, [r1]
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800886a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e6      	bne.n	800883e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	613b      	str	r3, [r7, #16]
   return(result);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f023 0301 	bic.w	r3, r3, #1
 8008886:	66bb      	str	r3, [r7, #104]	; 0x68
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3308      	adds	r3, #8
 800888e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008890:	623a      	str	r2, [r7, #32]
 8008892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	69f9      	ldr	r1, [r7, #28]
 8008896:	6a3a      	ldr	r2, [r7, #32]
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	61bb      	str	r3, [r7, #24]
   return(result);
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e5      	bne.n	8008870 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e010      	b.n	80088ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	69da      	ldr	r2, [r3, #28]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	4013      	ands	r3, r2
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	bf0c      	ite	eq
 80088d8:	2301      	moveq	r3, #1
 80088da:	2300      	movne	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	461a      	mov	r2, r3
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	f43f af46 	beq.w	8008774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3770      	adds	r7, #112	; 0x70
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b0a3      	sub	sp, #140	; 0x8c
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	4613      	mov	r3, r2
 8008900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	88fa      	ldrh	r2, [r7, #6]
 800890c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	88fa      	ldrh	r2, [r7, #6]
 8008914:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008926:	d10e      	bne.n	8008946 <UART_Start_Receive_IT+0x52>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d105      	bne.n	800893c <UART_Start_Receive_IT+0x48>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008936:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800893a:	e02d      	b.n	8008998 <UART_Start_Receive_IT+0xa4>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	22ff      	movs	r2, #255	; 0xff
 8008940:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008944:	e028      	b.n	8008998 <UART_Start_Receive_IT+0xa4>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10d      	bne.n	800896a <UART_Start_Receive_IT+0x76>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <UART_Start_Receive_IT+0x6c>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	22ff      	movs	r2, #255	; 0xff
 800895a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800895e:	e01b      	b.n	8008998 <UART_Start_Receive_IT+0xa4>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	227f      	movs	r2, #127	; 0x7f
 8008964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008968:	e016      	b.n	8008998 <UART_Start_Receive_IT+0xa4>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008972:	d10d      	bne.n	8008990 <UART_Start_Receive_IT+0x9c>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d104      	bne.n	8008986 <UART_Start_Receive_IT+0x92>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	227f      	movs	r2, #127	; 0x7f
 8008980:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008984:	e008      	b.n	8008998 <UART_Start_Receive_IT+0xa4>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	223f      	movs	r2, #63	; 0x3f
 800898a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800898e:	e003      	b.n	8008998 <UART_Start_Receive_IT+0xa4>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2222      	movs	r2, #34	; 0x22
 80089a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80089b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089ba:	f043 0301 	orr.w	r3, r3, #1
 80089be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3308      	adds	r3, #8
 80089c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80089cc:	673a      	str	r2, [r7, #112]	; 0x70
 80089ce:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80089d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80089da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e3      	bne.n	80089a8 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e8:	d153      	bne.n	8008a92 <UART_Start_Receive_IT+0x19e>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d34d      	bcc.n	8008a92 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fe:	d107      	bne.n	8008a10 <UART_Start_Receive_IT+0x11c>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d103      	bne.n	8008a10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a4b      	ldr	r2, [pc, #300]	; (8008b38 <UART_Start_Receive_IT+0x244>)
 8008a0c:	671a      	str	r2, [r3, #112]	; 0x70
 8008a0e:	e002      	b.n	8008a16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a4a      	ldr	r2, [pc, #296]	; (8008b3c <UART_Start_Receive_IT+0x248>)
 8008a14:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d01a      	beq.n	8008a5c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a4a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e4      	bne.n	8008a26 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008a7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e5      	bne.n	8008a5c <UART_Start_Receive_IT+0x168>
 8008a90:	e04a      	b.n	8008b28 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9a:	d107      	bne.n	8008aac <UART_Start_Receive_IT+0x1b8>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d103      	bne.n	8008aac <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4a26      	ldr	r2, [pc, #152]	; (8008b40 <UART_Start_Receive_IT+0x24c>)
 8008aa8:	671a      	str	r2, [r3, #112]	; 0x70
 8008aaa:	e002      	b.n	8008ab2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4a25      	ldr	r2, [pc, #148]	; (8008b44 <UART_Start_Receive_IT+0x250>)
 8008ab0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d019      	beq.n	8008af6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008ad6:	677b      	str	r3, [r7, #116]	; 0x74
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	461a      	mov	r2, r3
 8008ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e6      	bne.n	8008ac2 <UART_Start_Receive_IT+0x1ce>
 8008af4:	e018      	b.n	8008b28 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	613b      	str	r3, [r7, #16]
   return(result);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f043 0320 	orr.w	r3, r3, #32
 8008b0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b14:	623b      	str	r3, [r7, #32]
 8008b16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	69f9      	ldr	r1, [r7, #28]
 8008b1a:	6a3a      	ldr	r2, [r7, #32]
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e6      	bne.n	8008af6 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	378c      	adds	r7, #140	; 0x8c
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	08009251 	.word	0x08009251
 8008b3c:	08008f59 	.word	0x08008f59
 8008b40:	08008df7 	.word	0x08008df7
 8008b44:	08008c97 	.word	0x08008c97

08008b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b095      	sub	sp, #84	; 0x54
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3308      	adds	r3, #8
 8008b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e3      	bne.n	8008b82 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d118      	bne.n	8008bf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f023 0310 	bic.w	r3, r3, #16
 8008bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6979      	ldr	r1, [r7, #20]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	613b      	str	r3, [r7, #16]
   return(result);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e6      	bne.n	8008bc2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008c08:	bf00      	nop
 8008c0a:	3754      	adds	r7, #84	; 0x54
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff f996 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	61bb      	str	r3, [r7, #24]
 8008c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6979      	ldr	r1, [r7, #20]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	613b      	str	r3, [r7, #16]
   return(result);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e6      	bne.n	8008c48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff f961 	bl	8007f50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8e:	bf00      	nop
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b096      	sub	sp, #88	; 0x58
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ca4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cae:	2b22      	cmp	r3, #34	; 0x22
 8008cb0:	f040 8095 	bne.w	8008dde <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008cc2:	b2d9      	uxtb	r1, r3
 8008cc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cce:	400a      	ands	r2, r1
 8008cd0:	b2d2      	uxtb	r2, r2
 8008cd2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d178      	bne.n	8008dee <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d10:	653b      	str	r3, [r7, #80]	; 0x50
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e6      	bne.n	8008cfc <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8008d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e5      	bne.n	8008d2e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d12e      	bne.n	8008dd6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0310 	bic.w	r3, r3, #16
 8008d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9c:	61fb      	str	r3, [r7, #28]
 8008d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	69b9      	ldr	r1, [r7, #24]
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	617b      	str	r3, [r7, #20]
   return(result);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d103      	bne.n	8008dc6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff f8d2 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dd4:	e00b      	b.n	8008dee <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f9 fb4a 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 8008ddc:	e007      	b.n	8008dee <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0208 	orr.w	r2, r2, #8
 8008dec:	619a      	str	r2, [r3, #24]
}
 8008dee:	bf00      	nop
 8008df0:	3758      	adds	r7, #88	; 0x58
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b096      	sub	sp, #88	; 0x58
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	2b22      	cmp	r3, #34	; 0x22
 8008e10:	f040 8095 	bne.w	8008f3e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e24:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008e28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e38:	1c9a      	adds	r2, r3, #2
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d178      	bne.n	8008f4e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e6      	bne.n	8008e5c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f023 0301 	bic.w	r3, r3, #1
 8008ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d12e      	bne.n	8008f36 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f023 0310 	bic.w	r3, r3, #16
 8008ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efc:	61bb      	str	r3, [r7, #24]
 8008efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d103      	bne.n	8008f26 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2210      	movs	r2, #16
 8008f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff f822 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f34:	e00b      	b.n	8008f4e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7f9 fa9a 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 8008f3c:	e007      	b.n	8008f4e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0208 	orr.w	r2, r2, #8
 8008f4c:	619a      	str	r2, [r3, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	3758      	adds	r7, #88	; 0x58
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0a6      	sub	sp, #152	; 0x98
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f66:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	2b22      	cmp	r3, #34	; 0x22
 8008f90:	f040 814f 	bne.w	8009232 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f9a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f9e:	e0f6      	b.n	800918e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008faa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008fae:	b2d9      	uxtb	r1, r3
 8008fb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fba:	400a      	ands	r2, r1
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fea:	f003 0307 	and.w	r3, r3, #7
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d053      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d011      	beq.n	8009022 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2201      	movs	r2, #1
 8009010:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009018:	f043 0201 	orr.w	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d011      	beq.n	8009052 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800902e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00b      	beq.n	8009052 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2202      	movs	r2, #2
 8009040:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009048:	f043 0204 	orr.w	r2, r3, #4
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b00      	cmp	r3, #0
 800905c:	d011      	beq.n	8009082 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800905e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2204      	movs	r2, #4
 8009070:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009078:	f043 0202 	orr.w	r2, r3, #2
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d006      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7fe ff69 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d173      	bne.n	800918e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80090b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ca:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80090ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1e4      	bne.n	80090a6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3308      	adds	r3, #8
 80090e2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009100:	657a      	str	r2, [r7, #84]	; 0x54
 8009102:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009106:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800910e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e3      	bne.n	80090dc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d12e      	bne.n	8009188 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009140:	f023 0310 	bic.w	r3, r3, #16
 8009144:	67bb      	str	r3, [r7, #120]	; 0x78
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800914e:	643b      	str	r3, [r7, #64]	; 0x40
 8009150:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e6      	bne.n	8009130 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f003 0310 	and.w	r3, r3, #16
 800916c:	2b10      	cmp	r3, #16
 800916e:	d103      	bne.n	8009178 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2210      	movs	r2, #16
 8009176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7fe fef9 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
 8009186:	e002      	b.n	800918e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7f9 f971 	bl	8002470 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800918e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009192:	2b00      	cmp	r3, #0
 8009194:	d006      	beq.n	80091a4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f47f aefe 	bne.w	8008fa0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091ae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d045      	beq.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d23e      	bcs.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091da:	673b      	str	r3, [r7, #112]	; 0x70
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80091e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e5      	bne.n	80091c4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a14      	ldr	r2, [pc, #80]	; (800924c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80091fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	60bb      	str	r3, [r7, #8]
   return(result);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f043 0320 	orr.w	r3, r3, #32
 8009212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6979      	ldr	r1, [r7, #20]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	613b      	str	r3, [r7, #16]
   return(result);
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e6      	bne.n	80091fe <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009230:	e007      	b.n	8009242 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	699a      	ldr	r2, [r3, #24]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0208 	orr.w	r2, r2, #8
 8009240:	619a      	str	r2, [r3, #24]
}
 8009242:	bf00      	nop
 8009244:	3798      	adds	r7, #152	; 0x98
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	08008c97 	.word	0x08008c97

08009250 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b0a8      	sub	sp, #160	; 0xa0
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800925e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009286:	2b22      	cmp	r3, #34	; 0x22
 8009288:	f040 8153 	bne.w	8009532 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009292:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009296:	e0fa      	b.n	800948e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80092aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80092ae:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80092b2:	4013      	ands	r3, r2
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c0:	1c9a      	adds	r2, r3, #2
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d053      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <UART_RxISR_16BIT_FIFOEN+0xce>
 80092fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00b      	beq.n	800931e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2201      	movs	r2, #1
 800930c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009314:	f043 0201 	orr.w	r2, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800931e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d011      	beq.n	800934e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800932a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2202      	movs	r2, #2
 800933c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009344:	f043 0204 	orr.w	r2, r3, #4
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800934e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d011      	beq.n	800937e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800935a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2204      	movs	r2, #4
 800936c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009374:	f043 0202 	orr.w	r2, r3, #2
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d006      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7fe fdeb 	bl	8007f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d175      	bne.n	800948e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093c6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e4      	bne.n	80093a2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3308      	adds	r3, #8
 80093de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ee:	f023 0301 	bic.w	r3, r3, #1
 80093f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009400:	65ba      	str	r2, [r7, #88]	; 0x58
 8009402:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800940e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e1      	bne.n	80093d8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009426:	2b01      	cmp	r3, #1
 8009428:	d12e      	bne.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009440:	f023 0310 	bic.w	r3, r3, #16
 8009444:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800944e:	647b      	str	r3, [r7, #68]	; 0x44
 8009450:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	f003 0310 	and.w	r3, r3, #16
 800946c:	2b10      	cmp	r3, #16
 800946e:	d103      	bne.n	8009478 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2210      	movs	r2, #16
 8009476:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800947e:	4619      	mov	r1, r3
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7fe fd79 	bl	8007f78 <HAL_UARTEx_RxEventCallback>
 8009486:	e002      	b.n	800948e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7f8 fff1 	bl	8002470 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800948e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009492:	2b00      	cmp	r3, #0
 8009494:	d006      	beq.n	80094a4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009496:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f47f aefa 	bne.w	8009298 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d045      	beq.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d23e      	bcs.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3308      	adds	r3, #8
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	623b      	str	r3, [r7, #32]
   return(result);
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094da:	677b      	str	r3, [r7, #116]	; 0x74
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80094e4:	633a      	str	r2, [r7, #48]	; 0x30
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e5      	bne.n	80094c4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a14      	ldr	r2, [pc, #80]	; (800954c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80094fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	60fb      	str	r3, [r7, #12]
   return(result);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f043 0320 	orr.w	r3, r3, #32
 8009512:	673b      	str	r3, [r7, #112]	; 0x70
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	69b9      	ldr	r1, [r7, #24]
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	617b      	str	r3, [r7, #20]
   return(result);
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e6      	bne.n	80094fe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009530:	e007      	b.n	8009542 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0208 	orr.w	r2, r2, #8
 8009540:	619a      	str	r2, [r3, #24]
}
 8009542:	bf00      	nop
 8009544:	37a0      	adds	r7, #160	; 0xa0
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	08008df7 	.word	0x08008df7

08009550 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800959e:	2302      	movs	r3, #2
 80095a0:	e027      	b.n	80095f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2224      	movs	r2, #36	; 0x24
 80095ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800960e:	2b01      	cmp	r3, #1
 8009610:	d101      	bne.n	8009616 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009612:	2302      	movs	r3, #2
 8009614:	e02d      	b.n	8009672 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2224      	movs	r2, #36	; 0x24
 8009622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 0201 	bic.w	r2, r2, #1
 800963c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f850 	bl	80096f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800968e:	2302      	movs	r3, #2
 8009690:	e02d      	b.n	80096ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2224      	movs	r2, #36	; 0x24
 800969e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 0201 	bic.w	r2, r2, #1
 80096b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f812 	bl	80096f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009704:	2b00      	cmp	r3, #0
 8009706:	d108      	bne.n	800971a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009718:	e031      	b.n	800977e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800971a:	2308      	movs	r3, #8
 800971c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800971e:	2308      	movs	r3, #8
 8009720:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	0e5b      	lsrs	r3, r3, #25
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 0307 	and.w	r3, r3, #7
 8009730:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	0f5b      	lsrs	r3, r3, #29
 800973a:	b2db      	uxtb	r3, r3
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	7b3a      	ldrb	r2, [r7, #12]
 8009746:	4911      	ldr	r1, [pc, #68]	; (800978c <UARTEx_SetNbDataToProcess+0x94>)
 8009748:	5c8a      	ldrb	r2, [r1, r2]
 800974a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800974e:	7b3a      	ldrb	r2, [r7, #12]
 8009750:	490f      	ldr	r1, [pc, #60]	; (8009790 <UARTEx_SetNbDataToProcess+0x98>)
 8009752:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009754:	fb93 f3f2 	sdiv	r3, r3, r2
 8009758:	b29a      	uxth	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	7b7a      	ldrb	r2, [r7, #13]
 8009764:	4909      	ldr	r1, [pc, #36]	; (800978c <UARTEx_SetNbDataToProcess+0x94>)
 8009766:	5c8a      	ldrb	r2, [r1, r2]
 8009768:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800976c:	7b7a      	ldrb	r2, [r7, #13]
 800976e:	4908      	ldr	r1, [pc, #32]	; (8009790 <UARTEx_SetNbDataToProcess+0x98>)
 8009770:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009772:	fb93 f3f2 	sdiv	r3, r3, r2
 8009776:	b29a      	uxth	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800977e:	bf00      	nop
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	0800e88c 	.word	0x0800e88c
 8009790:	0800e894 	.word	0x0800e894

08009794 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 fcb2 	bl	800b10e <VL53L0X_get_offset_calibration_data_micro_meter>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80097ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80097bc:	b5b0      	push	{r4, r5, r7, lr}
 80097be:	b096      	sub	sp, #88	; 0x58
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80097ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d107      	bne.n	80097e2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80097d2:	2200      	movs	r2, #0
 80097d4:	2188      	movs	r1, #136	; 0x88
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f004 feaa 	bl	800e530 <VL53L0X_WrByte>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097f0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80097fa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a9e      	ldr	r2, [pc, #632]	; (8009a7c <VL53L0X_DataInit+0x2c0>)
 8009802:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a9d      	ldr	r2, [pc, #628]	; (8009a80 <VL53L0X_DataInit+0x2c4>)
 800980a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009814:	f107 0310 	add.w	r3, r7, #16
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fac2 	bl	8009da4 <VL53L0X_GetDeviceParameters>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009826:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800982a:	2b00      	cmp	r3, #0
 800982c:	d112      	bne.n	8009854 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800982e:	2300      	movs	r3, #0
 8009830:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009832:	2300      	movs	r3, #0
 8009834:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f103 0410 	add.w	r4, r3, #16
 800983c:	f107 0510 	add.w	r5, r7, #16
 8009840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800984a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800984c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2264      	movs	r2, #100	; 0x64
 8009858:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009862:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800986c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009876:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009882:	2201      	movs	r2, #1
 8009884:	2180      	movs	r1, #128	; 0x80
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f004 fe52 	bl	800e530 <VL53L0X_WrByte>
 800988c:	4603      	mov	r3, r0
 800988e:	461a      	mov	r2, r3
 8009890:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009894:	4313      	orrs	r3, r2
 8009896:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800989a:	2201      	movs	r2, #1
 800989c:	21ff      	movs	r1, #255	; 0xff
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f004 fe46 	bl	800e530 <VL53L0X_WrByte>
 80098a4:	4603      	mov	r3, r0
 80098a6:	461a      	mov	r2, r3
 80098a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098ac:	4313      	orrs	r3, r2
 80098ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80098b2:	2200      	movs	r2, #0
 80098b4:	2100      	movs	r1, #0
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f004 fe3a 	bl	800e530 <VL53L0X_WrByte>
 80098bc:	4603      	mov	r3, r0
 80098be:	461a      	mov	r2, r3
 80098c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098c4:	4313      	orrs	r3, r2
 80098c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80098ca:	f107 030f 	add.w	r3, r7, #15
 80098ce:	461a      	mov	r2, r3
 80098d0:	2191      	movs	r1, #145	; 0x91
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f004 feae 	bl	800e634 <VL53L0X_RdByte>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80098e6:	7bfa      	ldrb	r2, [r7, #15]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80098ee:	2201      	movs	r2, #1
 80098f0:	2100      	movs	r1, #0
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f004 fe1c 	bl	800e530 <VL53L0X_WrByte>
 80098f8:	4603      	mov	r3, r0
 80098fa:	461a      	mov	r2, r3
 80098fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009900:	4313      	orrs	r3, r2
 8009902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009906:	2200      	movs	r2, #0
 8009908:	21ff      	movs	r1, #255	; 0xff
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f004 fe10 	bl	800e530 <VL53L0X_WrByte>
 8009910:	4603      	mov	r3, r0
 8009912:	461a      	mov	r2, r3
 8009914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009918:	4313      	orrs	r3, r2
 800991a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800991e:	2200      	movs	r2, #0
 8009920:	2180      	movs	r1, #128	; 0x80
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f004 fe04 	bl	800e530 <VL53L0X_WrByte>
 8009928:	4603      	mov	r3, r0
 800992a:	461a      	mov	r2, r3
 800992c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009930:	4313      	orrs	r3, r2
 8009932:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009936:	2300      	movs	r3, #0
 8009938:	653b      	str	r3, [r7, #80]	; 0x50
 800993a:	e014      	b.n	8009966 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800993c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009940:	2b00      	cmp	r3, #0
 8009942:	d114      	bne.n	800996e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009946:	b29b      	uxth	r3, r3
 8009948:	2201      	movs	r2, #1
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fd35 	bl	800a3bc <VL53L0X_SetLimitCheckEnable>
 8009952:	4603      	mov	r3, r0
 8009954:	461a      	mov	r2, r3
 8009956:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800995a:	4313      	orrs	r3, r2
 800995c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009962:	3301      	adds	r3, #1
 8009964:	653b      	str	r3, [r7, #80]	; 0x50
 8009966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009968:	2b05      	cmp	r3, #5
 800996a:	dde7      	ble.n	800993c <VL53L0X_DataInit+0x180>
 800996c:	e000      	b.n	8009970 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800996e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009970:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009974:	2b00      	cmp	r3, #0
 8009976:	d107      	bne.n	8009988 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009978:	2200      	movs	r2, #0
 800997a:	2102      	movs	r1, #2
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fd1d 	bl	800a3bc <VL53L0X_SetLimitCheckEnable>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009988:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800998c:	2b00      	cmp	r3, #0
 800998e:	d107      	bne.n	80099a0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009990:	2200      	movs	r2, #0
 8009992:	2103      	movs	r1, #3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fd11 	bl	800a3bc <VL53L0X_SetLimitCheckEnable>
 800999a:	4603      	mov	r3, r0
 800999c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80099a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d107      	bne.n	80099b8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80099a8:	2200      	movs	r2, #0
 80099aa:	2104      	movs	r1, #4
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fd05 	bl	800a3bc <VL53L0X_SetLimitCheckEnable>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80099b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d107      	bne.n	80099d0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80099c0:	2200      	movs	r2, #0
 80099c2:	2105      	movs	r1, #5
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fcf9 	bl	800a3bc <VL53L0X_SetLimitCheckEnable>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80099d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d108      	bne.n	80099ea <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80099d8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fd9c 	bl	800a51c <VL53L0X_SetLimitCheckValue>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80099ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d108      	bne.n	8009a04 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80099f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099f6:	2101      	movs	r1, #1
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fd8f 	bl	800a51c <VL53L0X_SetLimitCheckValue>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d108      	bne.n	8009a1e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009a0c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8009a10:	2102      	movs	r1, #2
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fd82 	bl	800a51c <VL53L0X_SetLimitCheckValue>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d107      	bne.n	8009a36 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009a26:	2200      	movs	r2, #0
 8009a28:	2103      	movs	r1, #3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fd76 	bl	800a51c <VL53L0X_SetLimitCheckValue>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10f      	bne.n	8009a5e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	22ff      	movs	r2, #255	; 0xff
 8009a42:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009a46:	22ff      	movs	r2, #255	; 0xff
 8009a48:	2101      	movs	r1, #1
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f004 fd70 	bl	800e530 <VL53L0X_WrByte>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009a5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8009a6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3758      	adds	r7, #88	; 0x58
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bdb0      	pop	{r4, r5, r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	00016b85 	.word	0x00016b85
 8009a80:	000970a4 	.word	0x000970a4

08009a84 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009a84:	b5b0      	push	{r4, r5, r7, lr}
 8009a86:	b09e      	sub	sp, #120	; 0x78
 8009a88:	af02      	add	r7, sp, #8
 8009a8a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009a92:	f107 031c 	add.w	r3, r7, #28
 8009a96:	2240      	movs	r2, #64	; 0x40
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f004 feaa 	bl	800e7f4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f002 fa79 	bl	800bfba <VL53L0X_get_info_from_device>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8009ad4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009adc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d80d      	bhi.n	8009b04 <VL53L0X_StaticInit+0x80>
 8009ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d102      	bne.n	8009af6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d806      	bhi.n	8009b04 <VL53L0X_StaticInit+0x80>
 8009af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10e      	bne.n	8009b1c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8009afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b00:	2b0c      	cmp	r3, #12
 8009b02:	d90b      	bls.n	8009b1c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009b04:	f107 0218 	add.w	r2, r7, #24
 8009b08:	f107 0314 	add.w	r3, r7, #20
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 fcf8 	bl	800b504 <VL53L0X_perform_ref_spad_management>
 8009b14:	4603      	mov	r3, r0
 8009b16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009b1a:	e009      	b.n	8009b30 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b20:	461a      	mov	r2, r3
 8009b22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fef9 	bl	800b91c <VL53L0X_set_reference_spads>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009b30:	4b94      	ldr	r3, [pc, #592]	; (8009d84 <VL53L0X_StaticInit+0x300>)
 8009b32:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009b34:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10f      	bne.n	8009b5c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009b42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009b46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d104      	bne.n	8009b58 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b56:	e001      	b.n	8009b5c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009b58:	4b8a      	ldr	r3, [pc, #552]	; (8009d84 <VL53L0X_StaticInit+0x300>)
 8009b5a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009b5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d106      	bne.n	8009b72 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009b64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f003 fdcc 	bl	800d704 <VL53L0X_load_tuning_settings>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009b72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10a      	bne.n	8009b90 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	2304      	movs	r3, #4
 8009b80:	2200      	movs	r2, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 f8f1 	bl	800ad6c <VL53L0X_SetGpioConfig>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b90:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d121      	bne.n	8009bdc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b98:	2201      	movs	r2, #1
 8009b9a:	21ff      	movs	r1, #255	; 0xff
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f004 fcc7 	bl	800e530 <VL53L0X_WrByte>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009ba8:	f107 031a 	add.w	r3, r7, #26
 8009bac:	461a      	mov	r2, r3
 8009bae:	2184      	movs	r1, #132	; 0x84
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f004 fd69 	bl	800e688 <VL53L0X_RdWord>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	21ff      	movs	r1, #255	; 0xff
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f004 fcb1 	bl	800e530 <VL53L0X_WrByte>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009bdc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d105      	bne.n	8009bf0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009be4:	8b7b      	ldrh	r3, [r7, #26]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	461a      	mov	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009bf0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d108      	bne.n	8009c0a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009bf8:	f107 031c 	add.w	r3, r7, #28
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f8d0 	bl	8009da4 <VL53L0X_GetDeviceParameters>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8009c0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d110      	bne.n	8009c34 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009c12:	f107 0319 	add.w	r3, r7, #25
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f992 	bl	8009f42 <VL53L0X_GetFractionEnable>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009c24:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d103      	bne.n	8009c34 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009c2c:	7e7a      	ldrb	r2, [r7, #25]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009c34:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10e      	bne.n	8009c5a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f103 0410 	add.w	r4, r3, #16
 8009c42:	f107 051c 	add.w	r5, r7, #28
 8009c46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009c5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d111      	bne.n	8009c86 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009c62:	f107 0319 	add.w	r3, r7, #25
 8009c66:	461a      	mov	r2, r3
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f004 fce2 	bl	800e634 <VL53L0X_RdByte>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009c76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d103      	bne.n	8009c86 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009c7e:	7e7a      	ldrb	r2, [r7, #25]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009c86:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d107      	bne.n	8009c9e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2100      	movs	r1, #0
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f9ca 	bl	800a02c <VL53L0X_SetSequenceStepEnable>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009c9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d107      	bne.n	8009cb6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2102      	movs	r1, #2
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f9be 	bl	800a02c <VL53L0X_SetSequenceStepEnable>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009cb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d103      	bne.n	8009cc6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009cc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009cce:	f107 0313 	add.w	r3, r7, #19
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f990 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ce2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d103      	bne.n	8009cf2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009cea:	7cfa      	ldrb	r2, [r7, #19]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009cf2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d109      	bne.n	8009d0e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009cfa:	f107 0313 	add.w	r3, r7, #19
 8009cfe:	461a      	mov	r2, r3
 8009d00:	2101      	movs	r1, #1
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f97a 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d103      	bne.n	8009d1e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009d16:	7cfa      	ldrb	r2, [r7, #19]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009d1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8009d26:	f107 030c 	add.w	r3, r7, #12
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	2103      	movs	r1, #3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f002 fec4 	bl	800cabc <get_sequence_step_timeout>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d103      	bne.n	8009d4a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009d4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009d52:	f107 030c 	add.w	r3, r7, #12
 8009d56:	461a      	mov	r2, r3
 8009d58:	2104      	movs	r1, #4
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f002 feae 	bl	800cabc <get_sequence_step_timeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d103      	bne.n	8009d76 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3770      	adds	r7, #112	; 0x70
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bdb0      	pop	{r4, r5, r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000010 	.word	0x20000010

08009d88 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8009d90:	239d      	movs	r3, #157	; 0x9d
 8009d92:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8009d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f8b0 	bl	8009f1c <VL53L0X_GetDeviceMode>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d107      	bne.n	8009dd8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fa78 	bl	800a2c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d102      	bne.n	8009de6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2200      	movs	r2, #0
 8009de4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8009de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d107      	bne.n	8009dfe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	3310      	adds	r3, #16
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 faae 	bl	800a356 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d107      	bne.n	8009e16 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	3314      	adds	r3, #20
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff fcc1 	bl	8009794 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8009e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d134      	bne.n	8009e88 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60bb      	str	r3, [r7, #8]
 8009e22:	e02a      	b.n	8009e7a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d12a      	bne.n	8009e82 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	b299      	uxth	r1, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	3308      	adds	r3, #8
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	4413      	add	r3, r2
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fbce 	bl	800a5e0 <VL53L0X_GetLimitCheckValue>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d117      	bne.n	8009e86 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	b299      	uxth	r1, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	3318      	adds	r3, #24
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4413      	add	r3, r2
 8009e62:	461a      	mov	r2, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fb35 	bl	800a4d4 <VL53L0X_GetLimitCheckEnable>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	3301      	adds	r3, #1
 8009e78:	60bb      	str	r3, [r7, #8]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	2b05      	cmp	r3, #5
 8009e7e:	ddd1      	ble.n	8009e24 <VL53L0X_GetDeviceParameters+0x80>
 8009e80:	e002      	b.n	8009e88 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8009e82:	bf00      	nop
 8009e84:	e000      	b.n	8009e88 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009e86:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d107      	bne.n	8009ea0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	333c      	adds	r3, #60	; 0x3c
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fc30 	bl	800a6fc <VL53L0X_GetWrapAroundCheckEnable>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d107      	bne.n	8009eb8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f879 	bl	8009fa6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	2b15      	cmp	r3, #21
 8009ed8:	bf8c      	ite	hi
 8009eda:	2201      	movhi	r2, #1
 8009edc:	2200      	movls	r2, #0
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	d10e      	bne.n	8009f02 <VL53L0X_SetDeviceMode+0x3e>
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	409a      	lsls	r2, r3
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <VL53L0X_SetDeviceMode+0x54>)
 8009eea:	4013      	ands	r3, r2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bf14      	ite	ne
 8009ef0:	2301      	movne	r3, #1
 8009ef2:	2300      	moveq	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	78fa      	ldrb	r2, [r7, #3]
 8009efe:	741a      	strb	r2, [r3, #16]
		break;
 8009f00:	e001      	b.n	8009f06 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009f02:	23f8      	movs	r3, #248	; 0xf8
 8009f04:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	0030000b 	.word	0x0030000b

08009f1c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	7c1a      	ldrb	r2, [r3, #16]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	2109      	movs	r1, #9
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f004 fb6d 	bl	800e634 <VL53L0X_RdByte>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f003 fa26 	bl	800d3e2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8009f96:	4603      	mov	r3, r0
 8009f98:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8009f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f003 faf3 	bl	800d5a2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8009fe0:	78ba      	ldrb	r2, [r7, #2]
 8009fe2:	78fb      	ldrb	r3, [r7, #3]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f002 ff3b 	bl	800ce62 <VL53L0X_set_vcsel_pulse_period>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	460b      	mov	r3, r1
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a00e:	7afb      	ldrb	r3, [r7, #11]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	4619      	mov	r1, r3
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f003 f9ad 	bl	800d374 <VL53L0X_get_vcsel_pulse_period>
 800a01a:	4603      	mov	r3, r0
 800a01c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a01e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
 800a038:	4613      	mov	r3, r2
 800a03a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a048:	f107 030f 	add.w	r3, r7, #15
 800a04c:	461a      	mov	r2, r3
 800a04e:	2101      	movs	r1, #1
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f004 faef 	bl	800e634 <VL53L0X_RdByte>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a05e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d15a      	bne.n	800a11c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a066:	78bb      	ldrb	r3, [r7, #2]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d12b      	bne.n	800a0c4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d825      	bhi.n	800a0be <VL53L0X_SetSequenceStepEnable+0x92>
 800a072:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a08d 	.word	0x0800a08d
 800a07c:	0800a097 	.word	0x0800a097
 800a080:	0800a0a1 	.word	0x0800a0a1
 800a084:	0800a0ab 	.word	0x0800a0ab
 800a088:	0800a0b5 	.word	0x0800a0b5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a08c:	7dbb      	ldrb	r3, [r7, #22]
 800a08e:	f043 0310 	orr.w	r3, r3, #16
 800a092:	75bb      	strb	r3, [r7, #22]
				break;
 800a094:	e043      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a096:	7dbb      	ldrb	r3, [r7, #22]
 800a098:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a09c:	75bb      	strb	r3, [r7, #22]
				break;
 800a09e:	e03e      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a0a0:	7dbb      	ldrb	r3, [r7, #22]
 800a0a2:	f043 0304 	orr.w	r3, r3, #4
 800a0a6:	75bb      	strb	r3, [r7, #22]
				break;
 800a0a8:	e039      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a0aa:	7dbb      	ldrb	r3, [r7, #22]
 800a0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b0:	75bb      	strb	r3, [r7, #22]
				break;
 800a0b2:	e034      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a0b4:	7dbb      	ldrb	r3, [r7, #22]
 800a0b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0ba:	75bb      	strb	r3, [r7, #22]
				break;
 800a0bc:	e02f      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a0be:	23fc      	movs	r3, #252	; 0xfc
 800a0c0:	75fb      	strb	r3, [r7, #23]
 800a0c2:	e02c      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d825      	bhi.n	800a116 <VL53L0X_SetSequenceStepEnable+0xea>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0e5 	.word	0x0800a0e5
 800a0d4:	0800a0ef 	.word	0x0800a0ef
 800a0d8:	0800a0f9 	.word	0x0800a0f9
 800a0dc:	0800a103 	.word	0x0800a103
 800a0e0:	0800a10d 	.word	0x0800a10d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a0e4:	7dbb      	ldrb	r3, [r7, #22]
 800a0e6:	f023 0310 	bic.w	r3, r3, #16
 800a0ea:	75bb      	strb	r3, [r7, #22]
				break;
 800a0ec:	e017      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a0ee:	7dbb      	ldrb	r3, [r7, #22]
 800a0f0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a0f4:	75bb      	strb	r3, [r7, #22]
				break;
 800a0f6:	e012      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a0f8:	7dbb      	ldrb	r3, [r7, #22]
 800a0fa:	f023 0304 	bic.w	r3, r3, #4
 800a0fe:	75bb      	strb	r3, [r7, #22]
				break;
 800a100:	e00d      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a102:	7dbb      	ldrb	r3, [r7, #22]
 800a104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a108:	75bb      	strb	r3, [r7, #22]
				break;
 800a10a:	e008      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a10c:	7dbb      	ldrb	r3, [r7, #22]
 800a10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a112:	75bb      	strb	r3, [r7, #22]
				break;
 800a114:	e003      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a116:	23fc      	movs	r3, #252	; 0xfc
 800a118:	75fb      	strb	r3, [r7, #23]
 800a11a:	e000      	b.n	800a11e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a11c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	7dba      	ldrb	r2, [r7, #22]
 800a122:	429a      	cmp	r2, r3
 800a124:	d01e      	beq.n	800a164 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d107      	bne.n	800a13e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a12e:	7dbb      	ldrb	r3, [r7, #22]
 800a130:	461a      	mov	r2, r3
 800a132:	2101      	movs	r1, #1
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f004 f9fb 	bl	800e530 <VL53L0X_WrByte>
 800a13a:	4603      	mov	r3, r0
 800a13c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d103      	bne.n	800a14e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	7dba      	ldrb	r2, [r7, #22]
 800a14a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a14e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d106      	bne.n	800a164 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a15c:	6939      	ldr	r1, [r7, #16]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff ff0e 	bl	8009f80 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607b      	str	r3, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	72fb      	strb	r3, [r7, #11]
 800a17e:	4613      	mov	r3, r2
 800a180:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a182:	2300      	movs	r3, #0
 800a184:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d836      	bhi.n	800a200 <sequence_step_enabled+0x90>
 800a192:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <sequence_step_enabled+0x28>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a1ad 	.word	0x0800a1ad
 800a19c:	0800a1bf 	.word	0x0800a1bf
 800a1a0:	0800a1d1 	.word	0x0800a1d1
 800a1a4:	0800a1e3 	.word	0x0800a1e3
 800a1a8:	0800a1f5 	.word	0x0800a1f5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a1ac:	7abb      	ldrb	r3, [r7, #10]
 800a1ae:	111b      	asrs	r3, r3, #4
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	701a      	strb	r2, [r3, #0]
		break;
 800a1bc:	e022      	b.n	800a204 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a1be:	7abb      	ldrb	r3, [r7, #10]
 800a1c0:	10db      	asrs	r3, r3, #3
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	701a      	strb	r2, [r3, #0]
		break;
 800a1ce:	e019      	b.n	800a204 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a1d0:	7abb      	ldrb	r3, [r7, #10]
 800a1d2:	109b      	asrs	r3, r3, #2
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	701a      	strb	r2, [r3, #0]
		break;
 800a1e0:	e010      	b.n	800a204 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a1e2:	7abb      	ldrb	r3, [r7, #10]
 800a1e4:	119b      	asrs	r3, r3, #6
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	701a      	strb	r2, [r3, #0]
		break;
 800a1f2:	e007      	b.n	800a204 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a1f4:	7abb      	ldrb	r3, [r7, #10]
 800a1f6:	09db      	lsrs	r3, r3, #7
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	701a      	strb	r2, [r3, #0]
		break;
 800a1fe:	e001      	b.n	800a204 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a200:	23fc      	movs	r3, #252	; 0xfc
 800a202:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a21e:	2300      	movs	r3, #0
 800a220:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a226:	f107 030e 	add.w	r3, r7, #14
 800a22a:	461a      	mov	r2, r3
 800a22c:	2101      	movs	r1, #1
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f004 fa00 	bl	800e634 <VL53L0X_RdByte>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d107      	bne.n	800a250 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800a240:	7bba      	ldrb	r2, [r7, #14]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2100      	movs	r1, #0
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff ff92 	bl	800a170 <sequence_step_enabled>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d108      	bne.n	800a26a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800a258:	7bba      	ldrb	r2, [r7, #14]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	3302      	adds	r3, #2
 800a25e:	2101      	movs	r1, #1
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff ff85 	bl	800a170 <sequence_step_enabled>
 800a266:	4603      	mov	r3, r0
 800a268:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d108      	bne.n	800a284 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800a272:	7bba      	ldrb	r2, [r7, #14]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	3301      	adds	r3, #1
 800a278:	2102      	movs	r1, #2
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff ff78 	bl	800a170 <sequence_step_enabled>
 800a280:	4603      	mov	r3, r0
 800a282:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d108      	bne.n	800a29e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800a28c:	7bba      	ldrb	r2, [r7, #14]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	3303      	adds	r3, #3
 800a292:	2103      	movs	r1, #3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ff6b 	bl	800a170 <sequence_step_enabled>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d108      	bne.n	800a2b8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800a2a6:	7bba      	ldrb	r2, [r7, #14]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	2104      	movs	r1, #4
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff ff5e 	bl	800a170 <sequence_step_enabled>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a2d2:	f107 030c 	add.w	r3, r7, #12
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	21f8      	movs	r1, #248	; 0xf8
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f004 f9d4 	bl	800e688 <VL53L0X_RdWord>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d108      	bne.n	800a2fe <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2104      	movs	r1, #4
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f004 f9ff 	bl	800e6f8 <VL53L0X_RdDWord>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10c      	bne.n	800a320 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800a306:	89bb      	ldrh	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	89ba      	ldrh	r2, [r7, #12]
 800a310:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a320:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a336:	2300      	movs	r3, #0
 800a338:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	7f1b      	ldrb	r3, [r3, #28]
 800a33e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	7bba      	ldrb	r2, [r7, #14]
 800a344:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800a364:	f107 030e 	add.w	r3, r7, #14
 800a368:	461a      	mov	r2, r3
 800a36a:	2120      	movs	r1, #32
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f004 f98b 	bl	800e688 <VL53L0X_RdWord>
 800a372:	4603      	mov	r3, r0
 800a374:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800a376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d118      	bne.n	800a3b0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800a37e:	89fb      	ldrh	r3, [r7, #14]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d109      	bne.n	800a398 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	771a      	strb	r2, [r3, #28]
 800a396:	e00b      	b.n	800a3b0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	807b      	strh	r3, [r7, #2]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a3dc:	887b      	ldrh	r3, [r7, #2]
 800a3de:	2b05      	cmp	r3, #5
 800a3e0:	d902      	bls.n	800a3e8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3e2:	23fc      	movs	r3, #252	; 0xfc
 800a3e4:	75fb      	strb	r3, [r7, #23]
 800a3e6:	e05b      	b.n	800a4a0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800a3e8:	787b      	ldrb	r3, [r7, #1]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d106      	bne.n	800a3fc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	73bb      	strb	r3, [r7, #14]
 800a3fa:	e00a      	b.n	800a412 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a3fc:	887b      	ldrh	r3, [r7, #2]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	330c      	adds	r3, #12
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800a40e:	2301      	movs	r3, #1
 800a410:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800a412:	887b      	ldrh	r3, [r7, #2]
 800a414:	2b05      	cmp	r3, #5
 800a416:	d841      	bhi.n	800a49c <VL53L0X_SetLimitCheckEnable+0xe0>
 800a418:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <VL53L0X_SetLimitCheckEnable+0x64>)
 800a41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41e:	bf00      	nop
 800a420:	0800a439 	.word	0x0800a439
 800a424:	0800a443 	.word	0x0800a443
 800a428:	0800a459 	.word	0x0800a459
 800a42c:	0800a463 	.word	0x0800a463
 800a430:	0800a46d 	.word	0x0800a46d
 800a434:	0800a485 	.word	0x0800a485

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	7bfa      	ldrb	r2, [r7, #15]
 800a43c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800a440:	e02e      	b.n	800a4a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a446:	b29b      	uxth	r3, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	2144      	movs	r1, #68	; 0x44
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f004 f893 	bl	800e578 <VL53L0X_WrWord>
 800a452:	4603      	mov	r3, r0
 800a454:	75fb      	strb	r3, [r7, #23]

			break;
 800a456:	e023      	b.n	800a4a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	7bfa      	ldrb	r2, [r7, #15]
 800a45c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800a460:	e01e      	b.n	800a4a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	7bfa      	ldrb	r2, [r7, #15]
 800a466:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800a46a:	e019      	b.n	800a4a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a472:	7b7b      	ldrb	r3, [r7, #13]
 800a474:	22fe      	movs	r2, #254	; 0xfe
 800a476:	2160      	movs	r1, #96	; 0x60
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f004 f8a7 	bl	800e5cc <VL53L0X_UpdateByte>
 800a47e:	4603      	mov	r3, r0
 800a480:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800a482:	e00d      	b.n	800a4a0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a48a:	7b7b      	ldrb	r3, [r7, #13]
 800a48c:	22ef      	movs	r2, #239	; 0xef
 800a48e:	2160      	movs	r1, #96	; 0x60
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f004 f89b 	bl	800e5cc <VL53L0X_UpdateByte>
 800a496:	4603      	mov	r3, r0
 800a498:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800a49a:	e001      	b.n	800a4a0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a49c:	23fc      	movs	r3, #252	; 0xfc
 800a49e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10f      	bne.n	800a4c8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800a4a8:	787b      	ldrb	r3, [r7, #1]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a4ae:	887b      	ldrh	r3, [r7, #2]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a4ba:	e005      	b.n	800a4c8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a4bc:	887b      	ldrh	r3, [r7, #2]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a4e6:	897b      	ldrh	r3, [r7, #10]
 800a4e8:	2b05      	cmp	r3, #5
 800a4ea:	d905      	bls.n	800a4f8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4ec:	23fc      	movs	r3, #252	; 0xfc
 800a4ee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
 800a4f6:	e008      	b.n	800a50a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a4f8:	897b      	ldrh	r3, [r7, #10]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a502:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	7dba      	ldrb	r2, [r7, #22]
 800a508:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a50a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	460b      	mov	r3, r1
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800a52e:	897b      	ldrh	r3, [r7, #10]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a538:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800a53a:	7dbb      	ldrb	r3, [r7, #22]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d107      	bne.n	800a550 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a540:	897b      	ldrh	r3, [r7, #10]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	330c      	adds	r3, #12
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	605a      	str	r2, [r3, #4]
 800a54e:	e040      	b.n	800a5d2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800a550:	897b      	ldrh	r3, [r7, #10]
 800a552:	2b05      	cmp	r3, #5
 800a554:	d830      	bhi.n	800a5b8 <VL53L0X_SetLimitCheckValue+0x9c>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <VL53L0X_SetLimitCheckValue+0x40>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a575 	.word	0x0800a575
 800a560:	0800a57d 	.word	0x0800a57d
 800a564:	0800a593 	.word	0x0800a593
 800a568:	0800a59b 	.word	0x0800a59b
 800a56c:	0800a5a3 	.word	0x0800a5a3
 800a570:	0800a5a3 	.word	0x0800a5a3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800a57a:	e01f      	b.n	800a5bc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a580:	b29b      	uxth	r3, r3
 800a582:	461a      	mov	r2, r3
 800a584:	2144      	movs	r1, #68	; 0x44
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f003 fff6 	bl	800e578 <VL53L0X_WrWord>
 800a58c:	4603      	mov	r3, r0
 800a58e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a590:	e014      	b.n	800a5bc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800a598:	e010      	b.n	800a5bc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800a5a0:	e00c      	b.n	800a5bc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	2164      	movs	r1, #100	; 0x64
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f003 ffe3 	bl	800e578 <VL53L0X_WrWord>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800a5b6:	e001      	b.n	800a5bc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a5b8:	23fc      	movs	r3, #252	; 0xfc
 800a5ba:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d106      	bne.n	800a5d2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a5c4:	897b      	ldrh	r3, [r7, #10]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	330c      	adds	r3, #12
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop

0800a5e0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800a5f6:	897b      	ldrh	r3, [r7, #10]
 800a5f8:	2b05      	cmp	r3, #5
 800a5fa:	d847      	bhi.n	800a68c <VL53L0X_GetLimitCheckValue+0xac>
 800a5fc:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <VL53L0X_GetLimitCheckValue+0x24>)
 800a5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a602:	bf00      	nop
 800a604:	0800a61d 	.word	0x0800a61d
 800a608:	0800a629 	.word	0x0800a629
 800a60c:	0800a64f 	.word	0x0800a64f
 800a610:	0800a65b 	.word	0x0800a65b
 800a614:	0800a667 	.word	0x0800a667
 800a618:	0800a667 	.word	0x0800a667

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a620:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	77bb      	strb	r3, [r7, #30]
		break;
 800a626:	e033      	b.n	800a690 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a628:	f107 0316 	add.w	r3, r7, #22
 800a62c:	461a      	mov	r2, r3
 800a62e:	2144      	movs	r1, #68	; 0x44
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f004 f829 	bl	800e688 <VL53L0X_RdWord>
 800a636:	4603      	mov	r3, r0
 800a638:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a63a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d102      	bne.n	800a648 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a642:	8afb      	ldrh	r3, [r7, #22]
 800a644:	025b      	lsls	r3, r3, #9
 800a646:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800a648:	2301      	movs	r3, #1
 800a64a:	77bb      	strb	r3, [r7, #30]
		break;
 800a64c:	e020      	b.n	800a690 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a652:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	77bb      	strb	r3, [r7, #30]
		break;
 800a658:	e01a      	b.n	800a690 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	77bb      	strb	r3, [r7, #30]
		break;
 800a664:	e014      	b.n	800a690 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800a666:	f107 0316 	add.w	r3, r7, #22
 800a66a:	461a      	mov	r2, r3
 800a66c:	2164      	movs	r1, #100	; 0x64
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f004 f80a 	bl	800e688 <VL53L0X_RdWord>
 800a674:	4603      	mov	r3, r0
 800a676:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a678:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d102      	bne.n	800a686 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a680:	8afb      	ldrh	r3, [r7, #22]
 800a682:	025b      	lsls	r3, r3, #9
 800a684:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	77bb      	strb	r3, [r7, #30]
		break;
 800a68a:	e001      	b.n	800a690 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a68c:	23fc      	movs	r3, #252	; 0xfc
 800a68e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a690:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d12a      	bne.n	800a6ee <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a698:	7fbb      	ldrb	r3, [r7, #30]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d124      	bne.n	800a6e8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d110      	bne.n	800a6c6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a6a4:	897b      	ldrh	r3, [r7, #10]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	330c      	adds	r3, #12
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a6b8:	897b      	ldrh	r3, [r7, #10]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a6c4:	e013      	b.n	800a6ee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	69ba      	ldr	r2, [r7, #24]
 800a6ca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a6cc:	897b      	ldrh	r3, [r7, #10]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	330c      	adds	r3, #12
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a6da:	897b      	ldrh	r3, [r7, #10]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a6e6:	e002      	b.n	800a6ee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop

0800a6fc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a70a:	f107 030e 	add.w	r3, r7, #14
 800a70e:	461a      	mov	r2, r3
 800a710:	2101      	movs	r1, #1
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f003 ff8e 	bl	800e634 <VL53L0X_RdByte>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10e      	bne.n	800a742 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a724:	7bba      	ldrb	r2, [r7, #14]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	b25b      	sxtb	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	da03      	bge.n	800a73c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2201      	movs	r2, #1
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	e002      	b.n	800a742 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2200      	movs	r2, #0
 800a740:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d104      	bne.n	800a754 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781a      	ldrb	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a76c:	f107 030e 	add.w	r3, r7, #14
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fbd2 	bl	8009f1c <VL53L0X_GetDeviceMode>
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a77c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d107      	bne.n	800a794 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f898 	bl	800a8c0 <VL53L0X_StartMeasurement>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d104      	bne.n	800a7a6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 fb3f 	bl	800be20 <VL53L0X_measurement_poll_for_completion>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2203      	movs	r2, #3
 800a7b8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a7bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a7d8:	2301      	movs	r3, #1
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f001 fae1 	bl	800bda6 <VL53L0X_perform_ref_calibration>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a7e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a800:	2300      	movs	r3, #0
 800a802:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a80a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a80c:	7dbb      	ldrb	r3, [r7, #22]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d005      	beq.n	800a81e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a812:	7dbb      	ldrb	r3, [r7, #22]
 800a814:	2b02      	cmp	r3, #2
 800a816:	d002      	beq.n	800a81e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a818:	7dbb      	ldrb	r3, [r7, #22]
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d147      	bne.n	800a8ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a81e:	f107 030c 	add.w	r3, r7, #12
 800a822:	f107 0210 	add.w	r2, r7, #16
 800a826:	2101      	movs	r1, #1
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fbc3 	bl	800afb4 <VL53L0X_GetInterruptThresholds>
 800a82e:	4603      	mov	r3, r0
 800a830:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a838:	d803      	bhi.n	800a842 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a83a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a83c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a840:	d935      	bls.n	800a8ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d131      	bne.n	800a8ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d006      	beq.n	800a85e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a850:	491a      	ldr	r1, [pc, #104]	; (800a8bc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f002 ff56 	bl	800d704 <VL53L0X_load_tuning_settings>
 800a858:	4603      	mov	r3, r0
 800a85a:	75fb      	strb	r3, [r7, #23]
 800a85c:	e027      	b.n	800a8ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a85e:	2204      	movs	r2, #4
 800a860:	21ff      	movs	r1, #255	; 0xff
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f003 fe64 	bl	800e530 <VL53L0X_WrByte>
 800a868:	4603      	mov	r3, r0
 800a86a:	461a      	mov	r2, r3
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	4313      	orrs	r3, r2
 800a870:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a872:	2200      	movs	r2, #0
 800a874:	2170      	movs	r1, #112	; 0x70
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f003 fe5a 	bl	800e530 <VL53L0X_WrByte>
 800a87c:	4603      	mov	r3, r0
 800a87e:	461a      	mov	r2, r3
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	4313      	orrs	r3, r2
 800a884:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a886:	2200      	movs	r2, #0
 800a888:	21ff      	movs	r1, #255	; 0xff
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f003 fe50 	bl	800e530 <VL53L0X_WrByte>
 800a890:	4603      	mov	r3, r0
 800a892:	461a      	mov	r2, r3
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	4313      	orrs	r3, r2
 800a898:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a89a:	2200      	movs	r2, #0
 800a89c:	2180      	movs	r1, #128	; 0x80
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f003 fe46 	bl	800e530 <VL53L0X_WrByte>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20000104 	.word	0x20000104

0800a8c0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a8d0:	f107 030e 	add.w	r3, r7, #14
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7ff fb20 	bl	8009f1c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a8dc:	2201      	movs	r2, #1
 800a8de:	2180      	movs	r1, #128	; 0x80
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f003 fe25 	bl	800e530 <VL53L0X_WrByte>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	21ff      	movs	r1, #255	; 0xff
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f003 fe1e 	bl	800e530 <VL53L0X_WrByte>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f003 fe17 	bl	800e530 <VL53L0X_WrByte>
 800a902:	4603      	mov	r3, r0
 800a904:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a90c:	461a      	mov	r2, r3
 800a90e:	2191      	movs	r1, #145	; 0x91
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f003 fe0d 	bl	800e530 <VL53L0X_WrByte>
 800a916:	4603      	mov	r3, r0
 800a918:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a91a:	2201      	movs	r2, #1
 800a91c:	2100      	movs	r1, #0
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f003 fe06 	bl	800e530 <VL53L0X_WrByte>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a928:	2200      	movs	r2, #0
 800a92a:	21ff      	movs	r1, #255	; 0xff
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f003 fdff 	bl	800e530 <VL53L0X_WrByte>
 800a932:	4603      	mov	r3, r0
 800a934:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a936:	2200      	movs	r2, #0
 800a938:	2180      	movs	r1, #128	; 0x80
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f003 fdf8 	bl	800e530 <VL53L0X_WrByte>
 800a940:	4603      	mov	r3, r0
 800a942:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	2b03      	cmp	r3, #3
 800a948:	d054      	beq.n	800a9f4 <VL53L0X_StartMeasurement+0x134>
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	dc6c      	bgt.n	800aa28 <VL53L0X_StartMeasurement+0x168>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d002      	beq.n	800a958 <VL53L0X_StartMeasurement+0x98>
 800a952:	2b01      	cmp	r3, #1
 800a954:	d034      	beq.n	800a9c0 <VL53L0X_StartMeasurement+0x100>
 800a956:	e067      	b.n	800aa28 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a958:	2201      	movs	r2, #1
 800a95a:	2100      	movs	r1, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f003 fde7 	bl	800e530 <VL53L0X_WrByte>
 800a962:	4603      	mov	r3, r0
 800a964:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a96a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d15d      	bne.n	800aa2e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d008      	beq.n	800a98e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a97c:	f107 030d 	add.w	r3, r7, #13
 800a980:	461a      	mov	r2, r3
 800a982:	2100      	movs	r1, #0
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f003 fe55 	bl	800e634 <VL53L0X_RdByte>
 800a98a:	4603      	mov	r3, r0
 800a98c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	3301      	adds	r3, #1
 800a992:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a994:	7b7a      	ldrb	r2, [r7, #13]
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	4013      	ands	r3, r2
 800a99a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a99c:	7bfa      	ldrb	r2, [r7, #15]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d107      	bne.n	800a9b2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d103      	bne.n	800a9b2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a9b0:	d3e1      	bcc.n	800a976 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a9b8:	d339      	bcc.n	800aa2e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a9ba:	23f9      	movs	r3, #249	; 0xf9
 800a9bc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a9be:	e036      	b.n	800aa2e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a9c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d105      	bne.n	800a9d4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff ff12 	bl	800a7f4 <VL53L0X_CheckAndLoadInterruptSettings>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a9d4:	2202      	movs	r2, #2
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f003 fda9 	bl	800e530 <VL53L0X_WrByte>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a9e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d123      	bne.n	800aa32 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2204      	movs	r2, #4
 800a9ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a9f2:	e01e      	b.n	800aa32 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a9f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff fef8 	bl	800a7f4 <VL53L0X_CheckAndLoadInterruptSettings>
 800aa04:	4603      	mov	r3, r0
 800aa06:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800aa08:	2204      	movs	r2, #4
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f003 fd8f 	bl	800e530 <VL53L0X_WrByte>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800aa16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10b      	bne.n	800aa36 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2204      	movs	r2, #4
 800aa22:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800aa26:	e006      	b.n	800aa36 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800aa28:	23f8      	movs	r3, #248	; 0xf8
 800aa2a:	75fb      	strb	r3, [r7, #23]
 800aa2c:	e004      	b.n	800aa38 <VL53L0X_StartMeasurement+0x178>
		break;
 800aa2e:	bf00      	nop
 800aa30:	e002      	b.n	800aa38 <VL53L0X_StartMeasurement+0x178>
		break;
 800aa32:	bf00      	nop
 800aa34:	e000      	b.n	800aa38 <VL53L0X_StartMeasurement+0x178>
		break;
 800aa36:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800aa38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800aa58:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d112      	bne.n	800aa86 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800aa60:	f107 0308 	add.w	r3, r7, #8
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fb1a 	bl	800b0a0 <VL53L0X_GetInterruptMaskStatus>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d103      	bne.n	800aa7e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	e01c      	b.n	800aab8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	e018      	b.n	800aab8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800aa86:	f107 030d 	add.w	r3, r7, #13
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2114      	movs	r1, #20
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f003 fdd0 	bl	800e634 <VL53L0X_RdByte>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800aa98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10b      	bne.n	800aab8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800aaa0:	7b7b      	ldrb	r3, [r7, #13]
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d003      	beq.n	800aab2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2201      	movs	r2, #1
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e002      	b.n	800aab8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2200      	movs	r2, #0
 800aab6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800aac4:	b5b0      	push	{r4, r5, r7, lr}
 800aac6:	b096      	sub	sp, #88	; 0x58
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aace:	2300      	movs	r3, #0
 800aad0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800aad4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800aad8:	230c      	movs	r3, #12
 800aada:	2114      	movs	r1, #20
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f003 fcfb 	bl	800e4d8 <VL53L0X_ReadMulti>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800aae8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f040 80d1 	bne.w	800ac94 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800aafe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	021b      	lsls	r3, r3, #8
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	4413      	add	r3, r2
 800ab10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2200      	movs	r2, #0
 800ab18:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800ab1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	021b      	lsls	r3, r3, #8
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	4413      	add	r3, r2
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	025b      	lsls	r3, r3, #9
 800ab30:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab36:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800ab38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4413      	add	r3, r2
 800ab4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800ab4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab52:	025b      	lsls	r3, r3, #9
 800ab54:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800ab5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ab76:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800ab78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800ab86:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800ab8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800ab92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ab94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab98:	d046      	beq.n	800ac28 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800ab9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ab9c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800aba0:	fb02 f303 	mul.w	r3, r2, r3
 800aba4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aba8:	4a57      	ldr	r2, [pc, #348]	; (800ad08 <VL53L0X_GetRangingMeasurementData+0x244>)
 800abaa:	fb82 1203 	smull	r1, r2, r2, r3
 800abae:	1192      	asrs	r2, r2, #6
 800abb0:	17db      	asrs	r3, r3, #31
 800abb2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800abb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	7f1b      	ldrb	r3, [r3, #28]
 800abc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800abc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d02c      	beq.n	800ac28 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800abce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800abd0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800abd4:	fb02 f303 	mul.w	r3, r2, r3
 800abd8:	121a      	asrs	r2, r3, #8
					<= 0) {
 800abda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800abdc:	429a      	cmp	r2, r3
 800abde:	d10d      	bne.n	800abfc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800abe0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800abe8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800abec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800abf0:	e016      	b.n	800ac20 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800abf2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800abf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800abfa:	e011      	b.n	800ac20 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800abfc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ac00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac02:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800ac06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac08:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800ac0c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800ac10:	121b      	asrs	r3, r3, #8
 800ac12:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800ac14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac16:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800ac18:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800ac1c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800ac20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ac24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800ac28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00d      	beq.n	800ac4c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800ac30:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ac34:	089b      	lsrs	r3, r3, #2
 800ac36:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800ac3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	019b      	lsls	r3, r3, #6
 800ac44:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	75da      	strb	r2, [r3, #23]
 800ac4a:	e006      	b.n	800ac5a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800ac52:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2200      	movs	r2, #0
 800ac58:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800ac5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ac5e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800ac62:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f003 f9e5 	bl	800e040 <VL53L0X_get_pal_range_status>
 800ac76:	4603      	mov	r3, r0
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800ac84:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800ac8c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac94:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d12f      	bne.n	800acfc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f107 040c 	add.w	r4, r7, #12
 800aca2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800aca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800acae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800acb6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800acbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800acc4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800acca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800acd0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800acd6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800acdc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800ace2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800acec:	f107 050c 	add.w	r5, r7, #12
 800acf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800acf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800acfc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3750      	adds	r7, #80	; 0x50
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bdb0      	pop	{r4, r5, r7, pc}
 800ad08:	10624dd3 	.word	0x10624dd3

0800ad0c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff f8d1 	bl	8009ec4 <VL53L0X_SetDeviceMode>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ad26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d104      	bne.n	800ad38 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fd16 	bl	800a760 <VL53L0X_PerformSingleMeasurement>
 800ad34:	4603      	mov	r3, r0
 800ad36:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800ad38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d105      	bne.n	800ad4c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff febe 	bl	800aac4 <VL53L0X_GetRangingMeasurementData>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800ad4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d105      	bne.n	800ad60 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800ad54:	2100      	movs	r1, #0
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f962 	bl	800b020 <VL53L0X_ClearInterruptMask>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800ad60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	461a      	mov	r2, r3
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	70fb      	strb	r3, [r7, #3]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70bb      	strb	r3, [r7, #2]
 800ad82:	4613      	mov	r3, r2
 800ad84:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800ad90:	23f6      	movs	r3, #246	; 0xf6
 800ad92:	73fb      	strb	r3, [r7, #15]
 800ad94:	e107      	b.n	800afa6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800ad96:	78bb      	ldrb	r3, [r7, #2]
 800ad98:	2b14      	cmp	r3, #20
 800ad9a:	d110      	bne.n	800adbe <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800ad9c:	7e3b      	ldrb	r3, [r7, #24]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800ada2:	2310      	movs	r3, #16
 800ada4:	73bb      	strb	r3, [r7, #14]
 800ada6:	e001      	b.n	800adac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800ada8:	2301      	movs	r3, #1
 800adaa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	461a      	mov	r2, r3
 800adb0:	2184      	movs	r1, #132	; 0x84
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f003 fbbc 	bl	800e530 <VL53L0X_WrByte>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
 800adbc:	e0f3      	b.n	800afa6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800adbe:	78bb      	ldrb	r3, [r7, #2]
 800adc0:	2b15      	cmp	r3, #21
 800adc2:	f040 8097 	bne.w	800aef4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800adc6:	2201      	movs	r2, #1
 800adc8:	21ff      	movs	r1, #255	; 0xff
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f003 fbb0 	bl	800e530 <VL53L0X_WrByte>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4313      	orrs	r3, r2
 800add8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800adda:	2200      	movs	r2, #0
 800addc:	2100      	movs	r1, #0
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f003 fba6 	bl	800e530 <VL53L0X_WrByte>
 800ade4:	4603      	mov	r3, r0
 800ade6:	461a      	mov	r2, r3
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	4313      	orrs	r3, r2
 800adec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800adee:	2200      	movs	r2, #0
 800adf0:	21ff      	movs	r1, #255	; 0xff
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f003 fb9c 	bl	800e530 <VL53L0X_WrByte>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ae02:	2201      	movs	r2, #1
 800ae04:	2180      	movs	r1, #128	; 0x80
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f003 fb92 	bl	800e530 <VL53L0X_WrByte>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	461a      	mov	r2, r3
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800ae16:	2202      	movs	r2, #2
 800ae18:	2185      	movs	r1, #133	; 0x85
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f003 fb88 	bl	800e530 <VL53L0X_WrByte>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800ae2a:	2204      	movs	r2, #4
 800ae2c:	21ff      	movs	r1, #255	; 0xff
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f003 fb7e 	bl	800e530 <VL53L0X_WrByte>
 800ae34:	4603      	mov	r3, r0
 800ae36:	461a      	mov	r2, r3
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800ae3e:	2200      	movs	r2, #0
 800ae40:	21cd      	movs	r1, #205	; 0xcd
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f003 fb74 	bl	800e530 <VL53L0X_WrByte>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800ae52:	2211      	movs	r2, #17
 800ae54:	21cc      	movs	r1, #204	; 0xcc
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f003 fb6a 	bl	800e530 <VL53L0X_WrByte>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461a      	mov	r2, r3
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800ae66:	2207      	movs	r2, #7
 800ae68:	21ff      	movs	r1, #255	; 0xff
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f003 fb60 	bl	800e530 <VL53L0X_WrByte>
 800ae70:	4603      	mov	r3, r0
 800ae72:	461a      	mov	r2, r3
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	21be      	movs	r1, #190	; 0xbe
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f003 fb56 	bl	800e530 <VL53L0X_WrByte>
 800ae84:	4603      	mov	r3, r0
 800ae86:	461a      	mov	r2, r3
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800ae8e:	2206      	movs	r2, #6
 800ae90:	21ff      	movs	r1, #255	; 0xff
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f003 fb4c 	bl	800e530 <VL53L0X_WrByte>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800aea2:	2209      	movs	r2, #9
 800aea4:	21cc      	movs	r1, #204	; 0xcc
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f003 fb42 	bl	800e530 <VL53L0X_WrByte>
 800aeac:	4603      	mov	r3, r0
 800aeae:	461a      	mov	r2, r3
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	21ff      	movs	r1, #255	; 0xff
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f003 fb38 	bl	800e530 <VL53L0X_WrByte>
 800aec0:	4603      	mov	r3, r0
 800aec2:	461a      	mov	r2, r3
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aeca:	2201      	movs	r2, #1
 800aecc:	21ff      	movs	r1, #255	; 0xff
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f003 fb2e 	bl	800e530 <VL53L0X_WrByte>
 800aed4:	4603      	mov	r3, r0
 800aed6:	461a      	mov	r2, r3
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800aede:	2200      	movs	r2, #0
 800aee0:	2100      	movs	r1, #0
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f003 fb24 	bl	800e530 <VL53L0X_WrByte>
 800aee8:	4603      	mov	r3, r0
 800aeea:	461a      	mov	r2, r3
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	73fb      	strb	r3, [r7, #15]
 800aef2:	e058      	b.n	800afa6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800aef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d121      	bne.n	800af40 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800aefc:	787b      	ldrb	r3, [r7, #1]
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d81b      	bhi.n	800af3a <VL53L0X_SetGpioConfig+0x1ce>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <VL53L0X_SetGpioConfig+0x19c>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af1d 	.word	0x0800af1d
 800af0c:	0800af23 	.word	0x0800af23
 800af10:	0800af29 	.word	0x0800af29
 800af14:	0800af2f 	.word	0x0800af2f
 800af18:	0800af35 	.word	0x0800af35
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73bb      	strb	r3, [r7, #14]
				break;
 800af20:	e00f      	b.n	800af42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800af22:	2301      	movs	r3, #1
 800af24:	73bb      	strb	r3, [r7, #14]
				break;
 800af26:	e00c      	b.n	800af42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800af28:	2302      	movs	r3, #2
 800af2a:	73bb      	strb	r3, [r7, #14]
				break;
 800af2c:	e009      	b.n	800af42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800af2e:	2303      	movs	r3, #3
 800af30:	73bb      	strb	r3, [r7, #14]
				break;
 800af32:	e006      	b.n	800af42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800af34:	2304      	movs	r3, #4
 800af36:	73bb      	strb	r3, [r7, #14]
				break;
 800af38:	e003      	b.n	800af42 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800af3a:	23f5      	movs	r3, #245	; 0xf5
 800af3c:	73fb      	strb	r3, [r7, #15]
 800af3e:	e000      	b.n	800af42 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800af40:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800af42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d107      	bne.n	800af5a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800af4a:	7bbb      	ldrb	r3, [r7, #14]
 800af4c:	461a      	mov	r2, r3
 800af4e:	210a      	movs	r1, #10
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f003 faed 	bl	800e530 <VL53L0X_WrByte>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800af5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10f      	bne.n	800af82 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800af62:	7e3b      	ldrb	r3, [r7, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	73bb      	strb	r3, [r7, #14]
 800af6c:	e001      	b.n	800af72 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800af6e:	2310      	movs	r3, #16
 800af70:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800af72:	7bbb      	ldrb	r3, [r7, #14]
 800af74:	22ef      	movs	r2, #239	; 0xef
 800af76:	2184      	movs	r1, #132	; 0x84
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f003 fb27 	bl	800e5cc <VL53L0X_UpdateByte>
 800af7e:	4603      	mov	r3, r0
 800af80:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800af82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d103      	bne.n	800af92 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	787a      	ldrb	r2, [r7, #1]
 800af8e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800af92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d105      	bne.n	800afa6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800af9a:	2100      	movs	r1, #0
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f83f 	bl	800b020 <VL53L0X_ClearInterruptMask>
 800afa2:	4603      	mov	r3, r0
 800afa4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800afa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop

0800afb4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	607a      	str	r2, [r7, #4]
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	460b      	mov	r3, r1
 800afc2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	461a      	mov	r2, r3
 800afce:	210e      	movs	r1, #14
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f003 fb59 	bl	800e688 <VL53L0X_RdWord>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800afda:	8abb      	ldrh	r3, [r7, #20]
 800afdc:	045b      	lsls	r3, r3, #17
 800afde:	461a      	mov	r2, r3
 800afe0:	4b0e      	ldr	r3, [pc, #56]	; (800b01c <VL53L0X_GetInterruptThresholds+0x68>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800afe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10f      	bne.n	800b010 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800aff0:	f107 0314 	add.w	r3, r7, #20
 800aff4:	461a      	mov	r2, r3
 800aff6:	210c      	movs	r1, #12
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f003 fb45 	bl	800e688 <VL53L0X_RdWord>
 800affe:	4603      	mov	r3, r0
 800b000:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800b002:	8abb      	ldrh	r3, [r7, #20]
 800b004:	045b      	lsls	r3, r3, #17
 800b006:	461a      	mov	r2, r3
 800b008:	4b04      	ldr	r3, [pc, #16]	; (800b01c <VL53L0X_GetInterruptThresholds+0x68>)
 800b00a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b010:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	1ffe0000 	.word	0x1ffe0000

0800b020 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800b032:	2201      	movs	r2, #1
 800b034:	210b      	movs	r1, #11
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f003 fa7a 	bl	800e530 <VL53L0X_WrByte>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800b040:	2200      	movs	r2, #0
 800b042:	210b      	movs	r1, #11
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f003 fa73 	bl	800e530 <VL53L0X_WrByte>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
 800b050:	4313      	orrs	r3, r2
 800b052:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800b054:	f107 030d 	add.w	r3, r7, #13
 800b058:	461a      	mov	r2, r3
 800b05a:	2113      	movs	r1, #19
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f003 fae9 	bl	800e634 <VL53L0X_RdByte>
 800b062:	4603      	mov	r3, r0
 800b064:	461a      	mov	r2, r3
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	4313      	orrs	r3, r2
 800b06a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	3301      	adds	r3, #1
 800b070:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800b072:	7b7b      	ldrb	r3, [r7, #13]
 800b074:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d006      	beq.n	800b08a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d803      	bhi.n	800b08a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800b082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0d3      	beq.n	800b032 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d901      	bls.n	800b094 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800b090:	23f4      	movs	r3, #244	; 0xf4
 800b092:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800b0ae:	f107 030e 	add.w	r3, r7, #14
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	2113      	movs	r1, #19
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f003 fabc 	bl	800e634 <VL53L0X_RdByte>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	f003 0207 	and.w	r2, r3, #7
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	f003 0318 	and.w	r3, r3, #24
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800b0d4:	23fa      	movs	r3, #250	; 0xfa
 800b0d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800b0d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 fa03 	bl	800b504 <VL53L0X_perform_ref_spad_management>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800b102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800b11c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b120:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800b122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b126:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800b128:	f107 0308 	add.w	r3, r7, #8
 800b12c:	461a      	mov	r2, r3
 800b12e:	2128      	movs	r1, #40	; 0x28
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f003 faa9 	bl	800e688 <VL53L0X_RdWord>
 800b136:	4603      	mov	r3, r0
 800b138:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800b13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d11e      	bne.n	800b180 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800b142:	893b      	ldrh	r3, [r7, #8]
 800b144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b148:	b29b      	uxth	r3, r3
 800b14a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800b14c:	893b      	ldrh	r3, [r7, #8]
 800b14e:	461a      	mov	r2, r3
 800b150:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b154:	429a      	cmp	r2, r3
 800b156:	dd0b      	ble.n	800b170 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800b158:	893a      	ldrh	r2, [r7, #8]
 800b15a:	897b      	ldrh	r3, [r7, #10]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	b29b      	uxth	r3, r3
 800b160:	b21b      	sxth	r3, r3
 800b162:	461a      	mov	r2, r3
					* 250;
 800b164:	23fa      	movs	r3, #250	; 0xfa
 800b166:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e007      	b.n	800b180 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800b170:	893b      	ldrh	r3, [r7, #8]
 800b172:	b21b      	sxth	r3, r3
 800b174:	461a      	mov	r2, r3
 800b176:	23fa      	movs	r3, #250	; 0xfa
 800b178:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800b180:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b08b      	sub	sp, #44	; 0x2c
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800b19a:	2308      	movs	r3, #8
 800b19c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1bc:	69b9      	ldr	r1, [r7, #24]
 800b1be:	fb01 f202 	mul.w	r2, r1, r2
 800b1c2:	1a9b      	subs	r3, r3, r2
 800b1c4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ca:	e030      	b.n	800b22e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	4413      	add	r3, r2
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800b1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d11e      	bne.n	800b220 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800b1e2:	7ffa      	ldrb	r2, [r7, #31]
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	fa42 f303 	asr.w	r3, r2, r3
 800b1ea:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800b1f0:	e016      	b.n	800b220 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800b1f2:	7ffb      	ldrb	r3, [r7, #31]
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00b      	beq.n	800b214 <get_next_good_spad+0x88>
				success = 1;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	fb03 f202 	mul.w	r2, r3, r2
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	4413      	add	r3, r2
 800b20c:	461a      	mov	r2, r3
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	601a      	str	r2, [r3, #0]
				break;
 800b212:	e009      	b.n	800b228 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800b214:	7ffb      	ldrb	r3, [r7, #31]
 800b216:	085b      	lsrs	r3, r3, #1
 800b218:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	3301      	adds	r3, #1
 800b21e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800b220:	6a3a      	ldr	r2, [r7, #32]
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	429a      	cmp	r2, r3
 800b226:	d3e4      	bcc.n	800b1f2 <get_next_good_spad+0x66>
				coarseIndex++) {
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22a:	3301      	adds	r3, #1
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800b22e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	429a      	cmp	r2, r3
 800b234:	d202      	bcs.n	800b23c <get_next_good_spad+0xb0>
 800b236:	7fbb      	ldrb	r3, [r7, #30]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d0c7      	beq.n	800b1cc <get_next_good_spad+0x40>
		}
	}
}
 800b23c:	bf00      	nop
 800b23e:	372c      	adds	r7, #44	; 0x2c
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800b250:	2301      	movs	r3, #1
 800b252:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	099b      	lsrs	r3, r3, #6
 800b258:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800b25a:	4a07      	ldr	r2, [pc, #28]	; (800b278 <is_aperture+0x30>)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <is_aperture+0x22>
		isAperture = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	200002bc 	.word	0x200002bc

0800b27c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b089      	sub	sp, #36	; 0x24
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b288:	2300      	movs	r3, #0
 800b28a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800b28c:	2308      	movs	r3, #8
 800b28e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	fbb2 f3f3 	udiv	r3, r2, r3
 800b298:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2a2:	69b9      	ldr	r1, [r7, #24]
 800b2a4:	fb01 f202 	mul.w	r2, r1, r2
 800b2a8:	1a9b      	subs	r3, r3, r2
 800b2aa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d302      	bcc.n	800b2ba <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b2b4:	23ce      	movs	r3, #206	; 0xce
 800b2b6:	77fb      	strb	r3, [r7, #31]
 800b2b8:	e010      	b.n	800b2dc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	4413      	add	r3, r2
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	b25a      	sxtb	r2, r3
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b2cc:	b25b      	sxtb	r3, r3
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	b259      	sxtb	r1, r3
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	b2ca      	uxtb	r2, r1
 800b2da:	701a      	strb	r2, [r3, #0]

	return status;
 800b2dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3724      	adds	r7, #36	; 0x24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800b2f6:	2306      	movs	r3, #6
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	21b0      	movs	r1, #176	; 0xb0
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f003 f8bb 	bl	800e478 <VL53L0X_WriteMulti>
 800b302:	4603      	mov	r3, r0
 800b304:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800b306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800b31c:	2306      	movs	r3, #6
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	21b0      	movs	r1, #176	; 0xb0
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f003 f8d8 	bl	800e4d8 <VL53L0X_ReadMulti>
 800b328:	4603      	mov	r3, r0
 800b32a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800b32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08c      	sub	sp, #48	; 0x30
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	460b      	mov	r3, r1
 800b346:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b348:	2300      	movs	r3, #0
 800b34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800b34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b350:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800b352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b354:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b356:	2300      	movs	r3, #0
 800b358:	62bb      	str	r3, [r7, #40]	; 0x28
 800b35a:	e02b      	b.n	800b3b4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800b35c:	f107 031c 	add.w	r3, r7, #28
 800b360:	6a3a      	ldr	r2, [r7, #32]
 800b362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7ff ff11 	bl	800b18c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b370:	d103      	bne.n	800b37a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b372:	23ce      	movs	r3, #206	; 0xce
 800b374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b378:	e020      	b.n	800b3bc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	461a      	mov	r2, r3
 800b37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b380:	4413      	add	r3, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff ff60 	bl	800b248 <is_aperture>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	4293      	cmp	r3, r2
 800b390:	d003      	beq.n	800b39a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b392:	23ce      	movs	r3, #206	; 0xce
 800b394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800b398:	e010      	b.n	800b3bc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800b39e:	6a3a      	ldr	r2, [r7, #32]
 800b3a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3a2:	6838      	ldr	r0, [r7, #0]
 800b3a4:	f7ff ff6a 	bl	800b27c <enable_spad_bit>
		currentSpad++;
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d3cf      	bcc.n	800b35c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800b3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3be:	6a3a      	ldr	r2, [r7, #32]
 800b3c0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800b3c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7ff ff8d 	bl	800b2ec <set_ref_spad_map>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800b3d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d121      	bne.n	800b424 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800b3e0:	f107 0314 	add.w	r3, r7, #20
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f7ff ff93 	bl	800b312 <get_ref_spad_map>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800b3f6:	e011      	b.n	800b41c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800b3f8:	683a      	ldr	r2, [r7, #0]
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	4413      	add	r3, r2
 800b3fe:	781a      	ldrb	r2, [r3, #0]
 800b400:	f107 0114 	add.w	r1, r7, #20
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	440b      	add	r3, r1
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d003      	beq.n	800b416 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b40e:	23ce      	movs	r3, #206	; 0xce
 800b410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800b414:	e006      	b.n	800b424 <enable_ref_spads+0xec>
			}
			i++;
 800b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b418:	3301      	adds	r3, #1
 800b41a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800b41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	429a      	cmp	r2, r3
 800b422:	d3e9      	bcc.n	800b3f8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800b424:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3730      	adds	r7, #48	; 0x30
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08a      	sub	sp, #40	; 0x28
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b44c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800b450:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b454:	2b00      	cmp	r3, #0
 800b456:	d107      	bne.n	800b468 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800b458:	22c0      	movs	r2, #192	; 0xc0
 800b45a:	2101      	movs	r1, #1
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f003 f867 	bl	800e530 <VL53L0X_WrByte>
 800b462:	4603      	mov	r3, r0
 800b464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800b468:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d108      	bne.n	800b482 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800b470:	f107 0308 	add.w	r3, r7, #8
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff fc48 	bl	800ad0c <VL53L0X_PerformSingleRangingMeasurement>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800b482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b486:	2b00      	cmp	r3, #0
 800b488:	d107      	bne.n	800b49a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b48a:	2201      	movs	r2, #1
 800b48c:	21ff      	movs	r1, #255	; 0xff
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f003 f84e 	bl	800e530 <VL53L0X_WrByte>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800b49a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d107      	bne.n	800b4b2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	21b6      	movs	r1, #182	; 0xb6
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f003 f8ee 	bl	800e688 <VL53L0X_RdWord>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800b4b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d107      	bne.n	800b4ca <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	21ff      	movs	r1, #255	; 0xff
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f003 f836 	bl	800e530 <VL53L0X_WrByte>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800b4ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d112      	bne.n	800b4f8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b4d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	2101      	movs	r1, #1
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f003 f828 	bl	800e530 <VL53L0X_WrByte>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800b4e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d104      	bne.n	800b4f8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b4f4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800b4f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3728      	adds	r7, #40	; 0x28
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b09d      	sub	sp, #116	; 0x74
 800b508:	af06      	add	r7, sp, #24
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b510:	2300      	movs	r3, #0
 800b512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800b516:	23b4      	movs	r3, #180	; 0xb4
 800b518:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800b51c:	2303      	movs	r3, #3
 800b51e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800b520:	232c      	movs	r3, #44	; 0x2c
 800b522:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800b530:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800b534:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800b53e:	2306      	movs	r3, #6
 800b540:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800b568:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800b56a:	2300      	movs	r3, #0
 800b56c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b56e:	e009      	b.n	800b584 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b574:	4413      	add	r3, r2
 800b576:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b57a:	2200      	movs	r2, #0
 800b57c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b580:	3301      	adds	r3, #1
 800b582:	64bb      	str	r3, [r7, #72]	; 0x48
 800b584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	429a      	cmp	r2, r3
 800b58a:	d3f1      	bcc.n	800b570 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b58c:	2201      	movs	r2, #1
 800b58e:	21ff      	movs	r1, #255	; 0xff
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f002 ffcd 	bl	800e530 <VL53L0X_WrByte>
 800b596:	4603      	mov	r3, r0
 800b598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b59c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d107      	bne.n	800b5b4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	214f      	movs	r1, #79	; 0x4f
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f002 ffc1 	bl	800e530 <VL53L0X_WrByte>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b5b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d107      	bne.n	800b5cc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800b5bc:	222c      	movs	r2, #44	; 0x2c
 800b5be:	214e      	movs	r1, #78	; 0x4e
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f002 ffb5 	bl	800e530 <VL53L0X_WrByte>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b5cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d107      	bne.n	800b5e4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	21ff      	movs	r1, #255	; 0xff
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f002 ffa9 	bl	800e530 <VL53L0X_WrByte>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800b5e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d109      	bne.n	800b600 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800b5ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	21b6      	movs	r1, #182	; 0xb6
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f002 ff9b 	bl	800e530 <VL53L0X_WrByte>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800b600:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b604:	2b00      	cmp	r3, #0
 800b606:	d107      	bne.n	800b618 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800b608:	2200      	movs	r2, #0
 800b60a:	2180      	movs	r1, #128	; 0x80
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f002 ff8f 	bl	800e530 <VL53L0X_WrByte>
 800b612:	4603      	mov	r3, r0
 800b614:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800b618:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10a      	bne.n	800b636 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800b620:	f107 0210 	add.w	r2, r7, #16
 800b624:	f107 0111 	add.w	r1, r7, #17
 800b628:	2300      	movs	r3, #0
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f000 fbbb 	bl	800bda6 <VL53L0X_perform_ref_calibration>
 800b630:	4603      	mov	r3, r0
 800b632:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800b636:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d121      	bne.n	800b682 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800b642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b644:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800b65a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b65e:	f107 0218 	add.w	r2, r7, #24
 800b662:	9204      	str	r2, [sp, #16]
 800b664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b666:	9203      	str	r2, [sp, #12]
 800b668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b66a:	9202      	str	r2, [sp, #8]
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	4623      	mov	r3, r4
 800b674:	4602      	mov	r2, r0
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f7ff fe5e 	bl	800b338 <enable_ref_spads>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b682:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b686:	2b00      	cmp	r3, #0
 800b688:	d174      	bne.n	800b774 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b68e:	f107 0312 	add.w	r3, r7, #18
 800b692:	4619      	mov	r1, r3
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff fecb 	bl	800b430 <perform_ref_signal_measurement>
 800b69a:	4603      	mov	r3, r0
 800b69c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b6a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d161      	bne.n	800b76c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b6a8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b6aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d25d      	bcs.n	800b76c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b4:	e009      	b.n	800b6ca <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b6c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d3f1      	bcc.n	800b6b6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b6d2:	e002      	b.n	800b6da <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b6da:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800b6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6e0:	4413      	add	r3, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fdb0 	bl	800b248 <is_aperture>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d103      	bne.n	800b6f6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b6ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d3ee      	bcc.n	800b6d4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800b6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6fc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800b70a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b70e:	f107 0218 	add.w	r2, r7, #24
 800b712:	9204      	str	r2, [sp, #16]
 800b714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b716:	9203      	str	r2, [sp, #12]
 800b718:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b71a:	9202      	str	r2, [sp, #8]
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	4623      	mov	r3, r4
 800b724:	4602      	mov	r2, r0
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff fe06 	bl	800b338 <enable_ref_spads>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b732:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b736:	2b00      	cmp	r3, #0
 800b738:	d11b      	bne.n	800b772 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b73e:	f107 0312 	add.w	r3, r7, #18
 800b742:	4619      	mov	r1, r3
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fe73 	bl	800b430 <perform_ref_signal_measurement>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b750:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10c      	bne.n	800b772 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b758:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b75a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d208      	bcs.n	800b772 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b760:	2301      	movs	r3, #1
 800b762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800b766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b768:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b76a:	e002      	b.n	800b772 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b770:	e000      	b.n	800b774 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b772:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b774:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f040 80af 	bne.w	800b8dc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b77e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b780:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b782:	429a      	cmp	r2, r3
 800b784:	f240 80aa 	bls.w	800b8dc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b78a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b790:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800b798:	f107 031c 	add.w	r3, r7, #28
 800b79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f003 f81a 	bl	800e7d8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b7a4:	8a7b      	ldrh	r3, [r7, #18]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bfb8      	it	lt
 800b7b0:	425b      	neglt	r3, r3
 800b7b2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800b7ba:	e086      	b.n	800b8ca <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800b7c2:	f107 0314 	add.w	r3, r7, #20
 800b7c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7ca:	f7ff fcdf 	bl	800b18c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d4:	d103      	bne.n	800b7de <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b7d6:	23ce      	movs	r3, #206	; 0xce
 800b7d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800b7dc:	e07e      	b.n	800b8dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b7de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff fd2e 	bl	800b248 <is_aperture>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d003      	beq.n	800b7fe <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800b7fc:	e06e      	b.n	800b8dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b800:	3301      	adds	r3, #1
 800b802:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800b80e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fd32 	bl	800b27c <enable_spad_bit>
 800b818:	4603      	mov	r3, r0
 800b81a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b81e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b822:	2b00      	cmp	r3, #0
 800b824:	d10c      	bne.n	800b840 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b828:	3301      	adds	r3, #1
 800b82a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800b832:	4619      	mov	r1, r3
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f7ff fd59 	bl	800b2ec <set_ref_spad_map>
 800b83a:	4603      	mov	r3, r0
 800b83c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b840:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b844:	2b00      	cmp	r3, #0
 800b846:	d146      	bne.n	800b8d6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b848:	f107 0312 	add.w	r3, r7, #18
 800b84c:	4619      	mov	r1, r3
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f7ff fdee 	bl	800b430 <perform_ref_signal_measurement>
 800b854:	4603      	mov	r3, r0
 800b856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b85a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d13b      	bne.n	800b8da <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b862:	8a7b      	ldrh	r3, [r7, #18]
 800b864:	461a      	mov	r2, r3
 800b866:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	bfb8      	it	lt
 800b86e:	425b      	neglt	r3, r3
 800b870:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b872:	8a7b      	ldrh	r3, [r7, #18]
 800b874:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b876:	429a      	cmp	r2, r3
 800b878:	d21c      	bcs.n	800b8b4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b87e:	429a      	cmp	r2, r3
 800b880:	d914      	bls.n	800b8ac <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b882:	f107 031c 	add.w	r3, r7, #28
 800b886:	4619      	mov	r1, r3
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff fd2f 	bl	800b2ec <set_ref_spad_map>
 800b88e:	4603      	mov	r3, r0
 800b890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b89a:	f107 011c 	add.w	r1, r7, #28
 800b89e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f002 ff99 	bl	800e7d8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b2:	e00a      	b.n	800b8ca <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b8be:	f107 031c 	add.w	r3, r7, #28
 800b8c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f002 ff87 	bl	800e7d8 <memcpy>
		while (!complete) {
 800b8ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f43f af74 	beq.w	800b7bc <VL53L0X_perform_ref_spad_management+0x2b8>
 800b8d4:	e002      	b.n	800b8dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b8d6:	bf00      	nop
 800b8d8:	e000      	b.n	800b8dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b8da:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b8dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d115      	bne.n	800b910 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8e8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b8f0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	781a      	ldrb	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b910:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b914:	4618      	mov	r0, r3
 800b916:	375c      	adds	r7, #92	; 0x5c
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd90      	pop	{r4, r7, pc}

0800b91c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b91c:	b590      	push	{r4, r7, lr}
 800b91e:	b093      	sub	sp, #76	; 0x4c
 800b920:	af06      	add	r7, sp, #24
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b934:	23b4      	movs	r3, #180	; 0xb4
 800b936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b93a:	2306      	movs	r3, #6
 800b93c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b93e:	232c      	movs	r3, #44	; 0x2c
 800b940:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b942:	2201      	movs	r2, #1
 800b944:	21ff      	movs	r1, #255	; 0xff
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f002 fdf2 	bl	800e530 <VL53L0X_WrByte>
 800b94c:	4603      	mov	r3, r0
 800b94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b952:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b956:	2b00      	cmp	r3, #0
 800b958:	d107      	bne.n	800b96a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b95a:	2200      	movs	r2, #0
 800b95c:	214f      	movs	r1, #79	; 0x4f
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f002 fde6 	bl	800e530 <VL53L0X_WrByte>
 800b964:	4603      	mov	r3, r0
 800b966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b96a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d107      	bne.n	800b982 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b972:	222c      	movs	r2, #44	; 0x2c
 800b974:	214e      	movs	r1, #78	; 0x4e
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f002 fdda 	bl	800e530 <VL53L0X_WrByte>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b982:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b986:	2b00      	cmp	r3, #0
 800b988:	d107      	bne.n	800b99a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b98a:	2200      	movs	r2, #0
 800b98c:	21ff      	movs	r1, #255	; 0xff
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f002 fdce 	bl	800e530 <VL53L0X_WrByte>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b99a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d109      	bne.n	800b9b6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b9a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	21b6      	movs	r1, #182	; 0xb6
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f002 fdc0 	bl	800e530 <VL53L0X_WrByte>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ba:	e009      	b.n	800b9d0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d3f1      	bcc.n	800b9bc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d011      	beq.n	800ba02 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b9de:	e002      	b.n	800b9e6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b9e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	4413      	add	r3, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fc2a 	bl	800b248 <is_aperture>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <VL53L0X_set_reference_spads+0xe6>
 800b9fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d3ee      	bcc.n	800b9e0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800ba0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba12:	79f9      	ldrb	r1, [r7, #7]
 800ba14:	f107 0214 	add.w	r2, r7, #20
 800ba18:	9204      	str	r2, [sp, #16]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	9203      	str	r2, [sp, #12]
 800ba1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba20:	9202      	str	r2, [sp, #8]
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4623      	mov	r3, r4
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f7ff fc83 	bl	800b338 <enable_ref_spads>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800ba38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10c      	bne.n	800ba5a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	79fa      	ldrb	r2, [r7, #7]
 800ba56:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800ba5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3734      	adds	r7, #52	; 0x34
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd90      	pop	{r4, r7, pc}

0800ba66 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800ba76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800ba7e:	78fb      	ldrb	r3, [r7, #3]
 800ba80:	f043 0301 	orr.w	r3, r3, #1
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	461a      	mov	r2, r3
 800ba88:	2100      	movs	r1, #0
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f002 fd50 	bl	800e530 <VL53L0X_WrByte>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800ba94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d104      	bne.n	800baa6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f9bf 	bl	800be20 <VL53L0X_measurement_poll_for_completion>
 800baa2:	4603      	mov	r3, r0
 800baa4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800baa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d105      	bne.n	800baba <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800baae:	2100      	movs	r1, #0
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff fab5 	bl	800b020 <VL53L0X_ClearInterruptMask>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800baba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800bac2:	2200      	movs	r2, #0
 800bac4:	2100      	movs	r1, #0
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f002 fd32 	bl	800e530 <VL53L0X_WrByte>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]

	return Status;
 800bad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	4608      	mov	r0, r1
 800bae6:	4611      	mov	r1, r2
 800bae8:	461a      	mov	r2, r3
 800baea:	4603      	mov	r3, r0
 800baec:	70fb      	strb	r3, [r7, #3]
 800baee:	460b      	mov	r3, r1
 800baf0:	70bb      	strb	r3, [r7, #2]
 800baf2:	4613      	mov	r3, r2
 800baf4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bafe:	2201      	movs	r2, #1
 800bb00:	21ff      	movs	r1, #255	; 0xff
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f002 fd14 	bl	800e530 <VL53L0X_WrByte>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bb12:	2200      	movs	r2, #0
 800bb14:	2100      	movs	r1, #0
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f002 fd0a 	bl	800e530 <VL53L0X_WrByte>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461a      	mov	r2, r3
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bb26:	2200      	movs	r2, #0
 800bb28:	21ff      	movs	r1, #255	; 0xff
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f002 fd00 	bl	800e530 <VL53L0X_WrByte>
 800bb30:	4603      	mov	r3, r0
 800bb32:	461a      	mov	r2, r3
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01e      	beq.n	800bb7e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800bb40:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d009      	beq.n	800bb5c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	21cb      	movs	r1, #203	; 0xcb
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f002 fd71 	bl	800e634 <VL53L0X_RdByte>
 800bb52:	4603      	mov	r3, r0
 800bb54:	461a      	mov	r2, r3
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800bb5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d02a      	beq.n	800bbba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800bb64:	f107 030e 	add.w	r3, r7, #14
 800bb68:	461a      	mov	r2, r3
 800bb6a:	21ee      	movs	r1, #238	; 0xee
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f002 fd61 	bl	800e634 <VL53L0X_RdByte>
 800bb72:	4603      	mov	r3, r0
 800bb74:	461a      	mov	r2, r3
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	73fb      	strb	r3, [r7, #15]
 800bb7c:	e01d      	b.n	800bbba <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800bb7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00a      	beq.n	800bb9c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800bb86:	78bb      	ldrb	r3, [r7, #2]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	21cb      	movs	r1, #203	; 0xcb
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f002 fccf 	bl	800e530 <VL53L0X_WrByte>
 800bb92:	4603      	mov	r3, r0
 800bb94:	461a      	mov	r2, r3
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800bb9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00a      	beq.n	800bbba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800bba4:	787b      	ldrb	r3, [r7, #1]
 800bba6:	2280      	movs	r2, #128	; 0x80
 800bba8:	21ee      	movs	r1, #238	; 0xee
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f002 fd0e 	bl	800e5cc <VL53L0X_UpdateByte>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bbba:	2201      	movs	r2, #1
 800bbbc:	21ff      	movs	r1, #255	; 0xff
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f002 fcb6 	bl	800e530 <VL53L0X_WrByte>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bbce:	2201      	movs	r2, #1
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f002 fcac 	bl	800e530 <VL53L0X_WrByte>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	461a      	mov	r2, r3
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	21ff      	movs	r1, #255	; 0xff
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f002 fca2 	bl	800e530 <VL53L0X_WrByte>
 800bbec:	4603      	mov	r3, r0
 800bbee:	461a      	mov	r2, r3
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
 800bbf8:	f023 0310 	bic.w	r3, r3, #16
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	701a      	strb	r2, [r3, #0]

	return Status;
 800bc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b08a      	sub	sp, #40	; 0x28
 800bc12:	af04      	add	r7, sp, #16
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	60b9      	str	r1, [r7, #8]
 800bc18:	4611      	mov	r1, r2
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	71fb      	strb	r3, [r7, #7]
 800bc20:	4613      	mov	r3, r2
 800bc22:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc24:	2300      	movs	r3, #0
 800bc26:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800bc38:	79bb      	ldrb	r3, [r7, #6]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bc44:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800bc46:	2201      	movs	r2, #1
 800bc48:	2101      	movs	r1, #1
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f002 fc70 	bl	800e530 <VL53L0X_WrByte>
 800bc50:	4603      	mov	r3, r0
 800bc52:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800bc54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d105      	bne.n	800bc68 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800bc5c:	2140      	movs	r1, #64	; 0x40
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7ff ff01 	bl	800ba66 <VL53L0X_perform_single_ref_calibration>
 800bc64:	4603      	mov	r3, r0
 800bc66:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800bc68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d115      	bne.n	800bc9c <VL53L0X_perform_vhv_calibration+0x8e>
 800bc70:	79fb      	ldrb	r3, [r7, #7]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d112      	bne.n	800bc9c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800bc76:	7d39      	ldrb	r1, [r7, #20]
 800bc78:	7d7a      	ldrb	r2, [r7, #21]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	9303      	str	r3, [sp, #12]
 800bc7e:	2301      	movs	r3, #1
 800bc80:	9302      	str	r3, [sp, #8]
 800bc82:	f107 0313 	add.w	r3, r7, #19
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	2101      	movs	r1, #1
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f7ff ff23 	bl	800badc <VL53L0X_ref_calibration_io>
 800bc96:	4603      	mov	r3, r0
 800bc98:	75fb      	strb	r3, [r7, #23]
 800bc9a:	e002      	b.n	800bca2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800bca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d112      	bne.n	800bcd0 <VL53L0X_perform_vhv_calibration+0xc2>
 800bcaa:	79bb      	ldrb	r3, [r7, #6]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00f      	beq.n	800bcd0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bcb0:	7dbb      	ldrb	r3, [r7, #22]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f002 fc3a 	bl	800e530 <VL53L0X_WrByte>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bcc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d103      	bne.n	800bcd0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	7dba      	ldrb	r2, [r7, #22]
 800bccc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bcd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	; 0x28
 800bce0:	af04      	add	r7, sp, #16
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	4611      	mov	r1, r2
 800bce8:	461a      	mov	r2, r3
 800bcea:	460b      	mov	r3, r1
 800bcec:	71fb      	strb	r3, [r7, #7]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800bd02:	79bb      	ldrb	r3, [r7, #6]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d003      	beq.n	800bd10 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bd0e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800bd10:	2202      	movs	r2, #2
 800bd12:	2101      	movs	r1, #1
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f002 fc0b 	bl	800e530 <VL53L0X_WrByte>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800bd1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d105      	bne.n	800bd32 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800bd26:	2100      	movs	r1, #0
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7ff fe9c 	bl	800ba66 <VL53L0X_perform_single_ref_calibration>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800bd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d115      	bne.n	800bd66 <VL53L0X_perform_phase_calibration+0x8a>
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d112      	bne.n	800bd66 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800bd40:	7d39      	ldrb	r1, [r7, #20]
 800bd42:	7d7a      	ldrb	r2, [r7, #21]
 800bd44:	2301      	movs	r3, #1
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9302      	str	r3, [sp, #8]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	f107 0313 	add.w	r3, r7, #19
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	460b      	mov	r3, r1
 800bd58:	2101      	movs	r1, #1
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7ff febe 	bl	800badc <VL53L0X_ref_calibration_io>
 800bd60:	4603      	mov	r3, r0
 800bd62:	75fb      	strb	r3, [r7, #23]
 800bd64:	e002      	b.n	800bd6c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800bd6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d112      	bne.n	800bd9a <VL53L0X_perform_phase_calibration+0xbe>
 800bd74:	79bb      	ldrb	r3, [r7, #6]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00f      	beq.n	800bd9a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bd7a:	7dbb      	ldrb	r3, [r7, #22]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	2101      	movs	r1, #1
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f002 fbd5 	bl	800e530 <VL53L0X_WrByte>
 800bd86:	4603      	mov	r3, r0
 800bd88:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800bd8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	7dba      	ldrb	r2, [r7, #22]
 800bd96:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800bd9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b086      	sub	sp, #24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	60f8      	str	r0, [r7, #12]
 800bdae:	60b9      	str	r1, [r7, #8]
 800bdb0:	607a      	str	r2, [r7, #4]
 800bdb2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800bdc2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800bdc4:	78fa      	ldrb	r2, [r7, #3]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f7ff ff1f 	bl	800bc0e <VL53L0X_perform_vhv_calibration>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800bdd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d107      	bne.n	800bdec <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800bddc:	78fa      	ldrb	r2, [r7, #3]
 800bdde:	2300      	movs	r3, #0
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f7ff ff7a 	bl	800bcdc <VL53L0X_perform_phase_calibration>
 800bde8:	4603      	mov	r3, r0
 800bdea:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800bdec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10f      	bne.n	800be14 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bdf4:	7dbb      	ldrb	r3, [r7, #22]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f002 fb98 	bl	800e530 <VL53L0X_WrByte>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800be04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d103      	bne.n	800be14 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	7dba      	ldrb	r2, [r7, #22]
 800be10:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800be14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be28:	2300      	movs	r3, #0
 800be2a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800be34:	f107 030f 	add.w	r3, r7, #15
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7fe fe02 	bl	800aa44 <VL53L0X_GetMeasurementDataReady>
 800be40:	4603      	mov	r3, r0
 800be42:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800be44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d110      	bne.n	800be6e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d00f      	beq.n	800be72 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	3301      	adds	r3, #1
 800be56:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be5e:	d302      	bcc.n	800be66 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800be60:	23f9      	movs	r3, #249	; 0xf9
 800be62:	75fb      	strb	r3, [r7, #23]
			break;
 800be64:	e006      	b.n	800be74 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f002 fc82 	bl	800e770 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800be6c:	e7e2      	b.n	800be34 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800be6e:	bf00      	nop
 800be70:	e000      	b.n	800be74 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800be72:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800be74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800be8e:	79fb      	ldrb	r3, [r7, #7]
 800be90:	3301      	adds	r3, #1
 800be92:	b2db      	uxtb	r3, r3
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800be98:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b085      	sub	sp, #20
 800beaa:	af00      	add	r7, sp, #0
 800beac:	4603      	mov	r3, r0
 800beae:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	085b      	lsrs	r3, r3, #1
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	3b01      	subs	r3, #1
 800bebc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800bed4:	2300      	movs	r3, #0
 800bed6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800bed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bedc:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800bede:	e002      	b.n	800bee6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	089b      	lsrs	r3, r3, #2
 800bee4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	429a      	cmp	r2, r3
 800beec:	d8f8      	bhi.n	800bee0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800beee:	e017      	b.n	800bf20 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	4413      	add	r3, r2
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d30b      	bcc.n	800bf14 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	4413      	add	r3, r2
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	085b      	lsrs	r3, r3, #1
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	4413      	add	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	e002      	b.n	800bf1a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	085b      	lsrs	r3, r3, #1
 800bf18:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	089b      	lsrs	r3, r3, #2
 800bf1e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1e4      	bne.n	800bef0 <VL53L0X_isqrt+0x24>
	}

	return res;
 800bf26:	68fb      	ldr	r3, [r7, #12]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800bf40:	2200      	movs	r2, #0
 800bf42:	2183      	movs	r1, #131	; 0x83
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f002 faf3 	bl	800e530 <VL53L0X_WrByte>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800bf54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11e      	bne.n	800bf9a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800bf60:	f107 030f 	add.w	r3, r7, #15
 800bf64:	461a      	mov	r2, r3
 800bf66:	2183      	movs	r1, #131	; 0x83
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f002 fb63 	bl	800e634 <VL53L0X_RdByte>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <VL53L0X_device_read_strobe+0x5a>
 800bf78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d106      	bne.n	800bf8e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	3301      	adds	r3, #1
 800bf84:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bf8c:	d3e8      	bcc.n	800bf60 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bf94:	d301      	bcc.n	800bf9a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800bf96:	23f9      	movs	r3, #249	; 0xf9
 800bf98:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	2183      	movs	r1, #131	; 0x83
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f002 fac6 	bl	800e530 <VL53L0X_WrByte>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800bfae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b098      	sub	sp, #96	; 0x60
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800bfea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800bfee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800c006:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c00a:	2b07      	cmp	r3, #7
 800c00c:	f000 8408 	beq.w	800c820 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c010:	2201      	movs	r2, #1
 800c012:	2180      	movs	r1, #128	; 0x80
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f002 fa8b 	bl	800e530 <VL53L0X_WrByte>
 800c01a:	4603      	mov	r3, r0
 800c01c:	461a      	mov	r2, r3
 800c01e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c022:	4313      	orrs	r3, r2
 800c024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c028:	2201      	movs	r2, #1
 800c02a:	21ff      	movs	r1, #255	; 0xff
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f002 fa7f 	bl	800e530 <VL53L0X_WrByte>
 800c032:	4603      	mov	r3, r0
 800c034:	461a      	mov	r2, r3
 800c036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c03a:	4313      	orrs	r3, r2
 800c03c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c040:	2200      	movs	r2, #0
 800c042:	2100      	movs	r1, #0
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f002 fa73 	bl	800e530 <VL53L0X_WrByte>
 800c04a:	4603      	mov	r3, r0
 800c04c:	461a      	mov	r2, r3
 800c04e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c052:	4313      	orrs	r3, r2
 800c054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c058:	2206      	movs	r2, #6
 800c05a:	21ff      	movs	r1, #255	; 0xff
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 fa67 	bl	800e530 <VL53L0X_WrByte>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c06a:	4313      	orrs	r3, r2
 800c06c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c070:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c074:	461a      	mov	r2, r3
 800c076:	2183      	movs	r1, #131	; 0x83
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f002 fadb 	bl	800e634 <VL53L0X_RdByte>
 800c07e:	4603      	mov	r3, r0
 800c080:	461a      	mov	r2, r3
 800c082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c086:	4313      	orrs	r3, r2
 800c088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800c08c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c090:	f043 0304 	orr.w	r3, r3, #4
 800c094:	b2db      	uxtb	r3, r3
 800c096:	461a      	mov	r2, r3
 800c098:	2183      	movs	r1, #131	; 0x83
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f002 fa48 	bl	800e530 <VL53L0X_WrByte>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800c0ae:	2207      	movs	r2, #7
 800c0b0:	21ff      	movs	r1, #255	; 0xff
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f002 fa3c 	bl	800e530 <VL53L0X_WrByte>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	2181      	movs	r1, #129	; 0x81
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f002 fa30 	bl	800e530 <VL53L0X_WrByte>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f002 fb46 	bl	800e770 <VL53L0X_PollingDelay>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	2180      	movs	r1, #128	; 0x80
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f002 fa1a 	bl	800e530 <VL53L0X_WrByte>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	461a      	mov	r2, r3
 800c100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c104:	4313      	orrs	r3, r2
 800c106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800c10a:	78fb      	ldrb	r3, [r7, #3]
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 8098 	beq.w	800c246 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c116:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c11a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f040 8091 	bne.w	800c246 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800c124:	226b      	movs	r2, #107	; 0x6b
 800c126:	2194      	movs	r1, #148	; 0x94
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f002 fa01 	bl	800e530 <VL53L0X_WrByte>
 800c12e:	4603      	mov	r3, r0
 800c130:	461a      	mov	r2, r3
 800c132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c136:	4313      	orrs	r3, r2
 800c138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff fef9 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c142:	4603      	mov	r3, r0
 800c144:	461a      	mov	r2, r3
 800c146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c150:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c154:	461a      	mov	r2, r3
 800c156:	2190      	movs	r1, #144	; 0x90
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f002 facd 	bl	800e6f8 <VL53L0X_RdDWord>
 800c15e:	4603      	mov	r3, r0
 800c160:	461a      	mov	r2, r3
 800c162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c166:	4313      	orrs	r3, r2
 800c168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	0a1b      	lsrs	r3, r3, #8
 800c170:	b2db      	uxtb	r3, r3
 800c172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c176:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	0bdb      	lsrs	r3, r3, #15
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800c188:	2224      	movs	r2, #36	; 0x24
 800c18a:	2194      	movs	r1, #148	; 0x94
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f002 f9cf 	bl	800e530 <VL53L0X_WrByte>
 800c192:	4603      	mov	r3, r0
 800c194:	461a      	mov	r2, r3
 800c196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c19a:	4313      	orrs	r3, r2
 800c19c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff fec7 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c1b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	2190      	movs	r1, #144	; 0x90
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f002 fa9b 	bl	800e6f8 <VL53L0X_RdDWord>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	0e1b      	lsrs	r3, r3, #24
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	0c1b      	lsrs	r3, r3, #16
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	0a1b      	lsrs	r3, r3, #8
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800c1ee:	2225      	movs	r2, #37	; 0x25
 800c1f0:	2194      	movs	r1, #148	; 0x94
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f002 f99c 	bl	800e530 <VL53L0X_WrByte>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c200:	4313      	orrs	r3, r2
 800c202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fe94 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c20c:	4603      	mov	r3, r0
 800c20e:	461a      	mov	r2, r3
 800c210:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c214:	4313      	orrs	r3, r2
 800c216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c21a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c21e:	461a      	mov	r2, r3
 800c220:	2190      	movs	r1, #144	; 0x90
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f002 fa68 	bl	800e6f8 <VL53L0X_RdDWord>
 800c228:	4603      	mov	r3, r0
 800c22a:	461a      	mov	r2, r3
 800c22c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c230:	4313      	orrs	r3, r2
 800c232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	0e1b      	lsrs	r3, r3, #24
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	0c1b      	lsrs	r3, r3, #16
 800c242:	b2db      	uxtb	r3, r3
 800c244:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800c246:	78fb      	ldrb	r3, [r7, #3]
 800c248:	f003 0302 	and.w	r3, r3, #2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 8189 	beq.w	800c564 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c252:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c256:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f040 8182 	bne.w	800c564 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800c260:	2202      	movs	r2, #2
 800c262:	2194      	movs	r1, #148	; 0x94
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f002 f963 	bl	800e530 <VL53L0X_WrByte>
 800c26a:	4603      	mov	r3, r0
 800c26c:	461a      	mov	r2, r3
 800c26e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c272:	4313      	orrs	r3, r2
 800c274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f7ff fe5b 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c27e:	4603      	mov	r3, r0
 800c280:	461a      	mov	r2, r3
 800c282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c286:	4313      	orrs	r3, r2
 800c288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800c28c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800c290:	461a      	mov	r2, r3
 800c292:	2190      	movs	r1, #144	; 0x90
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f002 f9cd 	bl	800e634 <VL53L0X_RdByte>
 800c29a:	4603      	mov	r3, r0
 800c29c:	461a      	mov	r2, r3
 800c29e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c2a8:	227b      	movs	r2, #123	; 0x7b
 800c2aa:	2194      	movs	r1, #148	; 0x94
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f002 f93f 	bl	800e530 <VL53L0X_WrByte>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff fe37 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800c2d4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800c2d8:	461a      	mov	r2, r3
 800c2da:	2190      	movs	r1, #144	; 0x90
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f002 f9a9 	bl	800e634 <VL53L0X_RdByte>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800c2f0:	2277      	movs	r2, #119	; 0x77
 800c2f2:	2194      	movs	r1, #148	; 0x94
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f002 f91b 	bl	800e530 <VL53L0X_WrByte>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c302:	4313      	orrs	r3, r2
 800c304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff fe13 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c30e:	4603      	mov	r3, r0
 800c310:	461a      	mov	r2, r3
 800c312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c316:	4313      	orrs	r3, r2
 800c318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c31c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c320:	461a      	mov	r2, r3
 800c322:	2190      	movs	r1, #144	; 0x90
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f002 f9e7 	bl	800e6f8 <VL53L0X_RdDWord>
 800c32a:	4603      	mov	r3, r0
 800c32c:	461a      	mov	r2, r3
 800c32e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c332:	4313      	orrs	r3, r2
 800c334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	0e5b      	lsrs	r3, r3, #25
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c342:	b2db      	uxtb	r3, r3
 800c344:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	0c9b      	lsrs	r3, r3, #18
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c350:	b2db      	uxtb	r3, r3
 800c352:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800c354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c356:	0adb      	lsrs	r3, r3, #11
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	091b      	lsrs	r3, r3, #4
 800c366:	b2db      	uxtb	r3, r3
 800c368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	b2db      	uxtb	r3, r3
 800c374:	00db      	lsls	r3, r3, #3
 800c376:	b2db      	uxtb	r3, r3
 800c378:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800c382:	2278      	movs	r2, #120	; 0x78
 800c384:	2194      	movs	r1, #148	; 0x94
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f002 f8d2 	bl	800e530 <VL53L0X_WrByte>
 800c38c:	4603      	mov	r3, r0
 800c38e:	461a      	mov	r2, r3
 800c390:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c394:	4313      	orrs	r3, r2
 800c396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fdca 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c3ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	2190      	movs	r1, #144	; 0x90
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f002 f99e 	bl	800e6f8 <VL53L0X_RdDWord>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	0f5b      	lsrs	r3, r3, #29
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800c3d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c3da:	4413      	add	r3, r2
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	0d9b      	lsrs	r3, r3, #22
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	0bdb      	lsrs	r3, r3, #15
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	0a1b      	lsrs	r3, r3, #8
 800c400:	b2db      	uxtb	r3, r3
 800c402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c406:	b2db      	uxtb	r3, r3
 800c408:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	085b      	lsrs	r3, r3, #1
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c414:	b2db      	uxtb	r3, r3
 800c416:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	019b      	lsls	r3, r3, #6
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c424:	b2db      	uxtb	r3, r3
 800c426:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800c42a:	2279      	movs	r2, #121	; 0x79
 800c42c:	2194      	movs	r1, #148	; 0x94
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f002 f87e 	bl	800e530 <VL53L0X_WrByte>
 800c434:	4603      	mov	r3, r0
 800c436:	461a      	mov	r2, r3
 800c438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c43c:	4313      	orrs	r3, r2
 800c43e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff fd76 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c448:	4603      	mov	r3, r0
 800c44a:	461a      	mov	r2, r3
 800c44c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c450:	4313      	orrs	r3, r2
 800c452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c45a:	461a      	mov	r2, r3
 800c45c:	2190      	movs	r1, #144	; 0x90
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f002 f94a 	bl	800e6f8 <VL53L0X_RdDWord>
 800c464:	4603      	mov	r3, r0
 800c466:	461a      	mov	r2, r3
 800c468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c46c:	4313      	orrs	r3, r2
 800c46e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	0e9b      	lsrs	r3, r3, #26
 800c476:	b2db      	uxtb	r3, r3
 800c478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c47c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800c47e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c482:	4413      	add	r3, r2
 800c484:	b2db      	uxtb	r3, r3
 800c486:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800c488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48a:	0cdb      	lsrs	r3, r3, #19
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c492:	b2db      	uxtb	r3, r3
 800c494:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	0b1b      	lsrs	r3, r3, #12
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a6:	095b      	lsrs	r3, r3, #5
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800c4c4:	227a      	movs	r2, #122	; 0x7a
 800c4c6:	2194      	movs	r1, #148	; 0x94
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f002 f831 	bl	800e530 <VL53L0X_WrByte>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff fd29 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c4f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	2190      	movs	r1, #144	; 0x90
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f002 f8fd 	bl	800e6f8 <VL53L0X_RdDWord>
 800c4fe:	4603      	mov	r3, r0
 800c500:	461a      	mov	r2, r3
 800c502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c506:	4313      	orrs	r3, r2
 800c508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	0f9b      	lsrs	r3, r3, #30
 800c510:	b2db      	uxtb	r3, r3
 800c512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c516:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800c518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c51c:	4413      	add	r3, r2
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	0ddb      	lsrs	r3, r3, #23
 800c526:	b2db      	uxtb	r3, r3
 800c528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	0c1b      	lsrs	r3, r3, #16
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	0a5b      	lsrs	r3, r3, #9
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	089b      	lsrs	r3, r3, #2
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800c55e:	2300      	movs	r3, #0
 800c560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800c564:	78fb      	ldrb	r3, [r7, #3]
 800c566:	f003 0304 	and.w	r3, r3, #4
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 80f1 	beq.w	800c752 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c574:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f040 80ea 	bne.w	800c752 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800c57e:	227b      	movs	r2, #123	; 0x7b
 800c580:	2194      	movs	r1, #148	; 0x94
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f001 ffd4 	bl	800e530 <VL53L0X_WrByte>
 800c588:	4603      	mov	r3, r0
 800c58a:	461a      	mov	r2, r3
 800c58c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c590:	4313      	orrs	r3, r2
 800c592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff fccc 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c59c:	4603      	mov	r3, r0
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800c5aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	2190      	movs	r1, #144	; 0x90
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f002 f8a0 	bl	800e6f8 <VL53L0X_RdDWord>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800c5c6:	227c      	movs	r2, #124	; 0x7c
 800c5c8:	2194      	movs	r1, #148	; 0x94
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 ffb0 	bl	800e530 <VL53L0X_WrByte>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff fca8 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800c5f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	2190      	movs	r1, #144	; 0x90
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f002 f87c 	bl	800e6f8 <VL53L0X_RdDWord>
 800c600:	4603      	mov	r3, r0
 800c602:	461a      	mov	r2, r3
 800c604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c608:	4313      	orrs	r3, r2
 800c60a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800c60e:	2273      	movs	r2, #115	; 0x73
 800c610:	2194      	movs	r1, #148	; 0x94
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 ff8c 	bl	800e530 <VL53L0X_WrByte>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c620:	4313      	orrs	r3, r2
 800c622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff fc84 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c62c:	4603      	mov	r3, r0
 800c62e:	461a      	mov	r2, r3
 800c630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c634:	4313      	orrs	r3, r2
 800c636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c63a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c63e:	461a      	mov	r2, r3
 800c640:	2190      	movs	r1, #144	; 0x90
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f002 f858 	bl	800e6f8 <VL53L0X_RdDWord>
 800c648:	4603      	mov	r3, r0
 800c64a:	461a      	mov	r2, r3
 800c64c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c650:	4313      	orrs	r3, r2
 800c652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800c65e:	2274      	movs	r2, #116	; 0x74
 800c660:	2194      	movs	r1, #148	; 0x94
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f001 ff64 	bl	800e530 <VL53L0X_WrByte>
 800c668:	4603      	mov	r3, r0
 800c66a:	461a      	mov	r2, r3
 800c66c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c670:	4313      	orrs	r3, r2
 800c672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff fc5c 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c67c:	4603      	mov	r3, r0
 800c67e:	461a      	mov	r2, r3
 800c680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c684:	4313      	orrs	r3, r2
 800c686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c68a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c68e:	461a      	mov	r2, r3
 800c690:	2190      	movs	r1, #144	; 0x90
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f002 f830 	bl	800e6f8 <VL53L0X_RdDWord>
 800c698:	4603      	mov	r3, r0
 800c69a:	461a      	mov	r2, r3
 800c69c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c6aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c6b0:	2275      	movs	r2, #117	; 0x75
 800c6b2:	2194      	movs	r1, #148	; 0x94
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f001 ff3b 	bl	800e530 <VL53L0X_WrByte>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	461a      	mov	r2, r3
 800c6be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff fc33 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c6dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	2190      	movs	r1, #144	; 0x90
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f002 f807 	bl	800e6f8 <VL53L0X_RdDWord>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c700:	2276      	movs	r2, #118	; 0x76
 800c702:	2194      	movs	r1, #148	; 0x94
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f001 ff13 	bl	800e530 <VL53L0X_WrByte>
 800c70a:	4603      	mov	r3, r0
 800c70c:	461a      	mov	r2, r3
 800c70e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c712:	4313      	orrs	r3, r2
 800c714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff fc0b 	bl	800bf34 <VL53L0X_device_read_strobe>
 800c71e:	4603      	mov	r3, r0
 800c720:	461a      	mov	r2, r3
 800c722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c726:	4313      	orrs	r3, r2
 800c728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c72c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c730:	461a      	mov	r2, r3
 800c732:	2190      	movs	r1, #144	; 0x90
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f001 ffdf 	bl	800e6f8 <VL53L0X_RdDWord>
 800c73a:	4603      	mov	r3, r0
 800c73c:	461a      	mov	r2, r3
 800c73e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c742:	4313      	orrs	r3, r2
 800c744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c74c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c74e:	4313      	orrs	r3, r2
 800c750:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c752:	2200      	movs	r2, #0
 800c754:	2181      	movs	r1, #129	; 0x81
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f001 feea 	bl	800e530 <VL53L0X_WrByte>
 800c75c:	4603      	mov	r3, r0
 800c75e:	461a      	mov	r2, r3
 800c760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c764:	4313      	orrs	r3, r2
 800c766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c76a:	2206      	movs	r2, #6
 800c76c:	21ff      	movs	r1, #255	; 0xff
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f001 fede 	bl	800e530 <VL53L0X_WrByte>
 800c774:	4603      	mov	r3, r0
 800c776:	461a      	mov	r2, r3
 800c778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c77c:	4313      	orrs	r3, r2
 800c77e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c782:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c786:	461a      	mov	r2, r3
 800c788:	2183      	movs	r1, #131	; 0x83
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f001 ff52 	bl	800e634 <VL53L0X_RdByte>
 800c790:	4603      	mov	r3, r0
 800c792:	461a      	mov	r2, r3
 800c794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c798:	4313      	orrs	r3, r2
 800c79a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c79e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7a2:	f023 0304 	bic.w	r3, r3, #4
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	2183      	movs	r1, #131	; 0x83
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f001 febf 	bl	800e530 <VL53L0X_WrByte>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	21ff      	movs	r1, #255	; 0xff
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 feb3 	bl	800e530 <VL53L0X_WrByte>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c7d8:	2201      	movs	r2, #1
 800c7da:	2100      	movs	r1, #0
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f001 fea7 	bl	800e530 <VL53L0X_WrByte>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	21ff      	movs	r1, #255	; 0xff
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f001 fe9b 	bl	800e530 <VL53L0X_WrByte>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c802:	4313      	orrs	r3, r2
 800c804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c808:	2200      	movs	r2, #0
 800c80a:	2180      	movs	r1, #128	; 0x80
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f001 fe8f 	bl	800e530 <VL53L0X_WrByte>
 800c812:	4603      	mov	r3, r0
 800c814:	461a      	mov	r2, r3
 800c816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c81a:	4313      	orrs	r3, r2
 800c81c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c820:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800c824:	2b00      	cmp	r3, #0
 800c826:	f040 808f 	bne.w	800c948 <VL53L0X_get_info_from_device+0x98e>
 800c82a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c82e:	2b07      	cmp	r3, #7
 800c830:	f000 808a 	beq.w	800c948 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d024      	beq.n	800c888 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c83e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c842:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c846:	2b00      	cmp	r3, #0
 800c848:	d11e      	bne.n	800c888 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800c850:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800c85a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c85e:	2300      	movs	r3, #0
 800c860:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c862:	e00e      	b.n	800c882 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c864:	f107 0208 	add.w	r2, r7, #8
 800c868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c86a:	4413      	add	r3, r2
 800c86c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c872:	4413      	add	r3, r2
 800c874:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c878:	460a      	mov	r2, r1
 800c87a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c87c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c87e:	3301      	adds	r3, #1
 800c880:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c884:	2b05      	cmp	r3, #5
 800c886:	dded      	ble.n	800c864 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	f003 0302 	and.w	r3, r3, #2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d018      	beq.n	800c8c4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c896:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d112      	bne.n	800c8c4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c89e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c8a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	33f3      	adds	r3, #243	; 0xf3
 800c8b6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c8b8:	f107 0310 	add.w	r3, r7, #16
 800c8bc:	4619      	mov	r1, r3
 800c8be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8c0:	f001 ffa0 	bl	800e804 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c8c4:	78fb      	ldrb	r3, [r7, #3]
 800c8c6:	f003 0304 	and.w	r3, r3, #4
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d030      	beq.n	800c930 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c8ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c8d2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d12a      	bne.n	800c930 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c8e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ec:	025b      	lsls	r3, r3, #9
 800c8ee:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c900:	2b00      	cmp	r3, #0
 800c902:	d011      	beq.n	800c928 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c90e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c912:	fb02 f303 	mul.w	r3, r2, r3
 800c916:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c918:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c91c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c920:	425b      	negs	r3, r3
 800c922:	b29b      	uxth	r3, r3
 800c924:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c928:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c930:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	4313      	orrs	r3, r2
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c93e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c948:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3760      	adds	r7, #96	; 0x60
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c960:	f240 6277 	movw	r2, #1655	; 0x677
 800c964:	f04f 0300 	mov.w	r3, #0
 800c968:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c96c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c970:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c972:	78fb      	ldrb	r3, [r7, #3]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	fb02 f303 	mul.w	r3, r2, r3
 800c980:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c982:	68bb      	ldr	r3, [r7, #8]
}
 800c984:	4618      	mov	r0, r3
 800c986:	371c      	adds	r7, #28
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c990:	b480      	push	{r7}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c99c:	2300      	movs	r3, #0
 800c99e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d017      	beq.n	800c9da <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c9b0:	e005      	b.n	800c9be <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	085b      	lsrs	r3, r3, #1
 800c9b6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1f4      	bne.n	800c9b2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c9c8:	89fb      	ldrh	r3, [r7, #14]
 800c9ca:	021b      	lsls	r3, r3, #8
 800c9cc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c9d6:	4413      	add	r3, r2
 800c9d8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c9da:	8afb      	ldrh	r3, [r7, #22]

}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	371c      	adds	r7, #28
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c9fa:	88fa      	ldrh	r2, [r7, #6]
 800c9fc:	0a12      	lsrs	r2, r2, #8
 800c9fe:	b292      	uxth	r2, r2
 800ca00:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800ca02:	3301      	adds	r3, #1
 800ca04:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800ca06:	68fb      	ldr	r3, [r7, #12]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b088      	sub	sp, #32
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ca26:	79fb      	ldrb	r3, [r7, #7]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f7ff ff92 	bl	800c954 <VL53L0X_calc_macro_period_ps>
 800ca30:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca38:	4a0a      	ldr	r2, [pc, #40]	; (800ca64 <VL53L0X_calc_timeout_mclks+0x50>)
 800ca3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca3e:	099b      	lsrs	r3, r3, #6
 800ca40:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca48:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	085b      	lsrs	r3, r3, #1
 800ca50:	441a      	add	r2, r3
	timeout_period_mclks =
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca58:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800ca5a:	69fb      	ldr	r3, [r7, #28]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	10624dd3 	.word	0x10624dd3

0800ca68 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b086      	sub	sp, #24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	807b      	strh	r3, [r7, #2]
 800ca74:	4613      	mov	r3, r2
 800ca76:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ca7c:	787b      	ldrb	r3, [r7, #1]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff ff67 	bl	800c954 <VL53L0X_calc_macro_period_ps>
 800ca86:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca8e:	4a0a      	ldr	r2, [pc, #40]	; (800cab8 <VL53L0X_calc_timeout_us+0x50>)
 800ca90:	fba2 2303 	umull	r2, r3, r2, r3
 800ca94:	099b      	lsrs	r3, r3, #6
 800ca96:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800ca98:	887b      	ldrh	r3, [r7, #2]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	fb02 f303 	mul.w	r3, r2, r3
 800caa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800caa4:	4a04      	ldr	r2, [pc, #16]	; (800cab8 <VL53L0X_calc_timeout_us+0x50>)
 800caa6:	fba2 2303 	umull	r2, r3, r2, r3
 800caaa:	099b      	lsrs	r3, r3, #6
 800caac:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800caae:	697b      	ldr	r3, [r7, #20]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	10624dd3 	.word	0x10624dd3

0800cabc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08c      	sub	sp, #48	; 0x30
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	460b      	mov	r3, r1
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800caca:	2300      	movs	r3, #0
 800cacc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800cae2:	7afb      	ldrb	r3, [r7, #11]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d005      	beq.n	800caf4 <get_sequence_step_timeout+0x38>
 800cae8:	7afb      	ldrb	r3, [r7, #11]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d002      	beq.n	800caf4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800caee:	7afb      	ldrb	r3, [r7, #11]
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d128      	bne.n	800cb46 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800caf4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800caf8:	461a      	mov	r2, r3
 800cafa:	2100      	movs	r1, #0
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f7fd fa7d 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800cb08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d109      	bne.n	800cb24 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800cb10:	f107 0320 	add.w	r3, r7, #32
 800cb14:	461a      	mov	r2, r3
 800cb16:	2146      	movs	r1, #70	; 0x46
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f001 fd8b 	bl	800e634 <VL53L0X_RdByte>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800cb24:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff ff5c 	bl	800c9e8 <VL53L0X_decode_timeout>
 800cb30:	4603      	mov	r3, r0
 800cb32:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cb34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cb38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f7ff ff93 	bl	800ca68 <VL53L0X_calc_timeout_us>
 800cb42:	62b8      	str	r0, [r7, #40]	; 0x28
 800cb44:	e092      	b.n	800cc6c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d135      	bne.n	800cbb8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cb4c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cb50:	461a      	mov	r2, r3
 800cb52:	2100      	movs	r1, #0
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f7fd fa51 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800cb60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f040 8081 	bne.w	800cc6c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cb6a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cb6e:	461a      	mov	r2, r3
 800cb70:	2100      	movs	r1, #0
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	f7fd fa42 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800cb7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800cb86:	f107 031e 	add.w	r3, r7, #30
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	2151      	movs	r1, #81	; 0x51
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f001 fd7a 	bl	800e688 <VL53L0X_RdWord>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800cb9a:	8bfb      	ldrh	r3, [r7, #30]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff ff23 	bl	800c9e8 <VL53L0X_decode_timeout>
 800cba2:	4603      	mov	r3, r0
 800cba4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cba6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cbaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbac:	4619      	mov	r1, r3
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7ff ff5a 	bl	800ca68 <VL53L0X_calc_timeout_us>
 800cbb4:	62b8      	str	r0, [r7, #40]	; 0x28
 800cbb6:	e059      	b.n	800cc6c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cbb8:	7afb      	ldrb	r3, [r7, #11]
 800cbba:	2b04      	cmp	r3, #4
 800cbbc:	d156      	bne.n	800cc6c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cbbe:	f107 0314 	add.w	r3, r7, #20
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f7fd fb25 	bl	800a214 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d01d      	beq.n	800cc10 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cbd4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cbd8:	461a      	mov	r2, r3
 800cbda:	2100      	movs	r1, #0
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7fd fa0d 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800cbe8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10f      	bne.n	800cc10 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800cbf0:	f107 031e 	add.w	r3, r7, #30
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	2151      	movs	r1, #81	; 0x51
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f001 fd45 	bl	800e688 <VL53L0X_RdWord>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800cc04:	8bfb      	ldrh	r3, [r7, #30]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff feee 	bl	800c9e8 <VL53L0X_decode_timeout>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800cc10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d109      	bne.n	800cc2c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cc18:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	2101      	movs	r1, #1
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7fd f9eb 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cc26:	4603      	mov	r3, r0
 800cc28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800cc2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10f      	bne.n	800cc54 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800cc34:	f107 031c 	add.w	r3, r7, #28
 800cc38:	461a      	mov	r2, r3
 800cc3a:	2171      	movs	r1, #113	; 0x71
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f001 fd23 	bl	800e688 <VL53L0X_RdWord>
 800cc42:	4603      	mov	r3, r0
 800cc44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800cc48:	8bbb      	ldrh	r3, [r7, #28]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff fecc 	bl	800c9e8 <VL53L0X_decode_timeout>
 800cc50:	4603      	mov	r3, r0
 800cc52:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800cc54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800cc5c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cc60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc62:	4619      	mov	r1, r3
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7ff feff 	bl	800ca68 <VL53L0X_calc_timeout_us>
 800cc6a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc70:	601a      	str	r2, [r3, #0]

	return Status;
 800cc72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3730      	adds	r7, #48	; 0x30
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b08a      	sub	sp, #40	; 0x28
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	60f8      	str	r0, [r7, #12]
 800cc86:	460b      	mov	r3, r1
 800cc88:	607a      	str	r2, [r7, #4]
 800cc8a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800cc92:	7afb      	ldrb	r3, [r7, #11]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d005      	beq.n	800cca4 <set_sequence_step_timeout+0x26>
 800cc98:	7afb      	ldrb	r3, [r7, #11]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d002      	beq.n	800cca4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800cc9e:	7afb      	ldrb	r3, [r7, #11]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d138      	bne.n	800cd16 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cca4:	f107 031b 	add.w	r3, r7, #27
 800cca8:	461a      	mov	r2, r3
 800ccaa:	2100      	movs	r1, #0
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7fd f9a5 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800ccb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11a      	bne.n	800ccf6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800ccc0:	7efb      	ldrb	r3, [r7, #27]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f7ff fea4 	bl	800ca14 <VL53L0X_calc_timeout_mclks>
 800cccc:	4603      	mov	r3, r0
 800ccce:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800ccd0:	8bbb      	ldrh	r3, [r7, #28]
 800ccd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccd6:	d903      	bls.n	800cce0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800ccd8:	23ff      	movs	r3, #255	; 0xff
 800ccda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ccde:	e004      	b.n	800ccea <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800cce0:	8bbb      	ldrh	r3, [r7, #28]
 800cce2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800cce4:	3b01      	subs	r3, #1
 800cce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ccea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ccf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f040 80ab 	bne.w	800ce56 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800cd00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd04:	461a      	mov	r2, r3
 800cd06:	2146      	movs	r1, #70	; 0x46
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f001 fc11 	bl	800e530 <VL53L0X_WrByte>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800cd14:	e09f      	b.n	800ce56 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800cd16:	7afb      	ldrb	r3, [r7, #11]
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d135      	bne.n	800cd88 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800cd1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d11b      	bne.n	800cd5c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cd24:	f107 031b 	add.w	r3, r7, #27
 800cd28:	461a      	mov	r2, r3
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7fd f965 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800cd38:	7efb      	ldrb	r3, [r7, #27]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	6879      	ldr	r1, [r7, #4]
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f7ff fe68 	bl	800ca14 <VL53L0X_calc_timeout_mclks>
 800cd44:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800cd46:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800cd48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7ff fe20 	bl	800c990 <VL53L0X_encode_timeout>
 800cd50:	4603      	mov	r3, r0
 800cd52:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd54:	8b3a      	ldrh	r2, [r7, #24]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cd5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d108      	bne.n	800cd76 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800cd64:	8b3b      	ldrh	r3, [r7, #24]
 800cd66:	461a      	mov	r2, r3
 800cd68:	2151      	movs	r1, #81	; 0x51
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f001 fc04 	bl	800e578 <VL53L0X_WrWord>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800cd76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d16b      	bne.n	800ce56 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800cd86:	e066      	b.n	800ce56 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800cd88:	7afb      	ldrb	r3, [r7, #11]
 800cd8a:	2b04      	cmp	r3, #4
 800cd8c:	d160      	bne.n	800ce50 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800cd8e:	f107 0310 	add.w	r3, r7, #16
 800cd92:	4619      	mov	r1, r3
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7fd fa3d 	bl	800a214 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800cd9e:	7cfb      	ldrb	r3, [r7, #19]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01d      	beq.n	800cde0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cda4:	f107 031b 	add.w	r3, r7, #27
 800cda8:	461a      	mov	r2, r3
 800cdaa:	2100      	movs	r1, #0
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f7fd f925 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800cdb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10f      	bne.n	800cde0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800cdc0:	f107 0318 	add.w	r3, r7, #24
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	2151      	movs	r1, #81	; 0x51
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f001 fc5d 	bl	800e688 <VL53L0X_RdWord>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800cdd4:	8b3b      	ldrh	r3, [r7, #24]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff fe06 	bl	800c9e8 <VL53L0X_decode_timeout>
 800cddc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800cdde:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800cde0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d109      	bne.n	800cdfc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800cde8:	f107 031b 	add.w	r3, r7, #27
 800cdec:	461a      	mov	r2, r3
 800cdee:	2101      	movs	r1, #1
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f7fd f903 	bl	8009ffc <VL53L0X_GetVcselPulsePeriod>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800cdfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d128      	bne.n	800ce56 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ce04:	7efb      	ldrb	r3, [r7, #27]
 800ce06:	461a      	mov	r2, r3
 800ce08:	6879      	ldr	r1, [r7, #4]
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f7ff fe02 	bl	800ca14 <VL53L0X_calc_timeout_mclks>
 800ce10:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ce12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce14:	6a3a      	ldr	r2, [r7, #32]
 800ce16:	4413      	add	r3, r2
 800ce18:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800ce1a:	6a38      	ldr	r0, [r7, #32]
 800ce1c:	f7ff fdb8 	bl	800c990 <VL53L0X_encode_timeout>
 800ce20:	4603      	mov	r3, r0
 800ce22:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800ce24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d108      	bne.n	800ce3e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ce2c:	8bfb      	ldrh	r3, [r7, #30]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	2171      	movs	r1, #113	; 0x71
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f001 fba0 	bl	800e578 <VL53L0X_WrWord>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ce3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d107      	bne.n	800ce56 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800ce4e:	e002      	b.n	800ce56 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce50:	23fc      	movs	r3, #252	; 0xfc
 800ce52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800ce56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3728      	adds	r7, #40	; 0x28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b08a      	sub	sp, #40	; 0x28
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce72:	2300      	movs	r3, #0
 800ce74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800ce78:	230c      	movs	r3, #12
 800ce7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800ce7e:	2312      	movs	r3, #18
 800ce80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800ce84:	2308      	movs	r3, #8
 800ce86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800ce8a:	230e      	movs	r3, #14
 800ce8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800ce94:	78bb      	ldrb	r3, [r7, #2]
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d003      	beq.n	800cea8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cea0:	23fc      	movs	r3, #252	; 0xfc
 800cea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cea6:	e020      	b.n	800ceea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10d      	bne.n	800ceca <VL53L0X_set_vcsel_pulse_period+0x68>
 800ceae:	78ba      	ldrb	r2, [r7, #2]
 800ceb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d304      	bcc.n	800cec2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800ceb8:	78ba      	ldrb	r2, [r7, #2]
 800ceba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d903      	bls.n	800ceca <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cec2:	23fc      	movs	r3, #252	; 0xfc
 800cec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cec8:	e00f      	b.n	800ceea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800ceca:	78fb      	ldrb	r3, [r7, #3]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d10c      	bne.n	800ceea <VL53L0X_set_vcsel_pulse_period+0x88>
 800ced0:	78ba      	ldrb	r2, [r7, #2]
 800ced2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d304      	bcc.n	800cee4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800ceda:	78ba      	ldrb	r2, [r7, #2]
 800cedc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d902      	bls.n	800ceea <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cee4:	23fc      	movs	r3, #252	; 0xfc
 800cee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800ceea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800cef2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cef6:	e239      	b.n	800d36c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d150      	bne.n	800cfa0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800cefe:	78bb      	ldrb	r3, [r7, #2]
 800cf00:	2b0c      	cmp	r3, #12
 800cf02:	d110      	bne.n	800cf26 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800cf04:	2218      	movs	r2, #24
 800cf06:	2157      	movs	r1, #87	; 0x57
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f001 fb11 	bl	800e530 <VL53L0X_WrByte>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800cf14:	2208      	movs	r2, #8
 800cf16:	2156      	movs	r1, #86	; 0x56
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f001 fb09 	bl	800e530 <VL53L0X_WrByte>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf24:	e17f      	b.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800cf26:	78bb      	ldrb	r3, [r7, #2]
 800cf28:	2b0e      	cmp	r3, #14
 800cf2a:	d110      	bne.n	800cf4e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800cf2c:	2230      	movs	r2, #48	; 0x30
 800cf2e:	2157      	movs	r1, #87	; 0x57
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f001 fafd 	bl	800e530 <VL53L0X_WrByte>
 800cf36:	4603      	mov	r3, r0
 800cf38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800cf3c:	2208      	movs	r2, #8
 800cf3e:	2156      	movs	r1, #86	; 0x56
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f001 faf5 	bl	800e530 <VL53L0X_WrByte>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf4c:	e16b      	b.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800cf4e:	78bb      	ldrb	r3, [r7, #2]
 800cf50:	2b10      	cmp	r3, #16
 800cf52:	d110      	bne.n	800cf76 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800cf54:	2240      	movs	r2, #64	; 0x40
 800cf56:	2157      	movs	r1, #87	; 0x57
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f001 fae9 	bl	800e530 <VL53L0X_WrByte>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800cf64:	2208      	movs	r2, #8
 800cf66:	2156      	movs	r1, #86	; 0x56
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f001 fae1 	bl	800e530 <VL53L0X_WrByte>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf74:	e157      	b.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800cf76:	78bb      	ldrb	r3, [r7, #2]
 800cf78:	2b12      	cmp	r3, #18
 800cf7a:	f040 8154 	bne.w	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800cf7e:	2250      	movs	r2, #80	; 0x50
 800cf80:	2157      	movs	r1, #87	; 0x57
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f001 fad4 	bl	800e530 <VL53L0X_WrByte>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800cf8e:	2208      	movs	r2, #8
 800cf90:	2156      	movs	r1, #86	; 0x56
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f001 facc 	bl	800e530 <VL53L0X_WrByte>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf9e:	e142      	b.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800cfa0:	78fb      	ldrb	r3, [r7, #3]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	f040 813f 	bne.w	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800cfa8:	78bb      	ldrb	r3, [r7, #2]
 800cfaa:	2b08      	cmp	r3, #8
 800cfac:	d14c      	bne.n	800d048 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800cfae:	2210      	movs	r2, #16
 800cfb0:	2148      	movs	r1, #72	; 0x48
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f001 fabc 	bl	800e530 <VL53L0X_WrByte>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800cfbe:	2208      	movs	r2, #8
 800cfc0:	2147      	movs	r1, #71	; 0x47
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f001 fab4 	bl	800e530 <VL53L0X_WrByte>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cfce:	2202      	movs	r2, #2
 800cfd0:	2132      	movs	r1, #50	; 0x32
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f001 faac 	bl	800e530 <VL53L0X_WrByte>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800cfe6:	220c      	movs	r2, #12
 800cfe8:	2130      	movs	r1, #48	; 0x30
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f001 faa0 	bl	800e530 <VL53L0X_WrByte>
 800cff0:	4603      	mov	r3, r0
 800cff2:	461a      	mov	r2, r3
 800cff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff8:	4313      	orrs	r3, r2
 800cffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cffe:	2201      	movs	r2, #1
 800d000:	21ff      	movs	r1, #255	; 0xff
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f001 fa94 	bl	800e530 <VL53L0X_WrByte>
 800d008:	4603      	mov	r3, r0
 800d00a:	461a      	mov	r2, r3
 800d00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d010:	4313      	orrs	r3, r2
 800d012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d016:	2230      	movs	r2, #48	; 0x30
 800d018:	2130      	movs	r1, #48	; 0x30
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f001 fa88 	bl	800e530 <VL53L0X_WrByte>
 800d020:	4603      	mov	r3, r0
 800d022:	461a      	mov	r2, r3
 800d024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d028:	4313      	orrs	r3, r2
 800d02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d02e:	2200      	movs	r2, #0
 800d030:	21ff      	movs	r1, #255	; 0xff
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f001 fa7c 	bl	800e530 <VL53L0X_WrByte>
 800d038:	4603      	mov	r3, r0
 800d03a:	461a      	mov	r2, r3
 800d03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d040:	4313      	orrs	r3, r2
 800d042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d046:	e0ee      	b.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800d048:	78bb      	ldrb	r3, [r7, #2]
 800d04a:	2b0a      	cmp	r3, #10
 800d04c:	d14c      	bne.n	800d0e8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800d04e:	2228      	movs	r2, #40	; 0x28
 800d050:	2148      	movs	r1, #72	; 0x48
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f001 fa6c 	bl	800e530 <VL53L0X_WrByte>
 800d058:	4603      	mov	r3, r0
 800d05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800d05e:	2208      	movs	r2, #8
 800d060:	2147      	movs	r1, #71	; 0x47
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f001 fa64 	bl	800e530 <VL53L0X_WrByte>
 800d068:	4603      	mov	r3, r0
 800d06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d06e:	2203      	movs	r2, #3
 800d070:	2132      	movs	r1, #50	; 0x32
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 fa5c 	bl	800e530 <VL53L0X_WrByte>
 800d078:	4603      	mov	r3, r0
 800d07a:	461a      	mov	r2, r3
 800d07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d080:	4313      	orrs	r3, r2
 800d082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d086:	2209      	movs	r2, #9
 800d088:	2130      	movs	r1, #48	; 0x30
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f001 fa50 	bl	800e530 <VL53L0X_WrByte>
 800d090:	4603      	mov	r3, r0
 800d092:	461a      	mov	r2, r3
 800d094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d098:	4313      	orrs	r3, r2
 800d09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d09e:	2201      	movs	r2, #1
 800d0a0:	21ff      	movs	r1, #255	; 0xff
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f001 fa44 	bl	800e530 <VL53L0X_WrByte>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	2130      	movs	r1, #48	; 0x30
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f001 fa38 	bl	800e530 <VL53L0X_WrByte>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	21ff      	movs	r1, #255	; 0xff
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f001 fa2c 	bl	800e530 <VL53L0X_WrByte>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	461a      	mov	r2, r3
 800d0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d0e6:	e09e      	b.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800d0e8:	78bb      	ldrb	r3, [r7, #2]
 800d0ea:	2b0c      	cmp	r3, #12
 800d0ec:	d14c      	bne.n	800d188 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800d0ee:	2238      	movs	r2, #56	; 0x38
 800d0f0:	2148      	movs	r1, #72	; 0x48
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f001 fa1c 	bl	800e530 <VL53L0X_WrByte>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800d0fe:	2208      	movs	r2, #8
 800d100:	2147      	movs	r1, #71	; 0x47
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f001 fa14 	bl	800e530 <VL53L0X_WrByte>
 800d108:	4603      	mov	r3, r0
 800d10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d10e:	2203      	movs	r2, #3
 800d110:	2132      	movs	r1, #50	; 0x32
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f001 fa0c 	bl	800e530 <VL53L0X_WrByte>
 800d118:	4603      	mov	r3, r0
 800d11a:	461a      	mov	r2, r3
 800d11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d120:	4313      	orrs	r3, r2
 800d122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d126:	2208      	movs	r2, #8
 800d128:	2130      	movs	r1, #48	; 0x30
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f001 fa00 	bl	800e530 <VL53L0X_WrByte>
 800d130:	4603      	mov	r3, r0
 800d132:	461a      	mov	r2, r3
 800d134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d138:	4313      	orrs	r3, r2
 800d13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d13e:	2201      	movs	r2, #1
 800d140:	21ff      	movs	r1, #255	; 0xff
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f001 f9f4 	bl	800e530 <VL53L0X_WrByte>
 800d148:	4603      	mov	r3, r0
 800d14a:	461a      	mov	r2, r3
 800d14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d150:	4313      	orrs	r3, r2
 800d152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d156:	2220      	movs	r2, #32
 800d158:	2130      	movs	r1, #48	; 0x30
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f001 f9e8 	bl	800e530 <VL53L0X_WrByte>
 800d160:	4603      	mov	r3, r0
 800d162:	461a      	mov	r2, r3
 800d164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d168:	4313      	orrs	r3, r2
 800d16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d16e:	2200      	movs	r2, #0
 800d170:	21ff      	movs	r1, #255	; 0xff
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 f9dc 	bl	800e530 <VL53L0X_WrByte>
 800d178:	4603      	mov	r3, r0
 800d17a:	461a      	mov	r2, r3
 800d17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d180:	4313      	orrs	r3, r2
 800d182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d186:	e04e      	b.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800d188:	78bb      	ldrb	r3, [r7, #2]
 800d18a:	2b0e      	cmp	r3, #14
 800d18c:	d14b      	bne.n	800d226 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800d18e:	2248      	movs	r2, #72	; 0x48
 800d190:	2148      	movs	r1, #72	; 0x48
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f001 f9cc 	bl	800e530 <VL53L0X_WrByte>
 800d198:	4603      	mov	r3, r0
 800d19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800d19e:	2208      	movs	r2, #8
 800d1a0:	2147      	movs	r1, #71	; 0x47
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f001 f9c4 	bl	800e530 <VL53L0X_WrByte>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800d1ae:	2203      	movs	r2, #3
 800d1b0:	2132      	movs	r1, #50	; 0x32
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 f9bc 	bl	800e530 <VL53L0X_WrByte>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800d1c6:	2207      	movs	r2, #7
 800d1c8:	2130      	movs	r1, #48	; 0x30
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f001 f9b0 	bl	800e530 <VL53L0X_WrByte>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800d1de:	2201      	movs	r2, #1
 800d1e0:	21ff      	movs	r1, #255	; 0xff
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f001 f9a4 	bl	800e530 <VL53L0X_WrByte>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	2130      	movs	r1, #48	; 0x30
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f001 f998 	bl	800e530 <VL53L0X_WrByte>
 800d200:	4603      	mov	r3, r0
 800d202:	461a      	mov	r2, r3
 800d204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d208:	4313      	orrs	r3, r2
 800d20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800d20e:	2200      	movs	r2, #0
 800d210:	21ff      	movs	r1, #255	; 0xff
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f001 f98c 	bl	800e530 <VL53L0X_WrByte>
 800d218:	4603      	mov	r3, r0
 800d21a:	461a      	mov	r2, r3
 800d21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d220:	4313      	orrs	r3, r2
 800d222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800d226:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d17f      	bne.n	800d32e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800d22e:	78bb      	ldrb	r3, [r7, #2]
 800d230:	4618      	mov	r0, r3
 800d232:	f7fe fe38 	bl	800bea6 <VL53L0X_encode_vcsel_period>
 800d236:	4603      	mov	r3, r0
 800d238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800d242:	2b01      	cmp	r3, #1
 800d244:	d045      	beq.n	800d2d2 <VL53L0X_set_vcsel_pulse_period+0x470>
 800d246:	e06e      	b.n	800d326 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d248:	f107 0314 	add.w	r3, r7, #20
 800d24c:	461a      	mov	r2, r3
 800d24e:	2103      	movs	r1, #3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7ff fc33 	bl	800cabc <get_sequence_step_timeout>
 800d256:	4603      	mov	r3, r0
 800d258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d260:	2b00      	cmp	r3, #0
 800d262:	d109      	bne.n	800d278 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800d264:	f107 0310 	add.w	r3, r7, #16
 800d268:	461a      	mov	r2, r3
 800d26a:	2102      	movs	r1, #2
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7ff fc25 	bl	800cabc <get_sequence_step_timeout>
 800d272:	4603      	mov	r3, r0
 800d274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d109      	bne.n	800d294 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800d280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d284:	461a      	mov	r2, r3
 800d286:	2150      	movs	r1, #80	; 0x50
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f001 f951 	bl	800e530 <VL53L0X_WrByte>
 800d28e:	4603      	mov	r3, r0
 800d290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d108      	bne.n	800d2ae <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	2103      	movs	r1, #3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7ff fceb 	bl	800cc7e <set_sequence_step_timeout>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800d2ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d108      	bne.n	800d2c8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2102      	movs	r1, #2
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff fcde 	bl	800cc7e <set_sequence_step_timeout>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	78ba      	ldrb	r2, [r7, #2]
 800d2cc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d2d0:	e02e      	b.n	800d330 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800d2d2:	f107 0318 	add.w	r3, r7, #24
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	2104      	movs	r1, #4
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff fbee 	bl	800cabc <get_sequence_step_timeout>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800d2e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d109      	bne.n	800d302 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800d2ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	2170      	movs	r1, #112	; 0x70
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f001 f91a 	bl	800e530 <VL53L0X_WrByte>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800d302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d306:	2b00      	cmp	r3, #0
 800d308:	d108      	bne.n	800d31c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	461a      	mov	r2, r3
 800d30e:	2104      	movs	r1, #4
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f7ff fcb4 	bl	800cc7e <set_sequence_step_timeout>
 800d316:	4603      	mov	r3, r0
 800d318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	78ba      	ldrb	r2, [r7, #2]
 800d320:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800d324:	e004      	b.n	800d330 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d326:	23fc      	movs	r3, #252	; 0xfc
 800d328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d32c:	e000      	b.n	800d330 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800d32e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800d330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d334:	2b00      	cmp	r3, #0
 800d336:	d109      	bne.n	800d34c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	695b      	ldr	r3, [r3, #20]
 800d33c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800d33e:	69f9      	ldr	r1, [r7, #28]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7fc fe1d 	bl	8009f80 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800d346:	4603      	mov	r3, r0
 800d348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800d34c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d350:	2b00      	cmp	r3, #0
 800d352:	d109      	bne.n	800d368 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800d354:	f107 010f 	add.w	r1, r7, #15
 800d358:	2301      	movs	r3, #1
 800d35a:	2200      	movs	r2, #0
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7fe fcbd 	bl	800bcdc <VL53L0X_perform_phase_calibration>
 800d362:	4603      	mov	r3, r0
 800d364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800d368:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3728      	adds	r7, #40	; 0x28
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	460b      	mov	r3, r1
 800d37e:	607a      	str	r2, [r7, #4]
 800d380:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d382:	2300      	movs	r3, #0
 800d384:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800d386:	7afb      	ldrb	r3, [r7, #11]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d002      	beq.n	800d392 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d00a      	beq.n	800d3a6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800d390:	e013      	b.n	800d3ba <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d392:	f107 0316 	add.w	r3, r7, #22
 800d396:	461a      	mov	r2, r3
 800d398:	2150      	movs	r1, #80	; 0x50
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f001 f94a 	bl	800e634 <VL53L0X_RdByte>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d3a4:	e00b      	b.n	800d3be <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800d3a6:	f107 0316 	add.w	r3, r7, #22
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	2170      	movs	r1, #112	; 0x70
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f001 f940 	bl	800e634 <VL53L0X_RdByte>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800d3b8:	e001      	b.n	800d3be <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d3ba:	23fc      	movs	r3, #252	; 0xfc
 800d3bc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800d3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d107      	bne.n	800d3d6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800d3c6:	7dbb      	ldrb	r3, [r7, #22]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fd59 	bl	800be80 <VL53L0X_decode_vcsel_period>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	701a      	strb	r2, [r3, #0]

	return Status;
 800d3d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b092      	sub	sp, #72	; 0x48
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d3f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d3f6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d3f8:	f240 7376 	movw	r3, #1910	; 0x776
 800d3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800d3fe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d402:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d404:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d408:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800d40a:	f240 234e 	movw	r3, #590	; 0x24e
 800d40e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800d410:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d414:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d416:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d41a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d41c:	f240 2326 	movw	r3, #550	; 0x226
 800d420:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d422:	2300      	movs	r3, #0
 800d424:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800d426:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d42a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	6a3b      	ldr	r3, [r7, #32]
 800d434:	429a      	cmp	r2, r3
 800d436:	d205      	bcs.n	800d444 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d438:	23fc      	movs	r3, #252	; 0xfc
 800d43a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800d43e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d442:	e0aa      	b.n	800d59a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800d444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d448:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800d44a:	683a      	ldr	r2, [r7, #0]
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d450:	f107 0314 	add.w	r3, r7, #20
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7fc fedc 	bl	800a214 <VL53L0X_GetSequenceStepEnables>
 800d45c:	4603      	mov	r3, r0
 800d45e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800d462:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d466:	2b00      	cmp	r3, #0
 800d468:	d15b      	bne.n	800d522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800d46a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d105      	bne.n	800d47c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800d470:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800d472:	2b00      	cmp	r3, #0
 800d474:	d102      	bne.n	800d47c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800d476:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d052      	beq.n	800d522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800d47c:	f107 0310 	add.w	r3, r7, #16
 800d480:	461a      	mov	r2, r3
 800d482:	2102      	movs	r1, #2
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff fb19 	bl	800cabc <get_sequence_step_timeout>
 800d48a:	4603      	mov	r3, r0
 800d48c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800d490:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800d498:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d49c:	e07d      	b.n	800d59a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800d49e:	7d3b      	ldrb	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00f      	beq.n	800d4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800d4a4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800d4a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4a8:	4413      	add	r3, r2
 800d4aa:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800d4ac:	69fa      	ldr	r2, [r7, #28]
 800d4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d204      	bcs.n	800d4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800d4b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d4bc:	e002      	b.n	800d4c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d4be:	23fc      	movs	r3, #252	; 0xfc
 800d4c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800d4c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800d4cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d4d0:	e063      	b.n	800d59a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800d4d2:	7dbb      	ldrb	r3, [r7, #22]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d011      	beq.n	800d4fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	4413      	add	r3, r2
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d4e2:	69fa      	ldr	r2, [r7, #28]
 800d4e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d204      	bcs.n	800d4f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d4ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	643b      	str	r3, [r7, #64]	; 0x40
 800d4f2:	e016      	b.n	800d522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d4f4:	23fc      	movs	r3, #252	; 0xfc
 800d4f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d4fa:	e012      	b.n	800d522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800d4fc:	7d7b      	ldrb	r3, [r7, #21]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00f      	beq.n	800d522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d506:	4413      	add	r3, r2
 800d508:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d50a:	69fa      	ldr	r2, [r7, #28]
 800d50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d50e:	429a      	cmp	r2, r3
 800d510:	d204      	bcs.n	800d51c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800d512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	643b      	str	r3, [r7, #64]	; 0x40
 800d51a:	e002      	b.n	800d522 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d51c:	23fc      	movs	r3, #252	; 0xfc
 800d51e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d522:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d526:	2b00      	cmp	r3, #0
 800d528:	d002      	beq.n	800d530 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d52a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d52e:	e034      	b.n	800d59a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800d530:	7dfb      	ldrb	r3, [r7, #23]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d019      	beq.n	800d56a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800d536:	f107 030c 	add.w	r3, r7, #12
 800d53a:	461a      	mov	r2, r3
 800d53c:	2103      	movs	r1, #3
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7ff fabc 	bl	800cabc <get_sequence_step_timeout>
 800d544:	4603      	mov	r3, r0
 800d546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d54e:	4413      	add	r3, r2
 800d550:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800d552:	69fa      	ldr	r2, [r7, #28]
 800d554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d556:	429a      	cmp	r2, r3
 800d558:	d204      	bcs.n	800d564 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800d55a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	643b      	str	r3, [r7, #64]	; 0x40
 800d562:	e002      	b.n	800d56a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d564:	23fc      	movs	r3, #252	; 0xfc
 800d566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800d56a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d111      	bne.n	800d596 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800d572:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00e      	beq.n	800d596 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800d578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800d580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d582:	2104      	movs	r1, #4
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff fb7a 	bl	800cc7e <set_sequence_step_timeout>
 800d58a:	4603      	mov	r3, r0
 800d58c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800d596:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3748      	adds	r7, #72	; 0x48
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b090      	sub	sp, #64	; 0x40
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800d5b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800d5b6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800d5b8:	f240 7376 	movw	r3, #1910	; 0x776
 800d5bc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800d5be:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800d5c2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800d5c4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d5c8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800d5ca:	f240 234e 	movw	r3, #590	; 0x24e
 800d5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800d5d0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800d5d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800d5d6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800d5da:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800d5dc:	f240 2326 	movw	r3, #550	; 0x226
 800d5e0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800d5e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ea:	441a      	add	r2, r3
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800d5f0:	f107 0318 	add.w	r3, r7, #24
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7fc fe0c 	bl	800a214 <VL53L0X_GetSequenceStepEnables>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800d602:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800d60a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d60e:	e075      	b.n	800d6fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800d610:	7e3b      	ldrb	r3, [r7, #24]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d105      	bne.n	800d622 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800d616:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d102      	bne.n	800d622 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800d61c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d030      	beq.n	800d684 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800d622:	f107 0310 	add.w	r3, r7, #16
 800d626:	461a      	mov	r2, r3
 800d628:	2102      	movs	r1, #2
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff fa46 	bl	800cabc <get_sequence_step_timeout>
 800d630:	4603      	mov	r3, r0
 800d632:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800d636:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d122      	bne.n	800d684 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800d63e:	7e3b      	ldrb	r3, [r7, #24]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d007      	beq.n	800d654 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d648:	6939      	ldr	r1, [r7, #16]
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d64e:	441a      	add	r2, r3
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800d654:	7ebb      	ldrb	r3, [r7, #26]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d009      	beq.n	800d66e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800d65e:	6939      	ldr	r1, [r7, #16]
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	440b      	add	r3, r1
 800d664:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d666:	441a      	add	r2, r3
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	e00a      	b.n	800d684 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800d66e:	7e7b      	ldrb	r3, [r7, #25]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d007      	beq.n	800d684 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800d678:	6939      	ldr	r1, [r7, #16]
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800d67e:	441a      	add	r2, r3
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d684:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d114      	bne.n	800d6b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800d68c:	7efb      	ldrb	r3, [r7, #27]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d011      	beq.n	800d6b6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d692:	f107 030c 	add.w	r3, r7, #12
 800d696:	461a      	mov	r2, r3
 800d698:	2103      	movs	r1, #3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7ff fa0e 	bl	800cabc <get_sequence_step_timeout>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800d6aa:	68f9      	ldr	r1, [r7, #12]
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d6b0:	441a      	add	r2, r3
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d6b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d114      	bne.n	800d6e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800d6be:	7f3b      	ldrb	r3, [r7, #28]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d011      	beq.n	800d6e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800d6c4:	f107 0314 	add.w	r3, r7, #20
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	2104      	movs	r1, #4
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7ff f9f5 	bl	800cabc <get_sequence_step_timeout>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800d6dc:	6979      	ldr	r1, [r7, #20]
 800d6de:	6a3b      	ldr	r3, [r7, #32]
 800d6e0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d6e2:	441a      	add	r2, r3
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d6e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d103      	bne.n	800d6f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d6f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3740      	adds	r7, #64	; 0x40
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d70e:	2300      	movs	r3, #0
 800d710:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d716:	e0c6      	b.n	800d8a6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	683a      	ldr	r2, [r7, #0]
 800d71c:	4413      	add	r3, r2
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	3301      	adds	r3, #1
 800d726:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d728:	7cfb      	ldrb	r3, [r7, #19]
 800d72a:	2bff      	cmp	r3, #255	; 0xff
 800d72c:	f040 808d 	bne.w	800d84a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	4413      	add	r3, r2
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	747b      	strb	r3, [r7, #17]
			Index++;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	3301      	adds	r3, #1
 800d73e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d740:	7c7b      	ldrb	r3, [r7, #17]
 800d742:	2b03      	cmp	r3, #3
 800d744:	d87e      	bhi.n	800d844 <VL53L0X_load_tuning_settings+0x140>
 800d746:	a201      	add	r2, pc, #4	; (adr r2, 800d74c <VL53L0X_load_tuning_settings+0x48>)
 800d748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74c:	0800d75d 	.word	0x0800d75d
 800d750:	0800d797 	.word	0x0800d797
 800d754:	0800d7d1 	.word	0x0800d7d1
 800d758:	0800d80b 	.word	0x0800d80b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	4413      	add	r3, r2
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	743b      	strb	r3, [r7, #16]
				Index++;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	3301      	adds	r3, #1
 800d76a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	4413      	add	r3, r2
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	3301      	adds	r3, #1
 800d77a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d77c:	7c3b      	ldrb	r3, [r7, #16]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	021b      	lsls	r3, r3, #8
 800d782:	b29a      	uxth	r2, r3
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	b29b      	uxth	r3, r3
 800d788:	4413      	add	r3, r2
 800d78a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	89ba      	ldrh	r2, [r7, #12]
 800d790:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800d794:	e087      	b.n	800d8a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	683a      	ldr	r2, [r7, #0]
 800d79a:	4413      	add	r3, r2
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	743b      	strb	r3, [r7, #16]
				Index++;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d7b6:	7c3b      	ldrb	r3, [r7, #16]
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	021b      	lsls	r3, r3, #8
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	7bfb      	ldrb	r3, [r7, #15]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	4413      	add	r3, r2
 800d7c4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	89ba      	ldrh	r2, [r7, #12]
 800d7ca:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800d7ce:	e06a      	b.n	800d8a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	743b      	strb	r3, [r7, #16]
				Index++;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d7f0:	7c3b      	ldrb	r3, [r7, #16]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	021b      	lsls	r3, r3, #8
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4413      	add	r3, r2
 800d7fe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	89ba      	ldrh	r2, [r7, #12]
 800d804:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800d808:	e04d      	b.n	800d8a6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	683a      	ldr	r2, [r7, #0]
 800d80e:	4413      	add	r3, r2
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	743b      	strb	r3, [r7, #16]
				Index++;
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	3301      	adds	r3, #1
 800d818:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	4413      	add	r3, r2
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	3301      	adds	r3, #1
 800d828:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d82a:	7c3b      	ldrb	r3, [r7, #16]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	021b      	lsls	r3, r3, #8
 800d830:	b29a      	uxth	r2, r3
 800d832:	7bfb      	ldrb	r3, [r7, #15]
 800d834:	b29b      	uxth	r3, r3
 800d836:	4413      	add	r3, r2
 800d838:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	89ba      	ldrh	r2, [r7, #12]
 800d83e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800d842:	e030      	b.n	800d8a6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d844:	23fc      	movs	r3, #252	; 0xfc
 800d846:	77fb      	strb	r3, [r7, #31]
 800d848:	e02d      	b.n	800d8a6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d84a:	7cfb      	ldrb	r3, [r7, #19]
 800d84c:	2b04      	cmp	r3, #4
 800d84e:	d828      	bhi.n	800d8a2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	4413      	add	r3, r2
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	3301      	adds	r3, #1
 800d85e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d860:	2300      	movs	r3, #0
 800d862:	61bb      	str	r3, [r7, #24]
 800d864:	e00f      	b.n	800d886 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	4413      	add	r3, r2
 800d86c:	7819      	ldrb	r1, [r3, #0]
 800d86e:	f107 0208 	add.w	r2, r7, #8
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	4413      	add	r3, r2
 800d876:	460a      	mov	r2, r1
 800d878:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	3301      	adds	r3, #1
 800d87e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	3301      	adds	r3, #1
 800d884:	61bb      	str	r3, [r7, #24]
 800d886:	7cfb      	ldrb	r3, [r7, #19]
 800d888:	69ba      	ldr	r2, [r7, #24]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	dbeb      	blt.n	800d866 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d88e:	7cfb      	ldrb	r3, [r7, #19]
 800d890:	f107 0208 	add.w	r2, r7, #8
 800d894:	7cb9      	ldrb	r1, [r7, #18]
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fdee 	bl	800e478 <VL53L0X_WriteMulti>
 800d89c:	4603      	mov	r3, r0
 800d89e:	77fb      	strb	r3, [r7, #31]
 800d8a0:	e001      	b.n	800d8a6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d8a2:	23fc      	movs	r3, #252	; 0xfc
 800d8a4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d004      	beq.n	800d8bc <VL53L0X_load_tuning_settings+0x1b8>
 800d8b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f43f af2e 	beq.w	800d718 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d8bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d8de:	f107 0313 	add.w	r3, r7, #19
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f7fc fd21 	bl	800a32c <VL53L0X_GetXTalkCompensationEnable>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d8ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d111      	bne.n	800d91a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d8f6:	7cfb      	ldrb	r3, [r7, #19]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00e      	beq.n	800d91a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	6a1b      	ldr	r3, [r3, #32]
 800d900:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	8a9b      	ldrh	r3, [r3, #20]
 800d906:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	fb02 f303 	mul.w	r3, r2, r3
 800d90e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	3380      	adds	r3, #128	; 0x80
 800d914:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d91a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3720      	adds	r7, #32
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b086      	sub	sp, #24
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	60f8      	str	r0, [r7, #12]
 800d92e:	60b9      	str	r1, [r7, #8]
 800d930:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d932:	2300      	movs	r3, #0
 800d934:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d93e:	f107 0310 	add.w	r3, r7, #16
 800d942:	461a      	mov	r2, r3
 800d944:	68b9      	ldr	r1, [r7, #8]
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f7ff ffbe 	bl	800d8c8 <VL53L0X_get_total_xtalk_rate>
 800d94c:	4603      	mov	r3, r0
 800d94e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d105      	bne.n	800d964 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	441a      	add	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	601a      	str	r2, [r3, #0]

	return Status;
 800d964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3718      	adds	r7, #24
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b09a      	sub	sp, #104	; 0x68
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
 800d97c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d97e:	2312      	movs	r3, #18
 800d980:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d986:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d988:	2342      	movs	r3, #66	; 0x42
 800d98a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d98c:	2306      	movs	r3, #6
 800d98e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d990:	2307      	movs	r3, #7
 800d992:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d994:	2300      	movs	r3, #0
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d9a8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9ae:	fb02 f303 	mul.w	r3, r2, r3
 800d9b2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b6:	3380      	adds	r3, #128	; 0x80
 800d9b8:	0a1b      	lsrs	r3, r3, #8
 800d9ba:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9c0:	fb02 f303 	mul.w	r3, r2, r3
 800d9c4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d01a      	beq.n	800da06 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	029b      	lsls	r3, r3, #10
 800d9d4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9dc:	4413      	add	r3, r2
 800d9de:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d9e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9e8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d9ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	4413      	add	r3, r2
 800d9f2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9f6:	fb03 f303 	mul.w	r3, r3, r3
 800d9fa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800da02:	0c1b      	lsrs	r3, r3, #16
 800da04:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da0a:	fb02 f303 	mul.w	r3, r2, r3
 800da0e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800da10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800da16:	0c1b      	lsrs	r3, r3, #16
 800da18:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	fb03 f303 	mul.w	r3, r3, r3
 800da20:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800da22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800da28:	0c1b      	lsrs	r3, r3, #16
 800da2a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800da2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da2e:	085a      	lsrs	r2, r3, #1
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	441a      	add	r2, r3
 800da34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da36:	fbb2 f3f3 	udiv	r3, r2, r3
 800da3a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da40:	fb02 f303 	mul.w	r3, r2, r3
 800da44:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da4c:	d302      	bcc.n	800da54 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800da4e:	4b54      	ldr	r3, [pc, #336]	; (800dba0 <VL53L0X_calc_dmax+0x230>)
 800da50:	663b      	str	r3, [r7, #96]	; 0x60
 800da52:	e015      	b.n	800da80 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800da54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da56:	085a      	lsrs	r2, r3, #1
 800da58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da5a:	441a      	add	r2, r3
 800da5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da62:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800da64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da68:	fb02 f303 	mul.w	r3, r2, r3
 800da6c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800da6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800da74:	0c1b      	lsrs	r3, r3, #16
 800da76:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800da78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da7a:	fb03 f303 	mul.w	r3, r3, r3
 800da7e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800da80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da82:	039b      	lsls	r3, r3, #14
 800da84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800da88:	4a46      	ldr	r2, [pc, #280]	; (800dba4 <VL53L0X_calc_dmax+0x234>)
 800da8a:	fba2 2303 	umull	r2, r3, r2, r3
 800da8e:	099b      	lsrs	r3, r3, #6
 800da90:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	fb03 f303 	mul.w	r3, r3, r3
 800da98:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800da9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da9c:	fb03 f303 	mul.w	r3, r3, r3
 800daa0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	3308      	adds	r3, #8
 800daa6:	091b      	lsrs	r3, r3, #4
 800daa8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800daaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daac:	6a3b      	ldr	r3, [r7, #32]
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800dab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dab4:	4613      	mov	r3, r2
 800dab6:	005b      	lsls	r3, r3, #1
 800dab8:	4413      	add	r3, r2
 800daba:	011b      	lsls	r3, r3, #4
 800dabc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dac4:	0b9b      	lsrs	r3, r3, #14
 800dac6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800dac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dacc:	4413      	add	r3, r2
 800dace:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800dad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dad2:	085b      	lsrs	r3, r3, #1
 800dad4:	69ba      	ldr	r2, [r7, #24]
 800dad6:	4413      	add	r3, r2
 800dad8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800dada:	69ba      	ldr	r2, [r7, #24]
 800dadc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dade:	fbb2 f3f3 	udiv	r3, r2, r3
 800dae2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	039b      	lsls	r3, r3, #14
 800dae8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	085b      	lsrs	r3, r3, #1
 800daee:	69ba      	ldr	r2, [r7, #24]
 800daf0:	4413      	add	r3, r2
 800daf2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800daf4:	69ba      	ldr	r2, [r7, #24]
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dafc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db02:	fb02 f303 	mul.w	r3, r2, r3
 800db06:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800db0e:	4a25      	ldr	r2, [pc, #148]	; (800dba4 <VL53L0X_calc_dmax+0x234>)
 800db10:	fba2 2303 	umull	r2, r3, r2, r3
 800db14:	099b      	lsrs	r3, r3, #6
 800db16:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	011b      	lsls	r3, r3, #4
 800db1c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800db24:	4a1f      	ldr	r2, [pc, #124]	; (800dba4 <VL53L0X_calc_dmax+0x234>)
 800db26:	fba2 2303 	umull	r2, r3, r2, r3
 800db2a:	099b      	lsrs	r3, r3, #6
 800db2c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800db2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db30:	3380      	adds	r3, #128	; 0x80
 800db32:	0a1b      	lsrs	r3, r3, #8
 800db34:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d008      	beq.n	800db4e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	085a      	lsrs	r2, r3, #1
 800db40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db42:	441a      	add	r2, r3
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	fbb2 f3f3 	udiv	r3, r2, r3
 800db4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800db4c:	e001      	b.n	800db52 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800db52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800db54:	f7fe f9ba 	bl	800becc <VL53L0X_isqrt>
 800db58:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d008      	beq.n	800db72 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	085a      	lsrs	r2, r3, #1
 800db64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db66:	441a      	add	r2, r3
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db70:	e001      	b.n	800db76 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800db76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800db78:	f7fe f9a8 	bl	800becc <VL53L0X_isqrt>
 800db7c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800db7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800db84:	693a      	ldr	r2, [r7, #16]
 800db86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db88:	429a      	cmp	r2, r3
 800db8a:	d902      	bls.n	800db92 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800db8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db90:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800db92:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800db96:	4618      	mov	r0, r3
 800db98:	3768      	adds	r7, #104	; 0x68
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	fff00000 	.word	0xfff00000
 800dba4:	10624dd3 	.word	0x10624dd3

0800dba8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b0b4      	sub	sp, #208	; 0xd0
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800dbb6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800dbba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800dbbe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800dbc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800dbc6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800dbca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800dbce:	f241 235c 	movw	r3, #4700	; 0x125c
 800dbd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800dbd6:	4b9e      	ldr	r3, [pc, #632]	; (800de50 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800dbd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800dbdc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800dbe0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800dbe2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800dbe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbee:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800dbf0:	4b98      	ldr	r3, [pc, #608]	; (800de54 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800dbf2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800dbf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbf8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800dbfa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800dbfe:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800dc00:	f240 6377 	movw	r3, #1655	; 0x677
 800dc04:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc06:	2300      	movs	r3, #0
 800dc08:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	691b      	ldr	r3, [r3, #16]
 800dc16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc1a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800dc1e:	0c1b      	lsrs	r3, r3, #16
 800dc20:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800dc28:	f107 0310 	add.w	r3, r7, #16
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	68b9      	ldr	r1, [r7, #8]
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f7ff fe78 	bl	800d926 <VL53L0X_get_total_signal_rate>
 800dc36:	4603      	mov	r3, r0
 800dc38:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800dc3c:	f107 0314 	add.w	r3, r7, #20
 800dc40:	461a      	mov	r2, r3
 800dc42:	68b9      	ldr	r1, [r7, #8]
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f7ff fe3f 	bl	800d8c8 <VL53L0X_get_total_xtalk_rate>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc56:	fb02 f303 	mul.w	r3, r2, r3
 800dc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800dc5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dc62:	0c1b      	lsrs	r3, r3, #16
 800dc64:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc6c:	fb02 f303 	mul.w	r3, r2, r3
 800dc70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800dc74:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800dc78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d902      	bls.n	800dc84 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800dc7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800dc84:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d168      	bne.n	800dd5e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800dc92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800dc9c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800dca0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800dca4:	461a      	mov	r2, r3
 800dca6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7fe feb2 	bl	800ca14 <VL53L0X_calc_timeout_mclks>
 800dcb0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dcb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800dcc2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800dcc6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800dcca:	461a      	mov	r2, r3
 800dccc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f7fe fe9f 	bl	800ca14 <VL53L0X_calc_timeout_mclks>
 800dcd6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800dcd8:	2303      	movs	r3, #3
 800dcda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800dcde:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800dce2:	2b08      	cmp	r3, #8
 800dce4:	d102      	bne.n	800dcec <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800dce6:	2302      	movs	r3, #2
 800dce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800dcec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dcee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcf0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800dcf2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dcf6:	fb02 f303 	mul.w	r3, r2, r3
 800dcfa:	02db      	lsls	r3, r3, #11
 800dcfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800dd00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd04:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dd08:	4a53      	ldr	r2, [pc, #332]	; (800de58 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800dd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd0e:	099b      	lsrs	r3, r3, #6
 800dd10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800dd14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd1a:	fb02 f303 	mul.w	r3, r2, r3
 800dd1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800dd22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd26:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dd2a:	4a4b      	ldr	r2, [pc, #300]	; (800de58 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800dd2c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd30:	099b      	lsrs	r3, r3, #6
 800dd32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	3380      	adds	r3, #128	; 0x80
 800dd3a:	0a1b      	lsrs	r3, r3, #8
 800dd3c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800dd3e:	693a      	ldr	r2, [r7, #16]
 800dd40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd44:	fb02 f303 	mul.w	r3, r2, r3
 800dd48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800dd4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dd50:	3380      	adds	r3, #128	; 0x80
 800dd52:	0a1b      	lsrs	r3, r3, #8
 800dd54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	021b      	lsls	r3, r3, #8
 800dd5c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800dd5e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800dd66:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800dd6a:	e15e      	b.n	800e02a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800dd6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10c      	bne.n	800dd8c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dd78:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dd80:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2200      	movs	r2, #0
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	e14c      	b.n	800e026 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800dd8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d102      	bne.n	800dd9a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800dd94:	2301      	movs	r3, #1
 800dd96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800dd9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd9e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800dda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dda2:	041a      	lsls	r2, r3, #16
 800dda4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ddae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ddb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d902      	bls.n	800ddbe <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800ddb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ddbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ddc2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ddc6:	fb02 f303 	mul.w	r3, r2, r3
 800ddca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ddce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	4413      	add	r3, r2
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe f876 	bl	800becc <VL53L0X_isqrt>
 800dde0:	4603      	mov	r3, r0
 800dde2:	005b      	lsls	r3, r3, #1
 800dde4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	891b      	ldrh	r3, [r3, #8]
 800ddea:	461a      	mov	r2, r3
 800ddec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddee:	fb02 f303 	mul.w	r3, r2, r3
 800ddf2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ddf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddf6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ddf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ddfc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ddfe:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800de00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800de04:	4a14      	ldr	r2, [pc, #80]	; (800de58 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800de06:	fba2 2303 	umull	r2, r3, r2, r3
 800de0a:	099b      	lsrs	r3, r3, #6
 800de0c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800de0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de10:	041b      	lsls	r3, r3, #16
 800de12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800de16:	4a10      	ldr	r2, [pc, #64]	; (800de58 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800de18:	fba2 2303 	umull	r2, r3, r2, r3
 800de1c:	099b      	lsrs	r3, r3, #6
 800de1e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800de20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de22:	021b      	lsls	r3, r3, #8
 800de24:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800de26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfb8      	it	lt
 800de32:	425b      	neglt	r3, r3
 800de34:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800de36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de38:	021b      	lsls	r3, r3, #8
 800de3a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	7e1b      	ldrb	r3, [r3, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800de44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800de48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de4c:	e033      	b.n	800deb6 <VL53L0X_calc_sigma_estimate+0x30e>
 800de4e:	bf00      	nop
 800de50:	028f87ae 	.word	0x028f87ae
 800de54:	0006999a 	.word	0x0006999a
 800de58:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800de5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de62:	fbb2 f3f3 	udiv	r3, r2, r3
 800de66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800de6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800de70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de74:	fb02 f303 	mul.w	r3, r2, r3
 800de78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800de7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800de80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de82:	4413      	add	r3, r2
 800de84:	0c1b      	lsrs	r3, r3, #16
 800de86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800de8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de8e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800de92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800de96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de9a:	085b      	lsrs	r3, r3, #1
 800de9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800dea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dea4:	fb03 f303 	mul.w	r3, r3, r3
 800dea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800deac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800deb0:	0b9b      	lsrs	r3, r3, #14
 800deb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800deb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800deba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800debc:	fb02 f303 	mul.w	r3, r2, r3
 800dec0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800dec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dec8:	0c1b      	lsrs	r3, r3, #16
 800deca:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800decc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dece:	fb03 f303 	mul.w	r3, r3, r3
 800ded2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ded4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ded8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800dee0:	0c1b      	lsrs	r3, r3, #16
 800dee2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800dee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee6:	fb03 f303 	mul.w	r3, r3, r3
 800deea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800deec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	4413      	add	r3, r2
 800def2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800def4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800def6:	f7fd ffe9 	bl	800becc <VL53L0X_isqrt>
 800defa:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	041b      	lsls	r3, r3, #16
 800df00:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	3332      	adds	r3, #50	; 0x32
 800df06:	4a4b      	ldr	r2, [pc, #300]	; (800e034 <VL53L0X_calc_sigma_estimate+0x48c>)
 800df08:	fba2 2303 	umull	r2, r3, r2, r3
 800df0c:	095a      	lsrs	r2, r3, #5
 800df0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df10:	fbb2 f3f3 	udiv	r3, r2, r3
 800df14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800df18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800df1c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800df20:	fb02 f303 	mul.w	r3, r2, r3
 800df24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800df28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800df2c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800df30:	3308      	adds	r3, #8
 800df32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800df36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800df3a:	4a3f      	ldr	r2, [pc, #252]	; (800e038 <VL53L0X_calc_sigma_estimate+0x490>)
 800df3c:	fba2 2303 	umull	r2, r3, r2, r3
 800df40:	0b5b      	lsrs	r3, r3, #13
 800df42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800df46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800df4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d902      	bls.n	800df56 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800df50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800df56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800df5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df5e:	4413      	add	r3, r2
 800df60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800df64:	4a35      	ldr	r2, [pc, #212]	; (800e03c <VL53L0X_calc_sigma_estimate+0x494>)
 800df66:	fba2 2303 	umull	r2, r3, r2, r3
 800df6a:	099b      	lsrs	r3, r3, #6
 800df6c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800df6e:	6a3b      	ldr	r3, [r7, #32]
 800df70:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800df72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df76:	441a      	add	r2, r3
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fd ffa4 	bl	800becc <VL53L0X_isqrt>
 800df84:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	021b      	lsls	r3, r3, #8
 800df8a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800df92:	4a2a      	ldr	r2, [pc, #168]	; (800e03c <VL53L0X_calc_sigma_estimate+0x494>)
 800df94:	fba2 2303 	umull	r2, r3, r2, r3
 800df98:	099b      	lsrs	r3, r3, #6
 800df9a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800df9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dfa0:	fb03 f303 	mul.w	r3, r3, r3
 800dfa4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	fb03 f303 	mul.w	r3, r3, r3
 800dfac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800dfae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	4413      	add	r3, r2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fd ff89 	bl	800becc <VL53L0X_isqrt>
 800dfba:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dfc2:	fb02 f303 	mul.w	r3, r2, r3
 800dfc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800dfca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d009      	beq.n	800dfe4 <VL53L0X_calc_sigma_estimate+0x43c>
 800dfd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d005      	beq.n	800dfe4 <VL53L0X_calc_sigma_estimate+0x43c>
 800dfd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dfdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d903      	bls.n	800dfec <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800dfe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dfe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dff2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800dffe:	6939      	ldr	r1, [r7, #16]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	9303      	str	r3, [sp, #12]
 800e004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e008:	9302      	str	r3, [sp, #8]
 800e00a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e00e:	9301      	str	r3, [sp, #4]
 800e010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff fca8 	bl	800d970 <VL53L0X_calc_dmax>
 800e020:	4603      	mov	r3, r0
 800e022:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e026:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	37c0      	adds	r7, #192	; 0xc0
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	51eb851f 	.word	0x51eb851f
 800e038:	d1b71759 	.word	0xd1b71759
 800e03c:	10624dd3 	.word	0x10624dd3

0800e040 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b090      	sub	sp, #64	; 0x40
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	607a      	str	r2, [r7, #4]
 800e04a:	461a      	mov	r2, r3
 800e04c:	460b      	mov	r3, r1
 800e04e:	72fb      	strb	r3, [r7, #11]
 800e050:	4613      	mov	r3, r2
 800e052:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e054:	2300      	movs	r3, #0
 800e056:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800e05a:	2300      	movs	r3, #0
 800e05c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800e072:	2300      	movs	r3, #0
 800e074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800e078:	2300      	movs	r3, #0
 800e07a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800e092:	7afb      	ldrb	r3, [r7, #11]
 800e094:	10db      	asrs	r3, r3, #3
 800e096:	b2db      	uxtb	r3, r3
 800e098:	f003 030f 	and.w	r3, r3, #15
 800e09c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800e0a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d017      	beq.n	800e0d8 <VL53L0X_get_pal_range_status+0x98>
 800e0a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0ac:	2b05      	cmp	r3, #5
 800e0ae:	d013      	beq.n	800e0d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800e0b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0b4:	2b07      	cmp	r3, #7
 800e0b6:	d00f      	beq.n	800e0d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800e0b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0bc:	2b0c      	cmp	r3, #12
 800e0be:	d00b      	beq.n	800e0d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800e0c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0c4:	2b0d      	cmp	r3, #13
 800e0c6:	d007      	beq.n	800e0d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800e0c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0cc:	2b0e      	cmp	r3, #14
 800e0ce:	d003      	beq.n	800e0d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800e0d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0d4:	2b0f      	cmp	r3, #15
 800e0d6:	d103      	bne.n	800e0e0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800e0de:	e002      	b.n	800e0e6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e0e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d109      	bne.n	800e102 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e0ee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7fc f9ec 	bl	800a4d4 <VL53L0X_GetLimitCheckEnable>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800e102:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e106:	2b00      	cmp	r3, #0
 800e108:	d02e      	beq.n	800e168 <VL53L0X_get_pal_range_status+0x128>
 800e10a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d12a      	bne.n	800e168 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800e112:	f107 0310 	add.w	r3, r7, #16
 800e116:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e11a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7ff fd43 	bl	800dba8 <VL53L0X_calc_sigma_estimate>
 800e122:	4603      	mov	r3, r0
 800e124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800e128:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d103      	bne.n	800e138 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	b29a      	uxth	r2, r3
 800e134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e136:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800e138:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d113      	bne.n	800e168 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800e140:	f107 0320 	add.w	r3, r7, #32
 800e144:	461a      	mov	r2, r3
 800e146:	2100      	movs	r1, #0
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	f7fc fa49 	bl	800a5e0 <VL53L0X_GetLimitCheckValue>
 800e14e:	4603      	mov	r3, r0
 800e150:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d006      	beq.n	800e168 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800e15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e15c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800e15e:	429a      	cmp	r2, r3
 800e160:	d902      	bls.n	800e168 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800e162:	2301      	movs	r3, #1
 800e164:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e168:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d109      	bne.n	800e184 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e170:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800e174:	461a      	mov	r2, r3
 800e176:	2102      	movs	r1, #2
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f7fc f9ab 	bl	800a4d4 <VL53L0X_GetLimitCheckEnable>
 800e17e:	4603      	mov	r3, r0
 800e180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800e184:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d044      	beq.n	800e216 <VL53L0X_get_pal_range_status+0x1d6>
 800e18c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e190:	2b00      	cmp	r3, #0
 800e192:	d140      	bne.n	800e216 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e194:	f107 031c 	add.w	r3, r7, #28
 800e198:	461a      	mov	r2, r3
 800e19a:	2102      	movs	r1, #2
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7fc fa1f 	bl	800a5e0 <VL53L0X_GetLimitCheckValue>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800e1a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d107      	bne.n	800e1c0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	21ff      	movs	r1, #255	; 0xff
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f000 f9bb 	bl	800e530 <VL53L0X_WrByte>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800e1c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d109      	bne.n	800e1dc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800e1c8:	f107 0316 	add.w	r3, r7, #22
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	21b6      	movs	r1, #182	; 0xb6
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f000 fa59 	bl	800e688 <VL53L0X_RdWord>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800e1dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d107      	bne.n	800e1f4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	21ff      	movs	r1, #255	; 0xff
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f000 f9a1 	bl	800e530 <VL53L0X_WrByte>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800e1f4:	8afb      	ldrh	r3, [r7, #22]
 800e1f6:	025b      	lsls	r3, r3, #9
 800e1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1fe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d006      	beq.n	800e216 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800e208:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800e20a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d902      	bls.n	800e216 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800e210:	2301      	movs	r3, #1
 800e212:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800e216:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d109      	bne.n	800e232 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e21e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e222:	461a      	mov	r2, r3
 800e224:	2103      	movs	r1, #3
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f7fc f954 	bl	800a4d4 <VL53L0X_GetLimitCheckEnable>
 800e22c:	4603      	mov	r3, r0
 800e22e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800e232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e236:	2b00      	cmp	r3, #0
 800e238:	d023      	beq.n	800e282 <VL53L0X_get_pal_range_status+0x242>
 800e23a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d11f      	bne.n	800e282 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800e242:	893b      	ldrh	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800e248:	2300      	movs	r3, #0
 800e24a:	637b      	str	r3, [r7, #52]	; 0x34
 800e24c:	e005      	b.n	800e25a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	021a      	lsls	r2, r3, #8
 800e252:	893b      	ldrh	r3, [r7, #8]
 800e254:	fbb2 f3f3 	udiv	r3, r2, r3
 800e258:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800e25a:	f107 0318 	add.w	r3, r7, #24
 800e25e:	461a      	mov	r2, r3
 800e260:	2103      	movs	r1, #3
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f7fc f9bc 	bl	800a5e0 <VL53L0X_GetLimitCheckValue>
 800e268:	4603      	mov	r3, r0
 800e26a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d006      	beq.n	800e282 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800e274:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800e276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e278:	429a      	cmp	r2, r3
 800e27a:	d202      	bcs.n	800e282 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800e27c:	2301      	movs	r3, #1
 800e27e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e282:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e286:	2b00      	cmp	r3, #0
 800e288:	d14a      	bne.n	800e320 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800e28a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d103      	bne.n	800e29a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800e292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e294:	22ff      	movs	r2, #255	; 0xff
 800e296:	701a      	strb	r2, [r3, #0]
 800e298:	e042      	b.n	800e320 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800e29a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d007      	beq.n	800e2b2 <VL53L0X_get_pal_range_status+0x272>
 800e2a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d003      	beq.n	800e2b2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800e2aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2ae:	2b03      	cmp	r3, #3
 800e2b0:	d103      	bne.n	800e2ba <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800e2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2b4:	2205      	movs	r2, #5
 800e2b6:	701a      	strb	r2, [r3, #0]
 800e2b8:	e032      	b.n	800e320 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800e2ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2be:	2b06      	cmp	r3, #6
 800e2c0:	d003      	beq.n	800e2ca <VL53L0X_get_pal_range_status+0x28a>
 800e2c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2c6:	2b09      	cmp	r3, #9
 800e2c8:	d103      	bne.n	800e2d2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800e2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2cc:	2204      	movs	r2, #4
 800e2ce:	701a      	strb	r2, [r3, #0]
 800e2d0:	e026      	b.n	800e320 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800e2d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2d6:	2b08      	cmp	r3, #8
 800e2d8:	d007      	beq.n	800e2ea <VL53L0X_get_pal_range_status+0x2aa>
 800e2da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2de:	2b0a      	cmp	r3, #10
 800e2e0:	d003      	beq.n	800e2ea <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800e2e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d103      	bne.n	800e2f2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800e2ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ec:	2203      	movs	r2, #3
 800e2ee:	701a      	strb	r2, [r3, #0]
 800e2f0:	e016      	b.n	800e320 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800e2f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e2f6:	2b04      	cmp	r3, #4
 800e2f8:	d003      	beq.n	800e302 <VL53L0X_get_pal_range_status+0x2c2>
 800e2fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d103      	bne.n	800e30a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800e302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e304:	2202      	movs	r2, #2
 800e306:	701a      	strb	r2, [r3, #0]
 800e308:	e00a      	b.n	800e320 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800e30a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d103      	bne.n	800e31a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800e312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e314:	2201      	movs	r2, #1
 800e316:	701a      	strb	r2, [r3, #0]
 800e318:	e002      	b.n	800e320 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800e31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800e320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800e328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e32a:	2200      	movs	r2, #0
 800e32c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800e32e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800e332:	461a      	mov	r2, r3
 800e334:	2101      	movs	r1, #1
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f7fc f8cc 	bl	800a4d4 <VL53L0X_GetLimitCheckEnable>
 800e33c:	4603      	mov	r3, r0
 800e33e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800e342:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e346:	2b00      	cmp	r3, #0
 800e348:	d14f      	bne.n	800e3ea <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800e34a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d003      	beq.n	800e35a <VL53L0X_get_pal_range_status+0x31a>
 800e352:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800e356:	2b01      	cmp	r3, #1
 800e358:	d103      	bne.n	800e362 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800e35a:	2301      	movs	r3, #1
 800e35c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e360:	e002      	b.n	800e368 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800e362:	2300      	movs	r3, #0
 800e364:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e36e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800e372:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e376:	2b04      	cmp	r3, #4
 800e378:	d003      	beq.n	800e382 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800e37a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d103      	bne.n	800e38a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800e382:	2301      	movs	r3, #1
 800e384:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e388:	e002      	b.n	800e390 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e396:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800e39a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d003      	beq.n	800e3aa <VL53L0X_get_pal_range_status+0x36a>
 800e3a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d103      	bne.n	800e3b2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3b0:	e002      	b.n	800e3b8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e3be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800e3c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d003      	beq.n	800e3d2 <VL53L0X_get_pal_range_status+0x392>
 800e3ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d103      	bne.n	800e3da <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3d8:	e002      	b.n	800e3e0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e3e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e3ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3740      	adds	r7, #64	; 0x40
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b088      	sub	sp, #32
 800e3fa:	af02      	add	r7, sp, #8
 800e3fc:	60f8      	str	r0, [r7, #12]
 800e3fe:	60b9      	str	r1, [r7, #8]
 800e400:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	330a      	adds	r3, #10
 800e406:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e414:	b299      	uxth	r1, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	b29a      	uxth	r2, r3
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4613      	mov	r3, r2
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	f7f5 fc05 	bl	8003c30 <HAL_I2C_Master_Transmit>
 800e426:	4603      	mov	r3, r0
 800e428:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e42a:	693b      	ldr	r3, [r7, #16]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af02      	add	r7, sp, #8
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	330a      	adds	r3, #10
 800e444:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800e452:	f043 0301 	orr.w	r3, r3, #1
 800e456:	b2db      	uxtb	r3, r3
 800e458:	b299      	uxth	r1, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	4613      	mov	r3, r2
 800e464:	68ba      	ldr	r2, [r7, #8]
 800e466:	f7f5 fcd7 	bl	8003e18 <HAL_I2C_Master_Receive>
 800e46a:	4603      	mov	r3, r0
 800e46c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e46e:	693b      	ldr	r3, [r7, #16]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e478:	b580      	push	{r7, lr}
 800e47a:	b086      	sub	sp, #24
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	607a      	str	r2, [r7, #4]
 800e482:	603b      	str	r3, [r7, #0]
 800e484:	460b      	mov	r3, r1
 800e486:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e488:	2300      	movs	r3, #0
 800e48a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	2b3f      	cmp	r3, #63	; 0x3f
 800e490:	d902      	bls.n	800e498 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800e492:	f06f 0303 	mvn.w	r3, #3
 800e496:	e016      	b.n	800e4c6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800e498:	4a0d      	ldr	r2, [pc, #52]	; (800e4d0 <VL53L0X_WriteMulti+0x58>)
 800e49a:	7afb      	ldrb	r3, [r7, #11]
 800e49c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	6879      	ldr	r1, [r7, #4]
 800e4a2:	480c      	ldr	r0, [pc, #48]	; (800e4d4 <VL53L0X_WriteMulti+0x5c>)
 800e4a4:	f000 f998 	bl	800e7d8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	4908      	ldr	r1, [pc, #32]	; (800e4d0 <VL53L0X_WriteMulti+0x58>)
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f7ff ffa0 	bl	800e3f6 <_I2CWrite>
 800e4b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e4be:	23ec      	movs	r3, #236	; 0xec
 800e4c0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3718      	adds	r7, #24
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20000838 	.word	0x20000838
 800e4d4:	20000839 	.word	0x20000839

0800e4d8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	607a      	str	r2, [r7, #4]
 800e4e2:	603b      	str	r3, [r7, #0]
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e4ec:	f107 030b 	add.w	r3, r7, #11
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff ff7e 	bl	800e3f6 <_I2CWrite>
 800e4fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d002      	beq.n	800e508 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e502:	23ec      	movs	r3, #236	; 0xec
 800e504:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e506:	e00c      	b.n	800e522 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7ff ff91 	bl	800e434 <_I2CRead>
 800e512:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e51a:	23ec      	movs	r3, #236	; 0xec
 800e51c:	75fb      	strb	r3, [r7, #23]
 800e51e:	e000      	b.n	800e522 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800e520:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	70fb      	strb	r3, [r7, #3]
 800e53c:	4613      	mov	r3, r2
 800e53e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e540:	2300      	movs	r3, #0
 800e542:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e544:	4a0b      	ldr	r2, [pc, #44]	; (800e574 <VL53L0X_WrByte+0x44>)
 800e546:	78fb      	ldrb	r3, [r7, #3]
 800e548:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800e54a:	4a0a      	ldr	r2, [pc, #40]	; (800e574 <VL53L0X_WrByte+0x44>)
 800e54c:	78bb      	ldrb	r3, [r7, #2]
 800e54e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e550:	2202      	movs	r2, #2
 800e552:	4908      	ldr	r1, [pc, #32]	; (800e574 <VL53L0X_WrByte+0x44>)
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff ff4e 	bl	800e3f6 <_I2CWrite>
 800e55a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e562:	23ec      	movs	r3, #236	; 0xec
 800e564:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e566:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20000838 	.word	0x20000838

0800e578 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	70fb      	strb	r3, [r7, #3]
 800e584:	4613      	mov	r3, r2
 800e586:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e588:	2300      	movs	r3, #0
 800e58a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800e58c:	4a0e      	ldr	r2, [pc, #56]	; (800e5c8 <VL53L0X_WrWord+0x50>)
 800e58e:	78fb      	ldrb	r3, [r7, #3]
 800e590:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800e592:	883b      	ldrh	r3, [r7, #0]
 800e594:	0a1b      	lsrs	r3, r3, #8
 800e596:	b29b      	uxth	r3, r3
 800e598:	b2da      	uxtb	r2, r3
 800e59a:	4b0b      	ldr	r3, [pc, #44]	; (800e5c8 <VL53L0X_WrWord+0x50>)
 800e59c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800e59e:	883b      	ldrh	r3, [r7, #0]
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <VL53L0X_WrWord+0x50>)
 800e5a4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e5a6:	2203      	movs	r2, #3
 800e5a8:	4907      	ldr	r1, [pc, #28]	; (800e5c8 <VL53L0X_WrWord+0x50>)
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7ff ff23 	bl	800e3f6 <_I2CWrite>
 800e5b0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d001      	beq.n	800e5bc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e5b8:	23ec      	movs	r3, #236	; 0xec
 800e5ba:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800e5bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20000838 	.word	0x20000838

0800e5cc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	4608      	mov	r0, r1
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	461a      	mov	r2, r3
 800e5da:	4603      	mov	r3, r0
 800e5dc:	70fb      	strb	r3, [r7, #3]
 800e5de:	460b      	mov	r3, r1
 800e5e0:	70bb      	strb	r3, [r7, #2]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800e5ea:	f107 020e 	add.w	r2, r7, #14
 800e5ee:	78fb      	ldrb	r3, [r7, #3]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f81e 	bl	800e634 <VL53L0X_RdByte>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800e5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d110      	bne.n	800e626 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800e604:	7bba      	ldrb	r2, [r7, #14]
 800e606:	78bb      	ldrb	r3, [r7, #2]
 800e608:	4013      	ands	r3, r2
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	787b      	ldrb	r3, [r7, #1]
 800e60e:	4313      	orrs	r3, r2
 800e610:	b2db      	uxtb	r3, r3
 800e612:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800e614:	7bba      	ldrb	r2, [r7, #14]
 800e616:	78fb      	ldrb	r3, [r7, #3]
 800e618:	4619      	mov	r1, r3
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f7ff ff88 	bl	800e530 <VL53L0X_WrByte>
 800e620:	4603      	mov	r3, r0
 800e622:	73fb      	strb	r3, [r7, #15]
 800e624:	e000      	b.n	800e628 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800e626:	bf00      	nop
done:
    return Status;
 800e628:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	460b      	mov	r3, r1
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e642:	2300      	movs	r3, #0
 800e644:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e646:	f107 030b 	add.w	r3, r7, #11
 800e64a:	2201      	movs	r2, #1
 800e64c:	4619      	mov	r1, r3
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f7ff fed1 	bl	800e3f6 <_I2CWrite>
 800e654:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e65c:	23ec      	movs	r3, #236	; 0xec
 800e65e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e660:	e00c      	b.n	800e67c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e662:	2201      	movs	r2, #1
 800e664:	6879      	ldr	r1, [r7, #4]
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	f7ff fee4 	bl	800e434 <_I2CRead>
 800e66c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e674:	23ec      	movs	r3, #236	; 0xec
 800e676:	75fb      	strb	r3, [r7, #23]
 800e678:	e000      	b.n	800e67c <VL53L0X_RdByte+0x48>
    }
done:
 800e67a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800e67c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	460b      	mov	r3, r1
 800e692:	607a      	str	r2, [r7, #4]
 800e694:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e696:	2300      	movs	r3, #0
 800e698:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e69a:	f107 030b 	add.w	r3, r7, #11
 800e69e:	2201      	movs	r2, #1
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f7ff fea7 	bl	800e3f6 <_I2CWrite>
 800e6a8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e6b0:	23ec      	movs	r3, #236	; 0xec
 800e6b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e6b4:	e017      	b.n	800e6e6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	490e      	ldr	r1, [pc, #56]	; (800e6f4 <VL53L0X_RdWord+0x6c>)
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f7ff feba 	bl	800e434 <_I2CRead>
 800e6c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e6c8:	23ec      	movs	r3, #236	; 0xec
 800e6ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e6cc:	e00b      	b.n	800e6e6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e6ce:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <VL53L0X_RdWord+0x6c>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	021b      	lsls	r3, r3, #8
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	4b06      	ldr	r3, [pc, #24]	; (800e6f4 <VL53L0X_RdWord+0x6c>)
 800e6da:	785b      	ldrb	r3, [r3, #1]
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	4413      	add	r3, r2
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800e6e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3718      	adds	r7, #24
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20000838 	.word	0x20000838

0800e6f8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b086      	sub	sp, #24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	460b      	mov	r3, r1
 800e702:	607a      	str	r2, [r7, #4]
 800e704:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e706:	2300      	movs	r3, #0
 800e708:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e70a:	f107 030b 	add.w	r3, r7, #11
 800e70e:	2201      	movs	r2, #1
 800e710:	4619      	mov	r1, r3
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7ff fe6f 	bl	800e3f6 <_I2CWrite>
 800e718:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e720:	23ec      	movs	r3, #236	; 0xec
 800e722:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e724:	e01b      	b.n	800e75e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800e726:	2204      	movs	r2, #4
 800e728:	4910      	ldr	r1, [pc, #64]	; (800e76c <VL53L0X_RdDWord+0x74>)
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	f7ff fe82 	bl	800e434 <_I2CRead>
 800e730:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e738:	23ec      	movs	r3, #236	; 0xec
 800e73a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e73c:	e00f      	b.n	800e75e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800e73e:	4b0b      	ldr	r3, [pc, #44]	; (800e76c <VL53L0X_RdDWord+0x74>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	061a      	lsls	r2, r3, #24
 800e744:	4b09      	ldr	r3, [pc, #36]	; (800e76c <VL53L0X_RdDWord+0x74>)
 800e746:	785b      	ldrb	r3, [r3, #1]
 800e748:	041b      	lsls	r3, r3, #16
 800e74a:	441a      	add	r2, r3
 800e74c:	4b07      	ldr	r3, [pc, #28]	; (800e76c <VL53L0X_RdDWord+0x74>)
 800e74e:	789b      	ldrb	r3, [r3, #2]
 800e750:	021b      	lsls	r3, r3, #8
 800e752:	4413      	add	r3, r2
 800e754:	4a05      	ldr	r2, [pc, #20]	; (800e76c <VL53L0X_RdDWord+0x74>)
 800e756:	78d2      	ldrb	r2, [r2, #3]
 800e758:	441a      	add	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800e75e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3718      	adds	r7, #24
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20000838 	.word	0x20000838

0800e770 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800e778:	2300      	movs	r3, #0
 800e77a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800e77c:	2002      	movs	r0, #2
 800e77e:	f7f4 fdfd 	bl	800337c <HAL_Delay>
    return status;
 800e782:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
	...

0800e790 <__libc_init_array>:
 800e790:	b570      	push	{r4, r5, r6, lr}
 800e792:	4d0d      	ldr	r5, [pc, #52]	; (800e7c8 <__libc_init_array+0x38>)
 800e794:	4c0d      	ldr	r4, [pc, #52]	; (800e7cc <__libc_init_array+0x3c>)
 800e796:	1b64      	subs	r4, r4, r5
 800e798:	10a4      	asrs	r4, r4, #2
 800e79a:	2600      	movs	r6, #0
 800e79c:	42a6      	cmp	r6, r4
 800e79e:	d109      	bne.n	800e7b4 <__libc_init_array+0x24>
 800e7a0:	4d0b      	ldr	r5, [pc, #44]	; (800e7d0 <__libc_init_array+0x40>)
 800e7a2:	4c0c      	ldr	r4, [pc, #48]	; (800e7d4 <__libc_init_array+0x44>)
 800e7a4:	f000 f836 	bl	800e814 <_init>
 800e7a8:	1b64      	subs	r4, r4, r5
 800e7aa:	10a4      	asrs	r4, r4, #2
 800e7ac:	2600      	movs	r6, #0
 800e7ae:	42a6      	cmp	r6, r4
 800e7b0:	d105      	bne.n	800e7be <__libc_init_array+0x2e>
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7b8:	4798      	blx	r3
 800e7ba:	3601      	adds	r6, #1
 800e7bc:	e7ee      	b.n	800e79c <__libc_init_array+0xc>
 800e7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7c2:	4798      	blx	r3
 800e7c4:	3601      	adds	r6, #1
 800e7c6:	e7f2      	b.n	800e7ae <__libc_init_array+0x1e>
 800e7c8:	0800e8a4 	.word	0x0800e8a4
 800e7cc:	0800e8a4 	.word	0x0800e8a4
 800e7d0:	0800e8a4 	.word	0x0800e8a4
 800e7d4:	0800e8a8 	.word	0x0800e8a8

0800e7d8 <memcpy>:
 800e7d8:	440a      	add	r2, r1
 800e7da:	4291      	cmp	r1, r2
 800e7dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7e0:	d100      	bne.n	800e7e4 <memcpy+0xc>
 800e7e2:	4770      	bx	lr
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7ee:	4291      	cmp	r1, r2
 800e7f0:	d1f9      	bne.n	800e7e6 <memcpy+0xe>
 800e7f2:	bd10      	pop	{r4, pc}

0800e7f4 <memset>:
 800e7f4:	4402      	add	r2, r0
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d100      	bne.n	800e7fe <memset+0xa>
 800e7fc:	4770      	bx	lr
 800e7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800e802:	e7f9      	b.n	800e7f8 <memset+0x4>

0800e804 <strcpy>:
 800e804:	4603      	mov	r3, r0
 800e806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e80a:	f803 2b01 	strb.w	r2, [r3], #1
 800e80e:	2a00      	cmp	r2, #0
 800e810:	d1f9      	bne.n	800e806 <strcpy+0x2>
 800e812:	4770      	bx	lr

0800e814 <_init>:
 800e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e816:	bf00      	nop
 800e818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e81a:	bc08      	pop	{r3}
 800e81c:	469e      	mov	lr, r3
 800e81e:	4770      	bx	lr

0800e820 <_fini>:
 800e820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e822:	bf00      	nop
 800e824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e826:	bc08      	pop	{r3}
 800e828:	469e      	mov	lr, r3
 800e82a:	4770      	bx	lr
