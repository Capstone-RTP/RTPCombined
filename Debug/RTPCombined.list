
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdf0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800bfb0  0800bfb0  0001bfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c07c  0800c07c  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c084  0800c084  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800c08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000330  0800c3bc  00020330  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  0800c3bc  0002086c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217e6  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003420  00000000  00000000  00041b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00044f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00046830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4d4  00000000  00000000  00047fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d514  00000000  00000000  00076484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a7cb  00000000  00000000  00093998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ae163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e7c  00000000  00000000  001ae1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000330 	.word	0x20000330
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bf98 	.word	0x0800bf98

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000334 	.word	0x20000334
 80001fc:	0800bf98 	.word	0x0800bf98

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <hx711_delay_us>:
#define hx711_delay(x)    HAL_Delay(x)
#endif

//#############################################################################################
void hx711_delay_us (hx711_t *hx711)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	uint32_t delay = _HX711_DELAY_US_LOOP;
 80005ac:	2304      	movs	r3, #4
 80005ae:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(hx711->timer,0);  // set the counter value a 0
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(hx711->timer) < delay);  // wait for the counter to reach the us input in the parameter
 80005ba:	bf00      	nop
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d8f8      	bhi.n	80005bc <hx711_delay_us+0x18>
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <hx711_lock>:

//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 80005e0:	e002      	b.n	80005e8 <hx711_lock+0x10>
    hx711_delay(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f001 f9da 	bl	800199c <HAL_Delay>
  while (hx711->lock)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7d1b      	ldrb	r3, [r3, #20]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f8      	bne.n	80005e2 <hx711_lock+0xa>
  hx711->lock = 1;      
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2201      	movs	r2, #1
 80005f4:	751a      	strb	r2, [r3, #20]
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	751a      	strb	r2, [r3, #20]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin,TIM_HandleTypeDef *timer)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4613      	mov	r3, r2
 8000626:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8000628:	68f8      	ldr	r0, [r7, #12]
 800062a:	f7ff ffd5 	bl	80005d8 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	88fa      	ldrh	r2, [r7, #6]
 8000638:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000644:	815a      	strh	r2, [r3, #10]
  hx711->timer = timer;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800064a:	619a      	str	r2, [r3, #24]
  GPIO_InitTypeDef  gpio = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	68b8      	ldr	r0, [r7, #8]
 8000674:	f001 fac8 	bl	8001c08 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000684:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000686:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	6838      	ldr	r0, [r7, #0]
 8000690:	f001 faba 	bl	8001c08 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	891b      	ldrh	r3, [r3, #8]
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	f001 fc5c 	bl	8001f5c <HAL_GPIO_WritePin>
  hx711_delay(10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f001 f979 	bl	800199c <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	891b      	ldrh	r3, [r3, #8]
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	f001 fc51 	bl	8001f5c <HAL_GPIO_WritePin>
  hx711_delay(10);  
 80006ba:	200a      	movs	r0, #10
 80006bc:	f001 f96e 	bl	800199c <HAL_Delay>
  hx711_value(hx711);
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f000 f80a 	bl	80006da <hx711_value>
  hx711_value(hx711);
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f000 f807 	bl	80006da <hx711_value>
  hx711_unlock(hx711); 
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f7ff ff96 	bl	80005fe <hx711_unlock>
}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 80006e6:	f001 f94d 	bl	8001984 <HAL_GetTick>
 80006ea:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80006ec:	e00b      	b.n	8000706 <hx711_value+0x2c>
  {
    hx711_delay(1);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f001 f954 	bl	800199c <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 80006f4:	f001 f946 	bl	8001984 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	2b96      	cmp	r3, #150	; 0x96
 8000700:	d901      	bls.n	8000706 <hx711_value+0x2c>
      return 0;
 8000702:	2300      	movs	r3, #0
 8000704:	e059      	b.n	80007ba <hx711_value+0xe0>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	895b      	ldrh	r3, [r3, #10]
 800070e:	4619      	mov	r1, r3
 8000710:	4610      	mov	r0, r2
 8000712:	f001 fc0b 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d0e8      	beq.n	80006ee <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	74fb      	strb	r3, [r7, #19]
 8000720:	e02c      	b.n	800077c <hx711_value+0xa2>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	891b      	ldrh	r3, [r3, #8]
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	f001 fc15 	bl	8001f5c <HAL_GPIO_WritePin>
    hx711_delay_us(hx711);
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ff36 	bl	80005a4 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	891b      	ldrh	r3, [r3, #8]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	f001 fc0a 	bl	8001f5c <HAL_GPIO_WritePin>
    hx711_delay_us(hx711);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff2b 	bl	80005a4 <hx711_delay_us>
    data = data << 1;    
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	895b      	ldrh	r3, [r3, #10]
 800075c:	4619      	mov	r1, r3
 800075e:	4610      	mov	r0, r2
 8000760:	f001 fbe4 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d102      	bne.n	8000770 <hx711_value+0x96>
      data ++;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 8000770:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	3301      	adds	r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	74fb      	strb	r3, [r7, #19]
 800077c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000780:	2b17      	cmp	r3, #23
 8000782:	ddce      	ble.n	8000722 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 800078a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	891b      	ldrh	r3, [r3, #8]
 8000794:	2201      	movs	r2, #1
 8000796:	4619      	mov	r1, r3
 8000798:	f001 fbe0 	bl	8001f5c <HAL_GPIO_WritePin>
  hx711_delay_us(hx711);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff01 	bl	80005a4 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	891b      	ldrh	r3, [r3, #8]
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f001 fbd5 	bl	8001f5c <HAL_GPIO_WritePin>
  hx711_delay_us(hx711);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fef6 	bl	80005a4 <hx711_delay_us>
  return data;    
 80007b8:	697b      	ldr	r3, [r7, #20]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f001 f872 	bl	80018b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f90f 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 fbf5 	bl	8000fc0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007d6:	f000 fa3d 	bl	8000c54 <MX_TIM2_Init>
  MX_TIM4_Init();
 80007da:	f000 fb2b 	bl	8000e34 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 80007de:	f000 f999 	bl	8000b14 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80007e2:	f000 f957 	bl	8000a94 <MX_I2C2_Init>
  MX_TIM3_Init();
 80007e6:	f000 faad 	bl	8000d44 <MX_TIM3_Init>
  MX_TIM5_Init();
 80007ea:	f000 fb9b 	bl	8000f24 <MX_TIM5_Init>
  MX_TIM1_Init();
 80007ee:	f000 f9dd 	bl	8000bac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 80007f2:	4b71      	ldr	r3, [pc, #452]	; (80009b8 <main+0x1f4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68da      	ldr	r2, [r3, #12]
 80007f8:	4b6f      	ldr	r3, [pc, #444]	; (80009b8 <main+0x1f4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f042 0201 	orr.w	r2, r2, #1
 8000800:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000802:	4b6e      	ldr	r3, [pc, #440]	; (80009bc <main+0x1f8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	4b6c      	ldr	r3, [pc, #432]	; (80009bc <main+0x1f8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f042 0201 	orr.w	r2, r2, #1
 8000810:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8000812:	4b6b      	ldr	r3, [pc, #428]	; (80009c0 <main+0x1fc>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	4b69      	ldr	r3, [pc, #420]	; (80009c0 <main+0x1fc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f042 0201 	orr.w	r2, r2, #1
 8000820:	60da      	str	r2, [r3, #12]

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 800);
 8000822:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	2320      	movs	r3, #32
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000830:	2200      	movs	r2, #0
 8000832:	4961      	ldr	r1, [pc, #388]	; (80009b8 <main+0x1f4>)
 8000834:	4863      	ldr	r0, [pc, #396]	; (80009c4 <main+0x200>)
 8000836:	f000 fd34 	bl	80012a2 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 600);
 800083a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000848:	2200      	movs	r2, #0
 800084a:	495c      	ldr	r1, [pc, #368]	; (80009bc <main+0x1f8>)
 800084c:	485e      	ldr	r0, [pc, #376]	; (80009c8 <main+0x204>)
 800084e:	f000 fd28 	bl	80012a2 <initStepper>
	initStepper(&thetaMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 800);
 8000852:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000860:	2208      	movs	r2, #8
 8000862:	4957      	ldr	r1, [pc, #348]	; (80009c0 <main+0x1fc>)
 8000864:	4857      	ldr	r0, [pc, #348]	; (80009c4 <main+0x200>)
 8000866:	f000 fd1c 	bl	80012a2 <initStepper>

	//I2C assignment to TOF API
	Dev->I2cHandle = &hi2c2;
 800086a:	4b58      	ldr	r3, [pc, #352]	; (80009cc <main+0x208>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a58      	ldr	r2, [pc, #352]	; (80009d0 <main+0x20c>)
 8000870:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8000874:	4b55      	ldr	r3, [pc, #340]	; (80009cc <main+0x208>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2252      	movs	r2, #82	; 0x52
 800087a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	// VL53L0X init for Single Measurement
	VL53L0X_WaitDeviceBooted( Dev );
 800087e:	4b53      	ldr	r3, [pc, #332]	; (80009cc <main+0x208>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f006 f9dc 	bl	8006c40 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000888:	4b50      	ldr	r3, [pc, #320]	; (80009cc <main+0x208>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f005 fef1 	bl	8006674 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8000892:	4b4e      	ldr	r3, [pc, #312]	; (80009cc <main+0x208>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f006 f850 	bl	800693c <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800089c:	4b4b      	ldr	r3, [pc, #300]	; (80009cc <main+0x208>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80008a4:	f107 0122 	add.w	r1, r7, #34	; 0x22
 80008a8:	4618      	mov	r0, r3
 80008aa:	f006 fee9 	bl	8007680 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80008ae:	4b47      	ldr	r3, [pc, #284]	; (80009cc <main+0x208>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80008b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80008ba:	4618      	mov	r0, r3
 80008bc:	f007 fb6e 	bl	8007f9c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <main+0x208>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f006 fa58 	bl	8006d7c <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80008cc:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <main+0x208>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2201      	movs	r2, #1
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f006 fccd 	bl	8007274 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <main+0x208>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	2101      	movs	r1, #1
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 fcc6 	bl	8007274 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80008e8:	4b38      	ldr	r3, [pc, #224]	; (80009cc <main+0x208>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f641 1299 	movw	r2, #6553	; 0x1999
 80008f0:	2101      	movs	r1, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f006 fd6e 	bl	80073d4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80008f8:	4b34      	ldr	r3, [pc, #208]	; (80009cc <main+0x208>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f006 fd66 	bl	80073d4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 25000);
 8000908:	4b30      	ldr	r3, [pc, #192]	; (80009cc <main+0x208>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000910:	4618      	mov	r0, r3
 8000912:	f006 fa91 	bl	8006e38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <main+0x208>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2212      	movs	r2, #18
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f006 fab0 	bl	8006e84 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000924:	4b29      	ldr	r3, [pc, #164]	; (80009cc <main+0x208>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	220e      	movs	r2, #14
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f006 faa9 	bl	8006e84 <VL53L0X_SetVcselPulsePeriod>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 8000932:	4828      	ldr	r0, [pc, #160]	; (80009d4 <main+0x210>)
 8000934:	f003 fe6e 	bl	8004614 <HAL_TIM_Base_Start>

	//Init load cell
	hx711_t loadCell;
	uint32_t pressureVal;

	hx711_init(&loadCell, loadCLK_GPIO_Port, loadCLK_Pin, loadDATA_GPIO_Port, loadDATA_Pin, &htim5);
 8000938:	1d38      	adds	r0, r7, #4
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <main+0x210>)
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <main+0x214>)
 8000946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094a:	4923      	ldr	r1, [pc, #140]	; (80009d8 <main+0x214>)
 800094c:	f7ff fe64 	bl	8000618 <hx711_init>
		//			  MessageLen = sprintf((char*)Message, " Measure Time: %d\n\r",(int)(HAL_GetTick()-timer));
		//			  HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
		//		  }


		timer = HAL_GetTick();
 8000950:	f001 f818 	bl	8001984 <HAL_GetTick>
 8000954:	62f8      	str	r0, [r7, #44]	; 0x2c
		pressureVal = hx711_value(&loadCell);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff febe 	bl	80006da <hx711_value>
 800095e:	4603      	mov	r3, r0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
		timer = HAL_GetTick()-timer;
 8000962:	f001 f80f 	bl	8001984 <HAL_GetTick>
 8000966:	4602      	mov	r2, r0
 8000968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c

		MessageLen = sprintf((char*)Message, "Load: %i ",(int)pressureVal);
 800096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000970:	461a      	mov	r2, r3
 8000972:	491a      	ldr	r1, [pc, #104]	; (80009dc <main+0x218>)
 8000974:	481a      	ldr	r0, [pc, #104]	; (80009e0 <main+0x21c>)
 8000976:	f00a fea7 	bl	800b6c8 <siprintf>
 800097a:	4603      	mov	r3, r0
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <main+0x220>)
 8000980:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <main+0x220>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b29a      	uxth	r2, r3
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	4915      	ldr	r1, [pc, #84]	; (80009e0 <main+0x21c>)
 800098c:	4816      	ldr	r0, [pc, #88]	; (80009e8 <main+0x224>)
 800098e:	f005 f813 	bl	80059b8 <HAL_UART_Transmit>
		MessageLen = sprintf((char*)Message, " Measure Time: %d\n\r",(int)(timer));
 8000992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000994:	461a      	mov	r2, r3
 8000996:	4915      	ldr	r1, [pc, #84]	; (80009ec <main+0x228>)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <main+0x21c>)
 800099a:	f00a fe95 	bl	800b6c8 <siprintf>
 800099e:	4603      	mov	r3, r0
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <main+0x220>)
 80009a4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <main+0x220>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	2364      	movs	r3, #100	; 0x64
 80009ae:	490c      	ldr	r1, [pc, #48]	; (80009e0 <main+0x21c>)
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <main+0x224>)
 80009b2:	f005 f801 	bl	80059b8 <HAL_UART_Transmit>
		timer = HAL_GetTick();
 80009b6:	e7cb      	b.n	8000950 <main+0x18c>
 80009b8:	200004c8 	.word	0x200004c8
 80009bc:	2000047c 	.word	0x2000047c
 80009c0:	20000514 	.word	0x20000514
 80009c4:	200005b0 	.word	0x200005b0
 80009c8:	200005e0 	.word	0x200005e0
 80009cc:	20000000 	.word	0x20000000
 80009d0:	2000034c 	.word	0x2000034c
 80009d4:	20000560 	.word	0x20000560
 80009d8:	48000c00 	.word	0x48000c00
 80009dc:	0800bfb0 	.word	0x0800bfb0
 80009e0:	20000640 	.word	0x20000640
 80009e4:	20000680 	.word	0x20000680
 80009e8:	200003a0 	.word	0x200003a0
 80009ec:	0800bfbc 	.word	0x0800bfbc

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b098      	sub	sp, #96	; 0x60
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	2248      	movs	r2, #72	; 0x48
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f00a fe5a 	bl	800b6b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a12:	2000      	movs	r0, #0
 8000a14:	f002 f864 	bl	8002ae0 <HAL_PWREx_ControlVoltageScaling>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a1e:	f000 fc3b 	bl	8001298 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a22:	2310      	movs	r3, #16
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a36:	2301      	movs	r3, #1
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a3e:	2332      	movs	r3, #50	; 0x32
 8000a40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 f8f8 	bl	8002c48 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a5e:	f000 fc1b 	bl	8001298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2303      	movs	r3, #3
 8000a68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2104      	movs	r1, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fd60 	bl	8003540 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a86:	f000 fc07 	bl	8001298 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3760      	adds	r7, #96	; 0x60
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C2_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C2_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000ad0:	f001 fa5c 	bl	8001f8c <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 fbdd 	bl	8001298 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000ae2:	f001 ff45 	bl	8002970 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 fbd4 	bl	8001298 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_I2C2_Init+0x74>)
 8000af4:	f001 ff87 	bl	8002a06 <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fbcb 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000034c 	.word	0x2000034c
 8000b0c:	40005800 	.word	0x40005800
 8000b10:	10c0ecff 	.word	0x10c0ecff

08000b14 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_LPUART1_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	f004 fedb 	bl	8005918 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 fb96 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b70:	f005 fca2 	bl	80064b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 fb8d 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b82:	f005 fcd7 	bl	8006534 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 fb84 	bl	8001298 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_LPUART1_UART_Init+0x90>)
 8000b92:	f005 fc58 	bl	8006446 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 fb7c 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200003a0 	.word	0x200003a0
 8000ba8:	40008000 	.word	0x40008000

08000bac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000bcc:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <MX_TIM1_Init+0xa4>)
 8000bce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf6:	4815      	ldr	r0, [pc, #84]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000bf8:	f003 fcb4 	bl	8004564 <HAL_TIM_Base_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c02:	f000 fb49 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	480e      	ldr	r0, [pc, #56]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000c14:	f004 f8b8 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c1e:	f000 fb3b 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_TIM1_Init+0xa0>)
 8000c34:	f004 fdca 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c3e:	f000 fb2b 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000430 	.word	0x20000430
 8000c50:	40012c00 	.word	0x40012c00

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c86:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000c90:	2263      	movs	r2, #99	; 0x63
 8000c92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000c9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000ca0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cae:	4824      	ldr	r0, [pc, #144]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000cb0:	f003 fc58 	bl	8004564 <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f000 faed 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481d      	ldr	r0, [pc, #116]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000ccc:	f004 f85c 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000cd6:	f000 fadf 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000cdc:	f003 fd29 	bl	8004732 <HAL_TIM_PWM_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ce6:	f000 fad7 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000cfa:	f004 fd67 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d04:	f000 fac8 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d08:	2360      	movs	r3, #96	; 0x60
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000d22:	f003 ff1d 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d2c:	f000 fab4 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <MX_TIM2_Init+0xec>)
 8000d32:	f000 fc79 	bl	8001628 <HAL_TIM_MspPostInit>

}
 8000d36:	bf00      	nop
 8000d38:	3738      	adds	r7, #56	; 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000047c 	.word	0x2000047c

08000d44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <MX_TIM3_Init+0xec>)
 8000d7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000d7e:	2263      	movs	r2, #99	; 0x63
 8000d80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000d8a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000d8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d9c:	4823      	ldr	r0, [pc, #140]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000d9e:	f003 fbe1 	bl	8004564 <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000da8:	f000 fa76 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	4619      	mov	r1, r3
 8000db8:	481c      	ldr	r0, [pc, #112]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000dba:	f003 ffe5 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000dc4:	f000 fa68 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000dca:	f003 fcb2 	bl	8004732 <HAL_TIM_PWM_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000dd4:	f000 fa60 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000de8:	f004 fcf0 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000df2:	f000 fa51 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df6:	2360      	movs	r3, #96	; 0x60
 8000df8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000dfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000e10:	f003 fea6 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000e1a:	f000 fa3d 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM3_Init+0xe8>)
 8000e20:	f000 fc02 	bl	8001628 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3738      	adds	r7, #56	; 0x38
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200004c8 	.word	0x200004c8
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000e68:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <MX_TIM4_Init+0xec>)
 8000e6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000e6e:	2263      	movs	r2, #99	; 0x63
 8000e70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000e7a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000e7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e8c:	4823      	ldr	r0, [pc, #140]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000e8e:	f003 fb69 	bl	8004564 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e98:	f000 f9fe 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481c      	ldr	r0, [pc, #112]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000eaa:	f003 ff6d 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000eb4:	f000 f9f0 	bl	8001298 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000eba:	f003 fc3a 	bl	8004732 <HAL_TIM_PWM_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ec4:	f000 f9e8 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000ed8:	f004 fc78 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ee2:	f000 f9d9 	bl	8001298 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	; 0x60
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000eea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2208      	movs	r2, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000f00:	f003 fe2e 	bl	8004b60 <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000f0a:	f000 f9c5 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM4_Init+0xe8>)
 8000f10:	f000 fb8a 	bl	8001628 <HAL_TIM_MspPostInit>

}
 8000f14:	bf00      	nop
 8000f16:	3738      	adds	r7, #56	; 0x38
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000514 	.word	0x20000514
 8000f20:	40000800 	.word	0x40000800

08000f24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <MX_TIM5_Init+0x98>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f4a:	2263      	movs	r2, #99	; 0x63
 8000f4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f56:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f6a:	f003 fafb 	bl	8004564 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000f74:	f000 f990 	bl	8001298 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000f86:	f003 feff 	bl	8004d88 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f90:	f000 f982 	bl	8001298 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM5_Init+0x94>)
 8000fa2:	f004 fc13 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000fac:	f000 f974 	bl	8001298 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000560 	.word	0x20000560
 8000fbc:	40000c00 	.word	0x40000c00

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a35      	ldr	r2, [pc, #212]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <MX_GPIO_Init+0x108>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <MX_GPIO_Init+0x108>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <MX_GPIO_Init+0x108>)
 800103c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800104e:	f001 fdeb 	bl	8002c28 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	21e0      	movs	r1, #224	; 0xe0
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f000 ff7f 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(loadCLK_GPIO_Port, loadCLK_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <MX_GPIO_Init+0x10c>)
 8001066:	f000 ff79 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 800106a:	23e0      	movs	r3, #224	; 0xe0
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f000 fdc0 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadCLK_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin;
 8001088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(loadCLK_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <MX_GPIO_Init+0x10c>)
 80010a2:	f000 fdb1 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 80010a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_GPIO_Init+0x10c>)
 80010bc:	f000 fda4 	bl	8001c08 <HAL_GPIO_Init>

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000c00 	.word	0x48000c00

080010d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80010d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010d4:	b088      	sub	sp, #32
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	4a64      	ldr	r2, [pc, #400]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d144      	bne.n	800116c <HAL_TIM_PeriodElapsedCallback+0x9c>
		if(thetaMotor.Status == RunningForward){
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d11a      	bne.n	8001124 <HAL_TIM_PeriodElapsedCallback+0x54>
			thetaMotor.CurrentPosition++;
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80010f4:	f112 0801 	adds.w	r8, r2, #1
 80010f8:	f143 0900 	adc.w	r9, r3, #0
 80010fc:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010fe:	e9c3 8906 	strd	r8, r9, [r3, #24]
			MessageLen = sprintf((char*)Message, "here2");
 8001102:	495d      	ldr	r1, [pc, #372]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001104:	485d      	ldr	r0, [pc, #372]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001106:	f00a fadf 	bl	800b6c8 <siprintf>
 800110a:	4603      	mov	r3, r0
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001110:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b29a      	uxth	r2, r3
 8001118:	2364      	movs	r3, #100	; 0x64
 800111a:	4958      	ldr	r1, [pc, #352]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800111c:	4859      	ldr	r0, [pc, #356]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800111e:	f004 fc4b 	bl	80059b8 <HAL_UART_Transmit>
 8001122:	e00e      	b.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x72>
		}
		else if (thetaMotor.Status == RunningBackward){
 8001124:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d108      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x72>
			thetaMotor.CurrentPosition--;
 8001130:	4b50      	ldr	r3, [pc, #320]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001132:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001136:	1e54      	subs	r4, r2, #1
 8001138:	f143 35ff 	adc.w	r5, r3, #4294967295
 800113c:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800113e:	e9c3 4506 	strd	r4, r5, [r3, #24]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8001142:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001144:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800114a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800114e:	4299      	cmp	r1, r3
 8001150:	bf08      	it	eq
 8001152:	4290      	cmpeq	r0, r2
 8001154:	d10a      	bne.n	800116c <HAL_TIM_PeriodElapsedCallback+0x9c>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001156:	2100      	movs	r1, #0
 8001158:	4845      	ldr	r0, [pc, #276]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800115a:	f003 fb4b 	bl	80047f4 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 800115e:	4844      	ldr	r0, [pc, #272]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001160:	f003 fac0 	bl	80046e4 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001166:	2203      	movs	r2, #3
 8001168:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	4a46      	ldr	r2, [pc, #280]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d13b      	bne.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x11c>
		if(yMotor.Status == RunningForward){
 8001174:	4b45      	ldr	r3, [pc, #276]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10d      	bne.n	800119c <HAL_TIM_PeriodElapsedCallback+0xcc>
			yMotor.CurrentPosition++;
 8001180:	4b42      	ldr	r3, [pc, #264]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001182:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001186:	1c51      	adds	r1, r2, #1
 8001188:	6139      	str	r1, [r7, #16]
 800118a:	f143 0300 	adc.w	r3, r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	4b3e      	ldr	r3, [pc, #248]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001192:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001196:	e9c3 1206 	strd	r1, r2, [r3, #24]
 800119a:	e012      	b.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}
		else if (yMotor.Status == RunningBackward){
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800119e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d10c      	bne.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			yMotor.CurrentPosition--;
 80011a8:	4b38      	ldr	r3, [pc, #224]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011ae:	1e51      	subs	r1, r2, #1
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011be:	e9c3 1206 	strd	r1, r2, [r3, #24]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011ce:	4299      	cmp	r1, r3
 80011d0:	bf08      	it	eq
 80011d2:	4290      	cmpeq	r0, r2
 80011d4:	d10a      	bne.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80011d6:	2100      	movs	r1, #0
 80011d8:	482b      	ldr	r0, [pc, #172]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011da:	f003 fb0b 	bl	80047f4 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 80011de:	482a      	ldr	r0, [pc, #168]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80011e0:	f003 fa80 	bl	80046e4 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	4a28      	ldr	r2, [pc, #160]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d138      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x196>
		if(rMotor.Status == RunningForward){
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d10d      	bne.n	800121c <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition++;
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001202:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001206:	1c51      	adds	r1, r2, #1
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	f143 0300 	adc.w	r3, r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001212:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001216:	e9c3 1206 	strd	r1, r2, [r3, #24]
 800121a:	e00f      	b.n	800123c <HAL_TIM_PeriodElapsedCallback+0x16c>
		}
		else if (rMotor.Status == RunningBackward){
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800121e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d109      	bne.n	800123c <HAL_TIM_PeriodElapsedCallback+0x16c>
			rMotor.CurrentPosition--;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800122a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800122e:	f112 3aff 	adds.w	sl, r2, #4294967295
 8001232:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001238:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800123e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001248:	4299      	cmp	r1, r3
 800124a:	bf08      	it	eq
 800124c:	4290      	cmpeq	r0, r2
 800124e:	d10a      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x196>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001250:	2108      	movs	r1, #8
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001254:	f003 face 	bl	80047f4 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800125a:	f003 fa43 	bl	80046e4 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001260:	2203      	movs	r2, #3
 8001262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001270:	200004c8 	.word	0x200004c8
 8001274:	200005b0 	.word	0x200005b0
 8001278:	0800bfd0 	.word	0x0800bfd0
 800127c:	20000640 	.word	0x20000640
 8001280:	20000680 	.word	0x20000680
 8001284:	200003a0 	.word	0x200003a0
 8001288:	2000047c 	.word	0x2000047c
 800128c:	200005e0 	.word	0x200005e0
 8001290:	20000514 	.word	0x20000514
 8001294:	20000610 	.word	0x20000610

08001298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129c:	b672      	cpsid	i
}
 800129e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012a0:	e7fe      	b.n	80012a0 <Error_Handler+0x8>

080012a2 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8b3a      	ldrh	r2, [r7, #24]
 80012c6:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 80012ce:	68f9      	ldr	r1, [r7, #12]
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	stepper->TargetPosition =0;
 80012dc:	68f9      	ldr	r1, [r7, #12]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Set status
	stepper->Status = Stopped;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	4619      	mov	r1, r3
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f805 	bl	8001308 <setSpeed>
	//return stepper structure pointer
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <setSpeed>:
	//setDirection
	//if stepper isn't running, run and set direction

}

void setSpeed (stepper * stepper, uint32_t speed){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	005a      	lsls	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4909      	ldr	r1, [pc, #36]	; (8001348 <setSpeed+0x40>)
 8001324:	fbb1 f2f2 	udiv	r2, r1, r2
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <setSpeed+0x40>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3a01      	subs	r2, #1
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	000f4240 	.word	0x000f4240

0800134c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x44>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x44>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6613      	str	r3, [r2, #96]	; 0x60
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x44>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_MspInit+0x44>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_MspInit+0x44>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_MspInit+0x44>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0b0      	sub	sp, #192	; 0xc0
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2298      	movs	r2, #152	; 0x98
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f00a f97f 	bl	800b6b8 <memset>
  if(hi2c->Instance==I2C2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <HAL_I2C_MspInit+0xb0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d13a      	bne.n	800143a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fb73 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013dc:	f7ff ff5c 	bl	8001298 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013f8:	2303      	movs	r3, #3
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fe:	2312      	movs	r3, #18
 8001400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001410:	2304      	movs	r3, #4
 8001412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001416:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800141a:	4619      	mov	r1, r3
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <HAL_I2C_MspInit+0xb8>)
 800141e:	f000 fbf3 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 8001428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142c:	6593      	str	r3, [r2, #88]	; 0x58
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	37c0      	adds	r7, #192	; 0xc0
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40005800 	.word	0x40005800
 8001448:	40021000 	.word	0x40021000
 800144c:	48001400 	.word	0x48001400

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0b0      	sub	sp, #192	; 0xc0
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2298      	movs	r2, #152	; 0x98
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f00a f921 	bl	800b6b8 <memset>
  if(huart->Instance==LPUART1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_UART_MspInit+0xb4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d13d      	bne.n	80014fc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001480:	2320      	movs	r3, #32
 8001482:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001484:	2300      	movs	r3, #0
 8001486:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4618      	mov	r0, r3
 800148e:	f002 fb15 	bl	8003abc <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001498:	f7ff fefe 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_UART_MspInit+0xb8>)
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_UART_MspInit+0xb8>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_UART_MspInit+0xb8>)
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_UART_MspInit+0xb8>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a13      	ldr	r2, [pc, #76]	; (8001508 <HAL_UART_MspInit+0xb8>)
 80014ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_UART_MspInit+0xb8>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80014cc:	f001 fbac 	bl	8002c28 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014ea:	2308      	movs	r3, #8
 80014ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_UART_MspInit+0xbc>)
 80014f8:	f000 fb86 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	37c0      	adds	r7, #192	; 0xc0
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40008000 	.word	0x40008000
 8001508:	40021000 	.word	0x40021000
 800150c:	48001800 	.word	0x48001800

08001510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a3d      	ldr	r2, [pc, #244]	; (8001614 <HAL_TIM_Base_MspInit+0x104>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d114      	bne.n	800154c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2018      	movs	r0, #24
 8001540:	f000 fb2b 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001544:	2018      	movs	r0, #24
 8001546:	f000 fb44 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800154a:	e05e      	b.n	800160a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d114      	bne.n	8001580 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001556:	4b30      	ldr	r3, [pc, #192]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6593      	str	r3, [r2, #88]	; 0x58
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	201c      	movs	r0, #28
 8001574:	f000 fb11 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001578:	201c      	movs	r0, #28
 800157a:	f000 fb2a 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
}
 800157e:	e044      	b.n	800160a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_TIM_Base_MspInit+0x10c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d114      	bne.n	80015b4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	201d      	movs	r0, #29
 80015a8:	f000 faf7 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ac:	201d      	movs	r0, #29
 80015ae:	f000 fb10 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
}
 80015b2:	e02a      	b.n	800160a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_TIM_Base_MspInit+0x110>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d114      	bne.n	80015e8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	201e      	movs	r0, #30
 80015dc:	f000 fadd 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015e0:	201e      	movs	r0, #30
 80015e2:	f000 faf6 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
}
 80015e6:	e010      	b.n	800160a <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_TIM_Base_MspInit+0x114>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10b      	bne.n	800160a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_TIM_Base_MspInit+0x108>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40012c00 	.word	0x40012c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40000400 	.word	0x40000400
 8001620:	40000800 	.word	0x40000800
 8001624:	40000c00 	.word	0x40000c00

08001628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001648:	d11d      	bne.n	8001686 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a32      	ldr	r2, [pc, #200]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001672:	2301      	movs	r3, #1
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 fac2 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001684:	e043      	b.n	800170e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_TIM_MspPostInit+0xf4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d11c      	bne.n	80016ca <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016a8:	2308      	movs	r3, #8
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016b8:	2302      	movs	r3, #2
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4817      	ldr	r0, [pc, #92]	; (8001720 <HAL_TIM_MspPostInit+0xf8>)
 80016c4:	f000 faa0 	bl	8001c08 <HAL_GPIO_Init>
}
 80016c8:	e021      	b.n	800170e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <HAL_TIM_MspPostInit+0xfc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d11c      	bne.n	800170e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_TIM_MspPostInit+0xf0>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016fe:	2302      	movs	r3, #2
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <HAL_TIM_MspPostInit+0x100>)
 800170a:	f000 fa7d 	bl	8001c08 <HAL_GPIO_Init>
}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	40000400 	.word	0x40000400
 8001720:	48001000 	.word	0x48001000
 8001724:	40000800 	.word	0x40000800
 8001728:	48000c00 	.word	0x48000c00

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f8f0 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001786:	f003 f8cb 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000430 	.word	0x20000430

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f003 f8c1 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000047c 	.word	0x2000047c

080017a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM3_IRQHandler+0x10>)
 80017ae:	f003 f8b7 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200004c8 	.word	0x200004c8

080017bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM4_IRQHandler+0x10>)
 80017c2:	f003 f8ad 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000514 	.word	0x20000514

080017d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <_sbrk+0x5c>)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <_sbrk+0x60>)
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x64>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <_sbrk+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d207      	bcs.n	8001810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001800:	f009 ff22 	bl	800b648 <__errno>
 8001804:	4603      	mov	r3, r0
 8001806:	220c      	movs	r2, #12
 8001808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e009      	b.n	8001824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20050000 	.word	0x20050000
 8001830:	00000400 	.word	0x00000400
 8001834:	20000814 	.word	0x20000814
 8001838:	20000870 	.word	0x20000870

0800183c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <SystemInit+0x20>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <SystemInit+0x20>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff ffea 	bl	800183c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <LoopForever+0x6>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <LoopForever+0xe>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <LoopForever+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f009 fee1 	bl	800b654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001892:	f7fe ff97 	bl	80007c4 <main>

08001896 <LoopForever>:

LoopForever:
    b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001898:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80018a4:	0800c08c 	.word	0x0800c08c
  ldr r2, =_sbss
 80018a8:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 80018ac:	2000086c 	.word	0x2000086c

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>

080018b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f961 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f80e 	bl	80018e4 <HAL_InitTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	e001      	b.n	80018d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018d4:	f7ff fd3a 	bl	800134c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_InitTick+0x6c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d023      	beq.n	8001940 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_InitTick+0x70>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_InitTick+0x6c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f96d 	bl	8001bee <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10f      	bne.n	800193a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d809      	bhi.n	8001934 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001920:	2200      	movs	r2, #0
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f000 f937 	bl	8001b9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_InitTick+0x74>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e007      	b.n	8001944 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e004      	b.n	8001944 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e001      	b.n	8001944 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000000c 	.word	0x2000000c
 8001954:	20000004 	.word	0x20000004
 8001958:	20000008 	.word	0x20000008

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000000c 	.word	0x2000000c
 8001980:	20000818 	.word	0x20000818

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000818 	.word	0x20000818

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffde 	bl	8001984 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	e166      	b.n	8001ee6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8158 	beq.w	8001ee0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x40>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d017      	beq.n	8001ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d123      	bne.n	8001d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	6939      	ldr	r1, [r7, #16]
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0203 	and.w	r2, r3, #3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80b2 	beq.w	8001ee0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	4a60      	ldr	r2, [pc, #384]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6613      	str	r3, [r2, #96]	; 0x60
 8001d88:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d94:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dbe:	d02b      	beq.n	8001e18 <HAL_GPIO_Init+0x210>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d025      	beq.n	8001e14 <HAL_GPIO_Init+0x20c>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_GPIO_Init+0x308>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d01f      	beq.n	8001e10 <HAL_GPIO_Init+0x208>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a50      	ldr	r2, [pc, #320]	; (8001f14 <HAL_GPIO_Init+0x30c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d019      	beq.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a4f      	ldr	r2, [pc, #316]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_GPIO_Init+0x200>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a4e      	ldr	r2, [pc, #312]	; (8001f1c <HAL_GPIO_Init+0x314>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00d      	beq.n	8001e04 <HAL_GPIO_Init+0x1fc>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <HAL_GPIO_Init+0x318>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0x1f8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_GPIO_Init+0x31c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_GPIO_Init+0x1f4>
 8001df8:	2307      	movs	r3, #7
 8001dfa:	e00e      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	e00c      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e00:	2306      	movs	r3, #6
 8001e02:	e00a      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e04:	2305      	movs	r3, #5
 8001e06:	e008      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e08:	2304      	movs	r3, #4
 8001e0a:	e006      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e004      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e002      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_GPIO_Init+0x212>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e2a:	4937      	ldr	r1, [pc, #220]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e38:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e5c:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e86:	4a28      	ldr	r2, [pc, #160]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f47f ae91 	bne.w	8001c18 <HAL_GPIO_Init+0x10>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010000 	.word	0x40010000
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	48000800 	.word	0x48000800
 8001f14:	48000c00 	.word	0x48000c00
 8001f18:	48001000 	.word	0x48001000
 8001f1c:	48001400 	.word	0x48001400
 8001f20:	48001800 	.word	0x48001800
 8001f24:	48001c00 	.word	0x48001c00
 8001f28:	40010400 	.word	0x40010400

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e081      	b.n	80020a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff f9ee 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e006      	b.n	8002014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d104      	bne.n	8002026 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002038:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002048:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69d9      	ldr	r1, [r3, #28]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	461a      	mov	r2, r3
 80020b8:	460b      	mov	r3, r1
 80020ba:	817b      	strh	r3, [r7, #10]
 80020bc:	4613      	mov	r3, r2
 80020be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	f040 80da 	bne.w	8002282 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x30>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0d3      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1d8>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020e4:	f7ff fc4e 	bl	8001984 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2319      	movs	r3, #25
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f9e6 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0be      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2221      	movs	r2, #33	; 0x21
 800210a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2210      	movs	r2, #16
 8002112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	893a      	ldrh	r2, [r7, #8]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2bff      	cmp	r3, #255	; 0xff
 8002136:	d90e      	bls.n	8002156 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	22ff      	movs	r2, #255	; 0xff
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	8979      	ldrh	r1, [r7, #10]
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_I2C_Master_Transmit+0x1e0>)
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fbdc 	bl	800290c <I2C_TransferConfig>
 8002154:	e06c      	b.n	8002230 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002164:	b2da      	uxtb	r2, r3
 8002166:	8979      	ldrh	r1, [r7, #10]
 8002168:	4b48      	ldr	r3, [pc, #288]	; (800228c <HAL_I2C_Master_Transmit+0x1e0>)
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fbcb 	bl	800290c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002176:	e05b      	b.n	8002230 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6a39      	ldr	r1, [r7, #32]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f9e3 	bl	8002548 <I2C_WaitOnTXISFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e07b      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d034      	beq.n	8002230 <HAL_I2C_Master_Transmit+0x184>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d130      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f975 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04d      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	d90e      	bls.n	8002210 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	22ff      	movs	r2, #255	; 0xff
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fb7f 	bl	800290c <I2C_TransferConfig>
 800220e:	e00f      	b.n	8002230 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fb6e 	bl	800290c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d19e      	bne.n	8002178 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	6a39      	ldr	r1, [r7, #32]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f9c2 	bl	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e01a      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_I2C_Master_Transmit+0x1e4>)
 8002262:	400b      	ands	r3, r1
 8002264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	80002000 	.word	0x80002000
 8002290:	fe00e800 	.word	0xfe00e800

08002294 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	461a      	mov	r2, r3
 80022a0:	460b      	mov	r3, r1
 80022a2:	817b      	strh	r3, [r7, #10]
 80022a4:	4613      	mov	r3, r2
 80022a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	f040 80db 	bne.w	800246c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_I2C_Master_Receive+0x30>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e0d4      	b.n	800246e <HAL_I2C_Master_Receive+0x1da>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022cc:	f7ff fb5a 	bl	8001984 <HAL_GetTick>
 80022d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2319      	movs	r3, #25
 80022d8:	2201      	movs	r2, #1
 80022da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f8f2 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0bf      	b.n	800246e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2222      	movs	r2, #34	; 0x22
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2210      	movs	r2, #16
 80022fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	893a      	ldrh	r2, [r7, #8]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	2bff      	cmp	r3, #255	; 0xff
 800231e:	d90e      	bls.n	800233e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	b2da      	uxtb	r2, r3
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	4b52      	ldr	r3, [pc, #328]	; (8002478 <HAL_I2C_Master_Receive+0x1e4>)
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fae8 	bl	800290c <I2C_TransferConfig>
 800233c:	e06d      	b.n	800241a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	b2da      	uxtb	r2, r3
 800234e:	8979      	ldrh	r1, [r7, #10]
 8002350:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_I2C_Master_Receive+0x1e4>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fad7 	bl	800290c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800235e:	e05c      	b.n	800241a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	6a39      	ldr	r1, [r7, #32]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f96b 	bl	8002640 <I2C_WaitOnRXNEFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e07c      	b.n	800246e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d034      	beq.n	800241a <HAL_I2C_Master_Receive+0x186>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d130      	bne.n	800241a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	2200      	movs	r2, #0
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f880 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e04d      	b.n	800246e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2bff      	cmp	r3, #255	; 0xff
 80023da:	d90e      	bls.n	80023fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	22ff      	movs	r2, #255	; 0xff
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	2300      	movs	r3, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa8a 	bl	800290c <I2C_TransferConfig>
 80023f8:	e00f      	b.n	800241a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fa79 	bl	800290c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d19d      	bne.n	8002360 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	6a39      	ldr	r1, [r7, #32]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f8cd 	bl	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e01a      	b.n	800246e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_I2C_Master_Receive+0x1e8>)
 800244c:	400b      	ands	r3, r1
 800244e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	80002400 	.word	0x80002400
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b02      	cmp	r3, #2
 8002494:	d103      	bne.n	800249e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	619a      	str	r2, [r3, #24]
  }
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	e022      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d01e      	beq.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7ff fa4f 	bl	8001984 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d113      	bne.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e00f      	b.n	8002540 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	429a      	cmp	r2, r3
 800253c:	d0cd      	beq.n	80024da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002554:	e02c      	b.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f8ea 	bl	8002734 <I2C_IsErrorOccurred>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e02a      	b.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d01e      	beq.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7ff fa07 	bl	8001984 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d113      	bne.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e007      	b.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d1cb      	bne.n	8002556 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d4:	e028      	b.n	8002628 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f8aa 	bl	8002734 <I2C_IsErrorOccurred>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e026      	b.n	8002638 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7ff f9cb 	bl	8001984 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b20      	cmp	r3, #32
 8002634:	d1cf      	bne.n	80025d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800264c:	e064      	b.n	8002718 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f86e 	bl	8002734 <I2C_IsErrorOccurred>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e062      	b.n	8002728 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b20      	cmp	r3, #32
 800266e:	d138      	bne.n	80026e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b04      	cmp	r3, #4
 800267c:	d105      	bne.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e04e      	b.n	8002728 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b10      	cmp	r3, #16
 8002696:	d107      	bne.n	80026a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2204      	movs	r2, #4
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
 80026a6:	e002      	b.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2220      	movs	r2, #32
 80026b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7ff f94f 	bl	8001984 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10f      	bne.n	8002718 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e007      	b.n	8002728 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d193      	bne.n	800264e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	fe00e800 	.word	0xfe00e800

08002734 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d075      	beq.n	800284c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002768:	e056      	b.n	8002818 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d052      	beq.n	8002818 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7ff f907 	bl	8001984 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_IsErrorOccurred+0x54>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d147      	bne.n	8002818 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800279a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027aa:	d12e      	bne.n	800280a <I2C_IsErrorOccurred+0xd6>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b2:	d02a      	beq.n	800280a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d027      	beq.n	800280a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027ca:	f7ff f8db 	bl	8001984 <HAL_GetTick>
 80027ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d0:	e01b      	b.n	800280a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80027d2:	f7ff f8d7 	bl	8001984 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b19      	cmp	r3, #25
 80027de:	d914      	bls.n	800280a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d1dc      	bne.n	80027d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b20      	cmp	r3, #32
 8002824:	d003      	beq.n	800282e <I2C_IsErrorOccurred+0xfa>
 8002826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800282a:	2b00      	cmp	r3, #0
 800282c:	d09d      	beq.n	800276a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800282e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2220      	movs	r2, #32
 800283c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800286e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f043 0308 	orr.w	r3, r3, #8
 8002886:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002890:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01c      	beq.n	80028fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fddc 	bl	8002480 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <I2C_IsErrorOccurred+0x1d4>)
 80028d4:	400b      	ands	r3, r1
 80028d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80028fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002900:	4618      	mov	r0, r3
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	fe00e800 	.word	0xfe00e800

0800290c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	817b      	strh	r3, [r7, #10]
 800291a:	4613      	mov	r3, r2
 800291c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002924:	7a7b      	ldrb	r3, [r7, #9]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800292c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	4313      	orrs	r3, r2
 8002936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800293a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	0d5b      	lsrs	r3, r3, #21
 8002946:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <I2C_TransferConfig+0x60>)
 800294c:	430b      	orrs	r3, r1
 800294e:	43db      	mvns	r3, r3
 8002950:	ea02 0103 	and.w	r1, r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	03ff63ff 	.word	0x03ff63ff

08002970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	d138      	bne.n	80029f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002990:	2302      	movs	r3, #2
 8002992:	e032      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d139      	bne.n	8002a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e033      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2224      	movs	r2, #36	; 0x24
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d102      	bne.n	8002ab8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab6:	e00b      	b.n	8002ad0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_PWREx_GetVoltageRange+0x3c>)
 8002aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac6:	d102      	bne.n	8002ace <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002acc:	e000      	b.n	8002ad0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002ace:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000

08002ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d141      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aee:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d131      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002afc:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b02:	4a46      	ldr	r2, [pc, #280]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b14:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2232      	movs	r2, #50	; 0x32
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b32:	e002      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3a:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b46:	d102      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f2      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d158      	bne.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e057      	b.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b66:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b70:	e04d      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b78:	d141      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d131      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2232      	movs	r2, #50	; 0x32
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9b      	lsrs	r3, r3, #18
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbe:	e002      	b.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	d102      	bne.n	8002bda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f2      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d112      	bne.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e011      	b.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bfc:	e007      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	20000004 	.word	0x20000004
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c36:	6053      	str	r3, [r2, #4]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40007000 	.word	0x40007000

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f000 bc68 	b.w	800352c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5c:	4b97      	ldr	r3, [pc, #604]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c66:	4b95      	ldr	r3, [pc, #596]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80e6 	beq.w	8002e4a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4c>
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	f040 808d 	bne.w	8002da6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	f040 8089 	bne.w	8002da6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c94:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_RCC_OscConfig+0x66>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f000 bc3f 	b.w	800352c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb2:	4b82      	ldr	r3, [pc, #520]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x80>
 8002cbe:	4b7f      	ldr	r3, [pc, #508]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc6:	e005      	b.n	8002cd4 <HAL_RCC_OscConfig+0x8c>
 8002cc8:	4b7c      	ldr	r3, [pc, #496]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d224      	bcs.n	8002d22 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fe2d 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f000 bc1f 	b.w	800352c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a72      	ldr	r2, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b70      	ldr	r3, [pc, #448]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	496d      	ldr	r1, [pc, #436]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0c:	4b6b      	ldr	r3, [pc, #428]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	4968      	ldr	r1, [pc, #416]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	604b      	str	r3, [r1, #4]
 8002d20:	e025      	b.n	8002d6e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d22:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a65      	ldr	r2, [pc, #404]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	4960      	ldr	r1, [pc, #384]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d40:	4b5e      	ldr	r3, [pc, #376]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	495b      	ldr	r1, [pc, #364]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fdec 	bl	800393c <RCC_SetFlashLatencyFromMSIRange>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e3de      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d6e:	f000 fd21 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	4950      	ldr	r1, [pc, #320]	; (8002ec0 <HAL_RCC_OscConfig+0x278>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a4e      	ldr	r2, [pc, #312]	; (8002ec4 <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d8e:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fda6 	bl	80018e4 <HAL_InitTick>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d052      	beq.n	8002e48 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	e3c2      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d032      	beq.n	8002e14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a42      	ldr	r2, [pc, #264]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dba:	f7fe fde3 	bl	8001984 <HAL_GetTick>
 8002dbe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fddf 	bl	8001984 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e3ab      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd4:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a35      	ldr	r2, [pc, #212]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	4930      	ldr	r1, [pc, #192]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dfe:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	492b      	ldr	r1, [pc, #172]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
 8002e12:	e01a      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fdb0 	bl	8001984 <HAL_GetTick>
 8002e24:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e28:	f7fe fdac 	bl	8001984 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e378      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1e0>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d073      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x220>
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d10e      	bne.n	8002e80 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d063      	beq.n	8002f3c <HAL_RCC_OscConfig+0x2f4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d15f      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e355      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x250>
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e025      	b.n	8002ee4 <HAL_RCC_OscConfig+0x29c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d114      	bne.n	8002ecc <HAL_RCC_OscConfig+0x284>
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a02      	ldr	r2, [pc, #8]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e013      	b.n	8002ee4 <HAL_RCC_OscConfig+0x29c>
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	0800bfd8 	.word	0x0800bfd8
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	20000008 	.word	0x20000008
 8002ecc:	4b8f      	ldr	r3, [pc, #572]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a8e      	ldr	r2, [pc, #568]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b8c      	ldr	r3, [pc, #560]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a8b      	ldr	r2, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fd4a 	bl	8001984 <HAL_GetTick>
 8002ef0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fd46 	bl	8001984 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e312      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2ac>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fd36 	bl	8001984 <HAL_GetTick>
 8002f18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fd32 	bl	8001984 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e2fe      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f2e:	4b77      	ldr	r3, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2d4>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d060      	beq.n	800300c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_OscConfig+0x314>
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d119      	bne.n	8002f8a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d116      	bne.n	8002f8a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f5c:	4b6b      	ldr	r3, [pc, #428]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_OscConfig+0x32c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e2db      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	4962      	ldr	r1, [pc, #392]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f88:	e040      	b.n	800300c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d023      	beq.n	8002fda <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f92:	4b5e      	ldr	r3, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5d      	ldr	r2, [pc, #372]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fcf1 	bl	8001984 <HAL_GetTick>
 8002fa2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fced 	bl	8001984 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e2b9      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb8:	4b54      	ldr	r3, [pc, #336]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b51      	ldr	r3, [pc, #324]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	494e      	ldr	r1, [pc, #312]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
 8002fd8:	e018      	b.n	800300c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	4b4c      	ldr	r3, [pc, #304]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a4b      	ldr	r2, [pc, #300]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fccd 	bl	8001984 <HAL_GetTick>
 8002fea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe fcc9 	bl	8001984 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e295      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003000:	4b42      	ldr	r3, [pc, #264]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8082 	beq.w	800311e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d05f      	beq.n	80030e2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003028:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	429a      	cmp	r2, r3
 8003036:	d037      	beq.n	80030a8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e26d      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01b      	beq.n	8003092 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800305a:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800305c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003060:	4a2a      	ldr	r2, [pc, #168]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306a:	f7fe fc8b 	bl	8001984 <HAL_GetTick>
 800306e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003072:	f7fe fc87 	bl	8001984 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b11      	cmp	r3, #17
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e253      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003084:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1ef      	bne.n	8003072 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003098:	f023 0210 	bic.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	491a      	ldr	r1, [pc, #104]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe fc64 	bl	8001984 <HAL_GetTick>
 80030bc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c0:	f7fe fc60 	bl	8001984 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b11      	cmp	r3, #17
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e22c      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ef      	beq.n	80030c0 <HAL_RCC_OscConfig+0x478>
 80030e0:	e01d      	b.n	800311e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe fc47 	bl	8001984 <HAL_GetTick>
 80030f6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe fc43 	bl	8001984 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b11      	cmp	r3, #17
 8003106:	d903      	bls.n	8003110 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e20f      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
 800310c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003110:	4b83      	ldr	r3, [pc, #524]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ed      	bne.n	80030fa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80bd 	beq.w	80032a6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003132:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10e      	bne.n	800315c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	4a77      	ldr	r2, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	6593      	str	r3, [r2, #88]	; 0x58
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315c:	4b71      	ldr	r3, [pc, #452]	; (8003324 <HAL_RCC_OscConfig+0x6dc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d118      	bne.n	800319a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003168:	4b6e      	ldr	r3, [pc, #440]	; (8003324 <HAL_RCC_OscConfig+0x6dc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6d      	ldr	r2, [pc, #436]	; (8003324 <HAL_RCC_OscConfig+0x6dc>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003174:	f7fe fc06 	bl	8001984 <HAL_GetTick>
 8003178:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317c:	f7fe fc02 	bl	8001984 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1ce      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318e:	4b65      	ldr	r3, [pc, #404]	; (8003324 <HAL_RCC_OscConfig+0x6dc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d02c      	beq.n	8003200 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80031a6:	4b5e      	ldr	r3, [pc, #376]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	4959      	ldr	r1, [pc, #356]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031cc:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a53      	ldr	r2, [pc, #332]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a4f      	ldr	r2, [pc, #316]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ec:	e018      	b.n	8003220 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031ee:	4b4c      	ldr	r3, [pc, #304]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031fe:	e00f      	b.n	8003220 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003200:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	4a46      	ldr	r2, [pc, #280]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	4a42      	ldr	r2, [pc, #264]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d016      	beq.n	8003256 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe fbac 	bl	8001984 <HAL_GetTick>
 800322c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe fba8 	bl	8001984 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e172      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ed      	beq.n	8003230 <HAL_RCC_OscConfig+0x5e8>
 8003254:	e01d      	b.n	8003292 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fe fb95 	bl	8001984 <HAL_GetTick>
 800325a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fb91 	bl	8001984 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e15b      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ed      	bne.n	800325e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003282:	4b27      	ldr	r3, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 800328a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003296:	2b01      	cmp	r3, #1
 8003298:	d105      	bne.n	80032a6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80032a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d041      	beq.n	8003336 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80032bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe fb5b 	bl	8001984 <HAL_GetTick>
 80032ce:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d2:	f7fe fb57 	bl	8001984 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e123      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80032e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ef      	beq.n	80032d2 <HAL_RCC_OscConfig+0x68a>
 80032f2:	e020      	b.n	8003336 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80032f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_OscConfig+0x6d8>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fb3e 	bl	8001984 <HAL_GetTick>
 8003308:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800330a:	e00d      	b.n	8003328 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800330c:	f7fe fb3a 	bl	8001984 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d906      	bls.n	8003328 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e106      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003328:	4b82      	ldr	r3, [pc, #520]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800332a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ea      	bne.n	800330c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80f5 	beq.w	800352a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b02      	cmp	r3, #2
 8003346:	f040 80cb 	bne.w	80034e0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800334a:	4b7a      	ldr	r3, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0203 	and.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	429a      	cmp	r2, r3
 800335c:	d12c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	3b01      	subs	r3, #1
 800336a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d123      	bne.n	80033b8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d11b      	bne.n	80033b8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d113      	bne.n	80033b8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	3b01      	subs	r3, #1
 800339e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d109      	bne.n	80033b8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	3b01      	subs	r3, #1
 80033b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d06d      	beq.n	8003494 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d068      	beq.n	8003490 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033ca:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0a8      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033da:	4b56      	ldr	r3, [pc, #344]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a55      	ldr	r2, [pc, #340]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80033e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e6:	f7fe facd 	bl	8001984 <HAL_GetTick>
 80033ea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe fac9 	bl	8001984 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e095      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340c:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	4b49      	ldr	r3, [pc, #292]	; (8003538 <HAL_RCC_OscConfig+0x8f0>)
 8003412:	4013      	ands	r3, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800341c:	3a01      	subs	r2, #1
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	4311      	orrs	r1, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003426:	0212      	lsls	r2, r2, #8
 8003428:	4311      	orrs	r1, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800342e:	0852      	lsrs	r2, r2, #1
 8003430:	3a01      	subs	r2, #1
 8003432:	0552      	lsls	r2, r2, #21
 8003434:	4311      	orrs	r1, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800343a:	0852      	lsrs	r2, r2, #1
 800343c:	3a01      	subs	r2, #1
 800343e:	0652      	lsls	r2, r2, #25
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003446:	06d2      	lsls	r2, r2, #27
 8003448:	430a      	orrs	r2, r1
 800344a:	493a      	ldr	r1, [pc, #232]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800344c:	4313      	orrs	r3, r2
 800344e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003450:	4b38      	ldr	r3, [pc, #224]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a37      	ldr	r2, [pc, #220]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800345c:	4b35      	ldr	r3, [pc, #212]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a34      	ldr	r2, [pc, #208]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003468:	f7fe fa8c 	bl	8001984 <HAL_GetTick>
 800346c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe fa88 	bl	8001984 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e054      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800348e:	e04c      	b.n	800352a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e04b      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d144      	bne.n	800352a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a0:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a20      	ldr	r2, [pc, #128]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034b8:	f7fe fa64 	bl	8001984 <HAL_GetTick>
 80034bc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe fa60 	bl	8001984 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e02c      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x878>
 80034de:	e024      	b.n	800352a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d01f      	beq.n	8003526 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 80034ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe fa47 	bl	8001984 <HAL_GetTick>
 80034f6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fe fa43 	bl	8001984 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e00f      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	4905      	ldr	r1, [pc, #20]	; (8003534 <HAL_RCC_OscConfig+0x8ec>)
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <HAL_RCC_OscConfig+0x8f4>)
 8003520:	4013      	ands	r3, r2
 8003522:	60cb      	str	r3, [r1, #12]
 8003524:	e001      	b.n	800352a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3728      	adds	r7, #40	; 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	019d800c 	.word	0x019d800c
 800353c:	feeefffc 	.word	0xfeeefffc

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e11d      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003558:	4b90      	ldr	r3, [pc, #576]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d910      	bls.n	8003588 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b8d      	ldr	r3, [pc, #564]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 020f 	bic.w	r2, r3, #15
 800356e:	498b      	ldr	r1, [pc, #556]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e105      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b81      	ldr	r3, [pc, #516]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d908      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	4b7e      	ldr	r3, [pc, #504]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	497b      	ldr	r1, [pc, #492]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d079      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d11e      	bne.n	8003608 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0dc      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035da:	f000 fa09 	bl	80039f0 <RCC_GetSysClockFreqFromPLLSource>
 80035de:	4603      	mov	r3, r0
 80035e0:	4a70      	ldr	r2, [pc, #448]	; (80037a4 <HAL_RCC_ClockConfig+0x264>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d946      	bls.n	8003674 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d140      	bne.n	8003674 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035f2:	4b6b      	ldr	r3, [pc, #428]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fa:	4a69      	ldr	r2, [pc, #420]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80035fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003600:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e035      	b.n	8003674 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d107      	bne.n	8003620 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003610:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d115      	bne.n	8003648 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0b9      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d107      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003628:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d109      	bne.n	8003648 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0ad      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0a5      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003648:	f000 f8b4 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 800364c:	4603      	mov	r3, r0
 800364e:	4a55      	ldr	r2, [pc, #340]	; (80037a4 <HAL_RCC_ClockConfig+0x264>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d90f      	bls.n	8003674 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003654:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003660:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003668:	4a4d      	ldr	r2, [pc, #308]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800366a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003674:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 0203 	bic.w	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4947      	ldr	r1, [pc, #284]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003686:	f7fe f97d 	bl	8001984 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368e:	f7fe f979 	bl	8001984 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e077      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a4:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 020c 	and.w	r2, r3, #12
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d1eb      	bne.n	800368e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b80      	cmp	r3, #128	; 0x80
 80036ba:	d105      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d208      	bcs.n	80036f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	492b      	ldr	r1, [pc, #172]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d210      	bcs.n	8003726 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 020f 	bic.w	r2, r3, #15
 800370c:	4923      	ldr	r1, [pc, #140]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_RCC_ClockConfig+0x25c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d001      	beq.n	8003726 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e036      	b.n	8003794 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003732:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4918      	ldr	r1, [pc, #96]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4910      	ldr	r1, [pc, #64]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003764:	f000 f826 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_ClockConfig+0x260>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	490c      	ldr	r1, [pc, #48]	; (80037a8 <HAL_RCC_ClockConfig+0x268>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
 8003780:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x26c>)
 8003782:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe f8ab 	bl	80018e4 <HAL_InitTick>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]

  return status;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
 80037a4:	04c4b400 	.word	0x04c4b400
 80037a8:	0800bfd8 	.word	0x0800bfd8
 80037ac:	20000004 	.word	0x20000004
 80037b0:	20000008 	.word	0x20000008

080037b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037cc:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x34>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d121      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d11e      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e005      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003810:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10d      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003824:	e00a      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d102      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	e004      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d101      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003838:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800383a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d134      	bne.n	80038ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d003      	beq.n	800385a <HAL_RCC_GetSysClockFreq+0xa6>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d003      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xac>
 8003858:	e005      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800385a:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800385c:	617b      	str	r3, [r7, #20]
      break;
 800385e:	e005      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003862:	617b      	str	r3, [r7, #20]
      break;
 8003864:	e002      	b.n	800386c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	617b      	str	r3, [r7, #20]
      break;
 800386a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3301      	adds	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	fb03 f202 	mul.w	r2, r3, r2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	0e5b      	lsrs	r3, r3, #25
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	3301      	adds	r3, #1
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ac:	69bb      	ldr	r3, [r7, #24]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	0800bff0 	.word	0x0800bff0
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038e8:	f7ff fff0 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <HAL_RCC_GetPCLK1Freq+0x28>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	0800bfe8 	.word	0x0800bfe8

08003910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003914:	f7ff ffda 	bl	80038cc <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0adb      	lsrs	r3, r3, #11
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	0800bfe8 	.word	0x0800bfe8

0800393c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003954:	f7ff f8a4 	bl	8002aa0 <HAL_PWREx_GetVoltageRange>
 8003958:	6178      	str	r0, [r7, #20]
 800395a:	e014      	b.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800395c:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	; 0x58
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003974:	f7ff f894 	bl	8002aa0 <HAL_PWREx_GetVoltageRange>
 8003978:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d10b      	bne.n	80039a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d913      	bls.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2ba0      	cmp	r3, #160	; 0xa0
 8003998:	d902      	bls.n	80039a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800399a:	2302      	movs	r3, #2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e00d      	b.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a0:	2301      	movs	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	e00a      	b.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b7f      	cmp	r3, #127	; 0x7f
 80039aa:	d902      	bls.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80039ac:	2302      	movs	r3, #2
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e004      	b.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b70      	cmp	r3, #112	; 0x70
 80039b6:	d101      	bne.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039b8:	2301      	movs	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 020f 	bic.w	r2, r3, #15
 80039c4:	4909      	ldr	r1, [pc, #36]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d001      	beq.n	80039de <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40022000 	.word	0x40022000

080039f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039f6:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d00b      	beq.n	8003a1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d825      	bhi.n	8003a58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d008      	beq.n	8003a24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d11f      	bne.n	8003a58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a1a:	613b      	str	r3, [r7, #16]
    break;
 8003a1c:	e01f      	b.n	8003a5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a1e:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a20:	613b      	str	r3, [r7, #16]
    break;
 8003a22:	e01c      	b.n	8003a5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a30:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e005      	b.n	8003a4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	613b      	str	r3, [r7, #16]
    break;
 8003a56:	e002      	b.n	8003a5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
    break;
 8003a5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	fb03 f202 	mul.w	r2, r3, r2
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0e5b      	lsrs	r3, r3, #25
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a9e:	683b      	ldr	r3, [r7, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	007a1200 	.word	0x007a1200
 8003ab8:	0800bff0 	.word	0x0800bff0

08003abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac8:	2300      	movs	r3, #0
 8003aca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d040      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d02a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d825      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ae4:	2b60      	cmp	r3, #96	; 0x60
 8003ae6:	d026      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d821      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d006      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003af0:	2b40      	cmp	r3, #64	; 0x40
 8003af2:	d81d      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d009      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d010      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003afc:	e018      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003afe:	4b89      	ldr	r3, [pc, #548]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	4a88      	ldr	r2, [pc, #544]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b0a:	e015      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	2100      	movs	r1, #0
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fb3e 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1c:	e00c      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3320      	adds	r3, #32
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fc29 	bl	800437c <RCCEx_PLLSAI2_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	74fb      	strb	r3, [r7, #19]
      break;
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b3e:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b44:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4c:	4975      	ldr	r1, [pc, #468]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b54:	e001      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d047      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6e:	d030      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b74:	d82a      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7a:	d02a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b80:	d824      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b86:	d008      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d81e      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d010      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b98:	e018      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4a61      	ldr	r2, [pc, #388]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ba6:	e015      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 faf0 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bb8:	e00c      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3320      	adds	r3, #32
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fbdb 	bl	800437c <RCCEx_PLLSAI2_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bca:	e003      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	74fb      	strb	r3, [r7, #19]
      break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bda:	4b52      	ldr	r3, [pc, #328]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	494e      	ldr	r1, [pc, #312]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003bf0:	e001      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 809f 	beq.w	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c04:	2300      	movs	r3, #0
 8003c06:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c08:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	4a40      	ldr	r2, [pc, #256]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c28:	6593      	str	r3, [r2, #88]	; 0x58
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c46:	f7fd fe9d 	bl	8001984 <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c4c:	e009      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4e:	f7fd fe99 	bl	8001984 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d902      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003c60:	e005      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ef      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d15b      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01f      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d019      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c9e:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cae:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cbe:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d016      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fe58 	bl	8001984 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fd fe54 	bl	8001984 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d902      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	74fb      	strb	r3, [r7, #19]
            break;
 8003cee:	e006      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0ec      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10c      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	4903      	ldr	r1, [pc, #12]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d1c:	e008      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	74bb      	strb	r3, [r7, #18]
 8003d22:	e005      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d30:	7c7b      	ldrb	r3, [r7, #17]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	4a9f      	ldr	r2, [pc, #636]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d4e:	4b9a      	ldr	r3, [pc, #616]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f023 0203 	bic.w	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	4996      	ldr	r1, [pc, #600]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d70:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f023 020c 	bic.w	r2, r3, #12
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	498e      	ldr	r1, [pc, #568]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d92:	4b89      	ldr	r3, [pc, #548]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	4985      	ldr	r1, [pc, #532]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003db4:	4b80      	ldr	r3, [pc, #512]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc2:	497d      	ldr	r1, [pc, #500]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dd6:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	4974      	ldr	r1, [pc, #464]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003df8:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e06:	496c      	ldr	r1, [pc, #432]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e1a:	4b67      	ldr	r3, [pc, #412]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e28:	4963      	ldr	r1, [pc, #396]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e3c:	4b5e      	ldr	r3, [pc, #376]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4a:	495b      	ldr	r1, [pc, #364]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5e:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6c:	4952      	ldr	r1, [pc, #328]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e80:	4b4d      	ldr	r3, [pc, #308]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	494a      	ldr	r1, [pc, #296]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ea2:	4b45      	ldr	r3, [pc, #276]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	4941      	ldr	r1, [pc, #260]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ec4:	4b3c      	ldr	r3, [pc, #240]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	4939      	ldr	r1, [pc, #228]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d028      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef4:	4930      	ldr	r1, [pc, #192]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f04:	d106      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f10:	60d3      	str	r3, [r2, #12]
 8003f12:	e011      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f935 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d04d      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f4c:	d108      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f5e:	e012      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003f60:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7e:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9a:	60d3      	str	r3, [r2, #12]
 8003f9c:	e020      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a02      	ldr	r2, [pc, #8]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	60d3      	str	r3, [r2, #12]
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f8e1 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d028      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffa:	4965      	ldr	r1, [pc, #404]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400a:	d106      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b60      	ldr	r3, [pc, #384]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a5f      	ldr	r2, [pc, #380]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
 8004018:	e011      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004022:	d10c      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	2101      	movs	r1, #1
 800402a:	4618      	mov	r0, r3
 800402c:	f000 f8b2 	bl	8004194 <RCCEx_PLLSAI1_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01e      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800404a:	4b51      	ldr	r3, [pc, #324]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405a:	494d      	ldr	r1, [pc, #308]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406c:	d10c      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f88d 	bl	8004194 <RCCEx_PLLSAI1_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004094:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004096:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800409a:	f023 0204 	bic.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a4:	493a      	ldr	r1, [pc, #232]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040b8:	4b35      	ldr	r3, [pc, #212]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040be:	f023 0218 	bic.w	r2, r3, #24
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	4931      	ldr	r1, [pc, #196]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d035      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040dc:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2b      	ldr	r2, [pc, #172]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fd fc4c 	bl	8001984 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040f0:	f7fd fc48 	bl	8001984 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	74fb      	strb	r3, [r7, #19]
        break;
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ef      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d113      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004116:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004126:	491a      	ldr	r1, [pc, #104]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3320      	adds	r3, #32
 8004132:	2102      	movs	r1, #2
 8004134:	4618      	mov	r0, r3
 8004136:	f000 f921 	bl	800437c <RCCEx_PLLSAI2_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d017      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800415a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	490a      	ldr	r1, [pc, #40]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a04      	ldr	r2, [pc, #16]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004184:	7cbb      	ldrb	r3, [r7, #18]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000

08004194 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a2:	4b72      	ldr	r3, [pc, #456]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00e      	beq.n	80041cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041ae:	4b6f      	ldr	r3, [pc, #444]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0203 	and.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d103      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
       ||
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d142      	bne.n	800424c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	e03f      	b.n	800424c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d018      	beq.n	8004206 <RCCEx_PLLSAI1_Config+0x72>
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d825      	bhi.n	8004224 <RCCEx_PLLSAI1_Config+0x90>
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d002      	beq.n	80041e2 <RCCEx_PLLSAI1_Config+0x4e>
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d009      	beq.n	80041f4 <RCCEx_PLLSAI1_Config+0x60>
 80041e0:	e020      	b.n	8004224 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11d      	bne.n	800422a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f2:	e01a      	b.n	800422a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f4:	4b5d      	ldr	r3, [pc, #372]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d116      	bne.n	800422e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004204:	e013      	b.n	800422e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004206:	4b59      	ldr	r3, [pc, #356]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004212:	4b56      	ldr	r3, [pc, #344]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004222:	e006      	b.n	8004232 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      break;
 8004228:	e004      	b.n	8004234 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004232:	bf00      	nop
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d108      	bne.n	800424c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800423a:	4b4c      	ldr	r3, [pc, #304]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 0203 	bic.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4949      	ldr	r1, [pc, #292]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 8086 	bne.w	8004360 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004254:	4b45      	ldr	r3, [pc, #276]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a44      	ldr	r2, [pc, #272]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 800425a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800425e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004260:	f7fd fb90 	bl	8001984 <HAL_GetTick>
 8004264:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004266:	e009      	b.n	800427c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004268:	f7fd fb8c 	bl	8001984 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d902      	bls.n	800427c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	73fb      	strb	r3, [r7, #15]
        break;
 800427a:	e005      	b.n	8004288 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ef      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d168      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	4b35      	ldr	r3, [pc, #212]	; (8004370 <RCCEx_PLLSAI1_Config+0x1dc>)
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6892      	ldr	r2, [r2, #8]
 80042a0:	0211      	lsls	r1, r2, #8
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68d2      	ldr	r2, [r2, #12]
 80042a6:	06d2      	lsls	r2, r2, #27
 80042a8:	4311      	orrs	r1, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6852      	ldr	r2, [r2, #4]
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0112      	lsls	r2, r2, #4
 80042b2:	430a      	orrs	r2, r1
 80042b4:	492d      	ldr	r1, [pc, #180]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	610b      	str	r3, [r1, #16]
 80042ba:	e02d      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d115      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042c2:	4b2a      	ldr	r3, [pc, #168]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6892      	ldr	r2, [r2, #8]
 80042ce:	0211      	lsls	r1, r2, #8
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6912      	ldr	r2, [r2, #16]
 80042d4:	0852      	lsrs	r2, r2, #1
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0552      	lsls	r2, r2, #21
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6852      	ldr	r2, [r2, #4]
 80042e0:	3a01      	subs	r2, #1
 80042e2:	0112      	lsls	r2, r2, #4
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4921      	ldr	r1, [pc, #132]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]
 80042ec:	e014      	b.n	8004318 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042ee:	4b1f      	ldr	r3, [pc, #124]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	4b21      	ldr	r3, [pc, #132]	; (8004378 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6892      	ldr	r2, [r2, #8]
 80042fa:	0211      	lsls	r1, r2, #8
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6952      	ldr	r2, [r2, #20]
 8004300:	0852      	lsrs	r2, r2, #1
 8004302:	3a01      	subs	r2, #1
 8004304:	0652      	lsls	r2, r2, #25
 8004306:	4311      	orrs	r1, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6852      	ldr	r2, [r2, #4]
 800430c:	3a01      	subs	r2, #1
 800430e:	0112      	lsls	r2, r2, #4
 8004310:	430a      	orrs	r2, r1
 8004312:	4916      	ldr	r1, [pc, #88]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a13      	ldr	r2, [pc, #76]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 800431e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd fb2e 	bl	8001984 <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800432a:	e009      	b.n	8004340 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800432c:	f7fd fb2a 	bl	8001984 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d902      	bls.n	8004340 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	73fb      	strb	r3, [r7, #15]
          break;
 800433e:	e005      	b.n	800434c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ef      	beq.n	800432c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	4904      	ldr	r1, [pc, #16]	; (800436c <RCCEx_PLLSAI1_Config+0x1d8>)
 800435c:	4313      	orrs	r3, r2
 800435e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	07ff800f 	.word	0x07ff800f
 8004374:	ff9f800f 	.word	0xff9f800f
 8004378:	f9ff800f 	.word	0xf9ff800f

0800437c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800438a:	4b72      	ldr	r3, [pc, #456]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004396:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 0203 	and.w	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d103      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
       ||
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d142      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	e03f      	b.n	8004434 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d018      	beq.n	80043ee <RCCEx_PLLSAI2_Config+0x72>
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d825      	bhi.n	800440c <RCCEx_PLLSAI2_Config+0x90>
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d002      	beq.n	80043ca <RCCEx_PLLSAI2_Config+0x4e>
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d009      	beq.n	80043dc <RCCEx_PLLSAI2_Config+0x60>
 80043c8:	e020      	b.n	800440c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ca:	4b62      	ldr	r3, [pc, #392]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11d      	bne.n	8004412 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043da:	e01a      	b.n	8004412 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043dc:	4b5d      	ldr	r3, [pc, #372]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ec:	e013      	b.n	8004416 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ee:	4b59      	ldr	r3, [pc, #356]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043fa:	4b56      	ldr	r3, [pc, #344]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800440a:	e006      	b.n	800441a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      break;
 8004410:	e004      	b.n	800441c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800441a:	bf00      	nop
    }

    if(status == HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004422:	4b4c      	ldr	r3, [pc, #304]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4949      	ldr	r1, [pc, #292]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f040 8086 	bne.w	8004548 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800443c:	4b45      	ldr	r3, [pc, #276]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a44      	ldr	r2, [pc, #272]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004448:	f7fd fa9c 	bl	8001984 <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800444e:	e009      	b.n	8004464 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004450:	f7fd fa98 	bl	8001984 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d902      	bls.n	8004464 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	73fb      	strb	r3, [r7, #15]
        break;
 8004462:	e005      	b.n	8004470 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004464:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ef      	bne.n	8004450 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d168      	bne.n	8004548 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d113      	bne.n	80044a4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800447c:	4b35      	ldr	r3, [pc, #212]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	4b35      	ldr	r3, [pc, #212]	; (8004558 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6892      	ldr	r2, [r2, #8]
 8004488:	0211      	lsls	r1, r2, #8
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68d2      	ldr	r2, [r2, #12]
 800448e:	06d2      	lsls	r2, r2, #27
 8004490:	4311      	orrs	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6852      	ldr	r2, [r2, #4]
 8004496:	3a01      	subs	r2, #1
 8004498:	0112      	lsls	r2, r2, #4
 800449a:	430a      	orrs	r2, r1
 800449c:	492d      	ldr	r1, [pc, #180]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	614b      	str	r3, [r1, #20]
 80044a2:	e02d      	b.n	8004500 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d115      	bne.n	80044d6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	4b2b      	ldr	r3, [pc, #172]	; (800455c <RCCEx_PLLSAI2_Config+0x1e0>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6892      	ldr	r2, [r2, #8]
 80044b6:	0211      	lsls	r1, r2, #8
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6912      	ldr	r2, [r2, #16]
 80044bc:	0852      	lsrs	r2, r2, #1
 80044be:	3a01      	subs	r2, #1
 80044c0:	0552      	lsls	r2, r2, #21
 80044c2:	4311      	orrs	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6852      	ldr	r2, [r2, #4]
 80044c8:	3a01      	subs	r2, #1
 80044ca:	0112      	lsls	r2, r2, #4
 80044cc:	430a      	orrs	r2, r1
 80044ce:	4921      	ldr	r1, [pc, #132]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	614b      	str	r3, [r1, #20]
 80044d4:	e014      	b.n	8004500 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <RCCEx_PLLSAI2_Config+0x1e4>)
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	0211      	lsls	r1, r2, #8
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6952      	ldr	r2, [r2, #20]
 80044e8:	0852      	lsrs	r2, r2, #1
 80044ea:	3a01      	subs	r2, #1
 80044ec:	0652      	lsls	r2, r2, #25
 80044ee:	4311      	orrs	r1, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6852      	ldr	r2, [r2, #4]
 80044f4:	3a01      	subs	r2, #1
 80044f6:	0112      	lsls	r2, r2, #4
 80044f8:	430a      	orrs	r2, r1
 80044fa:	4916      	ldr	r1, [pc, #88]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a13      	ldr	r2, [pc, #76]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd fa3a 	bl	8001984 <HAL_GetTick>
 8004510:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004512:	e009      	b.n	8004528 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004514:	f7fd fa36 	bl	8001984 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d902      	bls.n	8004528 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	73fb      	strb	r3, [r7, #15]
          break;
 8004526:	e005      	b.n	8004534 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ef      	beq.n	8004514 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	4904      	ldr	r1, [pc, #16]	; (8004554 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004544:	4313      	orrs	r3, r2
 8004546:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	07ff800f 	.word	0x07ff800f
 800455c:	ff9f800f 	.word	0xff9f800f
 8004560:	f9ff800f 	.word	0xf9ff800f

08004564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e049      	b.n	800460a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc ffc0 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fce2 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d001      	beq.n	800462c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e047      	b.n	80046bc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <HAL_TIM_Base_Start+0xb4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01d      	beq.n	800467a <HAL_TIM_Base_Start+0x66>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d018      	beq.n	800467a <HAL_TIM_Base_Start+0x66>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_TIM_Base_Start+0xb8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_TIM_Base_Start+0x66>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_TIM_Base_Start+0xbc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_TIM_Base_Start+0x66>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <HAL_TIM_Base_Start+0xc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_TIM_Base_Start+0x66>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_TIM_Base_Start+0xc4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIM_Base_Start+0x66>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <HAL_TIM_Base_Start+0xc8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d115      	bne.n	80046a6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_TIM_Base_Start+0xcc>)
 8004682:	4013      	ands	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b06      	cmp	r3, #6
 800468a:	d015      	beq.n	80046b8 <HAL_TIM_Base_Start+0xa4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004692:	d011      	beq.n	80046b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a4:	e008      	b.n	80046b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e000      	b.n	80046ba <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	00010007 	.word	0x00010007

080046e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10f      	bne.n	800471c <HAL_TIM_Base_Stop+0x38>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	f240 4344 	movw	r3, #1092	; 0x444
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_TIM_Base_Stop+0x38>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e049      	b.n	80047d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f841 	bl	80047e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f000 fbfb 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 ffba 	bl	8005780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3e      	ldr	r2, [pc, #248]	; (800490c <HAL_TIM_PWM_Stop+0x118>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_TIM_PWM_Stop+0x4a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3d      	ldr	r2, [pc, #244]	; (8004910 <HAL_TIM_PWM_Stop+0x11c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00e      	beq.n	800483e <HAL_TIM_PWM_Stop+0x4a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3b      	ldr	r2, [pc, #236]	; (8004914 <HAL_TIM_PWM_Stop+0x120>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_TIM_PWM_Stop+0x4a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3a      	ldr	r2, [pc, #232]	; (8004918 <HAL_TIM_PWM_Stop+0x124>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_TIM_PWM_Stop+0x4a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a38      	ldr	r2, [pc, #224]	; (800491c <HAL_TIM_PWM_Stop+0x128>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <HAL_TIM_PWM_Stop+0x4e>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_TIM_PWM_Stop+0x50>
 8004842:	2300      	movs	r3, #0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <HAL_TIM_PWM_Stop+0x84>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a1a      	ldr	r2, [r3, #32]
 800485e:	f240 4344 	movw	r3, #1092	; 0x444
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d107      	bne.n	8004878 <HAL_TIM_PWM_Stop+0x84>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6a1a      	ldr	r2, [r3, #32]
 800487e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10f      	bne.n	80048a8 <HAL_TIM_PWM_Stop+0xb4>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a1a      	ldr	r2, [r3, #32]
 800488e:	f240 4344 	movw	r3, #1092	; 0x444
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_PWM_Stop+0xb4>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <HAL_TIM_PWM_Stop+0xc4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b6:	e023      	b.n	8004900 <HAL_TIM_PWM_Stop+0x10c>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d104      	bne.n	80048c8 <HAL_TIM_PWM_Stop+0xd4>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c6:	e01b      	b.n	8004900 <HAL_TIM_PWM_Stop+0x10c>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d104      	bne.n	80048d8 <HAL_TIM_PWM_Stop+0xe4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d6:	e013      	b.n	8004900 <HAL_TIM_PWM_Stop+0x10c>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d104      	bne.n	80048e8 <HAL_TIM_PWM_Stop+0xf4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e6:	e00b      	b.n	8004900 <HAL_TIM_PWM_Stop+0x10c>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d104      	bne.n	80048f8 <HAL_TIM_PWM_Stop+0x104>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f6:	e003      	b.n	8004900 <HAL_TIM_PWM_Stop+0x10c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40013400 	.word	0x40013400
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800

08004920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0202 	mvn.w	r2, #2
 800494c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fae3 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fad5 	bl	8004f1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fae6 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0204 	mvn.w	r2, #4
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fab9 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 faab 	bl	8004f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fabc 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0208 	mvn.w	r2, #8
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa8f 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa81 	bl	8004f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa92 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa65 	bl	8004f2e <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa57 	bl	8004f1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa68 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10e      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0201 	mvn.w	r2, #1
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fb16 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 ff10 	bl	80058f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ade:	d10e      	bne.n	8004afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b80      	cmp	r3, #128	; 0x80
 8004aec:	d107      	bne.n	8004afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 ff03 	bl	8005904 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d10e      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fa16 	bl	8004f56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d10e      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f06f 0220 	mvn.w	r2, #32
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fec3 	bl	80058dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e0ff      	b.n	8004d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b14      	cmp	r3, #20
 8004b8a:	f200 80f0 	bhi.w	8004d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004d6f 	.word	0x08004d6f
 8004b9c:	08004d6f 	.word	0x08004d6f
 8004ba0:	08004d6f 	.word	0x08004d6f
 8004ba4:	08004c29 	.word	0x08004c29
 8004ba8:	08004d6f 	.word	0x08004d6f
 8004bac:	08004d6f 	.word	0x08004d6f
 8004bb0:	08004d6f 	.word	0x08004d6f
 8004bb4:	08004c6b 	.word	0x08004c6b
 8004bb8:	08004d6f 	.word	0x08004d6f
 8004bbc:	08004d6f 	.word	0x08004d6f
 8004bc0:	08004d6f 	.word	0x08004d6f
 8004bc4:	08004cab 	.word	0x08004cab
 8004bc8:	08004d6f 	.word	0x08004d6f
 8004bcc:	08004d6f 	.word	0x08004d6f
 8004bd0:	08004d6f 	.word	0x08004d6f
 8004bd4:	08004ced 	.word	0x08004ced
 8004bd8:	08004d6f 	.word	0x08004d6f
 8004bdc:	08004d6f 	.word	0x08004d6f
 8004be0:	08004d6f 	.word	0x08004d6f
 8004be4:	08004d2d 	.word	0x08004d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fa56 	bl	80050a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6999      	ldr	r1, [r3, #24]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	619a      	str	r2, [r3, #24]
      break;
 8004c26:	e0a5      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fac6 	bl	80051c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
      break;
 8004c68:	e084      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fb2f 	bl	80052d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0208 	orr.w	r2, r2, #8
 8004c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0204 	bic.w	r2, r2, #4
 8004c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	61da      	str	r2, [r3, #28]
      break;
 8004ca8:	e064      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fb97 	bl	80053e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	021a      	lsls	r2, r3, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	61da      	str	r2, [r3, #28]
      break;
 8004cea:	e043      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fbe0 	bl	80054b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d2a:	e023      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fc24 	bl	8005580 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d6c:	e002      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x1c>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0b6      	b.n	8004f12 <HAL_TIM_ConfigClockSource+0x18a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de0:	d03e      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xd8>
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de6:	f200 8087 	bhi.w	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	f000 8086 	beq.w	8004efe <HAL_TIM_ConfigClockSource+0x176>
 8004df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df6:	d87f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d01a      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xaa>
 8004dfc:	2b70      	cmp	r3, #112	; 0x70
 8004dfe:	d87b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d050      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x11e>
 8004e04:	2b60      	cmp	r3, #96	; 0x60
 8004e06:	d877      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d03c      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0xfe>
 8004e0c:	2b50      	cmp	r3, #80	; 0x50
 8004e0e:	d873      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d058      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x13e>
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d86f      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d064      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e1c:	2b30      	cmp	r3, #48	; 0x30
 8004e1e:	d86b      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d060      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d867      	bhi.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d05c      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d05a      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8004e30:	e062      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6899      	ldr	r1, [r3, #8]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f000 fc7d 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	609a      	str	r2, [r3, #8]
      break;
 8004e5e:	e04f      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f000 fc66 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e82:	609a      	str	r2, [r3, #8]
      break;
 8004e84:	e03c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 fbda 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2150      	movs	r1, #80	; 0x50
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fc33 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e02c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fbf9 	bl	80056aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2160      	movs	r1, #96	; 0x60
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fc23 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e01c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 fbba 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fc13 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e00c      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f000 fc0a 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004ef6:	e003      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e000      	b.n	8004f00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a40      	ldr	r2, [pc, #256]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d00f      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3d      	ldr	r2, [pc, #244]	; (8005084 <TIM_Base_SetConfig+0x118>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00b      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3c      	ldr	r2, [pc, #240]	; (8005088 <TIM_Base_SetConfig+0x11c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3b      	ldr	r2, [pc, #236]	; (800508c <TIM_Base_SetConfig+0x120>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3a      	ldr	r2, [pc, #232]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d108      	bne.n	8004fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2f      	ldr	r2, [pc, #188]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01f      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d01b      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <TIM_Base_SetConfig+0x118>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d017      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <TIM_Base_SetConfig+0x11c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2a      	ldr	r2, [pc, #168]	; (800508c <TIM_Base_SetConfig+0x120>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a29      	ldr	r2, [pc, #164]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a28      	ldr	r2, [pc, #160]	; (8005094 <TIM_Base_SetConfig+0x128>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a27      	ldr	r2, [pc, #156]	; (8005098 <TIM_Base_SetConfig+0x12c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <TIM_Base_SetConfig+0x130>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <TIM_Base_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00f      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a12      	ldr	r2, [pc, #72]	; (8005090 <TIM_Base_SetConfig+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a11      	ldr	r2, [pc, #68]	; (8005094 <TIM_Base_SetConfig+0x128>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	; (8005098 <TIM_Base_SetConfig+0x12c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_Base_SetConfig+0xf8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <TIM_Base_SetConfig+0x130>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40013400 	.word	0x40013400
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400
 800509c:	40014800 	.word	0x40014800

080050a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <TIM_OC1_SetConfig+0x10c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00f      	beq.n	8005120 <TIM_OC1_SetConfig+0x80>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a2b      	ldr	r2, [pc, #172]	; (80051b0 <TIM_OC1_SetConfig+0x110>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00b      	beq.n	8005120 <TIM_OC1_SetConfig+0x80>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <TIM_OC1_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_OC1_SetConfig+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <TIM_OC1_SetConfig+0x118>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC1_SetConfig+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a28      	ldr	r2, [pc, #160]	; (80051bc <TIM_OC1_SetConfig+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10c      	bne.n	800513a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0308 	bic.w	r3, r3, #8
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <TIM_OC1_SetConfig+0x10c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00f      	beq.n	8005162 <TIM_OC1_SetConfig+0xc2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <TIM_OC1_SetConfig+0x110>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00b      	beq.n	8005162 <TIM_OC1_SetConfig+0xc2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <TIM_OC1_SetConfig+0x114>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d007      	beq.n	8005162 <TIM_OC1_SetConfig+0xc2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <TIM_OC1_SetConfig+0x118>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC1_SetConfig+0xc2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <TIM_OC1_SetConfig+0x11c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40013400 	.word	0x40013400
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800

080051c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0210 	bic.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a28      	ldr	r2, [pc, #160]	; (80052c0 <TIM_OC2_SetConfig+0x100>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC2_SetConfig+0x6c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a27      	ldr	r2, [pc, #156]	; (80052c4 <TIM_OC2_SetConfig+0x104>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10d      	bne.n	8005248 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <TIM_OC2_SetConfig+0x100>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00f      	beq.n	8005270 <TIM_OC2_SetConfig+0xb0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <TIM_OC2_SetConfig+0x104>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00b      	beq.n	8005270 <TIM_OC2_SetConfig+0xb0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <TIM_OC2_SetConfig+0x108>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_OC2_SetConfig+0xb0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <TIM_OC2_SetConfig+0x10c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0xb0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <TIM_OC2_SetConfig+0x110>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d113      	bne.n	8005298 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40013400 	.word	0x40013400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40014400 	.word	0x40014400
 80052d0:	40014800 	.word	0x40014800

080052d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <TIM_OC3_SetConfig+0xfc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC3_SetConfig+0x6a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <TIM_OC3_SetConfig+0x100>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10d      	bne.n	800535a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <TIM_OC3_SetConfig+0xfc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <TIM_OC3_SetConfig+0xae>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <TIM_OC3_SetConfig+0x100>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00b      	beq.n	8005382 <TIM_OC3_SetConfig+0xae>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <TIM_OC3_SetConfig+0x104>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_OC3_SetConfig+0xae>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a19      	ldr	r2, [pc, #100]	; (80053dc <TIM_OC3_SetConfig+0x108>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_OC3_SetConfig+0xae>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <TIM_OC3_SetConfig+0x10c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d113      	bne.n	80053aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40013400 	.word	0x40013400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800

080053e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	031b      	lsls	r3, r3, #12
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <TIM_OC4_SetConfig+0xc0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00f      	beq.n	8005468 <TIM_OC4_SetConfig+0x84>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <TIM_OC4_SetConfig+0xc4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00b      	beq.n	8005468 <TIM_OC4_SetConfig+0x84>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a16      	ldr	r2, [pc, #88]	; (80054ac <TIM_OC4_SetConfig+0xc8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_OC4_SetConfig+0x84>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <TIM_OC4_SetConfig+0xcc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC4_SetConfig+0x84>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <TIM_OC4_SetConfig+0xd0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d109      	bne.n	800547c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800546e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40013400 	.word	0x40013400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800

080054b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	041b      	lsls	r3, r3, #16
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a17      	ldr	r2, [pc, #92]	; (800556c <TIM_OC5_SetConfig+0xb4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_OC5_SetConfig+0x7a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <TIM_OC5_SetConfig+0xb8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_OC5_SetConfig+0x7a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <TIM_OC5_SetConfig+0xbc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_OC5_SetConfig+0x7a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <TIM_OC5_SetConfig+0xc0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_OC5_SetConfig+0x7a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a13      	ldr	r2, [pc, #76]	; (800557c <TIM_OC5_SetConfig+0xc4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d109      	bne.n	8005546 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	621a      	str	r2, [r3, #32]
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800

08005580 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	051b      	lsls	r3, r3, #20
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <TIM_OC6_SetConfig+0xb8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00f      	beq.n	80055fc <TIM_OC6_SetConfig+0x7c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a17      	ldr	r2, [pc, #92]	; (800563c <TIM_OC6_SetConfig+0xbc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <TIM_OC6_SetConfig+0x7c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <TIM_OC6_SetConfig+0xc0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <TIM_OC6_SetConfig+0x7c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a15      	ldr	r2, [pc, #84]	; (8005644 <TIM_OC6_SetConfig+0xc4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_OC6_SetConfig+0x7c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a14      	ldr	r2, [pc, #80]	; (8005648 <TIM_OC6_SetConfig+0xc8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d109      	bne.n	8005610 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005602:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40013400 	.word	0x40013400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0210 	bic.w	r2, r3, #16
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 0307 	orr.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2201      	movs	r2, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e068      	b.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2e      	ldr	r2, [pc, #184]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d004      	beq.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2d      	ldr	r2, [pc, #180]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d108      	bne.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800581e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005830:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d018      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a14      	ldr	r2, [pc, #80]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10c      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4313      	orrs	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	40013400 	.word	0x40013400
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	40014000 	.word	0x40014000

080058dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e042      	b.n	80059b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7fb fd87 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2224      	movs	r2, #36	; 0x24
 8005946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8c2 	bl	8005ae4 <UART_SetConfig>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e022      	b.n	80059b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fbb2 	bl	80060dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fc39 	bl	8006220 <UART_CheckIdleState>
 80059ae:	4603      	mov	r3, r0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	f040 8083 	bne.w	8005ada <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Transmit+0x28>
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e07b      	b.n	8005adc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Transmit+0x3a>
 80059ee:	2302      	movs	r3, #2
 80059f0:	e074      	b.n	8005adc <HAL_UART_Transmit+0x124>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2221      	movs	r2, #33	; 0x21
 8005a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a0a:	f7fb ffbb 	bl	8001984 <HAL_GetTick>
 8005a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a28:	d108      	bne.n	8005a3c <HAL_UART_Transmit+0x84>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e003      	b.n	8005a44 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005a4c:	e02c      	b.n	8005aa8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	2180      	movs	r1, #128	; 0x80
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fc2c 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e039      	b.n	8005adc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	3302      	adds	r3, #2
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	e007      	b.n	8005a96 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	781a      	ldrb	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1cc      	bne.n	8005a4e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fbf9 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e006      	b.n	8005adc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
  }
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae8:	b08c      	sub	sp, #48	; 0x30
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	431a      	orrs	r2, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4baa      	ldr	r3, [pc, #680]	; (8005dbc <UART_SetConfig+0x2d8>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a9f      	ldr	r2, [pc, #636]	; (8005dc0 <UART_SetConfig+0x2dc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	f023 010f 	bic.w	r1, r3, #15
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a90      	ldr	r2, [pc, #576]	; (8005dc4 <UART_SetConfig+0x2e0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d125      	bne.n	8005bd4 <UART_SetConfig+0xf0>
 8005b88:	4b8f      	ldr	r3, [pc, #572]	; (8005dc8 <UART_SetConfig+0x2e4>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d81a      	bhi.n	8005bcc <UART_SetConfig+0xe8>
 8005b96:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0xb8>)
 8005b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	08005bb5 	.word	0x08005bb5
 8005ba8:	08005bc5 	.word	0x08005bc5
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bb2:	e116      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bba:	e112      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc2:	e10e      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bca:	e10a      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e106      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a7c      	ldr	r2, [pc, #496]	; (8005dcc <UART_SetConfig+0x2e8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d138      	bne.n	8005c50 <UART_SetConfig+0x16c>
 8005bde:	4b7a      	ldr	r3, [pc, #488]	; (8005dc8 <UART_SetConfig+0x2e4>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b0c      	cmp	r3, #12
 8005bea:	d82d      	bhi.n	8005c48 <UART_SetConfig+0x164>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <UART_SetConfig+0x110>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005c49 	.word	0x08005c49
 8005bfc:	08005c49 	.word	0x08005c49
 8005c00:	08005c49 	.word	0x08005c49
 8005c04:	08005c39 	.word	0x08005c39
 8005c08:	08005c49 	.word	0x08005c49
 8005c0c:	08005c49 	.word	0x08005c49
 8005c10:	08005c49 	.word	0x08005c49
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	08005c49 	.word	0x08005c49
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2e:	e0d8      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c36:	e0d4      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3e:	e0d0      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c46:	e0cc      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4e:	e0c8      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a5e      	ldr	r2, [pc, #376]	; (8005dd0 <UART_SetConfig+0x2ec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d125      	bne.n	8005ca6 <UART_SetConfig+0x1c2>
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	; (8005dc8 <UART_SetConfig+0x2e4>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c64:	2b30      	cmp	r3, #48	; 0x30
 8005c66:	d016      	beq.n	8005c96 <UART_SetConfig+0x1b2>
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d818      	bhi.n	8005c9e <UART_SetConfig+0x1ba>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d00a      	beq.n	8005c86 <UART_SetConfig+0x1a2>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d814      	bhi.n	8005c9e <UART_SetConfig+0x1ba>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <UART_SetConfig+0x19a>
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d008      	beq.n	8005c8e <UART_SetConfig+0x1aa>
 8005c7c:	e00f      	b.n	8005c9e <UART_SetConfig+0x1ba>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c84:	e0ad      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c86:	2302      	movs	r3, #2
 8005c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8c:	e0a9      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c8e:	2304      	movs	r3, #4
 8005c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c94:	e0a5      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c96:	2308      	movs	r3, #8
 8005c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9c:	e0a1      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005c9e:	2310      	movs	r3, #16
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca4:	e09d      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a4a      	ldr	r2, [pc, #296]	; (8005dd4 <UART_SetConfig+0x2f0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d125      	bne.n	8005cfc <UART_SetConfig+0x218>
 8005cb0:	4b45      	ldr	r3, [pc, #276]	; (8005dc8 <UART_SetConfig+0x2e4>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005cba:	2bc0      	cmp	r3, #192	; 0xc0
 8005cbc:	d016      	beq.n	8005cec <UART_SetConfig+0x208>
 8005cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8005cc0:	d818      	bhi.n	8005cf4 <UART_SetConfig+0x210>
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d00a      	beq.n	8005cdc <UART_SetConfig+0x1f8>
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d814      	bhi.n	8005cf4 <UART_SetConfig+0x210>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <UART_SetConfig+0x1f0>
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d008      	beq.n	8005ce4 <UART_SetConfig+0x200>
 8005cd2:	e00f      	b.n	8005cf4 <UART_SetConfig+0x210>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cda:	e082      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce2:	e07e      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cea:	e07a      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e076      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e072      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a35      	ldr	r2, [pc, #212]	; (8005dd8 <UART_SetConfig+0x2f4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d12a      	bne.n	8005d5c <UART_SetConfig+0x278>
 8005d06:	4b30      	ldr	r3, [pc, #192]	; (8005dc8 <UART_SetConfig+0x2e4>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d14:	d01a      	beq.n	8005d4c <UART_SetConfig+0x268>
 8005d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d1a:	d81b      	bhi.n	8005d54 <UART_SetConfig+0x270>
 8005d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d20:	d00c      	beq.n	8005d3c <UART_SetConfig+0x258>
 8005d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d26:	d815      	bhi.n	8005d54 <UART_SetConfig+0x270>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <UART_SetConfig+0x250>
 8005d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d30:	d008      	beq.n	8005d44 <UART_SetConfig+0x260>
 8005d32:	e00f      	b.n	8005d54 <UART_SetConfig+0x270>
 8005d34:	2300      	movs	r3, #0
 8005d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3a:	e052      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d42:	e04e      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4a:	e04a      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d52:	e046      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5a:	e042      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <UART_SetConfig+0x2dc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d13a      	bne.n	8005ddc <UART_SetConfig+0x2f8>
 8005d66:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <UART_SetConfig+0x2e4>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d74:	d01a      	beq.n	8005dac <UART_SetConfig+0x2c8>
 8005d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d7a:	d81b      	bhi.n	8005db4 <UART_SetConfig+0x2d0>
 8005d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d80:	d00c      	beq.n	8005d9c <UART_SetConfig+0x2b8>
 8005d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d86:	d815      	bhi.n	8005db4 <UART_SetConfig+0x2d0>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <UART_SetConfig+0x2b0>
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	d008      	beq.n	8005da4 <UART_SetConfig+0x2c0>
 8005d92:	e00f      	b.n	8005db4 <UART_SetConfig+0x2d0>
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9a:	e022      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da2:	e01e      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005da4:	2304      	movs	r3, #4
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005daa:	e01a      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005dac:	2308      	movs	r3, #8
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db2:	e016      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005db4:	2310      	movs	r3, #16
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dba:	e012      	b.n	8005de2 <UART_SetConfig+0x2fe>
 8005dbc:	cfff69f3 	.word	0xcfff69f3
 8005dc0:	40008000 	.word	0x40008000
 8005dc4:	40013800 	.word	0x40013800
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40004400 	.word	0x40004400
 8005dd0:	40004800 	.word	0x40004800
 8005dd4:	40004c00 	.word	0x40004c00
 8005dd8:	40005000 	.word	0x40005000
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4aae      	ldr	r2, [pc, #696]	; (80060a0 <UART_SetConfig+0x5bc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	f040 8097 	bne.w	8005f1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d823      	bhi.n	8005e3e <UART_SetConfig+0x35a>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x318>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e3f 	.word	0x08005e3f
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e3f 	.word	0x08005e3f
 8005e0c:	08005e2f 	.word	0x08005e2f
 8005e10:	08005e3f 	.word	0x08005e3f
 8005e14:	08005e3f 	.word	0x08005e3f
 8005e18:	08005e3f 	.word	0x08005e3f
 8005e1c:	08005e37 	.word	0x08005e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e20:	f7fd fd60 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8005e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e26:	e010      	b.n	8005e4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e28:	4b9e      	ldr	r3, [pc, #632]	; (80060a4 <UART_SetConfig+0x5c0>)
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e2c:	e00d      	b.n	8005e4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2e:	f7fd fcc1 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8005e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e34:	e009      	b.n	8005e4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e3c:	e005      	b.n	8005e4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8130 	beq.w	80060b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	4a94      	ldr	r2, [pc, #592]	; (80060a8 <UART_SetConfig+0x5c4>)
 8005e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	4413      	add	r3, r2
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d305      	bcc.n	8005e82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d903      	bls.n	8005e8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e88:	e113      	b.n	80060b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	60fa      	str	r2, [r7, #12]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	4a84      	ldr	r2, [pc, #528]	; (80060a8 <UART_SetConfig+0x5c4>)
 8005e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eac:	f7fa f9f8 	bl	80002a0 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	020b      	lsls	r3, r1, #8
 8005ec2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ec6:	0202      	lsls	r2, r0, #8
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	6849      	ldr	r1, [r1, #4]
 8005ecc:	0849      	lsrs	r1, r1, #1
 8005ece:	2000      	movs	r0, #0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	eb12 0804 	adds.w	r8, r2, r4
 8005ed8:	eb43 0905 	adc.w	r9, r3, r5
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	469a      	mov	sl, r3
 8005ee4:	4693      	mov	fp, r2
 8005ee6:	4652      	mov	r2, sl
 8005ee8:	465b      	mov	r3, fp
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa f9d7 	bl	80002a0 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f00:	d308      	bcc.n	8005f14 <UART_SetConfig+0x430>
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f08:	d204      	bcs.n	8005f14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a3a      	ldr	r2, [r7, #32]
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	e0ce      	b.n	80060b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f1a:	e0ca      	b.n	80060b2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f24:	d166      	bne.n	8005ff4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d827      	bhi.n	8005f7e <UART_SetConfig+0x49a>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0x450>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f59 	.word	0x08005f59
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	08005f7f 	.word	0x08005f7f
 8005f44:	08005f6f 	.word	0x08005f6f
 8005f48:	08005f7f 	.word	0x08005f7f
 8005f4c:	08005f7f 	.word	0x08005f7f
 8005f50:	08005f7f 	.word	0x08005f7f
 8005f54:	08005f77 	.word	0x08005f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f58:	f7fd fcc4 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f5e:	e014      	b.n	8005f8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f60:	f7fd fcd6 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8005f64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f66:	e010      	b.n	8005f8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f68:	4b4e      	ldr	r3, [pc, #312]	; (80060a4 <UART_SetConfig+0x5c0>)
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f6c:	e00d      	b.n	8005f8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6e:	f7fd fc21 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8005f72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f74:	e009      	b.n	8005f8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f7c:	e005      	b.n	8005f8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 8090 	beq.w	80060b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	4a44      	ldr	r2, [pc, #272]	; (80060a8 <UART_SetConfig+0x5c4>)
 8005f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa4:	005a      	lsls	r2, r3, #1
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	441a      	add	r2, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d916      	bls.n	8005fec <UART_SetConfig+0x508>
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc4:	d212      	bcs.n	8005fec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f023 030f 	bic.w	r3, r3, #15
 8005fce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	8bfb      	ldrh	r3, [r7, #30]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	8bfa      	ldrh	r2, [r7, #30]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	e062      	b.n	80060b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ff2:	e05e      	b.n	80060b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d828      	bhi.n	800604e <UART_SetConfig+0x56a>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0x520>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	08006029 	.word	0x08006029
 8006008:	08006031 	.word	0x08006031
 800600c:	08006039 	.word	0x08006039
 8006010:	0800604f 	.word	0x0800604f
 8006014:	0800603f 	.word	0x0800603f
 8006018:	0800604f 	.word	0x0800604f
 800601c:	0800604f 	.word	0x0800604f
 8006020:	0800604f 	.word	0x0800604f
 8006024:	08006047 	.word	0x08006047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fd fc5c 	bl	80038e4 <HAL_RCC_GetPCLK1Freq>
 800602c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800602e:	e014      	b.n	800605a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006030:	f7fd fc6e 	bl	8003910 <HAL_RCC_GetPCLK2Freq>
 8006034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006036:	e010      	b.n	800605a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006038:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <UART_SetConfig+0x5c0>)
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800603c:	e00d      	b.n	800605a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603e:	f7fd fbb9 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8006042:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006044:	e009      	b.n	800605a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800604c:	e005      	b.n	800605a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006058:	bf00      	nop
    }

    if (pclk != 0U)
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	2b00      	cmp	r3, #0
 800605e:	d028      	beq.n	80060b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	4a10      	ldr	r2, [pc, #64]	; (80060a8 <UART_SetConfig+0x5c4>)
 8006066:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800606a:	461a      	mov	r2, r3
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	441a      	add	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d910      	bls.n	80060ac <UART_SetConfig+0x5c8>
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006090:	d20c      	bcs.n	80060ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	b29a      	uxth	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	e009      	b.n	80060b2 <UART_SetConfig+0x5ce>
 800609e:	bf00      	nop
 80060a0:	40008000 	.word	0x40008000
 80060a4:	00f42400 	.word	0x00f42400
 80060a8:	0800c020 	.word	0x0800c020
      }
      else
      {
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2201      	movs	r2, #1
 80060be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2200      	movs	r2, #0
 80060cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3730      	adds	r7, #48	; 0x30
 80060d6:	46bd      	mov	sp, r7
 80060d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080060dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00a      	beq.n	800614a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00a      	beq.n	800616c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061da:	d10a      	bne.n	80061f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af02      	add	r7, sp, #8
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006230:	f7fb fba8 	bl	8001984 <HAL_GetTick>
 8006234:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b08      	cmp	r3, #8
 8006242:	d10e      	bne.n	8006262 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f82f 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e025      	b.n	80062ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b04      	cmp	r3, #4
 800626e:	d10e      	bne.n	800628e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f819 	bl	80062b6 <UART_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e00f      	b.n	80062ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b09c      	sub	sp, #112	; 0x70
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4613      	mov	r3, r2
 80062c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c6:	e0a9      	b.n	800641c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	f000 80a5 	beq.w	800641c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d2:	f7fb fb57 	bl	8001984 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062de:	429a      	cmp	r2, r3
 80062e0:	d302      	bcc.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80062e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d140      	bne.n	800636a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062fc:	667b      	str	r3, [r7, #100]	; 0x64
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006308:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800630c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e6      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	663b      	str	r3, [r7, #96]	; 0x60
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800633a:	64ba      	str	r2, [r7, #72]	; 0x48
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e5      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e069      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d051      	beq.n	800641c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006386:	d149      	bne.n	800641c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006390:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
 80063b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	613b      	str	r3, [r7, #16]
   return(result);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	66bb      	str	r3, [r7, #104]	; 0x68
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063e4:	623a      	str	r2, [r7, #32]
 80063e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	69f9      	ldr	r1, [r7, #28]
 80063ea:	6a3a      	ldr	r2, [r7, #32]
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e5      	bne.n	80063c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e010      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4013      	ands	r3, r2
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	429a      	cmp	r2, r3
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	429a      	cmp	r2, r3
 8006438:	f43f af46 	beq.w	80062c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3770      	adds	r7, #112	; 0x70
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_UARTEx_DisableFifoMode+0x16>
 8006458:	2302      	movs	r3, #2
 800645a:	e027      	b.n	80064ac <HAL_UARTEx_DisableFifoMode+0x66>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2224      	movs	r2, #36	; 0x24
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800648a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e02d      	b.n	800652c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2224      	movs	r2, #36	; 0x24
 80064dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f84f 	bl	80065b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006548:	2302      	movs	r3, #2
 800654a:	e02d      	b.n	80065a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0201 	bic.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f811 	bl	80065b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d108      	bne.n	80065d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065d0:	e031      	b.n	8006636 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065d2:	2308      	movs	r3, #8
 80065d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065d6:	2308      	movs	r3, #8
 80065d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	0e5b      	lsrs	r3, r3, #25
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	0f5b      	lsrs	r3, r3, #29
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	7b3a      	ldrb	r2, [r7, #12]
 80065fe:	4911      	ldr	r1, [pc, #68]	; (8006644 <UARTEx_SetNbDataToProcess+0x94>)
 8006600:	5c8a      	ldrb	r2, [r1, r2]
 8006602:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006606:	7b3a      	ldrb	r2, [r7, #12]
 8006608:	490f      	ldr	r1, [pc, #60]	; (8006648 <UARTEx_SetNbDataToProcess+0x98>)
 800660a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800660c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	7b7a      	ldrb	r2, [r7, #13]
 800661c:	4909      	ldr	r1, [pc, #36]	; (8006644 <UARTEx_SetNbDataToProcess+0x94>)
 800661e:	5c8a      	ldrb	r2, [r1, r2]
 8006620:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006624:	7b7a      	ldrb	r2, [r7, #13]
 8006626:	4908      	ldr	r1, [pc, #32]	; (8006648 <UARTEx_SetNbDataToProcess+0x98>)
 8006628:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800662a:	fb93 f3f2 	sdiv	r3, r3, r2
 800662e:	b29a      	uxth	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	0800c038 	.word	0x0800c038
 8006648:	0800c040 	.word	0x0800c040

0800664c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fcb2 	bl	8007fc6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006666:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006674:	b5b0      	push	{r4, r5, r7, lr}
 8006676:	b096      	sub	sp, #88	; 0x58
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800667c:	2300      	movs	r3, #0
 800667e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006682:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800668a:	2200      	movs	r2, #0
 800668c:	2188      	movs	r1, #136	; 0x88
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f004 feaa 	bl	800b3e8 <VL53L0X_WrByte>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066a8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80066b2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a9e      	ldr	r2, [pc, #632]	; (8006934 <VL53L0X_DataInit+0x2c0>)
 80066ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a9d      	ldr	r2, [pc, #628]	; (8006938 <VL53L0X_DataInit+0x2c4>)
 80066c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fac2 	bl	8006c5c <VL53L0X_GetDeviceParameters>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80066de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d112      	bne.n	800670c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80066e6:	2300      	movs	r3, #0
 80066e8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80066ea:	2300      	movs	r3, #0
 80066ec:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f103 0410 	add.w	r4, r3, #16
 80066f4:	f107 0510 	add.w	r5, r7, #16
 80066f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006704:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2264      	movs	r2, #100	; 0x64
 8006710:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f44f 7261 	mov.w	r2, #900	; 0x384
 800671a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006724:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800672e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800673a:	2201      	movs	r2, #1
 800673c:	2180      	movs	r1, #128	; 0x80
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f004 fe52 	bl	800b3e8 <VL53L0X_WrByte>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800674c:	4313      	orrs	r3, r2
 800674e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006752:	2201      	movs	r2, #1
 8006754:	21ff      	movs	r1, #255	; 0xff
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f004 fe46 	bl	800b3e8 <VL53L0X_WrByte>
 800675c:	4603      	mov	r3, r0
 800675e:	461a      	mov	r2, r3
 8006760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006764:	4313      	orrs	r3, r2
 8006766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800676a:	2200      	movs	r2, #0
 800676c:	2100      	movs	r1, #0
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f004 fe3a 	bl	800b3e8 <VL53L0X_WrByte>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800677c:	4313      	orrs	r3, r2
 800677e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006782:	f107 030f 	add.w	r3, r7, #15
 8006786:	461a      	mov	r2, r3
 8006788:	2191      	movs	r1, #145	; 0x91
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f004 feae 	bl	800b4ec <VL53L0X_RdByte>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006798:	4313      	orrs	r3, r2
 800679a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80067a6:	2201      	movs	r2, #1
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f004 fe1c 	bl	800b3e8 <VL53L0X_WrByte>
 80067b0:	4603      	mov	r3, r0
 80067b2:	461a      	mov	r2, r3
 80067b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067be:	2200      	movs	r2, #0
 80067c0:	21ff      	movs	r1, #255	; 0xff
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f004 fe10 	bl	800b3e8 <VL53L0X_WrByte>
 80067c8:	4603      	mov	r3, r0
 80067ca:	461a      	mov	r2, r3
 80067cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067d0:	4313      	orrs	r3, r2
 80067d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80067d6:	2200      	movs	r2, #0
 80067d8:	2180      	movs	r1, #128	; 0x80
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f004 fe04 	bl	800b3e8 <VL53L0X_WrByte>
 80067e0:	4603      	mov	r3, r0
 80067e2:	461a      	mov	r2, r3
 80067e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80067ee:	2300      	movs	r3, #0
 80067f0:	653b      	str	r3, [r7, #80]	; 0x50
 80067f2:	e014      	b.n	800681e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80067f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d114      	bne.n	8006826 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80067fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2201      	movs	r2, #1
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fd35 	bl	8007274 <VL53L0X_SetLimitCheckEnable>
 800680a:	4603      	mov	r3, r0
 800680c:	461a      	mov	r2, r3
 800680e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006812:	4313      	orrs	r3, r2
 8006814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681a:	3301      	adds	r3, #1
 800681c:	653b      	str	r3, [r7, #80]	; 0x50
 800681e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006820:	2b05      	cmp	r3, #5
 8006822:	dde7      	ble.n	80067f4 <VL53L0X_DataInit+0x180>
 8006824:	e000      	b.n	8006828 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006826:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006828:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800682c:	2b00      	cmp	r3, #0
 800682e:	d107      	bne.n	8006840 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006830:	2200      	movs	r2, #0
 8006832:	2102      	movs	r1, #2
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fd1d 	bl	8007274 <VL53L0X_SetLimitCheckEnable>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006840:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006848:	2200      	movs	r2, #0
 800684a:	2103      	movs	r1, #3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fd11 	bl	8007274 <VL53L0X_SetLimitCheckEnable>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006858:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800685c:	2b00      	cmp	r3, #0
 800685e:	d107      	bne.n	8006870 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006860:	2200      	movs	r2, #0
 8006862:	2104      	movs	r1, #4
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fd05 	bl	8007274 <VL53L0X_SetLimitCheckEnable>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006870:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006878:	2200      	movs	r2, #0
 800687a:	2105      	movs	r1, #5
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fcf9 	bl	8007274 <VL53L0X_SetLimitCheckEnable>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006888:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800688c:	2b00      	cmp	r3, #0
 800688e:	d108      	bne.n	80068a2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006890:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006894:	2100      	movs	r1, #0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fd9c 	bl	80073d4 <VL53L0X_SetLimitCheckValue>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d108      	bne.n	80068bc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80068aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068ae:	2101      	movs	r1, #1
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fd8f 	bl	80073d4 <VL53L0X_SetLimitCheckValue>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d108      	bne.n	80068d6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80068c4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80068c8:	2102      	movs	r1, #2
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fd82 	bl	80073d4 <VL53L0X_SetLimitCheckValue>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80068de:	2200      	movs	r2, #0
 80068e0:	2103      	movs	r1, #3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fd76 	bl	80073d4 <VL53L0X_SetLimitCheckValue>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10f      	bne.n	8006916 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	22ff      	movs	r2, #255	; 0xff
 80068fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80068fe:	22ff      	movs	r2, #255	; 0xff
 8006900:	2101      	movs	r1, #1
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f004 fd70 	bl	800b3e8 <VL53L0X_WrByte>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006916:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006926:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800692a:	4618      	mov	r0, r3
 800692c:	3758      	adds	r7, #88	; 0x58
 800692e:	46bd      	mov	sp, r7
 8006930:	bdb0      	pop	{r4, r5, r7, pc}
 8006932:	bf00      	nop
 8006934:	00016b85 	.word	0x00016b85
 8006938:	000970a4 	.word	0x000970a4

0800693c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800693c:	b5b0      	push	{r4, r5, r7, lr}
 800693e:	b09e      	sub	sp, #120	; 0x78
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006944:	2300      	movs	r3, #0
 8006946:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800694a:	f107 031c 	add.w	r3, r7, #28
 800694e:	2240      	movs	r2, #64	; 0x40
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f004 feb0 	bl	800b6b8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006978:	2101      	movs	r1, #1
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f002 fa79 	bl	8008e72 <VL53L0X_get_info_from_device>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800699c:	2b01      	cmp	r3, #1
 800699e:	d80d      	bhi.n	80069bc <VL53L0X_StaticInit+0x80>
 80069a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d102      	bne.n	80069ae <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80069a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d806      	bhi.n	80069bc <VL53L0X_StaticInit+0x80>
 80069ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10e      	bne.n	80069d4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80069b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069b8:	2b0c      	cmp	r3, #12
 80069ba:	d90b      	bls.n	80069d4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80069bc:	f107 0218 	add.w	r2, r7, #24
 80069c0:	f107 0314 	add.w	r3, r7, #20
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fcf8 	bl	80083bc <VL53L0X_perform_ref_spad_management>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80069d2:	e009      	b.n	80069e8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80069d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069d8:	461a      	mov	r2, r3
 80069da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fef9 	bl	80087d4 <VL53L0X_set_reference_spads>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80069e8:	4b94      	ldr	r3, [pc, #592]	; (8006c3c <VL53L0X_StaticInit+0x300>)
 80069ea:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80069ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10f      	bne.n	8006a14 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80069fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80069fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a0e:	e001      	b.n	8006a14 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006a10:	4b8a      	ldr	r3, [pc, #552]	; (8006c3c <VL53L0X_StaticInit+0x300>)
 8006a12:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006a14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006a1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f003 fdcc 	bl	800a5bc <VL53L0X_load_tuning_settings>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006a32:	2300      	movs	r3, #0
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2304      	movs	r3, #4
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f8f1 	bl	8007c24 <VL53L0X_SetGpioConfig>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a48:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d121      	bne.n	8006a94 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a50:	2201      	movs	r2, #1
 8006a52:	21ff      	movs	r1, #255	; 0xff
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f004 fcc7 	bl	800b3e8 <VL53L0X_WrByte>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006a60:	f107 031a 	add.w	r3, r7, #26
 8006a64:	461a      	mov	r2, r3
 8006a66:	2184      	movs	r1, #132	; 0x84
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f004 fd69 	bl	800b540 <VL53L0X_RdWord>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	21ff      	movs	r1, #255	; 0xff
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f004 fcb1 	bl	800b3e8 <VL53L0X_WrByte>
 8006a86:	4603      	mov	r3, r0
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a94:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d105      	bne.n	8006aa8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006a9c:	8b7b      	ldrh	r3, [r7, #26]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006aa8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d108      	bne.n	8006ac2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006ab0:	f107 031c 	add.w	r3, r7, #28
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8d0 	bl	8006c5c <VL53L0X_GetDeviceParameters>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006ac2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d110      	bne.n	8006aec <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006aca:	f107 0319 	add.w	r3, r7, #25
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f992 	bl	8006dfa <VL53L0X_GetFractionEnable>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006adc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006ae4:	7e7a      	ldrb	r2, [r7, #25]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006aec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10e      	bne.n	8006b12 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f103 0410 	add.w	r4, r3, #16
 8006afa:	f107 051c 	add.w	r5, r7, #28
 8006afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d111      	bne.n	8006b3e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006b1a:	f107 0319 	add.w	r3, r7, #25
 8006b1e:	461a      	mov	r2, r3
 8006b20:	2101      	movs	r1, #1
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f004 fce2 	bl	800b4ec <VL53L0X_RdByte>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006b2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d103      	bne.n	8006b3e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006b36:	7e7a      	ldrb	r2, [r7, #25]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006b3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d107      	bne.n	8006b56 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006b46:	2200      	movs	r2, #0
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f9ca 	bl	8006ee4 <VL53L0X_SetSequenceStepEnable>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006b56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d107      	bne.n	8006b6e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2102      	movs	r1, #2
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f9be 	bl	8006ee4 <VL53L0X_SetSequenceStepEnable>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006b6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2203      	movs	r2, #3
 8006b7a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006b86:	f107 0313 	add.w	r3, r7, #19
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f990 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006ba2:	7cfa      	ldrb	r2, [r7, #19]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006baa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006bb2:	f107 0313 	add.w	r3, r7, #19
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	2101      	movs	r1, #1
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f97a 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006bc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d103      	bne.n	8006bd6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006bce:	7cfa      	ldrb	r2, [r7, #19]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006bd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006bde:	f107 030c 	add.w	r3, r7, #12
 8006be2:	461a      	mov	r2, r3
 8006be4:	2103      	movs	r1, #3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f002 fec4 	bl	8009974 <get_sequence_step_timeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006bf2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006c0a:	f107 030c 	add.w	r3, r7, #12
 8006c0e:	461a      	mov	r2, r3
 8006c10:	2104      	movs	r1, #4
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f002 feae 	bl	8009974 <get_sequence_step_timeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3770      	adds	r7, #112	; 0x70
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bdb0      	pop	{r4, r5, r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000010 	.word	0x20000010

08006c40 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006c48:	239d      	movs	r3, #157	; 0x9d
 8006c4a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8b0 	bl	8006dd4 <VL53L0X_GetDeviceMode>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa78 	bl	800717c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d107      	bne.n	8006cb6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	3310      	adds	r3, #16
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 faae 	bl	800720e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d107      	bne.n	8006cce <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	3314      	adds	r3, #20
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fcc1 	bl	800664c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d134      	bne.n	8006d40 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]
 8006cda:	e02a      	b.n	8006d32 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d12a      	bne.n	8006d3a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	b299      	uxth	r1, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	3308      	adds	r3, #8
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fbce 	bl	8007498 <VL53L0X_GetLimitCheckValue>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	461a      	mov	r2, r3
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d117      	bne.n	8006d3e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	b299      	uxth	r1, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	3318      	adds	r3, #24
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	4413      	add	r3, r2
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb35 	bl	800738c <VL53L0X_GetLimitCheckEnable>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461a      	mov	r2, r3
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	ddd1      	ble.n	8006cdc <VL53L0X_GetDeviceParameters+0x80>
 8006d38:	e002      	b.n	8006d40 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006d3a:	bf00      	nop
 8006d3c:	e000      	b.n	8006d40 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006d3e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d107      	bne.n	8006d58 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	333c      	adds	r3, #60	; 0x3c
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fc30 	bl	80075b4 <VL53L0X_GetWrapAroundCheckEnable>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d107      	bne.n	8006d70 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f879 	bl	8006e5e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	2b15      	cmp	r3, #21
 8006d90:	bf8c      	ite	hi
 8006d92:	2201      	movhi	r2, #1
 8006d94:	2200      	movls	r2, #0
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	d10e      	bne.n	8006dba <VL53L0X_SetDeviceMode+0x3e>
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <VL53L0X_SetDeviceMode+0x54>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	741a      	strb	r2, [r3, #16]
		break;
 8006db8:	e001      	b.n	8006dbe <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006dba:	23f8      	movs	r3, #248	; 0xf8
 8006dbc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	0030000b 	.word	0x0030000b

08006dd4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7c1a      	ldrb	r2, [r3, #16]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	2109      	movs	r1, #9
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f004 fb6d 	bl	800b4ec <VL53L0X_RdByte>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f003 fa26 	bl	800a29a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f003 faf3 	bl	800a45a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
 8006e90:	4613      	mov	r3, r2
 8006e92:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006e98:	78ba      	ldrb	r2, [r7, #2]
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f002 ff3b 	bl	8009d1a <VL53L0X_set_vcsel_pulse_period>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006ec6:	7afb      	ldrb	r3, [r7, #11]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f003 f9ad 	bl	800a22c <VL53L0X_get_vcsel_pulse_period>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f00:	f107 030f 	add.w	r3, r7, #15
 8006f04:	461a      	mov	r2, r3
 8006f06:	2101      	movs	r1, #1
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f004 faef 	bl	800b4ec <VL53L0X_RdByte>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d15a      	bne.n	8006fd4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006f1e:	78bb      	ldrb	r3, [r7, #2]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d12b      	bne.n	8006f7c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d825      	bhi.n	8006f76 <VL53L0X_SetSequenceStepEnable+0x92>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f45 	.word	0x08006f45
 8006f34:	08006f4f 	.word	0x08006f4f
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f63 	.word	0x08006f63
 8006f40:	08006f6d 	.word	0x08006f6d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006f44:	7dbb      	ldrb	r3, [r7, #22]
 8006f46:	f043 0310 	orr.w	r3, r3, #16
 8006f4a:	75bb      	strb	r3, [r7, #22]
				break;
 8006f4c:	e043      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006f4e:	7dbb      	ldrb	r3, [r7, #22]
 8006f50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006f54:	75bb      	strb	r3, [r7, #22]
				break;
 8006f56:	e03e      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006f58:	7dbb      	ldrb	r3, [r7, #22]
 8006f5a:	f043 0304 	orr.w	r3, r3, #4
 8006f5e:	75bb      	strb	r3, [r7, #22]
				break;
 8006f60:	e039      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006f62:	7dbb      	ldrb	r3, [r7, #22]
 8006f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f68:	75bb      	strb	r3, [r7, #22]
				break;
 8006f6a:	e034      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006f6c:	7dbb      	ldrb	r3, [r7, #22]
 8006f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f72:	75bb      	strb	r3, [r7, #22]
				break;
 8006f74:	e02f      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f76:	23fc      	movs	r3, #252	; 0xfc
 8006f78:	75fb      	strb	r3, [r7, #23]
 8006f7a:	e02c      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d825      	bhi.n	8006fce <VL53L0X_SetSequenceStepEnable+0xea>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006f9d 	.word	0x08006f9d
 8006f8c:	08006fa7 	.word	0x08006fa7
 8006f90:	08006fb1 	.word	0x08006fb1
 8006f94:	08006fbb 	.word	0x08006fbb
 8006f98:	08006fc5 	.word	0x08006fc5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006f9c:	7dbb      	ldrb	r3, [r7, #22]
 8006f9e:	f023 0310 	bic.w	r3, r3, #16
 8006fa2:	75bb      	strb	r3, [r7, #22]
				break;
 8006fa4:	e017      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006fa6:	7dbb      	ldrb	r3, [r7, #22]
 8006fa8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006fac:	75bb      	strb	r3, [r7, #22]
				break;
 8006fae:	e012      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006fb0:	7dbb      	ldrb	r3, [r7, #22]
 8006fb2:	f023 0304 	bic.w	r3, r3, #4
 8006fb6:	75bb      	strb	r3, [r7, #22]
				break;
 8006fb8:	e00d      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006fba:	7dbb      	ldrb	r3, [r7, #22]
 8006fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc0:	75bb      	strb	r3, [r7, #22]
				break;
 8006fc2:	e008      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006fc4:	7dbb      	ldrb	r3, [r7, #22]
 8006fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fca:	75bb      	strb	r3, [r7, #22]
				break;
 8006fcc:	e003      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fce:	23fc      	movs	r3, #252	; 0xfc
 8006fd0:	75fb      	strb	r3, [r7, #23]
 8006fd2:	e000      	b.n	8006fd6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006fd4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	7dba      	ldrb	r2, [r7, #22]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d01e      	beq.n	800701c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006fe6:	7dbb      	ldrb	r3, [r7, #22]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	2101      	movs	r1, #1
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f004 f9fb 	bl	800b3e8 <VL53L0X_WrByte>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d103      	bne.n	8007006 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	7dba      	ldrb	r2, [r7, #22]
 8007002:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007014:	6939      	ldr	r1, [r7, #16]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff ff0e 	bl	8006e38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800701c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	607b      	str	r3, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	72fb      	strb	r3, [r7, #11]
 8007036:	4613      	mov	r3, r2
 8007038:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800703a:	2300      	movs	r3, #0
 800703c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007044:	7afb      	ldrb	r3, [r7, #11]
 8007046:	2b04      	cmp	r3, #4
 8007048:	d836      	bhi.n	80070b8 <sequence_step_enabled+0x90>
 800704a:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <sequence_step_enabled+0x28>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007065 	.word	0x08007065
 8007054:	08007077 	.word	0x08007077
 8007058:	08007089 	.word	0x08007089
 800705c:	0800709b 	.word	0x0800709b
 8007060:	080070ad 	.word	0x080070ad
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007064:	7abb      	ldrb	r3, [r7, #10]
 8007066:	111b      	asrs	r3, r3, #4
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	b2da      	uxtb	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	701a      	strb	r2, [r3, #0]
		break;
 8007074:	e022      	b.n	80070bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007076:	7abb      	ldrb	r3, [r7, #10]
 8007078:	10db      	asrs	r3, r3, #3
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	b2da      	uxtb	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	701a      	strb	r2, [r3, #0]
		break;
 8007086:	e019      	b.n	80070bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007088:	7abb      	ldrb	r3, [r7, #10]
 800708a:	109b      	asrs	r3, r3, #2
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	b2da      	uxtb	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	701a      	strb	r2, [r3, #0]
		break;
 8007098:	e010      	b.n	80070bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800709a:	7abb      	ldrb	r3, [r7, #10]
 800709c:	119b      	asrs	r3, r3, #6
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	701a      	strb	r2, [r3, #0]
		break;
 80070aa:	e007      	b.n	80070bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80070ac:	7abb      	ldrb	r3, [r7, #10]
 80070ae:	09db      	lsrs	r3, r3, #7
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	701a      	strb	r2, [r3, #0]
		break;
 80070b6:	e001      	b.n	80070bc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070b8:	23fc      	movs	r3, #252	; 0xfc
 80070ba:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070de:	f107 030e 	add.w	r3, r7, #14
 80070e2:	461a      	mov	r2, r3
 80070e4:	2101      	movs	r1, #1
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f004 fa00 	bl	800b4ec <VL53L0X_RdByte>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80070f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d107      	bne.n	8007108 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80070f8:	7bba      	ldrb	r2, [r7, #14]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2100      	movs	r1, #0
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff ff92 	bl	8007028 <sequence_step_enabled>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d108      	bne.n	8007122 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007110:	7bba      	ldrb	r2, [r7, #14]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	3302      	adds	r3, #2
 8007116:	2101      	movs	r1, #1
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff ff85 	bl	8007028 <sequence_step_enabled>
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d108      	bne.n	800713c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800712a:	7bba      	ldrb	r2, [r7, #14]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	2102      	movs	r1, #2
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff ff78 	bl	8007028 <sequence_step_enabled>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800713c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d108      	bne.n	8007156 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007144:	7bba      	ldrb	r2, [r7, #14]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	3303      	adds	r3, #3
 800714a:	2103      	movs	r1, #3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff ff6b 	bl	8007028 <sequence_step_enabled>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d108      	bne.n	8007170 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800715e:	7bba      	ldrb	r2, [r7, #14]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	3304      	adds	r3, #4
 8007164:	2104      	movs	r1, #4
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff ff5e 	bl	8007028 <sequence_step_enabled>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800718a:	f107 030c 	add.w	r3, r7, #12
 800718e:	461a      	mov	r2, r3
 8007190:	21f8      	movs	r1, #248	; 0xf8
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f004 f9d4 	bl	800b540 <VL53L0X_RdWord>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800719c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d108      	bne.n	80071b6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80071a4:	f107 0308 	add.w	r3, r7, #8
 80071a8:	461a      	mov	r2, r3
 80071aa:	2104      	movs	r1, #4
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f004 f9ff 	bl	800b5b0 <VL53L0X_RdDWord>
 80071b2:	4603      	mov	r3, r0
 80071b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80071b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10c      	bne.n	80071d8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80071be:	89bb      	ldrh	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	89ba      	ldrh	r2, [r7, #12]
 80071c8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7f1b      	ldrb	r3, [r3, #28]
 80071f6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	7bba      	ldrb	r2, [r7, #14]
 80071fc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80071fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800721c:	f107 030e 	add.w	r3, r7, #14
 8007220:	461a      	mov	r2, r3
 8007222:	2120      	movs	r1, #32
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f004 f98b 	bl	800b540 <VL53L0X_RdWord>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800722e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d118      	bne.n	8007268 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007236:	89fb      	ldrh	r3, [r7, #14]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	771a      	strb	r2, [r3, #28]
 800724e:	e00b      	b.n	8007268 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007250:	89fb      	ldrh	r3, [r7, #14]
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007268:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	807b      	strh	r3, [r7, #2]
 8007280:	4613      	mov	r3, r2
 8007282:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007294:	887b      	ldrh	r3, [r7, #2]
 8007296:	2b05      	cmp	r3, #5
 8007298:	d902      	bls.n	80072a0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800729a:	23fc      	movs	r3, #252	; 0xfc
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e05b      	b.n	8007358 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80072a0:	787b      	ldrb	r3, [r7, #1]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80072ae:	2301      	movs	r3, #1
 80072b0:	73bb      	strb	r3, [r7, #14]
 80072b2:	e00a      	b.n	80072ca <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80072b4:	887b      	ldrh	r3, [r7, #2]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	330c      	adds	r3, #12
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80072c6:	2301      	movs	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80072ca:	887b      	ldrh	r3, [r7, #2]
 80072cc:	2b05      	cmp	r3, #5
 80072ce:	d841      	bhi.n	8007354 <VL53L0X_SetLimitCheckEnable+0xe0>
 80072d0:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	080072fb 	.word	0x080072fb
 80072e0:	08007311 	.word	0x08007311
 80072e4:	0800731b 	.word	0x0800731b
 80072e8:	08007325 	.word	0x08007325
 80072ec:	0800733d 	.word	0x0800733d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7bfa      	ldrb	r2, [r7, #15]
 80072f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80072f8:	e02e      	b.n	8007358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80072fe:	b29b      	uxth	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	2144      	movs	r1, #68	; 0x44
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f004 f893 	bl	800b430 <VL53L0X_WrWord>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]

			break;
 800730e:	e023      	b.n	8007358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7bfa      	ldrb	r2, [r7, #15]
 8007314:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007318:	e01e      	b.n	8007358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7bfa      	ldrb	r2, [r7, #15]
 800731e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007322:	e019      	b.n	8007358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800732a:	7b7b      	ldrb	r3, [r7, #13]
 800732c:	22fe      	movs	r2, #254	; 0xfe
 800732e:	2160      	movs	r1, #96	; 0x60
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f004 f8a7 	bl	800b484 <VL53L0X_UpdateByte>
 8007336:	4603      	mov	r3, r0
 8007338:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800733a:	e00d      	b.n	8007358 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007342:	7b7b      	ldrb	r3, [r7, #13]
 8007344:	22ef      	movs	r2, #239	; 0xef
 8007346:	2160      	movs	r1, #96	; 0x60
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f004 f89b 	bl	800b484 <VL53L0X_UpdateByte>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007352:	e001      	b.n	8007358 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007354:	23fc      	movs	r3, #252	; 0xfc
 8007356:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10f      	bne.n	8007380 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007360:	787b      	ldrb	r3, [r7, #1]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007366:	887b      	ldrh	r3, [r7, #2]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007372:	e005      	b.n	8007380 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	4413      	add	r3, r2
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007380:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	460b      	mov	r3, r1
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800739e:	897b      	ldrh	r3, [r7, #10]
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d905      	bls.n	80073b0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073a4:	23fc      	movs	r3, #252	; 0xfc
 80073a6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e008      	b.n	80073c2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80073b0:	897b      	ldrh	r3, [r7, #10]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ba:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	7dba      	ldrb	r2, [r7, #22]
 80073c0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	460b      	mov	r3, r1
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80073e6:	897b      	ldrh	r3, [r7, #10]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073f0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80073f2:	7dbb      	ldrb	r3, [r7, #22]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80073f8:	897b      	ldrh	r3, [r7, #10]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	330c      	adds	r3, #12
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	e040      	b.n	800748a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007408:	897b      	ldrh	r3, [r7, #10]
 800740a:	2b05      	cmp	r3, #5
 800740c:	d830      	bhi.n	8007470 <VL53L0X_SetLimitCheckValue+0x9c>
 800740e:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <VL53L0X_SetLimitCheckValue+0x40>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	0800742d 	.word	0x0800742d
 8007418:	08007435 	.word	0x08007435
 800741c:	0800744b 	.word	0x0800744b
 8007420:	08007453 	.word	0x08007453
 8007424:	0800745b 	.word	0x0800745b
 8007428:	0800745b 	.word	0x0800745b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007432:	e01f      	b.n	8007474 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007438:	b29b      	uxth	r3, r3
 800743a:	461a      	mov	r2, r3
 800743c:	2144      	movs	r1, #68	; 0x44
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f003 fff6 	bl	800b430 <VL53L0X_WrWord>
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007448:	e014      	b.n	8007474 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007450:	e010      	b.n	8007474 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007458:	e00c      	b.n	8007474 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800745e:	b29b      	uxth	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	2164      	movs	r1, #100	; 0x64
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f003 ffe3 	bl	800b430 <VL53L0X_WrWord>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800746e:	e001      	b.n	8007474 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007470:	23fc      	movs	r3, #252	; 0xfc
 8007472:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800747c:	897b      	ldrh	r3, [r7, #10]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	330c      	adds	r3, #12
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800748a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop

08007498 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	460b      	mov	r3, r1
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074a6:	2300      	movs	r3, #0
 80074a8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80074ae:	897b      	ldrh	r3, [r7, #10]
 80074b0:	2b05      	cmp	r3, #5
 80074b2:	d847      	bhi.n	8007544 <VL53L0X_GetLimitCheckValue+0xac>
 80074b4:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <VL53L0X_GetLimitCheckValue+0x24>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074d5 	.word	0x080074d5
 80074c0:	080074e1 	.word	0x080074e1
 80074c4:	08007507 	.word	0x08007507
 80074c8:	08007513 	.word	0x08007513
 80074cc:	0800751f 	.word	0x0800751f
 80074d0:	0800751f 	.word	0x0800751f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	77bb      	strb	r3, [r7, #30]
		break;
 80074de:	e033      	b.n	8007548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80074e0:	f107 0316 	add.w	r3, r7, #22
 80074e4:	461a      	mov	r2, r3
 80074e6:	2144      	movs	r1, #68	; 0x44
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f004 f829 	bl	800b540 <VL53L0X_RdWord>
 80074ee:	4603      	mov	r3, r0
 80074f0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80074f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80074fa:	8afb      	ldrh	r3, [r7, #22]
 80074fc:	025b      	lsls	r3, r3, #9
 80074fe:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007500:	2301      	movs	r3, #1
 8007502:	77bb      	strb	r3, [r7, #30]
		break;
 8007504:	e020      	b.n	8007548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	77bb      	strb	r3, [r7, #30]
		break;
 8007510:	e01a      	b.n	8007548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	77bb      	strb	r3, [r7, #30]
		break;
 800751c:	e014      	b.n	8007548 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800751e:	f107 0316 	add.w	r3, r7, #22
 8007522:	461a      	mov	r2, r3
 8007524:	2164      	movs	r1, #100	; 0x64
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f004 f80a 	bl	800b540 <VL53L0X_RdWord>
 800752c:	4603      	mov	r3, r0
 800752e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007530:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007538:	8afb      	ldrh	r3, [r7, #22]
 800753a:	025b      	lsls	r3, r3, #9
 800753c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	77bb      	strb	r3, [r7, #30]
		break;
 8007542:	e001      	b.n	8007548 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007544:	23fc      	movs	r3, #252	; 0xfc
 8007546:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007548:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d12a      	bne.n	80075a6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007550:	7fbb      	ldrb	r3, [r7, #30]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d124      	bne.n	80075a0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d110      	bne.n	800757e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800755c:	897b      	ldrh	r3, [r7, #10]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	330c      	adds	r3, #12
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007570:	897b      	ldrh	r3, [r7, #10]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800757c:	e013      	b.n	80075a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007584:	897b      	ldrh	r3, [r7, #10]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	330c      	adds	r3, #12
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007592:	897b      	ldrh	r3, [r7, #10]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800759e:	e002      	b.n	80075a6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075a6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop

080075b4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80075c2:	f107 030e 	add.w	r3, r7, #14
 80075c6:	461a      	mov	r2, r3
 80075c8:	2101      	movs	r1, #1
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f003 ff8e 	bl	800b4ec <VL53L0X_RdByte>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80075d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10e      	bne.n	80075fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80075dc:	7bba      	ldrb	r2, [r7, #14]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	b25b      	sxtb	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da03      	bge.n	80075f4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2201      	movs	r2, #1
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	e002      	b.n	80075fa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80075fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781a      	ldrb	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800760c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007624:	f107 030e 	add.w	r3, r7, #14
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fbd2 	bl	8006dd4 <VL53L0X_GetDeviceMode>
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d107      	bne.n	800764c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d104      	bne.n	800764c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f898 	bl	8007778 <VL53L0X_StartMeasurement>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800764c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 fb3f 	bl	8008cd8 <VL53L0X_measurement_poll_for_completion>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800765e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d106      	bne.n	8007674 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d103      	bne.n	8007674 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2203      	movs	r2, #3
 8007670:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800768c:	2300      	movs	r3, #0
 800768e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007690:	2301      	movs	r3, #1
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f001 fae1 	bl	8008c5e <VL53L0X_perform_ref_calibration>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80076a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80076c2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80076c4:	7dbb      	ldrb	r3, [r7, #22]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d005      	beq.n	80076d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80076ca:	7dbb      	ldrb	r3, [r7, #22]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d002      	beq.n	80076d6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80076d0:	7dbb      	ldrb	r3, [r7, #22]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d147      	bne.n	8007766 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80076d6:	f107 030c 	add.w	r3, r7, #12
 80076da:	f107 0210 	add.w	r2, r7, #16
 80076de:	2101      	movs	r1, #1
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fbc3 	bl	8007e6c <VL53L0X_GetInterruptThresholds>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80076f0:	d803      	bhi.n	80076fa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80076f2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80076f4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80076f8:	d935      	bls.n	8007766 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80076fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d131      	bne.n	8007766 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007708:	491a      	ldr	r1, [pc, #104]	; (8007774 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f002 ff56 	bl	800a5bc <VL53L0X_load_tuning_settings>
 8007710:	4603      	mov	r3, r0
 8007712:	75fb      	strb	r3, [r7, #23]
 8007714:	e027      	b.n	8007766 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007716:	2204      	movs	r2, #4
 8007718:	21ff      	movs	r1, #255	; 0xff
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f003 fe64 	bl	800b3e8 <VL53L0X_WrByte>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	4313      	orrs	r3, r2
 8007728:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800772a:	2200      	movs	r2, #0
 800772c:	2170      	movs	r1, #112	; 0x70
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f003 fe5a 	bl	800b3e8 <VL53L0X_WrByte>
 8007734:	4603      	mov	r3, r0
 8007736:	461a      	mov	r2, r3
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	4313      	orrs	r3, r2
 800773c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800773e:	2200      	movs	r2, #0
 8007740:	21ff      	movs	r1, #255	; 0xff
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f003 fe50 	bl	800b3e8 <VL53L0X_WrByte>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	4313      	orrs	r3, r2
 8007750:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007752:	2200      	movs	r2, #0
 8007754:	2180      	movs	r1, #128	; 0x80
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f003 fe46 	bl	800b3e8 <VL53L0X_WrByte>
 800775c:	4603      	mov	r3, r0
 800775e:	461a      	mov	r2, r3
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	4313      	orrs	r3, r2
 8007764:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007766:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000104 	.word	0x20000104

08007778 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007780:	2300      	movs	r3, #0
 8007782:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007788:	f107 030e 	add.w	r3, r7, #14
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fb20 	bl	8006dd4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007794:	2201      	movs	r2, #1
 8007796:	2180      	movs	r1, #128	; 0x80
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f003 fe25 	bl	800b3e8 <VL53L0X_WrByte>
 800779e:	4603      	mov	r3, r0
 80077a0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80077a2:	2201      	movs	r2, #1
 80077a4:	21ff      	movs	r1, #255	; 0xff
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f003 fe1e 	bl	800b3e8 <VL53L0X_WrByte>
 80077ac:	4603      	mov	r3, r0
 80077ae:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80077b0:	2200      	movs	r2, #0
 80077b2:	2100      	movs	r1, #0
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f003 fe17 	bl	800b3e8 <VL53L0X_WrByte>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80077c4:	461a      	mov	r2, r3
 80077c6:	2191      	movs	r1, #145	; 0x91
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f003 fe0d 	bl	800b3e8 <VL53L0X_WrByte>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80077d2:	2201      	movs	r2, #1
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f003 fe06 	bl	800b3e8 <VL53L0X_WrByte>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80077e0:	2200      	movs	r2, #0
 80077e2:	21ff      	movs	r1, #255	; 0xff
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f003 fdff 	bl	800b3e8 <VL53L0X_WrByte>
 80077ea:	4603      	mov	r3, r0
 80077ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80077ee:	2200      	movs	r2, #0
 80077f0:	2180      	movs	r1, #128	; 0x80
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f003 fdf8 	bl	800b3e8 <VL53L0X_WrByte>
 80077f8:	4603      	mov	r3, r0
 80077fa:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d054      	beq.n	80078ac <VL53L0X_StartMeasurement+0x134>
 8007802:	2b03      	cmp	r3, #3
 8007804:	dc6c      	bgt.n	80078e0 <VL53L0X_StartMeasurement+0x168>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <VL53L0X_StartMeasurement+0x98>
 800780a:	2b01      	cmp	r3, #1
 800780c:	d034      	beq.n	8007878 <VL53L0X_StartMeasurement+0x100>
 800780e:	e067      	b.n	80078e0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007810:	2201      	movs	r2, #1
 8007812:	2100      	movs	r1, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f003 fde7 	bl	800b3e8 <VL53L0X_WrByte>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d15d      	bne.n	80078e6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d008      	beq.n	8007846 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007834:	f107 030d 	add.w	r3, r7, #13
 8007838:	461a      	mov	r2, r3
 800783a:	2100      	movs	r1, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f003 fe55 	bl	800b4ec <VL53L0X_RdByte>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3301      	adds	r3, #1
 800784a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800784c:	7b7a      	ldrb	r2, [r7, #13]
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	4013      	ands	r3, r2
 8007852:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007854:	7bfa      	ldrb	r2, [r7, #15]
 8007856:	429a      	cmp	r2, r3
 8007858:	d107      	bne.n	800786a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800785a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007868:	d3e1      	bcc.n	800782e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007870:	d339      	bcc.n	80078e6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007872:	23f9      	movs	r3, #249	; 0xf9
 8007874:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007876:	e036      	b.n	80078e6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007880:	2101      	movs	r1, #1
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff ff12 	bl	80076ac <VL53L0X_CheckAndLoadInterruptSettings>
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800788c:	2202      	movs	r2, #2
 800788e:	2100      	movs	r1, #0
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f003 fda9 	bl	800b3e8 <VL53L0X_WrByte>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800789a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d123      	bne.n	80078ea <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2204      	movs	r2, #4
 80078a6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80078aa:	e01e      	b.n	80078ea <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80078ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d105      	bne.n	80078c0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80078b4:	2101      	movs	r1, #1
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff fef8 	bl	80076ac <VL53L0X_CheckAndLoadInterruptSettings>
 80078bc:	4603      	mov	r3, r0
 80078be:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80078c0:	2204      	movs	r2, #4
 80078c2:	2100      	movs	r1, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f003 fd8f 	bl	800b3e8 <VL53L0X_WrByte>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80078ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10b      	bne.n	80078ee <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2204      	movs	r2, #4
 80078da:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80078de:	e006      	b.n	80078ee <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80078e0:	23f8      	movs	r3, #248	; 0xf8
 80078e2:	75fb      	strb	r3, [r7, #23]
 80078e4:	e004      	b.n	80078f0 <VL53L0X_StartMeasurement+0x178>
		break;
 80078e6:	bf00      	nop
 80078e8:	e002      	b.n	80078f0 <VL53L0X_StartMeasurement+0x178>
		break;
 80078ea:	bf00      	nop
 80078ec:	e000      	b.n	80078f0 <VL53L0X_StartMeasurement+0x178>
		break;
 80078ee:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80078f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007910:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b04      	cmp	r3, #4
 8007916:	d112      	bne.n	800793e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007918:	f107 0308 	add.w	r3, r7, #8
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fb1a 	bl	8007f58 <VL53L0X_GetInterruptMaskStatus>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b04      	cmp	r3, #4
 800792c:	d103      	bne.n	8007936 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e01c      	b.n	8007970 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	e018      	b.n	8007970 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800793e:	f107 030d 	add.w	r3, r7, #13
 8007942:	461a      	mov	r2, r3
 8007944:	2114      	movs	r1, #20
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f003 fdd0 	bl	800b4ec <VL53L0X_RdByte>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10b      	bne.n	8007970 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007958:	7b7b      	ldrb	r3, [r7, #13]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2201      	movs	r2, #1
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	e002      	b.n	8007970 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2200      	movs	r2, #0
 800796e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800797c:	b5b0      	push	{r4, r5, r7, lr}
 800797e:	b096      	sub	sp, #88	; 0x58
 8007980:	af02      	add	r7, sp, #8
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007986:	2300      	movs	r3, #0
 8007988:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800798c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007990:	230c      	movs	r3, #12
 8007992:	2114      	movs	r1, #20
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f003 fcfb 	bl	800b390 <VL53L0X_ReadMulti>
 800799a:	4603      	mov	r3, r0
 800799c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80079a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 80d1 	bne.w	8007b4c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2200      	movs	r2, #0
 80079ae:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80079b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	4413      	add	r3, r2
 80079c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2200      	movs	r2, #0
 80079d0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80079d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	b29a      	uxth	r2, r3
 80079dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	4413      	add	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	025b      	lsls	r3, r3, #9
 80079e8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ee:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80079f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	4413      	add	r3, r2
 8007a02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007a06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a0a:	025b      	lsls	r3, r3, #9
 8007a0c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007a12:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007a2e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007a30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007a3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007a46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007a4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a50:	d046      	beq.n	8007ae0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007a52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a54:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007a58:	fb02 f303 	mul.w	r3, r2, r3
 8007a5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a60:	4a57      	ldr	r2, [pc, #348]	; (8007bc0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007a62:	fb82 1203 	smull	r1, r2, r2, r3
 8007a66:	1192      	asrs	r2, r2, #6
 8007a68:	17db      	asrs	r3, r3, #31
 8007a6a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007a6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	7f1b      	ldrb	r3, [r3, #28]
 8007a7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d02c      	beq.n	8007ae0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007a86:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a88:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007a8c:	fb02 f303 	mul.w	r3, r2, r3
 8007a90:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d10d      	bne.n	8007ab4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007a98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007aa0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007aa4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007aa8:	e016      	b.n	8007ad8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007aaa:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007aae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ab2:	e011      	b.n	8007ad8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007ab4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aba:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007abe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ac0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007ac8:	121b      	asrs	r3, r3, #8
 8007aca:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ace:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007ad0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007ad4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007ad8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007adc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007ae0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00d      	beq.n	8007b04 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007ae8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007af4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	019b      	lsls	r3, r3, #6
 8007afc:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	75da      	strb	r2, [r3, #23]
 8007b02:	e006      	b.n	8007b12 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007b0a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007b12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007b16:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007b1a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f003 f9e5 	bl	800aef8 <VL53L0X_get_pal_range_status>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	461a      	mov	r2, r3
 8007b32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007b3c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d103      	bne.n	8007b4c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007b44:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b4c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d12f      	bne.n	8007bb4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f107 040c 	add.w	r4, r7, #12
 8007b5a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b66:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007b6e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007b7c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007b82:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007b88:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007b8e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007b94:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007b9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007ba4:	f107 050c 	add.w	r5, r7, #12
 8007ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bb4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3750      	adds	r7, #80	; 0x50
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8007bc0:	10624dd3 	.word	0x10624dd3

08007bc4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff f8d1 	bl	8006d7c <VL53L0X_SetDeviceMode>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d104      	bne.n	8007bf0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7ff fd16 	bl	8007618 <VL53L0X_PerformSingleMeasurement>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff febe 	bl	800797c <VL53L0X_GetRangingMeasurementData>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f962 	bl	8007ed8 <VL53L0X_ClearInterruptMask>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	461a      	mov	r2, r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	70fb      	strb	r3, [r7, #3]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70bb      	strb	r3, [r7, #2]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007c42:	78fb      	ldrb	r3, [r7, #3]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007c48:	23f6      	movs	r3, #246	; 0xf6
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e107      	b.n	8007e5e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007c4e:	78bb      	ldrb	r3, [r7, #2]
 8007c50:	2b14      	cmp	r3, #20
 8007c52:	d110      	bne.n	8007c76 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007c54:	7e3b      	ldrb	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007c5a:	2310      	movs	r3, #16
 8007c5c:	73bb      	strb	r3, [r7, #14]
 8007c5e:	e001      	b.n	8007c64 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007c60:	2301      	movs	r3, #1
 8007c62:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	461a      	mov	r2, r3
 8007c68:	2184      	movs	r1, #132	; 0x84
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f003 fbbc 	bl	800b3e8 <VL53L0X_WrByte>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
 8007c74:	e0f3      	b.n	8007e5e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007c76:	78bb      	ldrb	r3, [r7, #2]
 8007c78:	2b15      	cmp	r3, #21
 8007c7a:	f040 8097 	bne.w	8007dac <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007c7e:	2201      	movs	r2, #1
 8007c80:	21ff      	movs	r1, #255	; 0xff
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f003 fbb0 	bl	800b3e8 <VL53L0X_WrByte>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007c92:	2200      	movs	r2, #0
 8007c94:	2100      	movs	r1, #0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f003 fba6 	bl	800b3e8 <VL53L0X_WrByte>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	21ff      	movs	r1, #255	; 0xff
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f003 fb9c 	bl	800b3e8 <VL53L0X_WrByte>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007cba:	2201      	movs	r2, #1
 8007cbc:	2180      	movs	r1, #128	; 0x80
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f003 fb92 	bl	800b3e8 <VL53L0X_WrByte>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007cce:	2202      	movs	r2, #2
 8007cd0:	2185      	movs	r1, #133	; 0x85
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f003 fb88 	bl	800b3e8 <VL53L0X_WrByte>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	21ff      	movs	r1, #255	; 0xff
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f003 fb7e 	bl	800b3e8 <VL53L0X_WrByte>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	21cd      	movs	r1, #205	; 0xcd
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f003 fb74 	bl	800b3e8 <VL53L0X_WrByte>
 8007d00:	4603      	mov	r3, r0
 8007d02:	461a      	mov	r2, r3
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007d0a:	2211      	movs	r2, #17
 8007d0c:	21cc      	movs	r1, #204	; 0xcc
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f003 fb6a 	bl	800b3e8 <VL53L0X_WrByte>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007d1e:	2207      	movs	r2, #7
 8007d20:	21ff      	movs	r1, #255	; 0xff
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f003 fb60 	bl	800b3e8 <VL53L0X_WrByte>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007d32:	2200      	movs	r2, #0
 8007d34:	21be      	movs	r1, #190	; 0xbe
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f003 fb56 	bl	800b3e8 <VL53L0X_WrByte>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007d46:	2206      	movs	r2, #6
 8007d48:	21ff      	movs	r1, #255	; 0xff
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f003 fb4c 	bl	800b3e8 <VL53L0X_WrByte>
 8007d50:	4603      	mov	r3, r0
 8007d52:	461a      	mov	r2, r3
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007d5a:	2209      	movs	r2, #9
 8007d5c:	21cc      	movs	r1, #204	; 0xcc
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f003 fb42 	bl	800b3e8 <VL53L0X_WrByte>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	21ff      	movs	r1, #255	; 0xff
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f003 fb38 	bl	800b3e8 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007d82:	2201      	movs	r2, #1
 8007d84:	21ff      	movs	r1, #255	; 0xff
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f003 fb2e 	bl	800b3e8 <VL53L0X_WrByte>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007d96:	2200      	movs	r2, #0
 8007d98:	2100      	movs	r1, #0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f003 fb24 	bl	800b3e8 <VL53L0X_WrByte>
 8007da0:	4603      	mov	r3, r0
 8007da2:	461a      	mov	r2, r3
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	73fb      	strb	r3, [r7, #15]
 8007daa:	e058      	b.n	8007e5e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d121      	bne.n	8007df8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007db4:	787b      	ldrb	r3, [r7, #1]
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d81b      	bhi.n	8007df2 <VL53L0X_SetGpioConfig+0x1ce>
 8007dba:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <VL53L0X_SetGpioConfig+0x19c>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007ddb 	.word	0x08007ddb
 8007dc8:	08007de1 	.word	0x08007de1
 8007dcc:	08007de7 	.word	0x08007de7
 8007dd0:	08007ded 	.word	0x08007ded
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73bb      	strb	r3, [r7, #14]
				break;
 8007dd8:	e00f      	b.n	8007dfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	73bb      	strb	r3, [r7, #14]
				break;
 8007dde:	e00c      	b.n	8007dfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007de0:	2302      	movs	r3, #2
 8007de2:	73bb      	strb	r3, [r7, #14]
				break;
 8007de4:	e009      	b.n	8007dfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007de6:	2303      	movs	r3, #3
 8007de8:	73bb      	strb	r3, [r7, #14]
				break;
 8007dea:	e006      	b.n	8007dfa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007dec:	2304      	movs	r3, #4
 8007dee:	73bb      	strb	r3, [r7, #14]
				break;
 8007df0:	e003      	b.n	8007dfa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007df2:	23f5      	movs	r3, #245	; 0xf5
 8007df4:	73fb      	strb	r3, [r7, #15]
 8007df6:	e000      	b.n	8007dfa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007df8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d107      	bne.n	8007e12 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	461a      	mov	r2, r3
 8007e06:	210a      	movs	r1, #10
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f003 faed 	bl	800b3e8 <VL53L0X_WrByte>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007e1a:	7e3b      	ldrb	r3, [r7, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73bb      	strb	r3, [r7, #14]
 8007e24:	e001      	b.n	8007e2a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007e26:	2310      	movs	r3, #16
 8007e28:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	22ef      	movs	r2, #239	; 0xef
 8007e2e:	2184      	movs	r1, #132	; 0x84
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f003 fb27 	bl	800b484 <VL53L0X_UpdateByte>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d103      	bne.n	8007e4a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	787a      	ldrb	r2, [r7, #1]
 8007e46:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d105      	bne.n	8007e5e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007e52:	2100      	movs	r1, #0
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f83f 	bl	8007ed8 <VL53L0X_ClearInterruptMask>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop

08007e6c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	607a      	str	r2, [r7, #4]
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007e80:	f107 0314 	add.w	r3, r7, #20
 8007e84:	461a      	mov	r2, r3
 8007e86:	210e      	movs	r1, #14
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f003 fb59 	bl	800b540 <VL53L0X_RdWord>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007e92:	8abb      	ldrh	r3, [r7, #20]
 8007e94:	045b      	lsls	r3, r3, #17
 8007e96:	461a      	mov	r2, r3
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10f      	bne.n	8007ec8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	461a      	mov	r2, r3
 8007eae:	210c      	movs	r1, #12
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f003 fb45 	bl	800b540 <VL53L0X_RdWord>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007eba:	8abb      	ldrh	r3, [r7, #20]
 8007ebc:	045b      	lsls	r3, r3, #17
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007ec2:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	1ffe0000 	.word	0x1ffe0000

08007ed8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007eea:	2201      	movs	r2, #1
 8007eec:	210b      	movs	r1, #11
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f003 fa7a 	bl	800b3e8 <VL53L0X_WrByte>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007ef8:	2200      	movs	r2, #0
 8007efa:	210b      	movs	r1, #11
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f003 fa73 	bl	800b3e8 <VL53L0X_WrByte>
 8007f02:	4603      	mov	r3, r0
 8007f04:	461a      	mov	r2, r3
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007f0c:	f107 030d 	add.w	r3, r7, #13
 8007f10:	461a      	mov	r2, r3
 8007f12:	2113      	movs	r1, #19
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f003 fae9 	bl	800b4ec <VL53L0X_RdByte>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	3301      	adds	r3, #1
 8007f28:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007f2a:	7b7b      	ldrb	r3, [r7, #13]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d006      	beq.n	8007f42 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d803      	bhi.n	8007f42 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0d3      	beq.n	8007eea <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007f48:	23f4      	movs	r3, #244	; 0xf4
 8007f4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007f66:	f107 030e 	add.w	r3, r7, #14
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	2113      	movs	r1, #19
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f003 fabc 	bl	800b4ec <VL53L0X_RdByte>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	f003 0207 	and.w	r2, r3, #7
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	f003 0318 	and.w	r3, r3, #24
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007f8c:	23fa      	movs	r3, #250	; 0xfa
 8007f8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fa03 	bl	80083bc <VL53L0X_perform_ref_spad_management>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007fd4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007fd8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fde:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2128      	movs	r1, #40	; 0x28
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f003 faa9 	bl	800b540 <VL53L0X_RdWord>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d11e      	bne.n	8008038 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007ffa:	893b      	ldrh	r3, [r7, #8]
 8007ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008000:	b29b      	uxth	r3, r3
 8008002:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008004:	893b      	ldrh	r3, [r7, #8]
 8008006:	461a      	mov	r2, r3
 8008008:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800800c:	429a      	cmp	r2, r3
 800800e:	dd0b      	ble.n	8008028 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008010:	893a      	ldrh	r2, [r7, #8]
 8008012:	897b      	ldrh	r3, [r7, #10]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	b29b      	uxth	r3, r3
 8008018:	b21b      	sxth	r3, r3
 800801a:	461a      	mov	r2, r3
					* 250;
 800801c:	23fa      	movs	r3, #250	; 0xfa
 800801e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e007      	b.n	8008038 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008028:	893b      	ldrh	r3, [r7, #8]
 800802a:	b21b      	sxth	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	23fa      	movs	r3, #250	; 0xfa
 8008030:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008044:	b480      	push	{r7}
 8008046:	b08b      	sub	sp, #44	; 0x2c
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008052:	2308      	movs	r3, #8
 8008054:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	f04f 32ff 	mov.w	r2, #4294967295
 8008060:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	fbb2 f3f3 	udiv	r3, r2, r3
 800806a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	fbb3 f2f2 	udiv	r2, r3, r2
 8008074:	69b9      	ldr	r1, [r7, #24]
 8008076:	fb01 f202 	mul.w	r2, r1, r2
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
 8008082:	e030      	b.n	80080e6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	4413      	add	r3, r2
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	429a      	cmp	r2, r3
 8008098:	d11e      	bne.n	80080d8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800809a:	7ffa      	ldrb	r2, [r7, #31]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	fa42 f303 	asr.w	r3, r2, r3
 80080a2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80080a8:	e016      	b.n	80080d8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <get_next_good_spad+0x88>
				success = 1;
 80080b4:	2301      	movs	r3, #1
 80080b6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	fb03 f202 	mul.w	r2, r3, r2
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	4413      	add	r3, r2
 80080c4:	461a      	mov	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	601a      	str	r2, [r3, #0]
				break;
 80080ca:	e009      	b.n	80080e0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80080cc:	7ffb      	ldrb	r3, [r7, #31]
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	3301      	adds	r3, #1
 80080d6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d3e4      	bcc.n	80080aa <get_next_good_spad+0x66>
				coarseIndex++) {
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	3301      	adds	r3, #1
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80080e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d202      	bcs.n	80080f4 <get_next_good_spad+0xb0>
 80080ee:	7fbb      	ldrb	r3, [r7, #30]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0c7      	beq.n	8008084 <get_next_good_spad+0x40>
		}
	}
}
 80080f4:	bf00      	nop
 80080f6:	372c      	adds	r7, #44	; 0x2c
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	099b      	lsrs	r3, r3, #6
 8008110:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008112:	4a07      	ldr	r2, [pc, #28]	; (8008130 <is_aperture+0x30>)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <is_aperture+0x22>
		isAperture = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	200002bc 	.word	0x200002bc

08008134 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008134:	b480      	push	{r7}
 8008136:	b089      	sub	sp, #36	; 0x24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008140:	2300      	movs	r3, #0
 8008142:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008144:	2308      	movs	r3, #8
 8008146:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	fbb3 f2f2 	udiv	r2, r3, r2
 800815a:	69b9      	ldr	r1, [r7, #24]
 800815c:	fb01 f202 	mul.w	r2, r1, r2
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	429a      	cmp	r2, r3
 800816a:	d302      	bcc.n	8008172 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800816c:	23ce      	movs	r3, #206	; 0xce
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e010      	b.n	8008194 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4413      	add	r3, r2
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	b25a      	sxtb	r2, r3
 800817c:	2101      	movs	r1, #1
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	fa01 f303 	lsl.w	r3, r1, r3
 8008184:	b25b      	sxtb	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b259      	sxtb	r1, r3
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	4413      	add	r3, r2
 8008190:	b2ca      	uxtb	r2, r1
 8008192:	701a      	strb	r2, [r3, #0]

	return status;
 8008194:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3724      	adds	r7, #36	; 0x24
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80081ae:	2306      	movs	r3, #6
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	21b0      	movs	r1, #176	; 0xb0
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f003 f8bb 	bl	800b330 <VL53L0X_WriteMulti>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80081be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80081d4:	2306      	movs	r3, #6
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	21b0      	movs	r1, #176	; 0xb0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f003 f8d8 	bl	800b390 <VL53L0X_ReadMulti>
 80081e0:	4603      	mov	r3, r0
 80081e2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80081e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08c      	sub	sp, #48	; 0x30
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	460b      	mov	r3, r1
 80081fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008200:	2300      	movs	r3, #0
 8008202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008208:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800820a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800820c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800820e:	2300      	movs	r3, #0
 8008210:	62bb      	str	r3, [r7, #40]	; 0x28
 8008212:	e02b      	b.n	800826c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008214:	f107 031c 	add.w	r3, r7, #28
 8008218:	6a3a      	ldr	r2, [r7, #32]
 800821a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f7ff ff11 	bl	8008044 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008228:	d103      	bne.n	8008232 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800822a:	23ce      	movs	r3, #206	; 0xce
 800822c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008230:	e020      	b.n	8008274 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	461a      	mov	r2, r3
 8008236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008238:	4413      	add	r3, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff ff60 	bl	8008100 <is_aperture>
 8008240:	4603      	mov	r3, r0
 8008242:	461a      	mov	r2, r3
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	4293      	cmp	r3, r2
 8008248:	d003      	beq.n	8008252 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800824a:	23ce      	movs	r3, #206	; 0xce
 800824c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008250:	e010      	b.n	8008274 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800825a:	6838      	ldr	r0, [r7, #0]
 800825c:	f7ff ff6a 	bl	8008134 <enable_spad_bit>
		currentSpad++;
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	3301      	adds	r3, #1
 8008264:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	3301      	adds	r3, #1
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
 800826c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008270:	429a      	cmp	r2, r3
 8008272:	d3cf      	bcc.n	8008214 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008276:	6a3a      	ldr	r2, [r7, #32]
 8008278:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800827a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff ff8d 	bl	80081a4 <set_ref_spad_map>
 800828a:	4603      	mov	r3, r0
 800828c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008290:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008294:	2b00      	cmp	r3, #0
 8008296:	d121      	bne.n	80082dc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4619      	mov	r1, r3
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff ff93 	bl	80081ca <get_ref_spad_map>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80082ae:	e011      	b.n	80082d4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	4413      	add	r3, r2
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	f107 0114 	add.w	r1, r7, #20
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	440b      	add	r3, r1
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d003      	beq.n	80082ce <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80082c6:	23ce      	movs	r3, #206	; 0xce
 80082c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80082cc:	e006      	b.n	80082dc <enable_ref_spads+0xec>
			}
			i++;
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	3301      	adds	r3, #1
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	429a      	cmp	r2, r3
 80082da:	d3e9      	bcc.n	80082b0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80082dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3730      	adds	r7, #48	; 0x30
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	; 0x28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008308:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800830c:	2b00      	cmp	r3, #0
 800830e:	d107      	bne.n	8008320 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008310:	22c0      	movs	r2, #192	; 0xc0
 8008312:	2101      	movs	r1, #1
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f003 f867 	bl	800b3e8 <VL53L0X_WrByte>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008328:	f107 0308 	add.w	r3, r7, #8
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff fc48 	bl	8007bc4 <VL53L0X_PerformSingleRangingMeasurement>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800833a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800833e:	2b00      	cmp	r3, #0
 8008340:	d107      	bne.n	8008352 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008342:	2201      	movs	r2, #1
 8008344:	21ff      	movs	r1, #255	; 0xff
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f003 f84e 	bl	800b3e8 <VL53L0X_WrByte>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008352:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008356:	2b00      	cmp	r3, #0
 8008358:	d107      	bne.n	800836a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	21b6      	movs	r1, #182	; 0xb6
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f003 f8ee 	bl	800b540 <VL53L0X_RdWord>
 8008364:	4603      	mov	r3, r0
 8008366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800836a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800836e:	2b00      	cmp	r3, #0
 8008370:	d107      	bne.n	8008382 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008372:	2200      	movs	r2, #0
 8008374:	21ff      	movs	r1, #255	; 0xff
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f003 f836 	bl	800b3e8 <VL53L0X_WrByte>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008382:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008386:	2b00      	cmp	r3, #0
 8008388:	d112      	bne.n	80083b0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800838a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800838e:	461a      	mov	r2, r3
 8008390:	2101      	movs	r1, #1
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f003 f828 	bl	800b3e8 <VL53L0X_WrByte>
 8008398:	4603      	mov	r3, r0
 800839a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800839e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80083ac:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80083b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3728      	adds	r7, #40	; 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b09d      	sub	sp, #116	; 0x74
 80083c0:	af06      	add	r7, sp, #24
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80083ce:	23b4      	movs	r3, #180	; 0xb4
 80083d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80083d4:	2303      	movs	r3, #3
 80083d6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80083d8:	232c      	movs	r3, #44	; 0x2c
 80083da:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80083e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80083ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80083f6:	2306      	movs	r3, #6
 80083f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008420:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008422:	2300      	movs	r3, #0
 8008424:	64bb      	str	r3, [r7, #72]	; 0x48
 8008426:	e009      	b.n	800843c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800842c:	4413      	add	r3, r2
 800842e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008438:	3301      	adds	r3, #1
 800843a:	64bb      	str	r3, [r7, #72]	; 0x48
 800843c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	429a      	cmp	r2, r3
 8008442:	d3f1      	bcc.n	8008428 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008444:	2201      	movs	r2, #1
 8008446:	21ff      	movs	r1, #255	; 0xff
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f002 ffcd 	bl	800b3e8 <VL53L0X_WrByte>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008454:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008458:	2b00      	cmp	r3, #0
 800845a:	d107      	bne.n	800846c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800845c:	2200      	movs	r2, #0
 800845e:	214f      	movs	r1, #79	; 0x4f
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f002 ffc1 	bl	800b3e8 <VL53L0X_WrByte>
 8008466:	4603      	mov	r3, r0
 8008468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800846c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008470:	2b00      	cmp	r3, #0
 8008472:	d107      	bne.n	8008484 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008474:	222c      	movs	r2, #44	; 0x2c
 8008476:	214e      	movs	r1, #78	; 0x4e
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f002 ffb5 	bl	800b3e8 <VL53L0X_WrByte>
 800847e:	4603      	mov	r3, r0
 8008480:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008484:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008488:	2b00      	cmp	r3, #0
 800848a:	d107      	bne.n	800849c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800848c:	2200      	movs	r2, #0
 800848e:	21ff      	movs	r1, #255	; 0xff
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f002 ffa9 	bl	800b3e8 <VL53L0X_WrByte>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800849c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80084a4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80084a8:	461a      	mov	r2, r3
 80084aa:	21b6      	movs	r1, #182	; 0xb6
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f002 ff9b 	bl	800b3e8 <VL53L0X_WrByte>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80084b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80084c0:	2200      	movs	r2, #0
 80084c2:	2180      	movs	r1, #128	; 0x80
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f002 ff8f 	bl	800b3e8 <VL53L0X_WrByte>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80084d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10a      	bne.n	80084ee <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80084d8:	f107 0210 	add.w	r2, r7, #16
 80084dc:	f107 0111 	add.w	r1, r7, #17
 80084e0:	2300      	movs	r3, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fbbb 	bl	8008c5e <VL53L0X_perform_ref_calibration>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80084ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d121      	bne.n	800853a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80084fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008504:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008512:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008516:	f107 0218 	add.w	r2, r7, #24
 800851a:	9204      	str	r2, [sp, #16]
 800851c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800851e:	9203      	str	r2, [sp, #12]
 8008520:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008522:	9202      	str	r2, [sp, #8]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	4623      	mov	r3, r4
 800852c:	4602      	mov	r2, r0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fe5e 	bl	80081f0 <enable_ref_spads>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800853a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800853e:	2b00      	cmp	r3, #0
 8008540:	d174      	bne.n	800862c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008546:	f107 0312 	add.w	r3, r7, #18
 800854a:	4619      	mov	r1, r3
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7ff fecb 	bl	80082e8 <perform_ref_signal_measurement>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800855c:	2b00      	cmp	r3, #0
 800855e:	d161      	bne.n	8008624 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008560:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008562:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008564:	429a      	cmp	r2, r3
 8008566:	d25d      	bcs.n	8008624 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008568:	2300      	movs	r3, #0
 800856a:	64bb      	str	r3, [r7, #72]	; 0x48
 800856c:	e009      	b.n	8008582 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008572:	4413      	add	r3, r2
 8008574:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800857c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857e:	3301      	adds	r3, #1
 8008580:	64bb      	str	r3, [r7, #72]	; 0x48
 8008582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	429a      	cmp	r2, r3
 8008588:	d3f1      	bcc.n	800856e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800858a:	e002      	b.n	8008592 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800858c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800858e:	3301      	adds	r3, #1
 8008590:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008592:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008598:	4413      	add	r3, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff fdb0 	bl	8008100 <is_aperture>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80085a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d3ee      	bcc.n	800858c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80085ae:	2301      	movs	r3, #1
 80085b0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80085b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80085c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80085c6:	f107 0218 	add.w	r2, r7, #24
 80085ca:	9204      	str	r2, [sp, #16]
 80085cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ce:	9203      	str	r2, [sp, #12]
 80085d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085d2:	9202      	str	r2, [sp, #8]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	4623      	mov	r3, r4
 80085dc:	4602      	mov	r2, r0
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff fe06 	bl	80081f0 <enable_ref_spads>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80085ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d11b      	bne.n	800862a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80085f6:	f107 0312 	add.w	r3, r7, #18
 80085fa:	4619      	mov	r1, r3
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f7ff fe73 	bl	80082e8 <perform_ref_signal_measurement>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008608:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10c      	bne.n	800862a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008610:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008612:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008614:	429a      	cmp	r2, r3
 8008616:	d208      	bcs.n	800862a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008622:	e002      	b.n	800862a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008628:	e000      	b.n	800862c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800862a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800862c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 80af 	bne.w	8008794 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008636:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008638:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800863a:	429a      	cmp	r2, r3
 800863c:	f240 80aa 	bls.w	8008794 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008650:	f107 031c 	add.w	r3, r7, #28
 8008654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008656:	4618      	mov	r0, r3
 8008658:	f003 f820 	bl	800b69c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800865c:	8a7b      	ldrh	r3, [r7, #18]
 800865e:	461a      	mov	r2, r3
 8008660:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	bfb8      	it	lt
 8008668:	425b      	neglt	r3, r3
 800866a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008672:	e086      	b.n	8008782 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800867a:	f107 0314 	add.w	r3, r7, #20
 800867e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008682:	f7ff fcdf 	bl	8008044 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d103      	bne.n	8008696 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800868e:	23ce      	movs	r3, #206	; 0xce
 8008690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008694:	e07e      	b.n	8008794 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008696:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff fd2e 	bl	8008100 <is_aperture>
 80086a4:	4603      	mov	r3, r0
 80086a6:	461a      	mov	r2, r3
 80086a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80086ae:	2301      	movs	r3, #1
 80086b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80086b4:	e06e      	b.n	8008794 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80086b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b8:	3301      	adds	r3, #1
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80086c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff fd32 	bl	8008134 <enable_spad_bit>
 80086d0:	4603      	mov	r3, r0
 80086d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80086d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10c      	bne.n	80086f8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80086de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e0:	3301      	adds	r3, #1
 80086e2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80086ea:	4619      	mov	r1, r3
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff fd59 	bl	80081a4 <set_ref_spad_map>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80086f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d146      	bne.n	800878e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008700:	f107 0312 	add.w	r3, r7, #18
 8008704:	4619      	mov	r1, r3
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff fdee 	bl	80082e8 <perform_ref_signal_measurement>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008712:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008716:	2b00      	cmp	r3, #0
 8008718:	d13b      	bne.n	8008792 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800871a:	8a7b      	ldrh	r3, [r7, #18]
 800871c:	461a      	mov	r2, r3
 800871e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	bfb8      	it	lt
 8008726:	425b      	neglt	r3, r3
 8008728:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800872a:	8a7b      	ldrh	r3, [r7, #18]
 800872c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800872e:	429a      	cmp	r2, r3
 8008730:	d21c      	bcs.n	800876c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008736:	429a      	cmp	r2, r3
 8008738:	d914      	bls.n	8008764 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800873a:	f107 031c 	add.w	r3, r7, #28
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff fd2f 	bl	80081a4 <set_ref_spad_map>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008752:	f107 011c 	add.w	r1, r7, #28
 8008756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008758:	4618      	mov	r0, r3
 800875a:	f002 ff9f 	bl	800b69c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800875e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008760:	3b01      	subs	r3, #1
 8008762:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876a:	e00a      	b.n	8008782 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008776:	f107 031c 	add.w	r3, r7, #28
 800877a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800877c:	4618      	mov	r0, r3
 800877e:	f002 ff8d 	bl	800b69c <memcpy>
		while (!complete) {
 8008782:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008786:	2b00      	cmp	r3, #0
 8008788:	f43f af74 	beq.w	8008674 <VL53L0X_perform_ref_spad_management+0x2b8>
 800878c:	e002      	b.n	8008794 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800878e:	bf00      	nop
 8008790:	e000      	b.n	8008794 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008792:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008794:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008798:	2b00      	cmp	r3, #0
 800879a:	d115      	bne.n	80087c8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087a0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80087a8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	781a      	ldrb	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80087c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	375c      	adds	r7, #92	; 0x5c
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd90      	pop	{r4, r7, pc}

080087d4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b093      	sub	sp, #76	; 0x4c
 80087d8:	af06      	add	r7, sp, #24
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80087ec:	23b4      	movs	r3, #180	; 0xb4
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80087f2:	2306      	movs	r3, #6
 80087f4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80087f6:	232c      	movs	r3, #44	; 0x2c
 80087f8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087fa:	2201      	movs	r2, #1
 80087fc:	21ff      	movs	r1, #255	; 0xff
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f002 fdf2 	bl	800b3e8 <VL53L0X_WrByte>
 8008804:	4603      	mov	r3, r0
 8008806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800880a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800880e:	2b00      	cmp	r3, #0
 8008810:	d107      	bne.n	8008822 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008812:	2200      	movs	r2, #0
 8008814:	214f      	movs	r1, #79	; 0x4f
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f002 fde6 	bl	800b3e8 <VL53L0X_WrByte>
 800881c:	4603      	mov	r3, r0
 800881e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008822:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008826:	2b00      	cmp	r3, #0
 8008828:	d107      	bne.n	800883a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800882a:	222c      	movs	r2, #44	; 0x2c
 800882c:	214e      	movs	r1, #78	; 0x4e
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f002 fdda 	bl	800b3e8 <VL53L0X_WrByte>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800883a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800883e:	2b00      	cmp	r3, #0
 8008840:	d107      	bne.n	8008852 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008842:	2200      	movs	r2, #0
 8008844:	21ff      	movs	r1, #255	; 0xff
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f002 fdce 	bl	800b3e8 <VL53L0X_WrByte>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008852:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800885a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800885e:	461a      	mov	r2, r3
 8008860:	21b6      	movs	r1, #182	; 0xb6
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f002 fdc0 	bl	800b3e8 <VL53L0X_WrByte>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800886e:	2300      	movs	r3, #0
 8008870:	627b      	str	r3, [r7, #36]	; 0x24
 8008872:	e009      	b.n	8008888 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	4413      	add	r3, r2
 800887a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	3301      	adds	r3, #1
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
 8008888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	429a      	cmp	r2, r3
 800888e:	d3f1      	bcc.n	8008874 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d011      	beq.n	80088ba <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008896:	e002      	b.n	800889e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	3301      	adds	r3, #1
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800889e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	4413      	add	r3, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fc2a 	bl	8008100 <is_aperture>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <VL53L0X_set_reference_spads+0xe6>
 80088b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d3ee      	bcc.n	8008898 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80088c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088ca:	79f9      	ldrb	r1, [r7, #7]
 80088cc:	f107 0214 	add.w	r2, r7, #20
 80088d0:	9204      	str	r2, [sp, #16]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	9203      	str	r2, [sp, #12]
 80088d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d8:	9202      	str	r2, [sp, #8]
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	4623      	mov	r3, r4
 80088e2:	4602      	mov	r2, r0
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff fc83 	bl	80081f0 <enable_ref_spads>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80088f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10c      	bne.n	8008912 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	79fa      	ldrb	r2, [r7, #7]
 800890e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008912:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008916:	4618      	mov	r0, r3
 8008918:	3734      	adds	r7, #52	; 0x34
 800891a:	46bd      	mov	sp, r7
 800891c:	bd90      	pop	{r4, r7, pc}

0800891e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800892e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10a      	bne.n	800894c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	b2db      	uxtb	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f002 fd50 	bl	800b3e8 <VL53L0X_WrByte>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800894c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f9bf 	bl	8008cd8 <VL53L0X_measurement_poll_for_completion>
 800895a:	4603      	mov	r3, r0
 800895c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800895e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d105      	bne.n	8008972 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008966:	2100      	movs	r1, #0
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fab5 	bl	8007ed8 <VL53L0X_ClearInterruptMask>
 800896e:	4603      	mov	r3, r0
 8008970:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d106      	bne.n	8008988 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f002 fd32 	bl	800b3e8 <VL53L0X_WrByte>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008988:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	461a      	mov	r2, r3
 80089a2:	4603      	mov	r3, r0
 80089a4:	70fb      	strb	r3, [r7, #3]
 80089a6:	460b      	mov	r3, r1
 80089a8:	70bb      	strb	r3, [r7, #2]
 80089aa:	4613      	mov	r3, r2
 80089ac:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80089b6:	2201      	movs	r2, #1
 80089b8:	21ff      	movs	r1, #255	; 0xff
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f002 fd14 	bl	800b3e8 <VL53L0X_WrByte>
 80089c0:	4603      	mov	r3, r0
 80089c2:	461a      	mov	r2, r3
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f002 fd0a 	bl	800b3e8 <VL53L0X_WrByte>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4313      	orrs	r3, r2
 80089dc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80089de:	2200      	movs	r2, #0
 80089e0:	21ff      	movs	r1, #255	; 0xff
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f002 fd00 	bl	800b3e8 <VL53L0X_WrByte>
 80089e8:	4603      	mov	r3, r0
 80089ea:	461a      	mov	r2, r3
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80089f2:	78fb      	ldrb	r3, [r7, #3]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01e      	beq.n	8008a36 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80089f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	21cb      	movs	r1, #203	; 0xcb
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f002 fd71 	bl	800b4ec <VL53L0X_RdByte>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008a14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02a      	beq.n	8008a72 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008a1c:	f107 030e 	add.w	r3, r7, #14
 8008a20:	461a      	mov	r2, r3
 8008a22:	21ee      	movs	r1, #238	; 0xee
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f002 fd61 	bl	800b4ec <VL53L0X_RdByte>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	73fb      	strb	r3, [r7, #15]
 8008a34:	e01d      	b.n	8008a72 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008a36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008a3e:	78bb      	ldrb	r3, [r7, #2]
 8008a40:	461a      	mov	r2, r3
 8008a42:	21cb      	movs	r1, #203	; 0xcb
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f002 fccf 	bl	800b3e8 <VL53L0X_WrByte>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008a54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008a5c:	787b      	ldrb	r3, [r7, #1]
 8008a5e:	2280      	movs	r2, #128	; 0x80
 8008a60:	21ee      	movs	r1, #238	; 0xee
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f002 fd0e 	bl	800b484 <VL53L0X_UpdateByte>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a72:	2201      	movs	r2, #1
 8008a74:	21ff      	movs	r1, #255	; 0xff
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f002 fcb6 	bl	800b3e8 <VL53L0X_WrByte>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	461a      	mov	r2, r3
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008a86:	2201      	movs	r2, #1
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f002 fcac 	bl	800b3e8 <VL53L0X_WrByte>
 8008a90:	4603      	mov	r3, r0
 8008a92:	461a      	mov	r2, r3
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	21ff      	movs	r1, #255	; 0xff
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f002 fca2 	bl	800b3e8 <VL53L0X_WrByte>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	f023 0310 	bic.w	r3, r3, #16
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	701a      	strb	r2, [r3, #0]

	return Status;
 8008aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b08a      	sub	sp, #40	; 0x28
 8008aca:	af04      	add	r7, sp, #16
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	71fb      	strb	r3, [r7, #7]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008af0:	79bb      	ldrb	r3, [r7, #6]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008afc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008afe:	2201      	movs	r2, #1
 8008b00:	2101      	movs	r1, #1
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f002 fc70 	bl	800b3e8 <VL53L0X_WrByte>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008b14:	2140      	movs	r1, #64	; 0x40
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff ff01 	bl	800891e <VL53L0X_perform_single_ref_calibration>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d115      	bne.n	8008b54 <VL53L0X_perform_vhv_calibration+0x8e>
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d112      	bne.n	8008b54 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008b2e:	7d39      	ldrb	r1, [r7, #20]
 8008b30:	7d7a      	ldrb	r2, [r7, #21]
 8008b32:	2300      	movs	r3, #0
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	2301      	movs	r3, #1
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	f107 0313 	add.w	r3, r7, #19
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	460b      	mov	r3, r1
 8008b46:	2101      	movs	r1, #1
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff ff23 	bl	8008994 <VL53L0X_ref_calibration_io>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]
 8008b52:	e002      	b.n	8008b5a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d112      	bne.n	8008b88 <VL53L0X_perform_vhv_calibration+0xc2>
 8008b62:	79bb      	ldrb	r3, [r7, #6]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00f      	beq.n	8008b88 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008b68:	7dbb      	ldrb	r3, [r7, #22]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f002 fc3a 	bl	800b3e8 <VL53L0X_WrByte>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d103      	bne.n	8008b88 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	7dba      	ldrb	r2, [r7, #22]
 8008b84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008b88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	; 0x28
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	71fb      	strb	r3, [r7, #7]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008bba:	79bb      	ldrb	r3, [r7, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008bc6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008bc8:	2202      	movs	r2, #2
 8008bca:	2101      	movs	r1, #1
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f002 fc0b 	bl	800b3e8 <VL53L0X_WrByte>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d105      	bne.n	8008bea <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008bde:	2100      	movs	r1, #0
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f7ff fe9c 	bl	800891e <VL53L0X_perform_single_ref_calibration>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d115      	bne.n	8008c1e <VL53L0X_perform_phase_calibration+0x8a>
 8008bf2:	79fb      	ldrb	r3, [r7, #7]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d112      	bne.n	8008c1e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008bf8:	7d39      	ldrb	r1, [r7, #20]
 8008bfa:	7d7a      	ldrb	r2, [r7, #21]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	9303      	str	r3, [sp, #12]
 8008c00:	2300      	movs	r3, #0
 8008c02:	9302      	str	r3, [sp, #8]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	f107 0313 	add.w	r3, r7, #19
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	2101      	movs	r1, #1
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff febe 	bl	8008994 <VL53L0X_ref_calibration_io>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	75fb      	strb	r3, [r7, #23]
 8008c1c:	e002      	b.n	8008c24 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d112      	bne.n	8008c52 <VL53L0X_perform_phase_calibration+0xbe>
 8008c2c:	79bb      	ldrb	r3, [r7, #6]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00f      	beq.n	8008c52 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008c32:	7dbb      	ldrb	r3, [r7, #22]
 8008c34:	461a      	mov	r2, r3
 8008c36:	2101      	movs	r1, #1
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f002 fbd5 	bl	800b3e8 <VL53L0X_WrByte>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d103      	bne.n	8008c52 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	7dba      	ldrb	r2, [r7, #22]
 8008c4e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
 8008c6a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008c7a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7ff ff1f 	bl	8008ac6 <VL53L0X_perform_vhv_calibration>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d107      	bne.n	8008ca4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008c94:	78fa      	ldrb	r2, [r7, #3]
 8008c96:	2300      	movs	r3, #0
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff ff7a 	bl	8008b94 <VL53L0X_perform_phase_calibration>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10f      	bne.n	8008ccc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008cac:	7dbb      	ldrb	r3, [r7, #22]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f002 fb98 	bl	800b3e8 <VL53L0X_WrByte>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d103      	bne.n	8008ccc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	7dba      	ldrb	r2, [r7, #22]
 8008cc8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008cec:	f107 030f 	add.w	r3, r7, #15
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fe fe02 	bl	80078fc <VL53L0X_GetMeasurementDataReady>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d110      	bne.n	8008d26 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d00f      	beq.n	8008d2a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d16:	d302      	bcc.n	8008d1e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008d18:	23f9      	movs	r3, #249	; 0xf9
 8008d1a:	75fb      	strb	r3, [r7, #23]
			break;
 8008d1c:	e006      	b.n	8008d2c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f002 fc82 	bl	800b628 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008d24:	e7e2      	b.n	8008cec <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008d26:	bf00      	nop
 8008d28:	e000      	b.n	8008d2c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008d2a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	4603      	mov	r3, r0
 8008d66:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	085b      	lsrs	r3, r3, #1
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	3b01      	subs	r3, #1
 8008d74:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d94:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008d96:	e002      	b.n	8008d9e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d8f8      	bhi.n	8008d98 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008da6:	e017      	b.n	8008dd8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	4413      	add	r3, r2
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d30b      	bcc.n	8008dcc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	4413      	add	r3, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	e002      	b.n	8008dd2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	089b      	lsrs	r3, r3, #2
 8008dd6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e4      	bne.n	8008da8 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2183      	movs	r1, #131	; 0x83
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f002 faf3 	bl	800b3e8 <VL53L0X_WrByte>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d11e      	bne.n	8008e52 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008e18:	f107 030f 	add.w	r3, r7, #15
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	2183      	movs	r1, #131	; 0x83
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f002 fb63 	bl	800b4ec <VL53L0X_RdByte>
 8008e26:	4603      	mov	r3, r0
 8008e28:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <VL53L0X_device_read_strobe+0x5a>
 8008e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e44:	d3e8      	bcc.n	8008e18 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e4c:	d301      	bcc.n	8008e52 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008e4e:	23f9      	movs	r3, #249	; 0xf9
 8008e50:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008e52:	2201      	movs	r2, #1
 8008e54:	2183      	movs	r1, #131	; 0x83
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f002 fac6 	bl	800b3e8 <VL53L0X_WrByte>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	461a      	mov	r2, r3
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e66:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b098      	sub	sp, #96	; 0x60
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008ea2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008ea6:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008eba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008ebe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ec2:	2b07      	cmp	r3, #7
 8008ec4:	f000 8408 	beq.w	80096d8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008ec8:	2201      	movs	r2, #1
 8008eca:	2180      	movs	r1, #128	; 0x80
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f002 fa8b 	bl	800b3e8 <VL53L0X_WrByte>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eda:	4313      	orrs	r3, r2
 8008edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	21ff      	movs	r1, #255	; 0xff
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f002 fa7f 	bl	800b3e8 <VL53L0X_WrByte>
 8008eea:	4603      	mov	r3, r0
 8008eec:	461a      	mov	r2, r3
 8008eee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f002 fa73 	bl	800b3e8 <VL53L0X_WrByte>
 8008f02:	4603      	mov	r3, r0
 8008f04:	461a      	mov	r2, r3
 8008f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008f10:	2206      	movs	r2, #6
 8008f12:	21ff      	movs	r1, #255	; 0xff
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f002 fa67 	bl	800b3e8 <VL53L0X_WrByte>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f22:	4313      	orrs	r3, r2
 8008f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008f28:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	2183      	movs	r1, #131	; 0x83
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f002 fadb 	bl	800b4ec <VL53L0X_RdByte>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f48:	f043 0304 	orr.w	r3, r3, #4
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	2183      	movs	r1, #131	; 0x83
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f002 fa48 	bl	800b3e8 <VL53L0X_WrByte>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f60:	4313      	orrs	r3, r2
 8008f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008f66:	2207      	movs	r2, #7
 8008f68:	21ff      	movs	r1, #255	; 0xff
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f002 fa3c 	bl	800b3e8 <VL53L0X_WrByte>
 8008f70:	4603      	mov	r3, r0
 8008f72:	461a      	mov	r2, r3
 8008f74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008f7e:	2201      	movs	r2, #1
 8008f80:	2181      	movs	r1, #129	; 0x81
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f002 fa30 	bl	800b3e8 <VL53L0X_WrByte>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f90:	4313      	orrs	r3, r2
 8008f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f002 fb46 	bl	800b628 <VL53L0X_PollingDelay>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008faa:	2201      	movs	r2, #1
 8008fac:	2180      	movs	r1, #128	; 0x80
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f002 fa1a 	bl	800b3e8 <VL53L0X_WrByte>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8098 	beq.w	80090fe <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008fce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fd2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 8091 	bne.w	80090fe <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008fdc:	226b      	movs	r2, #107	; 0x6b
 8008fde:	2194      	movs	r1, #148	; 0x94
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f002 fa01 	bl	800b3e8 <VL53L0X_WrByte>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fef9 	bl	8008dec <VL53L0X_device_read_strobe>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009002:	4313      	orrs	r3, r2
 8009004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009008:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800900c:	461a      	mov	r2, r3
 800900e:	2190      	movs	r1, #144	; 0x90
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f002 facd 	bl	800b5b0 <VL53L0X_RdDWord>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
 800901a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800901e:	4313      	orrs	r3, r2
 8009020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b2db      	uxtb	r3, r3
 800902a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	0bdb      	lsrs	r3, r3, #15
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009040:	2224      	movs	r2, #36	; 0x24
 8009042:	2194      	movs	r1, #148	; 0x94
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f002 f9cf 	bl	800b3e8 <VL53L0X_WrByte>
 800904a:	4603      	mov	r3, r0
 800904c:	461a      	mov	r2, r3
 800904e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009052:	4313      	orrs	r3, r2
 8009054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff fec7 	bl	8008dec <VL53L0X_device_read_strobe>
 800905e:	4603      	mov	r3, r0
 8009060:	461a      	mov	r2, r3
 8009062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009066:	4313      	orrs	r3, r2
 8009068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800906c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009070:	461a      	mov	r2, r3
 8009072:	2190      	movs	r1, #144	; 0x90
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f002 fa9b 	bl	800b5b0 <VL53L0X_RdDWord>
 800907a:	4603      	mov	r3, r0
 800907c:	461a      	mov	r2, r3
 800907e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009082:	4313      	orrs	r3, r2
 8009084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	0e1b      	lsrs	r3, r3, #24
 800908c:	b2db      	uxtb	r3, r3
 800908e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	0c1b      	lsrs	r3, r3, #16
 8009094:	b2db      	uxtb	r3, r3
 8009096:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	0a1b      	lsrs	r3, r3, #8
 800909c:	b2db      	uxtb	r3, r3
 800909e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80090a6:	2225      	movs	r2, #37	; 0x25
 80090a8:	2194      	movs	r1, #148	; 0x94
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f002 f99c 	bl	800b3e8 <VL53L0X_WrByte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff fe94 	bl	8008dec <VL53L0X_device_read_strobe>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80090d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090d6:	461a      	mov	r2, r3
 80090d8:	2190      	movs	r1, #144	; 0x90
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f002 fa68 	bl	800b5b0 <VL53L0X_RdDWord>
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	0e1b      	lsrs	r3, r3, #24
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	0c1b      	lsrs	r3, r3, #16
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 8189 	beq.w	800941c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800910a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800910e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009112:	2b00      	cmp	r3, #0
 8009114:	f040 8182 	bne.w	800941c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009118:	2202      	movs	r2, #2
 800911a:	2194      	movs	r1, #148	; 0x94
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f002 f963 	bl	800b3e8 <VL53L0X_WrByte>
 8009122:	4603      	mov	r3, r0
 8009124:	461a      	mov	r2, r3
 8009126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800912a:	4313      	orrs	r3, r2
 800912c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fe5b 	bl	8008dec <VL53L0X_device_read_strobe>
 8009136:	4603      	mov	r3, r0
 8009138:	461a      	mov	r2, r3
 800913a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800913e:	4313      	orrs	r3, r2
 8009140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009144:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009148:	461a      	mov	r2, r3
 800914a:	2190      	movs	r1, #144	; 0x90
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f002 f9cd 	bl	800b4ec <VL53L0X_RdByte>
 8009152:	4603      	mov	r3, r0
 8009154:	461a      	mov	r2, r3
 8009156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800915a:	4313      	orrs	r3, r2
 800915c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009160:	227b      	movs	r2, #123	; 0x7b
 8009162:	2194      	movs	r1, #148	; 0x94
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f002 f93f 	bl	800b3e8 <VL53L0X_WrByte>
 800916a:	4603      	mov	r3, r0
 800916c:	461a      	mov	r2, r3
 800916e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009172:	4313      	orrs	r3, r2
 8009174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff fe37 	bl	8008dec <VL53L0X_device_read_strobe>
 800917e:	4603      	mov	r3, r0
 8009180:	461a      	mov	r2, r3
 8009182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009186:	4313      	orrs	r3, r2
 8009188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800918c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009190:	461a      	mov	r2, r3
 8009192:	2190      	movs	r1, #144	; 0x90
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f002 f9a9 	bl	800b4ec <VL53L0X_RdByte>
 800919a:	4603      	mov	r3, r0
 800919c:	461a      	mov	r2, r3
 800919e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80091a8:	2277      	movs	r2, #119	; 0x77
 80091aa:	2194      	movs	r1, #148	; 0x94
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f002 f91b 	bl	800b3e8 <VL53L0X_WrByte>
 80091b2:	4603      	mov	r3, r0
 80091b4:	461a      	mov	r2, r3
 80091b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fe13 	bl	8008dec <VL53L0X_device_read_strobe>
 80091c6:	4603      	mov	r3, r0
 80091c8:	461a      	mov	r2, r3
 80091ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80091d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091d8:	461a      	mov	r2, r3
 80091da:	2190      	movs	r1, #144	; 0x90
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f002 f9e7 	bl	800b5b0 <VL53L0X_RdDWord>
 80091e2:	4603      	mov	r3, r0
 80091e4:	461a      	mov	r2, r3
 80091e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091ea:	4313      	orrs	r3, r2
 80091ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	0e5b      	lsrs	r3, r3, #25
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	0c9b      	lsrs	r3, r3, #18
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009208:	b2db      	uxtb	r3, r3
 800920a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	0adb      	lsrs	r3, r3, #11
 8009210:	b2db      	uxtb	r3, r3
 8009212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009216:	b2db      	uxtb	r3, r3
 8009218:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	091b      	lsrs	r3, r3, #4
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009224:	b2db      	uxtb	r3, r3
 8009226:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	b2db      	uxtb	r3, r3
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009234:	b2db      	uxtb	r3, r3
 8009236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800923a:	2278      	movs	r2, #120	; 0x78
 800923c:	2194      	movs	r1, #148	; 0x94
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f002 f8d2 	bl	800b3e8 <VL53L0X_WrByte>
 8009244:	4603      	mov	r3, r0
 8009246:	461a      	mov	r2, r3
 8009248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800924c:	4313      	orrs	r3, r2
 800924e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff fdca 	bl	8008dec <VL53L0X_device_read_strobe>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009260:	4313      	orrs	r3, r2
 8009262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800926a:	461a      	mov	r2, r3
 800926c:	2190      	movs	r1, #144	; 0x90
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f002 f99e 	bl	800b5b0 <VL53L0X_RdDWord>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800927c:	4313      	orrs	r3, r2
 800927e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	0f5b      	lsrs	r3, r3, #29
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800928e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009292:	4413      	add	r3, r2
 8009294:	b2db      	uxtb	r3, r3
 8009296:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	0d9b      	lsrs	r3, r3, #22
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	0bdb      	lsrs	r3, r3, #15
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	019b      	lsls	r3, r3, #6
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80092e2:	2279      	movs	r2, #121	; 0x79
 80092e4:	2194      	movs	r1, #148	; 0x94
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f002 f87e 	bl	800b3e8 <VL53L0X_WrByte>
 80092ec:	4603      	mov	r3, r0
 80092ee:	461a      	mov	r2, r3
 80092f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092f4:	4313      	orrs	r3, r2
 80092f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff fd76 	bl	8008dec <VL53L0X_device_read_strobe>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009308:	4313      	orrs	r3, r2
 800930a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800930e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009312:	461a      	mov	r2, r3
 8009314:	2190      	movs	r1, #144	; 0x90
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f002 f94a 	bl	800b5b0 <VL53L0X_RdDWord>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009324:	4313      	orrs	r3, r2
 8009326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	0e9b      	lsrs	r3, r3, #26
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009334:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800933a:	4413      	add	r3, r2
 800933c:	b2db      	uxtb	r3, r3
 800933e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	0cdb      	lsrs	r3, r3, #19
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934a:	b2db      	uxtb	r3, r3
 800934c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	0b1b      	lsrs	r3, r3, #12
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009358:	b2db      	uxtb	r3, r3
 800935a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	095b      	lsrs	r3, r3, #5
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009366:	b2db      	uxtb	r3, r3
 8009368:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	b2db      	uxtb	r3, r3
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800937c:	227a      	movs	r2, #122	; 0x7a
 800937e:	2194      	movs	r1, #148	; 0x94
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f002 f831 	bl	800b3e8 <VL53L0X_WrByte>
 8009386:	4603      	mov	r3, r0
 8009388:	461a      	mov	r2, r3
 800938a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800938e:	4313      	orrs	r3, r2
 8009390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fd29 	bl	8008dec <VL53L0X_device_read_strobe>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093a2:	4313      	orrs	r3, r2
 80093a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80093a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093ac:	461a      	mov	r2, r3
 80093ae:	2190      	movs	r1, #144	; 0x90
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f002 f8fd 	bl	800b5b0 <VL53L0X_RdDWord>
 80093b6:	4603      	mov	r3, r0
 80093b8:	461a      	mov	r2, r3
 80093ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093be:	4313      	orrs	r3, r2
 80093c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	0f9b      	lsrs	r3, r3, #30
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ce:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80093d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093d4:	4413      	add	r3, r2
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	0ddb      	lsrs	r3, r3, #23
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	0c1b      	lsrs	r3, r3, #16
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	0a5b      	lsrs	r3, r3, #9
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	089b      	lsrs	r3, r3, #2
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009416:	2300      	movs	r3, #0
 8009418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 80f1 	beq.w	800960a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800942c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009430:	2b00      	cmp	r3, #0
 8009432:	f040 80ea 	bne.w	800960a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009436:	227b      	movs	r2, #123	; 0x7b
 8009438:	2194      	movs	r1, #148	; 0x94
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 ffd4 	bl	800b3e8 <VL53L0X_WrByte>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009448:	4313      	orrs	r3, r2
 800944a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff fccc 	bl	8008dec <VL53L0X_device_read_strobe>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800945c:	4313      	orrs	r3, r2
 800945e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009466:	461a      	mov	r2, r3
 8009468:	2190      	movs	r1, #144	; 0x90
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 f8a0 	bl	800b5b0 <VL53L0X_RdDWord>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009478:	4313      	orrs	r3, r2
 800947a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800947e:	227c      	movs	r2, #124	; 0x7c
 8009480:	2194      	movs	r1, #148	; 0x94
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 ffb0 	bl	800b3e8 <VL53L0X_WrByte>
 8009488:	4603      	mov	r3, r0
 800948a:	461a      	mov	r2, r3
 800948c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009490:	4313      	orrs	r3, r2
 8009492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff fca8 	bl	8008dec <VL53L0X_device_read_strobe>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80094aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ae:	461a      	mov	r2, r3
 80094b0:	2190      	movs	r1, #144	; 0x90
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f002 f87c 	bl	800b5b0 <VL53L0X_RdDWord>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094c0:	4313      	orrs	r3, r2
 80094c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80094c6:	2273      	movs	r2, #115	; 0x73
 80094c8:	2194      	movs	r1, #148	; 0x94
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 ff8c 	bl	800b3e8 <VL53L0X_WrByte>
 80094d0:	4603      	mov	r3, r0
 80094d2:	461a      	mov	r2, r3
 80094d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d8:	4313      	orrs	r3, r2
 80094da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff fc84 	bl	8008dec <VL53L0X_device_read_strobe>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094f6:	461a      	mov	r2, r3
 80094f8:	2190      	movs	r1, #144	; 0x90
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f002 f858 	bl	800b5b0 <VL53L0X_RdDWord>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009508:	4313      	orrs	r3, r2
 800950a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009512:	b29b      	uxth	r3, r3
 8009514:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009516:	2274      	movs	r2, #116	; 0x74
 8009518:	2194      	movs	r1, #148	; 0x94
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 ff64 	bl	800b3e8 <VL53L0X_WrByte>
 8009520:	4603      	mov	r3, r0
 8009522:	461a      	mov	r2, r3
 8009524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009528:	4313      	orrs	r3, r2
 800952a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7ff fc5c 	bl	8008dec <VL53L0X_device_read_strobe>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800953c:	4313      	orrs	r3, r2
 800953e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009546:	461a      	mov	r2, r3
 8009548:	2190      	movs	r1, #144	; 0x90
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f002 f830 	bl	800b5b0 <VL53L0X_RdDWord>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009558:	4313      	orrs	r3, r2
 800955a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009562:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009564:	4313      	orrs	r3, r2
 8009566:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009568:	2275      	movs	r2, #117	; 0x75
 800956a:	2194      	movs	r1, #148	; 0x94
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 ff3b 	bl	800b3e8 <VL53L0X_WrByte>
 8009572:	4603      	mov	r3, r0
 8009574:	461a      	mov	r2, r3
 8009576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800957a:	4313      	orrs	r3, r2
 800957c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff fc33 	bl	8008dec <VL53L0X_device_read_strobe>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800958e:	4313      	orrs	r3, r2
 8009590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009598:	461a      	mov	r2, r3
 800959a:	2190      	movs	r1, #144	; 0x90
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f002 f807 	bl	800b5b0 <VL53L0X_RdDWord>
 80095a2:	4603      	mov	r3, r0
 80095a4:	461a      	mov	r2, r3
 80095a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80095b8:	2276      	movs	r2, #118	; 0x76
 80095ba:	2194      	movs	r1, #148	; 0x94
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 ff13 	bl	800b3e8 <VL53L0X_WrByte>
 80095c2:	4603      	mov	r3, r0
 80095c4:	461a      	mov	r2, r3
 80095c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ca:	4313      	orrs	r3, r2
 80095cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff fc0b 	bl	8008dec <VL53L0X_device_read_strobe>
 80095d6:	4603      	mov	r3, r0
 80095d8:	461a      	mov	r2, r3
 80095da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095de:	4313      	orrs	r3, r2
 80095e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80095e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095e8:	461a      	mov	r2, r3
 80095ea:	2190      	movs	r1, #144	; 0x90
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 ffdf 	bl	800b5b0 <VL53L0X_RdDWord>
 80095f2:	4603      	mov	r3, r0
 80095f4:	461a      	mov	r2, r3
 80095f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095fa:	4313      	orrs	r3, r2
 80095fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009606:	4313      	orrs	r3, r2
 8009608:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800960a:	2200      	movs	r2, #0
 800960c:	2181      	movs	r1, #129	; 0x81
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 feea 	bl	800b3e8 <VL53L0X_WrByte>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800961c:	4313      	orrs	r3, r2
 800961e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009622:	2206      	movs	r2, #6
 8009624:	21ff      	movs	r1, #255	; 0xff
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 fede 	bl	800b3e8 <VL53L0X_WrByte>
 800962c:	4603      	mov	r3, r0
 800962e:	461a      	mov	r2, r3
 8009630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009634:	4313      	orrs	r3, r2
 8009636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800963a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800963e:	461a      	mov	r2, r3
 8009640:	2183      	movs	r1, #131	; 0x83
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 ff52 	bl	800b4ec <VL53L0X_RdByte>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009650:	4313      	orrs	r3, r2
 8009652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800965a:	f023 0304 	bic.w	r3, r3, #4
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	2183      	movs	r1, #131	; 0x83
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 febf 	bl	800b3e8 <VL53L0X_WrByte>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009672:	4313      	orrs	r3, r2
 8009674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009678:	2201      	movs	r2, #1
 800967a:	21ff      	movs	r1, #255	; 0xff
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 feb3 	bl	800b3e8 <VL53L0X_WrByte>
 8009682:	4603      	mov	r3, r0
 8009684:	461a      	mov	r2, r3
 8009686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800968a:	4313      	orrs	r3, r2
 800968c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009690:	2201      	movs	r2, #1
 8009692:	2100      	movs	r1, #0
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 fea7 	bl	800b3e8 <VL53L0X_WrByte>
 800969a:	4603      	mov	r3, r0
 800969c:	461a      	mov	r2, r3
 800969e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80096a8:	2200      	movs	r2, #0
 80096aa:	21ff      	movs	r1, #255	; 0xff
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 fe9b 	bl	800b3e8 <VL53L0X_WrByte>
 80096b2:	4603      	mov	r3, r0
 80096b4:	461a      	mov	r2, r3
 80096b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096ba:	4313      	orrs	r3, r2
 80096bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80096c0:	2200      	movs	r2, #0
 80096c2:	2180      	movs	r1, #128	; 0x80
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fe8f 	bl	800b3e8 <VL53L0X_WrByte>
 80096ca:	4603      	mov	r3, r0
 80096cc:	461a      	mov	r2, r3
 80096ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80096d8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 808f 	bne.w	8009800 <VL53L0X_get_info_from_device+0x98e>
 80096e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096e6:	2b07      	cmp	r3, #7
 80096e8:	f000 808a 	beq.w	8009800 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d024      	beq.n	8009740 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80096f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096fa:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d11e      	bne.n	8009740 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009708:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009712:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009716:	2300      	movs	r3, #0
 8009718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800971a:	e00e      	b.n	800973a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800971c:	f107 0208 	add.w	r2, r7, #8
 8009720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009722:	4413      	add	r3, r2
 8009724:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972a:	4413      	add	r3, r2
 800972c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009730:	460a      	mov	r2, r1
 8009732:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009736:	3301      	adds	r3, #1
 8009738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800973a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800973c:	2b05      	cmp	r3, #5
 800973e:	dded      	ble.n	800971c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d018      	beq.n	800977c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800974a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800974e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009752:	2b00      	cmp	r3, #0
 8009754:	d112      	bne.n	800977c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009756:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009760:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	33f3      	adds	r3, #243	; 0xf3
 800976e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009770:	f107 0310 	add.w	r3, r7, #16
 8009774:	4619      	mov	r1, r3
 8009776:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009778:	f001 ffc6 	bl	800b708 <strcpy>

		}

		if (((option & 4) == 4) &&
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b00      	cmp	r3, #0
 8009784:	d030      	beq.n	80097e8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009786:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800978a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800978e:	2b00      	cmp	r3, #0
 8009790:	d12a      	bne.n	80097e8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800979a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80097a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a4:	025b      	lsls	r3, r3, #9
 80097a6:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097ac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80097b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d011      	beq.n	80097e0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80097bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80097c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097ca:	fb02 f303 	mul.w	r3, r2, r3
 80097ce:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80097d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80097d4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80097d8:	425b      	negs	r3, r3
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80097e0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80097e8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80097f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009800:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009804:	4618      	mov	r0, r3
 8009806:	3760      	adds	r7, #96	; 0x60
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009818:	f240 6277 	movw	r2, #1655	; 0x677
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009824:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009828:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800983a:	68bb      	ldr	r3, [r7, #8]
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d017      	beq.n	8009892 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3b01      	subs	r3, #1
 8009866:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009868:	e005      	b.n	8009876 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	085b      	lsrs	r3, r3, #1
 800986e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009870:	89fb      	ldrh	r3, [r7, #14]
 8009872:	3301      	adds	r3, #1
 8009874:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1f4      	bne.n	800986a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009880:	89fb      	ldrh	r3, [r7, #14]
 8009882:	021b      	lsls	r3, r3, #8
 8009884:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	b29b      	uxth	r3, r3
 800988a:	b2db      	uxtb	r3, r3
 800988c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800988e:	4413      	add	r3, r2
 8009890:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009892:	8afb      	ldrh	r3, [r7, #22]

}
 8009894:	4618      	mov	r0, r3
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80098ae:	88fb      	ldrh	r3, [r7, #6]
 80098b0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80098b2:	88fa      	ldrh	r2, [r7, #6]
 80098b4:	0a12      	lsrs	r2, r2, #8
 80098b6:	b292      	uxth	r2, r2
 80098b8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80098be:	68fb      	ldr	r3, [r7, #12]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	4613      	mov	r3, r2
 80098d8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	4619      	mov	r1, r3
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7ff ff92 	bl	800980c <VL53L0X_calc_macro_period_ps>
 80098e8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80098f0:	4a0a      	ldr	r2, [pc, #40]	; (800991c <VL53L0X_calc_timeout_mclks+0x50>)
 80098f2:	fba2 2303 	umull	r2, r3, r2, r3
 80098f6:	099b      	lsrs	r3, r3, #6
 80098f8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009900:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	441a      	add	r2, r3
	timeout_period_mclks =
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009910:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009912:	69fb      	ldr	r3, [r7, #28]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3720      	adds	r7, #32
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	10624dd3 	.word	0x10624dd3

08009920 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	807b      	strh	r3, [r7, #2]
 800992c:	4613      	mov	r3, r2
 800992e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009934:	787b      	ldrb	r3, [r7, #1]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ff67 	bl	800980c <VL53L0X_calc_macro_period_ps>
 800993e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009946:	4a0a      	ldr	r2, [pc, #40]	; (8009970 <VL53L0X_calc_timeout_us+0x50>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	099b      	lsrs	r3, r3, #6
 800994e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009950:	887b      	ldrh	r3, [r7, #2]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	fb02 f303 	mul.w	r3, r2, r3
 8009958:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800995c:	4a04      	ldr	r2, [pc, #16]	; (8009970 <VL53L0X_calc_timeout_us+0x50>)
 800995e:	fba2 2303 	umull	r2, r3, r2, r3
 8009962:	099b      	lsrs	r3, r3, #6
 8009964:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009966:	697b      	ldr	r3, [r7, #20]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	10624dd3 	.word	0x10624dd3

08009974 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b08c      	sub	sp, #48	; 0x30
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	460b      	mov	r3, r1
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009982:	2300      	movs	r3, #0
 8009984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800999a:	7afb      	ldrb	r3, [r7, #11]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <get_sequence_step_timeout+0x38>
 80099a0:	7afb      	ldrb	r3, [r7, #11]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d002      	beq.n	80099ac <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d128      	bne.n	80099fe <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80099ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80099b0:	461a      	mov	r2, r3
 80099b2:	2100      	movs	r1, #0
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7fd fa7d 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80099c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80099c8:	f107 0320 	add.w	r3, r7, #32
 80099cc:	461a      	mov	r2, r3
 80099ce:	2146      	movs	r1, #70	; 0x46
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f001 fd8b 	bl	800b4ec <VL53L0X_RdByte>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80099dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff ff5c 	bl	80098a0 <VL53L0X_decode_timeout>
 80099e8:	4603      	mov	r3, r0
 80099ea:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80099ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80099f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099f2:	4619      	mov	r1, r3
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff ff93 	bl	8009920 <VL53L0X_calc_timeout_us>
 80099fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80099fc:	e092      	b.n	8009b24 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80099fe:	7afb      	ldrb	r3, [r7, #11]
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d135      	bne.n	8009a70 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a04:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7fd fa51 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009a18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 8081 	bne.w	8009b24 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a22:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a26:	461a      	mov	r2, r3
 8009a28:	2100      	movs	r1, #0
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7fd fa42 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009a36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d109      	bne.n	8009a52 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009a3e:	f107 031e 	add.w	r3, r7, #30
 8009a42:	461a      	mov	r2, r3
 8009a44:	2151      	movs	r1, #81	; 0x51
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f001 fd7a 	bl	800b540 <VL53L0X_RdWord>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009a52:	8bfb      	ldrh	r3, [r7, #30]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff ff23 	bl	80098a0 <VL53L0X_decode_timeout>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009a5e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a64:	4619      	mov	r1, r3
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7ff ff5a 	bl	8009920 <VL53L0X_calc_timeout_us>
 8009a6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a6e:	e059      	b.n	8009b24 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d156      	bne.n	8009b24 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009a76:	f107 0314 	add.w	r3, r7, #20
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7fd fb25 	bl	80070cc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01d      	beq.n	8009ac8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a8c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a90:	461a      	mov	r2, r3
 8009a92:	2100      	movs	r1, #0
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7fd fa0d 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009aa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10f      	bne.n	8009ac8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009aa8:	f107 031e 	add.w	r3, r7, #30
 8009aac:	461a      	mov	r2, r3
 8009aae:	2151      	movs	r1, #81	; 0x51
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f001 fd45 	bl	800b540 <VL53L0X_RdWord>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009abc:	8bfb      	ldrh	r3, [r7, #30]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff feee 	bl	80098a0 <VL53L0X_decode_timeout>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009ac8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ad0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7fd f9eb 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009ae4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10f      	bne.n	8009b0c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009aec:	f107 031c 	add.w	r3, r7, #28
 8009af0:	461a      	mov	r2, r3
 8009af2:	2171      	movs	r1, #113	; 0x71
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f001 fd23 	bl	800b540 <VL53L0X_RdWord>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009b00:	8bbb      	ldrh	r3, [r7, #28]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7ff fecc 	bl	80098a0 <VL53L0X_decode_timeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009b0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009b14:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7ff feff 	bl	8009920 <VL53L0X_calc_timeout_us>
 8009b22:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b28:	601a      	str	r2, [r3, #0]

	return Status;
 8009b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3730      	adds	r7, #48	; 0x30
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b08a      	sub	sp, #40	; 0x28
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009b4a:	7afb      	ldrb	r3, [r7, #11]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <set_sequence_step_timeout+0x26>
 8009b50:	7afb      	ldrb	r3, [r7, #11]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d002      	beq.n	8009b5c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d138      	bne.n	8009bce <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b5c:	f107 031b 	add.w	r3, r7, #27
 8009b60:	461a      	mov	r2, r3
 8009b62:	2100      	movs	r1, #0
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7fd f9a5 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009b70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d11a      	bne.n	8009bae <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009b78:	7efb      	ldrb	r3, [r7, #27]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff fea4 	bl	80098cc <VL53L0X_calc_timeout_mclks>
 8009b84:	4603      	mov	r3, r0
 8009b86:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009b88:	8bbb      	ldrh	r3, [r7, #28]
 8009b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b8e:	d903      	bls.n	8009b98 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009b90:	23ff      	movs	r3, #255	; 0xff
 8009b92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b96:	e004      	b.n	8009ba2 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009b98:	8bbb      	ldrh	r3, [r7, #28]
 8009b9a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009bae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f040 80ab 	bne.w	8009d0e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	2146      	movs	r1, #70	; 0x46
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f001 fc11 	bl	800b3e8 <VL53L0X_WrByte>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009bcc:	e09f      	b.n	8009d0e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d135      	bne.n	8009c40 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11b      	bne.n	8009c14 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009bdc:	f107 031b 	add.w	r3, r7, #27
 8009be0:	461a      	mov	r2, r3
 8009be2:	2100      	movs	r1, #0
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7fd f965 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009bf0:	7efb      	ldrb	r3, [r7, #27]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7ff fe68 	bl	80098cc <VL53L0X_calc_timeout_mclks>
 8009bfc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff fe20 	bl	8009848 <VL53L0X_encode_timeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c0c:	8b3a      	ldrh	r2, [r7, #24]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009c14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d108      	bne.n	8009c2e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009c1c:	8b3b      	ldrh	r3, [r7, #24]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	2151      	movs	r1, #81	; 0x51
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f001 fc04 	bl	800b430 <VL53L0X_WrWord>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d16b      	bne.n	8009d0e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009c3e:	e066      	b.n	8009d0e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009c40:	7afb      	ldrb	r3, [r7, #11]
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d160      	bne.n	8009d08 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009c46:	f107 0310 	add.w	r3, r7, #16
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7fd fa3d 	bl	80070cc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009c56:	7cfb      	ldrb	r3, [r7, #19]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01d      	beq.n	8009c98 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009c5c:	f107 031b 	add.w	r3, r7, #27
 8009c60:	461a      	mov	r2, r3
 8009c62:	2100      	movs	r1, #0
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7fd f925 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10f      	bne.n	8009c98 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009c78:	f107 0318 	add.w	r3, r7, #24
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	2151      	movs	r1, #81	; 0x51
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f001 fc5d 	bl	800b540 <VL53L0X_RdWord>
 8009c86:	4603      	mov	r3, r0
 8009c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009c8c:	8b3b      	ldrh	r3, [r7, #24]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff fe06 	bl	80098a0 <VL53L0X_decode_timeout>
 8009c94:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009c96:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d109      	bne.n	8009cb4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ca0:	f107 031b 	add.w	r3, r7, #27
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7fd f903 	bl	8006eb4 <VL53L0X_GetVcselPulsePeriod>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d128      	bne.n	8009d0e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009cbc:	7efb      	ldrb	r3, [r7, #27]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7ff fe02 	bl	80098cc <VL53L0X_calc_timeout_mclks>
 8009cc8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ccc:	6a3a      	ldr	r2, [r7, #32]
 8009cce:	4413      	add	r3, r2
 8009cd0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009cd2:	6a38      	ldr	r0, [r7, #32]
 8009cd4:	f7ff fdb8 	bl	8009848 <VL53L0X_encode_timeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009cdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d108      	bne.n	8009cf6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009ce4:	8bfb      	ldrh	r3, [r7, #30]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	2171      	movs	r1, #113	; 0x71
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f001 fba0 	bl	800b430 <VL53L0X_WrWord>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009cf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d107      	bne.n	8009d0e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009d06:	e002      	b.n	8009d0e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d08:	23fc      	movs	r3, #252	; 0xfc
 8009d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009d0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3728      	adds	r7, #40	; 0x28
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b08a      	sub	sp, #40	; 0x28
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
 8009d26:	4613      	mov	r3, r2
 8009d28:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009d30:	230c      	movs	r3, #12
 8009d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009d36:	2312      	movs	r3, #18
 8009d38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009d42:	230e      	movs	r3, #14
 8009d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009d4c:	78bb      	ldrb	r3, [r7, #2]
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d58:	23fc      	movs	r3, #252	; 0xfc
 8009d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d5e:	e020      	b.n	8009da2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10d      	bne.n	8009d82 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009d66:	78ba      	ldrb	r2, [r7, #2]
 8009d68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d304      	bcc.n	8009d7a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009d70:	78ba      	ldrb	r2, [r7, #2]
 8009d72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d903      	bls.n	8009d82 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d7a:	23fc      	movs	r3, #252	; 0xfc
 8009d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d80:	e00f      	b.n	8009da2 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009d82:	78fb      	ldrb	r3, [r7, #3]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10c      	bne.n	8009da2 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009d88:	78ba      	ldrb	r2, [r7, #2]
 8009d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d304      	bcc.n	8009d9c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009d92:	78ba      	ldrb	r2, [r7, #2]
 8009d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d902      	bls.n	8009da2 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d9c:	23fc      	movs	r3, #252	; 0xfc
 8009d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009da2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009daa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dae:	e239      	b.n	800a224 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d150      	bne.n	8009e58 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009db6:	78bb      	ldrb	r3, [r7, #2]
 8009db8:	2b0c      	cmp	r3, #12
 8009dba:	d110      	bne.n	8009dde <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009dbc:	2218      	movs	r2, #24
 8009dbe:	2157      	movs	r1, #87	; 0x57
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 fb11 	bl	800b3e8 <VL53L0X_WrByte>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009dcc:	2208      	movs	r2, #8
 8009dce:	2156      	movs	r1, #86	; 0x56
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 fb09 	bl	800b3e8 <VL53L0X_WrByte>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ddc:	e17f      	b.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009dde:	78bb      	ldrb	r3, [r7, #2]
 8009de0:	2b0e      	cmp	r3, #14
 8009de2:	d110      	bne.n	8009e06 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009de4:	2230      	movs	r2, #48	; 0x30
 8009de6:	2157      	movs	r1, #87	; 0x57
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 fafd 	bl	800b3e8 <VL53L0X_WrByte>
 8009dee:	4603      	mov	r3, r0
 8009df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009df4:	2208      	movs	r2, #8
 8009df6:	2156      	movs	r1, #86	; 0x56
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 faf5 	bl	800b3e8 <VL53L0X_WrByte>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e04:	e16b      	b.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009e06:	78bb      	ldrb	r3, [r7, #2]
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d110      	bne.n	8009e2e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009e0c:	2240      	movs	r2, #64	; 0x40
 8009e0e:	2157      	movs	r1, #87	; 0x57
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 fae9 	bl	800b3e8 <VL53L0X_WrByte>
 8009e16:	4603      	mov	r3, r0
 8009e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009e1c:	2208      	movs	r2, #8
 8009e1e:	2156      	movs	r1, #86	; 0x56
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 fae1 	bl	800b3e8 <VL53L0X_WrByte>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e2c:	e157      	b.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009e2e:	78bb      	ldrb	r3, [r7, #2]
 8009e30:	2b12      	cmp	r3, #18
 8009e32:	f040 8154 	bne.w	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009e36:	2250      	movs	r2, #80	; 0x50
 8009e38:	2157      	movs	r1, #87	; 0x57
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fad4 	bl	800b3e8 <VL53L0X_WrByte>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009e46:	2208      	movs	r2, #8
 8009e48:	2156      	movs	r1, #86	; 0x56
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 facc 	bl	800b3e8 <VL53L0X_WrByte>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e56:	e142      	b.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	f040 813f 	bne.w	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009e60:	78bb      	ldrb	r3, [r7, #2]
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	d14c      	bne.n	8009f00 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009e66:	2210      	movs	r2, #16
 8009e68:	2148      	movs	r1, #72	; 0x48
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 fabc 	bl	800b3e8 <VL53L0X_WrByte>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009e76:	2208      	movs	r2, #8
 8009e78:	2147      	movs	r1, #71	; 0x47
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fab4 	bl	800b3e8 <VL53L0X_WrByte>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009e86:	2202      	movs	r2, #2
 8009e88:	2132      	movs	r1, #50	; 0x32
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 faac 	bl	800b3e8 <VL53L0X_WrByte>
 8009e90:	4603      	mov	r3, r0
 8009e92:	461a      	mov	r2, r3
 8009e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009e9e:	220c      	movs	r2, #12
 8009ea0:	2130      	movs	r1, #48	; 0x30
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 faa0 	bl	800b3e8 <VL53L0X_WrByte>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	21ff      	movs	r1, #255	; 0xff
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 fa94 	bl	800b3e8 <VL53L0X_WrByte>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009ece:	2230      	movs	r2, #48	; 0x30
 8009ed0:	2130      	movs	r1, #48	; 0x30
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 fa88 	bl	800b3e8 <VL53L0X_WrByte>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	21ff      	movs	r1, #255	; 0xff
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 fa7c 	bl	800b3e8 <VL53L0X_WrByte>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009efe:	e0ee      	b.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009f00:	78bb      	ldrb	r3, [r7, #2]
 8009f02:	2b0a      	cmp	r3, #10
 8009f04:	d14c      	bne.n	8009fa0 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009f06:	2228      	movs	r2, #40	; 0x28
 8009f08:	2148      	movs	r1, #72	; 0x48
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 fa6c 	bl	800b3e8 <VL53L0X_WrByte>
 8009f10:	4603      	mov	r3, r0
 8009f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009f16:	2208      	movs	r2, #8
 8009f18:	2147      	movs	r1, #71	; 0x47
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fa64 	bl	800b3e8 <VL53L0X_WrByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009f26:	2203      	movs	r2, #3
 8009f28:	2132      	movs	r1, #50	; 0x32
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fa5c 	bl	800b3e8 <VL53L0X_WrByte>
 8009f30:	4603      	mov	r3, r0
 8009f32:	461a      	mov	r2, r3
 8009f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009f3e:	2209      	movs	r2, #9
 8009f40:	2130      	movs	r1, #48	; 0x30
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fa50 	bl	800b3e8 <VL53L0X_WrByte>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f50:	4313      	orrs	r3, r2
 8009f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009f56:	2201      	movs	r2, #1
 8009f58:	21ff      	movs	r1, #255	; 0xff
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 fa44 	bl	800b3e8 <VL53L0X_WrByte>
 8009f60:	4603      	mov	r3, r0
 8009f62:	461a      	mov	r2, r3
 8009f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009f6e:	2220      	movs	r2, #32
 8009f70:	2130      	movs	r1, #48	; 0x30
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fa38 	bl	800b3e8 <VL53L0X_WrByte>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f80:	4313      	orrs	r3, r2
 8009f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009f86:	2200      	movs	r2, #0
 8009f88:	21ff      	movs	r1, #255	; 0xff
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fa2c 	bl	800b3e8 <VL53L0X_WrByte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f9e:	e09e      	b.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009fa0:	78bb      	ldrb	r3, [r7, #2]
 8009fa2:	2b0c      	cmp	r3, #12
 8009fa4:	d14c      	bne.n	800a040 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009fa6:	2238      	movs	r2, #56	; 0x38
 8009fa8:	2148      	movs	r1, #72	; 0x48
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f001 fa1c 	bl	800b3e8 <VL53L0X_WrByte>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	2147      	movs	r1, #71	; 0x47
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 fa14 	bl	800b3e8 <VL53L0X_WrByte>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009fc6:	2203      	movs	r2, #3
 8009fc8:	2132      	movs	r1, #50	; 0x32
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fa0c 	bl	800b3e8 <VL53L0X_WrByte>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009fde:	2208      	movs	r2, #8
 8009fe0:	2130      	movs	r1, #48	; 0x30
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 fa00 	bl	800b3e8 <VL53L0X_WrByte>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	461a      	mov	r2, r3
 8009fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	21ff      	movs	r1, #255	; 0xff
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 f9f4 	bl	800b3e8 <VL53L0X_WrByte>
 800a000:	4603      	mov	r3, r0
 800a002:	461a      	mov	r2, r3
 800a004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a008:	4313      	orrs	r3, r2
 800a00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a00e:	2220      	movs	r2, #32
 800a010:	2130      	movs	r1, #48	; 0x30
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 f9e8 	bl	800b3e8 <VL53L0X_WrByte>
 800a018:	4603      	mov	r3, r0
 800a01a:	461a      	mov	r2, r3
 800a01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a020:	4313      	orrs	r3, r2
 800a022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a026:	2200      	movs	r2, #0
 800a028:	21ff      	movs	r1, #255	; 0xff
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 f9dc 	bl	800b3e8 <VL53L0X_WrByte>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a038:	4313      	orrs	r3, r2
 800a03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a03e:	e04e      	b.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a040:	78bb      	ldrb	r3, [r7, #2]
 800a042:	2b0e      	cmp	r3, #14
 800a044:	d14b      	bne.n	800a0de <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a046:	2248      	movs	r2, #72	; 0x48
 800a048:	2148      	movs	r1, #72	; 0x48
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 f9cc 	bl	800b3e8 <VL53L0X_WrByte>
 800a050:	4603      	mov	r3, r0
 800a052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a056:	2208      	movs	r2, #8
 800a058:	2147      	movs	r1, #71	; 0x47
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 f9c4 	bl	800b3e8 <VL53L0X_WrByte>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a066:	2203      	movs	r2, #3
 800a068:	2132      	movs	r1, #50	; 0x32
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f001 f9bc 	bl	800b3e8 <VL53L0X_WrByte>
 800a070:	4603      	mov	r3, r0
 800a072:	461a      	mov	r2, r3
 800a074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a078:	4313      	orrs	r3, r2
 800a07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a07e:	2207      	movs	r2, #7
 800a080:	2130      	movs	r1, #48	; 0x30
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 f9b0 	bl	800b3e8 <VL53L0X_WrByte>
 800a088:	4603      	mov	r3, r0
 800a08a:	461a      	mov	r2, r3
 800a08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a090:	4313      	orrs	r3, r2
 800a092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a096:	2201      	movs	r2, #1
 800a098:	21ff      	movs	r1, #255	; 0xff
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 f9a4 	bl	800b3e8 <VL53L0X_WrByte>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	2130      	movs	r1, #48	; 0x30
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f001 f998 	bl	800b3e8 <VL53L0X_WrByte>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	21ff      	movs	r1, #255	; 0xff
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 f98c 	bl	800b3e8 <VL53L0X_WrByte>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a0de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d17f      	bne.n	800a1e6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a0e6:	78bb      	ldrb	r3, [r7, #2]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe fe38 	bl	8008d5e <VL53L0X_encode_vcsel_period>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d045      	beq.n	800a18a <VL53L0X_set_vcsel_pulse_period+0x470>
 800a0fe:	e06e      	b.n	800a1de <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a100:	f107 0314 	add.w	r3, r7, #20
 800a104:	461a      	mov	r2, r3
 800a106:	2103      	movs	r1, #3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff fc33 	bl	8009974 <get_sequence_step_timeout>
 800a10e:	4603      	mov	r3, r0
 800a110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a11c:	f107 0310 	add.w	r3, r7, #16
 800a120:	461a      	mov	r2, r3
 800a122:	2102      	movs	r1, #2
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff fc25 	bl	8009974 <get_sequence_step_timeout>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a134:	2b00      	cmp	r3, #0
 800a136:	d109      	bne.n	800a14c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a138:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a13c:	461a      	mov	r2, r3
 800a13e:	2150      	movs	r1, #80	; 0x50
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f001 f951 	bl	800b3e8 <VL53L0X_WrByte>
 800a146:	4603      	mov	r3, r0
 800a148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a14c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a150:	2b00      	cmp	r3, #0
 800a152:	d108      	bne.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	461a      	mov	r2, r3
 800a158:	2103      	movs	r1, #3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7ff fceb 	bl	8009b36 <set_sequence_step_timeout>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a166:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d108      	bne.n	800a180 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	461a      	mov	r2, r3
 800a172:	2102      	movs	r1, #2
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fcde 	bl	8009b36 <set_sequence_step_timeout>
 800a17a:	4603      	mov	r3, r0
 800a17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	78ba      	ldrb	r2, [r7, #2]
 800a184:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a188:	e02e      	b.n	800a1e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a18a:	f107 0318 	add.w	r3, r7, #24
 800a18e:	461a      	mov	r2, r3
 800a190:	2104      	movs	r1, #4
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff fbee 	bl	8009974 <get_sequence_step_timeout>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a19e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d109      	bne.n	800a1ba <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a1a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	2170      	movs	r1, #112	; 0x70
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 f91a 	bl	800b3e8 <VL53L0X_WrByte>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a1ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d108      	bne.n	800a1d4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	2104      	movs	r1, #4
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fcb4 	bl	8009b36 <set_sequence_step_timeout>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	78ba      	ldrb	r2, [r7, #2]
 800a1d8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a1dc:	e004      	b.n	800a1e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1de:	23fc      	movs	r3, #252	; 0xfc
 800a1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1e4:	e000      	b.n	800a1e8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a1e6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a1e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d109      	bne.n	800a204 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a1f6:	69f9      	ldr	r1, [r7, #28]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7fc fe1d 	bl	8006e38 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d109      	bne.n	800a220 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a20c:	f107 010f 	add.w	r1, r7, #15
 800a210:	2301      	movs	r3, #1
 800a212:	2200      	movs	r2, #0
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7fe fcbd 	bl	8008b94 <VL53L0X_perform_phase_calibration>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a220:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a224:	4618      	mov	r0, r3
 800a226:	3728      	adds	r7, #40	; 0x28
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	460b      	mov	r3, r1
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a244:	2b01      	cmp	r3, #1
 800a246:	d00a      	beq.n	800a25e <VL53L0X_get_vcsel_pulse_period+0x32>
 800a248:	e013      	b.n	800a272 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a24a:	f107 0316 	add.w	r3, r7, #22
 800a24e:	461a      	mov	r2, r3
 800a250:	2150      	movs	r1, #80	; 0x50
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f001 f94a 	bl	800b4ec <VL53L0X_RdByte>
 800a258:	4603      	mov	r3, r0
 800a25a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a25c:	e00b      	b.n	800a276 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a25e:	f107 0316 	add.w	r3, r7, #22
 800a262:	461a      	mov	r2, r3
 800a264:	2170      	movs	r1, #112	; 0x70
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f001 f940 	bl	800b4ec <VL53L0X_RdByte>
 800a26c:	4603      	mov	r3, r0
 800a26e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a270:	e001      	b.n	800a276 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a272:	23fc      	movs	r3, #252	; 0xfc
 800a274:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d107      	bne.n	800a28e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a27e:	7dbb      	ldrb	r3, [r7, #22]
 800a280:	4618      	mov	r0, r3
 800a282:	f7fe fd59 	bl	8008d38 <VL53L0X_decode_vcsel_period>
 800a286:	4603      	mov	r3, r0
 800a288:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	701a      	strb	r2, [r3, #0]

	return Status;
 800a28e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b092      	sub	sp, #72	; 0x48
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a2aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a2ae:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a2b0:	f240 7376 	movw	r3, #1910	; 0x776
 800a2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a2b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a2ba:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a2bc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a2c0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a2c2:	f240 234e 	movw	r3, #590	; 0x24e
 800a2c6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a2c8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a2ce:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a2d4:	f240 2326 	movw	r3, #550	; 0x226
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a2de:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a2e2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d205      	bcs.n	800a2fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2f0:	23fc      	movs	r3, #252	; 0xfc
 800a2f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a2f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a2fa:	e0aa      	b.n	800a452 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a2fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fc fedc 	bl	80070cc <VL53L0X_GetSequenceStepEnables>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a31a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d15b      	bne.n	800a3da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a322:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a324:	2b00      	cmp	r3, #0
 800a326:	d105      	bne.n	800a334 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a328:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a32e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a330:	2b00      	cmp	r3, #0
 800a332:	d052      	beq.n	800a3da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a334:	f107 0310 	add.w	r3, r7, #16
 800a338:	461a      	mov	r2, r3
 800a33a:	2102      	movs	r1, #2
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff fb19 	bl	8009974 <get_sequence_step_timeout>
 800a342:	4603      	mov	r3, r0
 800a344:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a348:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a350:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a354:	e07d      	b.n	800a452 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a356:	7d3b      	ldrb	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00f      	beq.n	800a37c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a35c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a360:	4413      	add	r3, r2
 800a362:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a368:	429a      	cmp	r2, r3
 800a36a:	d204      	bcs.n	800a376 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a36c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	643b      	str	r3, [r7, #64]	; 0x40
 800a374:	e002      	b.n	800a37c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a376:	23fc      	movs	r3, #252	; 0xfc
 800a378:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a37c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a384:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a388:	e063      	b.n	800a452 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a38a:	7dbb      	ldrb	r3, [r7, #22]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d011      	beq.n	800a3b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	4413      	add	r3, r2
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d204      	bcs.n	800a3ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a3a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3aa:	e016      	b.n	800a3da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3ac:	23fc      	movs	r3, #252	; 0xfc
 800a3ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a3b2:	e012      	b.n	800a3da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a3b4:	7d7b      	ldrb	r3, [r7, #21]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00f      	beq.n	800a3da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3be:	4413      	add	r3, r2
 800a3c0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d204      	bcs.n	800a3d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a3ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d2:	e002      	b.n	800a3da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3d4:	23fc      	movs	r3, #252	; 0xfc
 800a3d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a3da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a3e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a3e6:	e034      	b.n	800a452 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d019      	beq.n	800a422 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a3ee:	f107 030c 	add.w	r3, r7, #12
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	2103      	movs	r1, #3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fabc 	bl	8009974 <get_sequence_step_timeout>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a406:	4413      	add	r3, r2
 800a408:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a40e:	429a      	cmp	r2, r3
 800a410:	d204      	bcs.n	800a41c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	643b      	str	r3, [r7, #64]	; 0x40
 800a41a:	e002      	b.n	800a422 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a41c:	23fc      	movs	r3, #252	; 0xfc
 800a41e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a422:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a426:	2b00      	cmp	r3, #0
 800a428:	d111      	bne.n	800a44e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a42a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00e      	beq.n	800a44e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a43a:	2104      	movs	r1, #4
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fb7a 	bl	8009b36 <set_sequence_step_timeout>
 800a442:	4603      	mov	r3, r0
 800a444:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a44e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a452:	4618      	mov	r0, r3
 800a454:	3748      	adds	r7, #72	; 0x48
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b090      	sub	sp, #64	; 0x40
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a464:	2300      	movs	r3, #0
 800a466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a46a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a46e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a470:	f240 7376 	movw	r3, #1910	; 0x776
 800a474:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a476:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a47a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a47c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a480:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a482:	f240 234e 	movw	r3, #590	; 0x24e
 800a486:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a488:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a48c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a48e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a494:	f240 2326 	movw	r3, #550	; 0x226
 800a498:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a49e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a2:	441a      	add	r2, r3
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a4a8:	f107 0318 	add.w	r3, r7, #24
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7fc fe0c 	bl	80070cc <VL53L0X_GetSequenceStepEnables>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a4ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a4c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4c6:	e075      	b.n	800a5b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a4c8:	7e3b      	ldrb	r3, [r7, #24]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d105      	bne.n	800a4da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a4ce:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a4d4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d030      	beq.n	800a53c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a4da:	f107 0310 	add.w	r3, r7, #16
 800a4de:	461a      	mov	r2, r3
 800a4e0:	2102      	movs	r1, #2
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fa46 	bl	8009974 <get_sequence_step_timeout>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a4ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d122      	bne.n	800a53c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a4f6:	7e3b      	ldrb	r3, [r7, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d007      	beq.n	800a50c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a500:	6939      	ldr	r1, [r7, #16]
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a506:	441a      	add	r2, r3
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a50c:	7ebb      	ldrb	r3, [r7, #26]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d009      	beq.n	800a526 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a516:	6939      	ldr	r1, [r7, #16]
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	440b      	add	r3, r1
 800a51c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a51e:	441a      	add	r2, r3
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	e00a      	b.n	800a53c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a526:	7e7b      	ldrb	r3, [r7, #25]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d007      	beq.n	800a53c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a530:	6939      	ldr	r1, [r7, #16]
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a536:	441a      	add	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a53c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a540:	2b00      	cmp	r3, #0
 800a542:	d114      	bne.n	800a56e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a544:	7efb      	ldrb	r3, [r7, #27]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d011      	beq.n	800a56e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a54a:	f107 030c 	add.w	r3, r7, #12
 800a54e:	461a      	mov	r2, r3
 800a550:	2103      	movs	r1, #3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fa0e 	bl	8009974 <get_sequence_step_timeout>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a568:	441a      	add	r2, r3
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a56e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a572:	2b00      	cmp	r3, #0
 800a574:	d114      	bne.n	800a5a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a576:	7f3b      	ldrb	r3, [r7, #28]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d011      	beq.n	800a5a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a57c:	f107 0314 	add.w	r3, r7, #20
 800a580:	461a      	mov	r2, r3
 800a582:	2104      	movs	r1, #4
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff f9f5 	bl	8009974 <get_sequence_step_timeout>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a594:	6979      	ldr	r1, [r7, #20]
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a59a:	441a      	add	r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d103      	bne.n	800a5b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3740      	adds	r7, #64	; 0x40
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b088      	sub	sp, #32
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a5ce:	e0c6      	b.n	800a75e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a5e0:	7cfb      	ldrb	r3, [r7, #19]
 800a5e2:	2bff      	cmp	r3, #255	; 0xff
 800a5e4:	f040 808d 	bne.w	800a702 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	747b      	strb	r3, [r7, #17]
			Index++;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a5f8:	7c7b      	ldrb	r3, [r7, #17]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d87e      	bhi.n	800a6fc <VL53L0X_load_tuning_settings+0x140>
 800a5fe:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <VL53L0X_load_tuning_settings+0x48>)
 800a600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a604:	0800a615 	.word	0x0800a615
 800a608:	0800a64f 	.word	0x0800a64f
 800a60c:	0800a689 	.word	0x0800a689
 800a610:	0800a6c3 	.word	0x0800a6c3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	4413      	add	r3, r2
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	743b      	strb	r3, [r7, #16]
				Index++;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	3301      	adds	r3, #1
 800a622:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4413      	add	r3, r2
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	3301      	adds	r3, #1
 800a632:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a634:	7c3b      	ldrb	r3, [r7, #16]
 800a636:	b29b      	uxth	r3, r3
 800a638:	021b      	lsls	r3, r3, #8
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	4413      	add	r3, r2
 800a642:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	89ba      	ldrh	r2, [r7, #12]
 800a648:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a64c:	e087      	b.n	800a75e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	4413      	add	r3, r2
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	743b      	strb	r3, [r7, #16]
				Index++;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	3301      	adds	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	4413      	add	r3, r2
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	3301      	adds	r3, #1
 800a66c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a66e:	7c3b      	ldrb	r3, [r7, #16]
 800a670:	b29b      	uxth	r3, r3
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	b29a      	uxth	r2, r3
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	4413      	add	r3, r2
 800a67c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	89ba      	ldrh	r2, [r7, #12]
 800a682:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a686:	e06a      	b.n	800a75e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	4413      	add	r3, r2
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	743b      	strb	r3, [r7, #16]
				Index++;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	3301      	adds	r3, #1
 800a696:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	4413      	add	r3, r2
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a6a8:	7c3b      	ldrb	r3, [r7, #16]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	4413      	add	r3, r2
 800a6b6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	89ba      	ldrh	r2, [r7, #12]
 800a6bc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a6c0:	e04d      	b.n	800a75e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	743b      	strb	r3, [r7, #16]
				Index++;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a6e2:	7c3b      	ldrb	r3, [r7, #16]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	4413      	add	r3, r2
 800a6f0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	89ba      	ldrh	r2, [r7, #12]
 800a6f6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a6fa:	e030      	b.n	800a75e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a6fc:	23fc      	movs	r3, #252	; 0xfc
 800a6fe:	77fb      	strb	r3, [r7, #31]
 800a700:	e02d      	b.n	800a75e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a702:	7cfb      	ldrb	r3, [r7, #19]
 800a704:	2b04      	cmp	r3, #4
 800a706:	d828      	bhi.n	800a75a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	4413      	add	r3, r2
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	3301      	adds	r3, #1
 800a716:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a718:	2300      	movs	r3, #0
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	e00f      	b.n	800a73e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	4413      	add	r3, r2
 800a724:	7819      	ldrb	r1, [r3, #0]
 800a726:	f107 0208 	add.w	r2, r7, #8
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	4413      	add	r3, r2
 800a72e:	460a      	mov	r2, r1
 800a730:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	3301      	adds	r3, #1
 800a736:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	3301      	adds	r3, #1
 800a73c:	61bb      	str	r3, [r7, #24]
 800a73e:	7cfb      	ldrb	r3, [r7, #19]
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	429a      	cmp	r2, r3
 800a744:	dbeb      	blt.n	800a71e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a746:	7cfb      	ldrb	r3, [r7, #19]
 800a748:	f107 0208 	add.w	r2, r7, #8
 800a74c:	7cb9      	ldrb	r1, [r7, #18]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fdee 	bl	800b330 <VL53L0X_WriteMulti>
 800a754:	4603      	mov	r3, r0
 800a756:	77fb      	strb	r3, [r7, #31]
 800a758:	e001      	b.n	800a75e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a75a:	23fc      	movs	r3, #252	; 0xfc
 800a75c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	4413      	add	r3, r2
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <VL53L0X_load_tuning_settings+0x1b8>
 800a76a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f43f af2e 	beq.w	800a5d0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a774:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3720      	adds	r7, #32
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a78c:	2300      	movs	r3, #0
 800a78e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a796:	f107 0313 	add.w	r3, r7, #19
 800a79a:	4619      	mov	r1, r3
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7fc fd21 	bl	80071e4 <VL53L0X_GetXTalkCompensationEnable>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a7a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d111      	bne.n	800a7d2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a7ae:	7cfb      	ldrb	r3, [r7, #19]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00e      	beq.n	800a7d2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6a1b      	ldr	r3, [r3, #32]
 800a7b8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	8a9b      	ldrh	r3, [r3, #20]
 800a7be:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	fb02 f303 	mul.w	r3, r2, r3
 800a7c6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	3380      	adds	r3, #128	; 0x80
 800a7cc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a7d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3720      	adds	r7, #32
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b086      	sub	sp, #24
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a7f6:	f107 0310 	add.w	r3, r7, #16
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7ff ffbe 	bl	800a780 <VL53L0X_get_total_xtalk_rate>
 800a804:	4603      	mov	r3, r0
 800a806:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d105      	bne.n	800a81c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	441a      	add	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	601a      	str	r2, [r3, #0]

	return Status;
 800a81c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b09a      	sub	sp, #104	; 0x68
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a836:	2312      	movs	r3, #18
 800a838:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a83a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a83e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a840:	2342      	movs	r3, #66	; 0x42
 800a842:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a844:	2306      	movs	r3, #6
 800a846:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a848:	2307      	movs	r3, #7
 800a84a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a858:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a860:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a866:	fb02 f303 	mul.w	r3, r2, r3
 800a86a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86e:	3380      	adds	r3, #128	; 0x80
 800a870:	0a1b      	lsrs	r3, r3, #8
 800a872:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d01a      	beq.n	800a8be <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	029b      	lsls	r3, r3, #10
 800a88c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a894:	4413      	add	r3, r2
 800a896:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a898:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a8a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	4413      	add	r3, r2
 800a8aa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8ae:	fb03 f303 	mul.w	r3, r3, r3
 800a8b2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a8b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a8ba:	0c1b      	lsrs	r3, r3, #16
 800a8bc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8c2:	fb02 f303 	mul.w	r3, r2, r3
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a8ce:	0c1b      	lsrs	r3, r3, #16
 800a8d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	fb03 f303 	mul.w	r3, r3, r3
 800a8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a8da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a8e0:	0c1b      	lsrs	r3, r3, #16
 800a8e2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a8e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e6:	085a      	lsrs	r2, r3, #1
 800a8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ea:	441a      	add	r2, r3
 800a8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8f8:	fb02 f303 	mul.w	r3, r2, r3
 800a8fc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a904:	d302      	bcc.n	800a90c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a906:	4b54      	ldr	r3, [pc, #336]	; (800aa58 <VL53L0X_calc_dmax+0x230>)
 800a908:	663b      	str	r3, [r7, #96]	; 0x60
 800a90a:	e015      	b.n	800a938 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a90e:	085a      	lsrs	r2, r3, #1
 800a910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a912:	441a      	add	r2, r3
 800a914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a916:	fbb2 f3f3 	udiv	r3, r2, r3
 800a91a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a91c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a91e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a920:	fb02 f303 	mul.w	r3, r2, r3
 800a924:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a928:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a92c:	0c1b      	lsrs	r3, r3, #16
 800a92e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a932:	fb03 f303 	mul.w	r3, r3, r3
 800a936:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93a:	039b      	lsls	r3, r3, #14
 800a93c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a940:	4a46      	ldr	r2, [pc, #280]	; (800aa5c <VL53L0X_calc_dmax+0x234>)
 800a942:	fba2 2303 	umull	r2, r3, r2, r3
 800a946:	099b      	lsrs	r3, r3, #6
 800a948:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	fb03 f303 	mul.w	r3, r3, r3
 800a950:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a954:	fb03 f303 	mul.w	r3, r3, r3
 800a958:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	3308      	adds	r3, #8
 800a95e:	091b      	lsrs	r3, r3, #4
 800a960:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	4413      	add	r3, r2
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a97c:	0b9b      	lsrs	r3, r3, #14
 800a97e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a984:	4413      	add	r3, r2
 800a986:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a98a:	085b      	lsrs	r3, r3, #1
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	4413      	add	r3, r2
 800a990:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a996:	fbb2 f3f3 	udiv	r3, r2, r3
 800a99a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	039b      	lsls	r3, r3, #14
 800a9a0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	085b      	lsrs	r3, r3, #1
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9ba:	fb02 f303 	mul.w	r3, r2, r3
 800a9be:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a9c6:	4a25      	ldr	r2, [pc, #148]	; (800aa5c <VL53L0X_calc_dmax+0x234>)
 800a9c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9cc:	099b      	lsrs	r3, r3, #6
 800a9ce:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	011b      	lsls	r3, r3, #4
 800a9d4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a9dc:	4a1f      	ldr	r2, [pc, #124]	; (800aa5c <VL53L0X_calc_dmax+0x234>)
 800a9de:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e2:	099b      	lsrs	r3, r3, #6
 800a9e4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e8:	3380      	adds	r3, #128	; 0x80
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	085a      	lsrs	r2, r3, #1
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fa:	441a      	add	r2, r3
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa02:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa04:	e001      	b.n	800aa0a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800aa0a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aa0c:	f7fe f9ba 	bl	8008d84 <VL53L0X_isqrt>
 800aa10:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d008      	beq.n	800aa2a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	085a      	lsrs	r2, r3, #1
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1e:	441a      	add	r2, r3
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa28:	e001      	b.n	800aa2e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800aa2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800aa30:	f7fe f9a8 	bl	8008d84 <VL53L0X_isqrt>
 800aa34:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800aa36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d902      	bls.n	800aa4a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800aa44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa48:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800aa4a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3768      	adds	r7, #104	; 0x68
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	fff00000 	.word	0xfff00000
 800aa5c:	10624dd3 	.word	0x10624dd3

0800aa60 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b0b4      	sub	sp, #208	; 0xd0
 800aa64:	af04      	add	r7, sp, #16
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800aa6e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800aa72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800aa76:	f44f 7316 	mov.w	r3, #600	; 0x258
 800aa7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800aa7e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800aa82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800aa86:	f241 235c 	movw	r3, #4700	; 0x125c
 800aa8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800aa8e:	4b9e      	ldr	r3, [pc, #632]	; (800ad08 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800aa90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800aa94:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800aa98:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800aa9a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800aa9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800aaa8:	4b98      	ldr	r3, [pc, #608]	; (800ad0c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800aaaa:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800aaac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aab0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800aab2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800aab6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800aab8:	f240 6377 	movw	r3, #1655	; 0x677
 800aabc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aabe:	2300      	movs	r3, #0
 800aac0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800aad6:	0c1b      	lsrs	r3, r3, #16
 800aad8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800aae0:	f107 0310 	add.w	r3, r7, #16
 800aae4:	461a      	mov	r2, r3
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fe78 	bl	800a7de <VL53L0X_get_total_signal_rate>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800aaf4:	f107 0314 	add.w	r3, r7, #20
 800aaf8:	461a      	mov	r2, r3
 800aafa:	68b9      	ldr	r1, [r7, #8]
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f7ff fe3f 	bl	800a780 <VL53L0X_get_total_xtalk_rate>
 800ab02:	4603      	mov	r3, r0
 800ab04:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab0e:	fb02 f303 	mul.w	r3, r2, r3
 800ab12:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800ab14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab1a:	0c1b      	lsrs	r3, r3, #16
 800ab1c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab24:	fb02 f303 	mul.w	r3, r2, r3
 800ab28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800ab2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ab30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d902      	bls.n	800ab3c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800ab36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800ab3c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d168      	bne.n	800ac16 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ab4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800ab54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ab58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f7fe feb2 	bl	80098cc <VL53L0X_calc_timeout_mclks>
 800ab68:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ab70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800ab7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ab7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ab82:	461a      	mov	r2, r3
 800ab84:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7fe fe9f 	bl	80098cc <VL53L0X_calc_timeout_mclks>
 800ab8e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800ab90:	2303      	movs	r3, #3
 800ab92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800ab96:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ab9a:	2b08      	cmp	r3, #8
 800ab9c:	d102      	bne.n	800aba4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800ab9e:	2302      	movs	r3, #2
 800aba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800aba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aba8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800abaa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800abae:	fb02 f303 	mul.w	r3, r2, r3
 800abb2:	02db      	lsls	r3, r3, #11
 800abb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800abb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abbc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800abc0:	4a53      	ldr	r2, [pc, #332]	; (800ad10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800abc2:	fba2 2303 	umull	r2, r3, r2, r3
 800abc6:	099b      	lsrs	r3, r3, #6
 800abc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800abcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abd2:	fb02 f303 	mul.w	r3, r2, r3
 800abd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800abda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abde:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800abe2:	4a4b      	ldr	r2, [pc, #300]	; (800ad10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800abe4:	fba2 2303 	umull	r2, r3, r2, r3
 800abe8:	099b      	lsrs	r3, r3, #6
 800abea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3380      	adds	r3, #128	; 0x80
 800abf2:	0a1b      	lsrs	r3, r3, #8
 800abf4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abfc:	fb02 f303 	mul.w	r3, r2, r3
 800ac00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ac04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac08:	3380      	adds	r3, #128	; 0x80
 800ac0a:	0a1b      	lsrs	r3, r3, #8
 800ac0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ac16:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800ac1e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ac22:	e15e      	b.n	800aee2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800ac24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10c      	bne.n	800ac44 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac30:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac38:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	e14c      	b.n	800aede <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800ac44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d102      	bne.n	800ac52 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800ac52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac56:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ac58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac5a:	041a      	lsls	r2, r3, #16
 800ac5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ac66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d902      	bls.n	800ac76 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800ac70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ac76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ac7e:	fb02 f303 	mul.w	r3, r2, r3
 800ac82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ac86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe f876 	bl	8008d84 <VL53L0X_isqrt>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	891b      	ldrh	r3, [r3, #8]
 800aca2:	461a      	mov	r2, r3
 800aca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aca6:	fb02 f303 	mul.w	r3, r2, r3
 800acaa:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800acac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acae:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800acb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800acb4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800acb6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800acb8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800acbc:	4a14      	ldr	r2, [pc, #80]	; (800ad10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800acbe:	fba2 2303 	umull	r2, r3, r2, r3
 800acc2:	099b      	lsrs	r3, r3, #6
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800acc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acc8:	041b      	lsls	r3, r3, #16
 800acca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800acce:	4a10      	ldr	r2, [pc, #64]	; (800ad10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800acd0:	fba2 2303 	umull	r2, r3, r2, r3
 800acd4:	099b      	lsrs	r3, r3, #6
 800acd6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800acd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800acde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfb8      	it	lt
 800acea:	425b      	neglt	r3, r3
 800acec:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800acee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	7e1b      	ldrb	r3, [r3, #24]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800acfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad04:	e033      	b.n	800ad6e <VL53L0X_calc_sigma_estimate+0x30e>
 800ad06:	bf00      	nop
 800ad08:	028f87ae 	.word	0x028f87ae
 800ad0c:	0006999a 	.word	0x0006999a
 800ad10:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ad14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ad22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad24:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800ad28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad2c:	fb02 f303 	mul.w	r3, r2, r3
 800ad30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ad34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad3a:	4413      	add	r3, r2
 800ad3c:	0c1b      	lsrs	r3, r3, #16
 800ad3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ad42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad46:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ad4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800ad4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ad58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad5c:	fb03 f303 	mul.w	r3, r3, r3
 800ad60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800ad64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad68:	0b9b      	lsrs	r3, r3, #14
 800ad6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800ad6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad74:	fb02 f303 	mul.w	r3, r2, r3
 800ad78:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad80:	0c1b      	lsrs	r3, r3, #16
 800ad82:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	fb03 f303 	mul.w	r3, r3, r3
 800ad8a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ad8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad98:	0c1b      	lsrs	r3, r3, #16
 800ad9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	fb03 f303 	mul.w	r3, r3, r3
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	4413      	add	r3, r2
 800adaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800adac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adae:	f7fd ffe9 	bl	8008d84 <VL53L0X_isqrt>
 800adb2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	041b      	lsls	r3, r3, #16
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	3332      	adds	r3, #50	; 0x32
 800adbe:	4a4b      	ldr	r2, [pc, #300]	; (800aeec <VL53L0X_calc_sigma_estimate+0x48c>)
 800adc0:	fba2 2303 	umull	r2, r3, r2, r3
 800adc4:	095a      	lsrs	r2, r3, #5
 800adc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800add0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800add4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800add8:	fb02 f303 	mul.w	r3, r2, r3
 800addc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ade0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ade4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ade8:	3308      	adds	r3, #8
 800adea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800adee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800adf2:	4a3f      	ldr	r2, [pc, #252]	; (800aef0 <VL53L0X_calc_sigma_estimate+0x490>)
 800adf4:	fba2 2303 	umull	r2, r3, r2, r3
 800adf8:	0b5b      	lsrs	r3, r3, #13
 800adfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800adfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d902      	bls.n	800ae0e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800ae08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800ae0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800ae1c:	4a35      	ldr	r2, [pc, #212]	; (800aef4 <VL53L0X_calc_sigma_estimate+0x494>)
 800ae1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae22:	099b      	lsrs	r3, r3, #6
 800ae24:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800ae2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae2e:	441a      	add	r2, r3
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fd ffa4 	bl	8008d84 <VL53L0X_isqrt>
 800ae3c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	021b      	lsls	r3, r3, #8
 800ae42:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ae4a:	4a2a      	ldr	r2, [pc, #168]	; (800aef4 <VL53L0X_calc_sigma_estimate+0x494>)
 800ae4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae50:	099b      	lsrs	r3, r3, #6
 800ae52:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800ae54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae58:	fb03 f303 	mul.w	r3, r3, r3
 800ae5c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	fb03 f303 	mul.w	r3, r3, r3
 800ae64:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800ae66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	4413      	add	r3, r2
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fd ff89 	bl	8008d84 <VL53L0X_isqrt>
 800ae72:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae7a:	fb02 f303 	mul.w	r3, r2, r3
 800ae7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800ae82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d009      	beq.n	800ae9c <VL53L0X_calc_sigma_estimate+0x43c>
 800ae88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d005      	beq.n	800ae9c <VL53L0X_calc_sigma_estimate+0x43c>
 800ae90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ae94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d903      	bls.n	800aea4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800ae9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aeaa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800aeb6:	6939      	ldr	r1, [r7, #16]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	9303      	str	r3, [sp, #12]
 800aebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aec0:	9302      	str	r3, [sp, #8]
 800aec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7ff fca8 	bl	800a828 <VL53L0X_calc_dmax>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aede:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	37c0      	adds	r7, #192	; 0xc0
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	51eb851f 	.word	0x51eb851f
 800aef0:	d1b71759 	.word	0xd1b71759
 800aef4:	10624dd3 	.word	0x10624dd3

0800aef8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b090      	sub	sp, #64	; 0x40
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	461a      	mov	r2, r3
 800af04:	460b      	mov	r3, r1
 800af06:	72fb      	strb	r3, [r7, #11]
 800af08:	4613      	mov	r3, r2
 800af0a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800af46:	2300      	movs	r3, #0
 800af48:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800af4a:	7afb      	ldrb	r3, [r7, #11]
 800af4c:	10db      	asrs	r3, r3, #3
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 030f 	and.w	r3, r3, #15
 800af54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800af58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d017      	beq.n	800af90 <VL53L0X_get_pal_range_status+0x98>
 800af60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af64:	2b05      	cmp	r3, #5
 800af66:	d013      	beq.n	800af90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800af68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af6c:	2b07      	cmp	r3, #7
 800af6e:	d00f      	beq.n	800af90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800af70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af74:	2b0c      	cmp	r3, #12
 800af76:	d00b      	beq.n	800af90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800af78:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af7c:	2b0d      	cmp	r3, #13
 800af7e:	d007      	beq.n	800af90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800af80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af84:	2b0e      	cmp	r3, #14
 800af86:	d003      	beq.n	800af90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800af88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af8c:	2b0f      	cmp	r3, #15
 800af8e:	d103      	bne.n	800af98 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800af90:	2301      	movs	r3, #1
 800af92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800af96:	e002      	b.n	800af9e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800af9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d109      	bne.n	800afba <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800afa6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800afaa:	461a      	mov	r2, r3
 800afac:	2100      	movs	r1, #0
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7fc f9ec 	bl	800738c <VL53L0X_GetLimitCheckEnable>
 800afb4:	4603      	mov	r3, r0
 800afb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800afba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d02e      	beq.n	800b020 <VL53L0X_get_pal_range_status+0x128>
 800afc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d12a      	bne.n	800b020 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800afca:	f107 0310 	add.w	r3, r7, #16
 800afce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800afd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fd43 	bl	800aa60 <VL53L0X_calc_sigma_estimate>
 800afda:	4603      	mov	r3, r0
 800afdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800afe0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d103      	bne.n	800aff0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	b29a      	uxth	r2, r3
 800afec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afee:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800aff0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d113      	bne.n	800b020 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800aff8:	f107 0320 	add.w	r3, r7, #32
 800affc:	461a      	mov	r2, r3
 800affe:	2100      	movs	r1, #0
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7fc fa49 	bl	8007498 <VL53L0X_GetLimitCheckValue>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d006      	beq.n	800b020 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b014:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b016:	429a      	cmp	r2, r3
 800b018:	d902      	bls.n	800b020 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b020:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b028:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b02c:	461a      	mov	r2, r3
 800b02e:	2102      	movs	r1, #2
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7fc f9ab 	bl	800738c <VL53L0X_GetLimitCheckEnable>
 800b036:	4603      	mov	r3, r0
 800b038:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b03c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b040:	2b00      	cmp	r3, #0
 800b042:	d044      	beq.n	800b0ce <VL53L0X_get_pal_range_status+0x1d6>
 800b044:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d140      	bne.n	800b0ce <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b04c:	f107 031c 	add.w	r3, r7, #28
 800b050:	461a      	mov	r2, r3
 800b052:	2102      	movs	r1, #2
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7fc fa1f 	bl	8007498 <VL53L0X_GetLimitCheckValue>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b060:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b064:	2b00      	cmp	r3, #0
 800b066:	d107      	bne.n	800b078 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b068:	2201      	movs	r2, #1
 800b06a:	21ff      	movs	r1, #255	; 0xff
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 f9bb 	bl	800b3e8 <VL53L0X_WrByte>
 800b072:	4603      	mov	r3, r0
 800b074:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b078:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d109      	bne.n	800b094 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b080:	f107 0316 	add.w	r3, r7, #22
 800b084:	461a      	mov	r2, r3
 800b086:	21b6      	movs	r1, #182	; 0xb6
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 fa59 	bl	800b540 <VL53L0X_RdWord>
 800b08e:	4603      	mov	r3, r0
 800b090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b094:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d107      	bne.n	800b0ac <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b09c:	2200      	movs	r2, #0
 800b09e:	21ff      	movs	r1, #255	; 0xff
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 f9a1 	bl	800b3e8 <VL53L0X_WrByte>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b0ac:	8afb      	ldrh	r3, [r7, #22]
 800b0ae:	025b      	lsls	r3, r3, #9
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0b6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d006      	beq.n	800b0ce <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b0c0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b0c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d902      	bls.n	800b0ce <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b0ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d109      	bne.n	800b0ea <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b0d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0da:	461a      	mov	r2, r3
 800b0dc:	2103      	movs	r1, #3
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f7fc f954 	bl	800738c <VL53L0X_GetLimitCheckEnable>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b0ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d023      	beq.n	800b13a <VL53L0X_get_pal_range_status+0x242>
 800b0f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d11f      	bne.n	800b13a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b0fa:	893b      	ldrh	r3, [r7, #8]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d102      	bne.n	800b106 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	637b      	str	r3, [r7, #52]	; 0x34
 800b104:	e005      	b.n	800b112 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	021a      	lsls	r2, r3, #8
 800b10a:	893b      	ldrh	r3, [r7, #8]
 800b10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b110:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b112:	f107 0318 	add.w	r3, r7, #24
 800b116:	461a      	mov	r2, r3
 800b118:	2103      	movs	r1, #3
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7fc f9bc 	bl	8007498 <VL53L0X_GetLimitCheckValue>
 800b120:	4603      	mov	r3, r0
 800b122:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d006      	beq.n	800b13a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b12c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b12e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b130:	429a      	cmp	r2, r3
 800b132:	d202      	bcs.n	800b13a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b13a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d14a      	bne.n	800b1d8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b142:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b146:	2b01      	cmp	r3, #1
 800b148:	d103      	bne.n	800b152 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14c:	22ff      	movs	r2, #255	; 0xff
 800b14e:	701a      	strb	r2, [r3, #0]
 800b150:	e042      	b.n	800b1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b152:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b156:	2b01      	cmp	r3, #1
 800b158:	d007      	beq.n	800b16a <VL53L0X_get_pal_range_status+0x272>
 800b15a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d003      	beq.n	800b16a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b162:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b166:	2b03      	cmp	r3, #3
 800b168:	d103      	bne.n	800b172 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16c:	2205      	movs	r2, #5
 800b16e:	701a      	strb	r2, [r3, #0]
 800b170:	e032      	b.n	800b1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b172:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b176:	2b06      	cmp	r3, #6
 800b178:	d003      	beq.n	800b182 <VL53L0X_get_pal_range_status+0x28a>
 800b17a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b17e:	2b09      	cmp	r3, #9
 800b180:	d103      	bne.n	800b18a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b184:	2204      	movs	r2, #4
 800b186:	701a      	strb	r2, [r3, #0]
 800b188:	e026      	b.n	800b1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b18a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b18e:	2b08      	cmp	r3, #8
 800b190:	d007      	beq.n	800b1a2 <VL53L0X_get_pal_range_status+0x2aa>
 800b192:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b196:	2b0a      	cmp	r3, #10
 800b198:	d003      	beq.n	800b1a2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b19a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d103      	bne.n	800b1aa <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a4:	2203      	movs	r2, #3
 800b1a6:	701a      	strb	r2, [r3, #0]
 800b1a8:	e016      	b.n	800b1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b1aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d003      	beq.n	800b1ba <VL53L0X_get_pal_range_status+0x2c2>
 800b1b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d103      	bne.n	800b1c2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1bc:	2202      	movs	r2, #2
 800b1be:	701a      	strb	r2, [r3, #0]
 800b1c0:	e00a      	b.n	800b1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b1c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d103      	bne.n	800b1d2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	e002      	b.n	800b1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b1d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d102      	bne.n	800b1e6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b1e6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7fc f8cc 	bl	800738c <VL53L0X_GetLimitCheckEnable>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b1fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d14f      	bne.n	800b2a2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <VL53L0X_get_pal_range_status+0x31a>
 800b20a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d103      	bne.n	800b21a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b212:	2301      	movs	r3, #1
 800b214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b218:	e002      	b.n	800b220 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b226:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b22a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d003      	beq.n	800b23a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b232:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b236:	2b00      	cmp	r3, #0
 800b238:	d103      	bne.n	800b242 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b240:	e002      	b.n	800b248 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b24e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b252:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <VL53L0X_get_pal_range_status+0x36a>
 800b25a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d103      	bne.n	800b26a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b268:	e002      	b.n	800b270 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b276:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b27a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <VL53L0X_get_pal_range_status+0x392>
 800b282:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b286:	2b01      	cmp	r3, #1
 800b288:	d103      	bne.n	800b292 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b28a:	2301      	movs	r3, #1
 800b28c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b290:	e002      	b.n	800b298 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b29e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b2a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3740      	adds	r7, #64	; 0x40
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b088      	sub	sp, #32
 800b2b2:	af02      	add	r7, sp, #8
 800b2b4:	60f8      	str	r0, [r7, #12]
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	330a      	adds	r3, #10
 800b2be:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b2cc:	b299      	uxth	r1, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	f7f6 fee7 	bl	80020ac <HAL_I2C_Master_Transmit>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b2e2:	693b      	ldr	r3, [r7, #16]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af02      	add	r7, sp, #8
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	330a      	adds	r3, #10
 800b2fc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b30a:	f043 0301 	orr.w	r3, r3, #1
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	b299      	uxth	r1, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	b29a      	uxth	r2, r3
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	4613      	mov	r3, r2
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	f7f6 ffb9 	bl	8002294 <HAL_I2C_Master_Receive>
 800b322:	4603      	mov	r3, r0
 800b324:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b326:	693b      	ldr	r3, [r7, #16]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3718      	adds	r7, #24
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	607a      	str	r2, [r7, #4]
 800b33a:	603b      	str	r3, [r7, #0]
 800b33c:	460b      	mov	r3, r1
 800b33e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b340:	2300      	movs	r3, #0
 800b342:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2b3f      	cmp	r3, #63	; 0x3f
 800b348:	d902      	bls.n	800b350 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b34a:	f06f 0303 	mvn.w	r3, #3
 800b34e:	e016      	b.n	800b37e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b350:	4a0d      	ldr	r2, [pc, #52]	; (800b388 <VL53L0X_WriteMulti+0x58>)
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	480c      	ldr	r0, [pc, #48]	; (800b38c <VL53L0X_WriteMulti+0x5c>)
 800b35c:	f000 f99e 	bl	800b69c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	3301      	adds	r3, #1
 800b364:	461a      	mov	r2, r3
 800b366:	4908      	ldr	r1, [pc, #32]	; (800b388 <VL53L0X_WriteMulti+0x58>)
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f7ff ffa0 	bl	800b2ae <_I2CWrite>
 800b36e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b376:	23ec      	movs	r3, #236	; 0xec
 800b378:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	2000081c 	.word	0x2000081c
 800b38c:	2000081d 	.word	0x2000081d

0800b390 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	460b      	mov	r3, r1
 800b39e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b3a4:	f107 030b 	add.w	r3, r7, #11
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f7ff ff7e 	bl	800b2ae <_I2CWrite>
 800b3b2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b3ba:	23ec      	movs	r3, #236	; 0xec
 800b3bc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b3be:	e00c      	b.n	800b3da <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	6879      	ldr	r1, [r7, #4]
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff ff91 	bl	800b2ec <_I2CRead>
 800b3ca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d002      	beq.n	800b3d8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b3d2:	23ec      	movs	r3, #236	; 0xec
 800b3d4:	75fb      	strb	r3, [r7, #23]
 800b3d6:	e000      	b.n	800b3da <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b3d8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b3fc:	4a0b      	ldr	r2, [pc, #44]	; (800b42c <VL53L0X_WrByte+0x44>)
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b402:	4a0a      	ldr	r2, [pc, #40]	; (800b42c <VL53L0X_WrByte+0x44>)
 800b404:	78bb      	ldrb	r3, [r7, #2]
 800b406:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b408:	2202      	movs	r2, #2
 800b40a:	4908      	ldr	r1, [pc, #32]	; (800b42c <VL53L0X_WrByte+0x44>)
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7ff ff4e 	bl	800b2ae <_I2CWrite>
 800b412:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b41a:	23ec      	movs	r3, #236	; 0xec
 800b41c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	2000081c 	.word	0x2000081c

0800b430 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
 800b43c:	4613      	mov	r3, r2
 800b43e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b444:	4a0e      	ldr	r2, [pc, #56]	; (800b480 <VL53L0X_WrWord+0x50>)
 800b446:	78fb      	ldrb	r3, [r7, #3]
 800b448:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b44a:	883b      	ldrh	r3, [r7, #0]
 800b44c:	0a1b      	lsrs	r3, r3, #8
 800b44e:	b29b      	uxth	r3, r3
 800b450:	b2da      	uxtb	r2, r3
 800b452:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <VL53L0X_WrWord+0x50>)
 800b454:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b456:	883b      	ldrh	r3, [r7, #0]
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	4b09      	ldr	r3, [pc, #36]	; (800b480 <VL53L0X_WrWord+0x50>)
 800b45c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b45e:	2203      	movs	r2, #3
 800b460:	4907      	ldr	r1, [pc, #28]	; (800b480 <VL53L0X_WrWord+0x50>)
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff ff23 	bl	800b2ae <_I2CWrite>
 800b468:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b470:	23ec      	movs	r3, #236	; 0xec
 800b472:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	2000081c 	.word	0x2000081c

0800b484 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	4608      	mov	r0, r1
 800b48e:	4611      	mov	r1, r2
 800b490:	461a      	mov	r2, r3
 800b492:	4603      	mov	r3, r0
 800b494:	70fb      	strb	r3, [r7, #3]
 800b496:	460b      	mov	r3, r1
 800b498:	70bb      	strb	r3, [r7, #2]
 800b49a:	4613      	mov	r3, r2
 800b49c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b4a2:	f107 020e 	add.w	r2, r7, #14
 800b4a6:	78fb      	ldrb	r3, [r7, #3]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f81e 	bl	800b4ec <VL53L0X_RdByte>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d110      	bne.n	800b4de <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b4bc:	7bba      	ldrb	r2, [r7, #14]
 800b4be:	78bb      	ldrb	r3, [r7, #2]
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	787b      	ldrb	r3, [r7, #1]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b4cc:	7bba      	ldrb	r2, [r7, #14]
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff ff88 	bl	800b3e8 <VL53L0X_WrByte>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]
 800b4dc:	e000      	b.n	800b4e0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b4de:	bf00      	nop
done:
    return Status;
 800b4e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	607a      	str	r2, [r7, #4]
 800b4f8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b4fe:	f107 030b 	add.w	r3, r7, #11
 800b502:	2201      	movs	r2, #1
 800b504:	4619      	mov	r1, r3
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f7ff fed1 	bl	800b2ae <_I2CWrite>
 800b50c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b514:	23ec      	movs	r3, #236	; 0xec
 800b516:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b518:	e00c      	b.n	800b534 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b51a:	2201      	movs	r2, #1
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f7ff fee4 	bl	800b2ec <_I2CRead>
 800b524:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b52c:	23ec      	movs	r3, #236	; 0xec
 800b52e:	75fb      	strb	r3, [r7, #23]
 800b530:	e000      	b.n	800b534 <VL53L0X_RdByte+0x48>
    }
done:
 800b532:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b534:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	460b      	mov	r3, r1
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b54e:	2300      	movs	r3, #0
 800b550:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b552:	f107 030b 	add.w	r3, r7, #11
 800b556:	2201      	movs	r2, #1
 800b558:	4619      	mov	r1, r3
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7ff fea7 	bl	800b2ae <_I2CWrite>
 800b560:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b568:	23ec      	movs	r3, #236	; 0xec
 800b56a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b56c:	e017      	b.n	800b59e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b56e:	2202      	movs	r2, #2
 800b570:	490e      	ldr	r1, [pc, #56]	; (800b5ac <VL53L0X_RdWord+0x6c>)
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff feba 	bl	800b2ec <_I2CRead>
 800b578:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b580:	23ec      	movs	r3, #236	; 0xec
 800b582:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b584:	e00b      	b.n	800b59e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <VL53L0X_RdWord+0x6c>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	b29a      	uxth	r2, r3
 800b590:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <VL53L0X_RdWord+0x6c>)
 800b592:	785b      	ldrb	r3, [r3, #1]
 800b594:	b29b      	uxth	r3, r3
 800b596:	4413      	add	r3, r2
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b59e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	2000081c 	.word	0x2000081c

0800b5b0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b5c2:	f107 030b 	add.w	r3, r7, #11
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f7ff fe6f 	bl	800b2ae <_I2CWrite>
 800b5d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5d8:	23ec      	movs	r3, #236	; 0xec
 800b5da:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b5dc:	e01b      	b.n	800b616 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b5de:	2204      	movs	r2, #4
 800b5e0:	4910      	ldr	r1, [pc, #64]	; (800b624 <VL53L0X_RdDWord+0x74>)
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7ff fe82 	bl	800b2ec <_I2CRead>
 800b5e8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5f0:	23ec      	movs	r3, #236	; 0xec
 800b5f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b5f4:	e00f      	b.n	800b616 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <VL53L0X_RdDWord+0x74>)
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	061a      	lsls	r2, r3, #24
 800b5fc:	4b09      	ldr	r3, [pc, #36]	; (800b624 <VL53L0X_RdDWord+0x74>)
 800b5fe:	785b      	ldrb	r3, [r3, #1]
 800b600:	041b      	lsls	r3, r3, #16
 800b602:	441a      	add	r2, r3
 800b604:	4b07      	ldr	r3, [pc, #28]	; (800b624 <VL53L0X_RdDWord+0x74>)
 800b606:	789b      	ldrb	r3, [r3, #2]
 800b608:	021b      	lsls	r3, r3, #8
 800b60a:	4413      	add	r3, r2
 800b60c:	4a05      	ldr	r2, [pc, #20]	; (800b624 <VL53L0X_RdDWord+0x74>)
 800b60e:	78d2      	ldrb	r2, [r2, #3]
 800b610:	441a      	add	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	2000081c 	.word	0x2000081c

0800b628 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b634:	2002      	movs	r0, #2
 800b636:	f7f6 f9b1 	bl	800199c <HAL_Delay>
    return status;
 800b63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <__errno>:
 800b648:	4b01      	ldr	r3, [pc, #4]	; (800b650 <__errno+0x8>)
 800b64a:	6818      	ldr	r0, [r3, #0]
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	200002cc 	.word	0x200002cc

0800b654 <__libc_init_array>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	4d0d      	ldr	r5, [pc, #52]	; (800b68c <__libc_init_array+0x38>)
 800b658:	4c0d      	ldr	r4, [pc, #52]	; (800b690 <__libc_init_array+0x3c>)
 800b65a:	1b64      	subs	r4, r4, r5
 800b65c:	10a4      	asrs	r4, r4, #2
 800b65e:	2600      	movs	r6, #0
 800b660:	42a6      	cmp	r6, r4
 800b662:	d109      	bne.n	800b678 <__libc_init_array+0x24>
 800b664:	4d0b      	ldr	r5, [pc, #44]	; (800b694 <__libc_init_array+0x40>)
 800b666:	4c0c      	ldr	r4, [pc, #48]	; (800b698 <__libc_init_array+0x44>)
 800b668:	f000 fc96 	bl	800bf98 <_init>
 800b66c:	1b64      	subs	r4, r4, r5
 800b66e:	10a4      	asrs	r4, r4, #2
 800b670:	2600      	movs	r6, #0
 800b672:	42a6      	cmp	r6, r4
 800b674:	d105      	bne.n	800b682 <__libc_init_array+0x2e>
 800b676:	bd70      	pop	{r4, r5, r6, pc}
 800b678:	f855 3b04 	ldr.w	r3, [r5], #4
 800b67c:	4798      	blx	r3
 800b67e:	3601      	adds	r6, #1
 800b680:	e7ee      	b.n	800b660 <__libc_init_array+0xc>
 800b682:	f855 3b04 	ldr.w	r3, [r5], #4
 800b686:	4798      	blx	r3
 800b688:	3601      	adds	r6, #1
 800b68a:	e7f2      	b.n	800b672 <__libc_init_array+0x1e>
 800b68c:	0800c084 	.word	0x0800c084
 800b690:	0800c084 	.word	0x0800c084
 800b694:	0800c084 	.word	0x0800c084
 800b698:	0800c088 	.word	0x0800c088

0800b69c <memcpy>:
 800b69c:	440a      	add	r2, r1
 800b69e:	4291      	cmp	r1, r2
 800b6a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6a4:	d100      	bne.n	800b6a8 <memcpy+0xc>
 800b6a6:	4770      	bx	lr
 800b6a8:	b510      	push	{r4, lr}
 800b6aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6b2:	4291      	cmp	r1, r2
 800b6b4:	d1f9      	bne.n	800b6aa <memcpy+0xe>
 800b6b6:	bd10      	pop	{r4, pc}

0800b6b8 <memset>:
 800b6b8:	4402      	add	r2, r0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d100      	bne.n	800b6c2 <memset+0xa>
 800b6c0:	4770      	bx	lr
 800b6c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6c6:	e7f9      	b.n	800b6bc <memset+0x4>

0800b6c8 <siprintf>:
 800b6c8:	b40e      	push	{r1, r2, r3}
 800b6ca:	b500      	push	{lr}
 800b6cc:	b09c      	sub	sp, #112	; 0x70
 800b6ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b6d0:	9002      	str	r0, [sp, #8]
 800b6d2:	9006      	str	r0, [sp, #24]
 800b6d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6d8:	4809      	ldr	r0, [pc, #36]	; (800b700 <siprintf+0x38>)
 800b6da:	9107      	str	r1, [sp, #28]
 800b6dc:	9104      	str	r1, [sp, #16]
 800b6de:	4909      	ldr	r1, [pc, #36]	; (800b704 <siprintf+0x3c>)
 800b6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e4:	9105      	str	r1, [sp, #20]
 800b6e6:	6800      	ldr	r0, [r0, #0]
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	a902      	add	r1, sp, #8
 800b6ec:	f000 f870 	bl	800b7d0 <_svfiprintf_r>
 800b6f0:	9b02      	ldr	r3, [sp, #8]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	b01c      	add	sp, #112	; 0x70
 800b6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6fc:	b003      	add	sp, #12
 800b6fe:	4770      	bx	lr
 800b700:	200002cc 	.word	0x200002cc
 800b704:	ffff0208 	.word	0xffff0208

0800b708 <strcpy>:
 800b708:	4603      	mov	r3, r0
 800b70a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b70e:	f803 2b01 	strb.w	r2, [r3], #1
 800b712:	2a00      	cmp	r2, #0
 800b714:	d1f9      	bne.n	800b70a <strcpy+0x2>
 800b716:	4770      	bx	lr

0800b718 <__ssputs_r>:
 800b718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	688e      	ldr	r6, [r1, #8]
 800b71e:	429e      	cmp	r6, r3
 800b720:	4682      	mov	sl, r0
 800b722:	460c      	mov	r4, r1
 800b724:	4690      	mov	r8, r2
 800b726:	461f      	mov	r7, r3
 800b728:	d838      	bhi.n	800b79c <__ssputs_r+0x84>
 800b72a:	898a      	ldrh	r2, [r1, #12]
 800b72c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b730:	d032      	beq.n	800b798 <__ssputs_r+0x80>
 800b732:	6825      	ldr	r5, [r4, #0]
 800b734:	6909      	ldr	r1, [r1, #16]
 800b736:	eba5 0901 	sub.w	r9, r5, r1
 800b73a:	6965      	ldr	r5, [r4, #20]
 800b73c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b744:	3301      	adds	r3, #1
 800b746:	444b      	add	r3, r9
 800b748:	106d      	asrs	r5, r5, #1
 800b74a:	429d      	cmp	r5, r3
 800b74c:	bf38      	it	cc
 800b74e:	461d      	movcc	r5, r3
 800b750:	0553      	lsls	r3, r2, #21
 800b752:	d531      	bpl.n	800b7b8 <__ssputs_r+0xa0>
 800b754:	4629      	mov	r1, r5
 800b756:	f000 fb55 	bl	800be04 <_malloc_r>
 800b75a:	4606      	mov	r6, r0
 800b75c:	b950      	cbnz	r0, 800b774 <__ssputs_r+0x5c>
 800b75e:	230c      	movs	r3, #12
 800b760:	f8ca 3000 	str.w	r3, [sl]
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	6921      	ldr	r1, [r4, #16]
 800b776:	464a      	mov	r2, r9
 800b778:	f7ff ff90 	bl	800b69c <memcpy>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	6126      	str	r6, [r4, #16]
 800b78a:	6165      	str	r5, [r4, #20]
 800b78c:	444e      	add	r6, r9
 800b78e:	eba5 0509 	sub.w	r5, r5, r9
 800b792:	6026      	str	r6, [r4, #0]
 800b794:	60a5      	str	r5, [r4, #8]
 800b796:	463e      	mov	r6, r7
 800b798:	42be      	cmp	r6, r7
 800b79a:	d900      	bls.n	800b79e <__ssputs_r+0x86>
 800b79c:	463e      	mov	r6, r7
 800b79e:	6820      	ldr	r0, [r4, #0]
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	4641      	mov	r1, r8
 800b7a4:	f000 faa8 	bl	800bcf8 <memmove>
 800b7a8:	68a3      	ldr	r3, [r4, #8]
 800b7aa:	1b9b      	subs	r3, r3, r6
 800b7ac:	60a3      	str	r3, [r4, #8]
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	4433      	add	r3, r6
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e7db      	b.n	800b770 <__ssputs_r+0x58>
 800b7b8:	462a      	mov	r2, r5
 800b7ba:	f000 fb97 	bl	800beec <_realloc_r>
 800b7be:	4606      	mov	r6, r0
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d1e1      	bne.n	800b788 <__ssputs_r+0x70>
 800b7c4:	6921      	ldr	r1, [r4, #16]
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f000 fab0 	bl	800bd2c <_free_r>
 800b7cc:	e7c7      	b.n	800b75e <__ssputs_r+0x46>
	...

0800b7d0 <_svfiprintf_r>:
 800b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	4698      	mov	r8, r3
 800b7d6:	898b      	ldrh	r3, [r1, #12]
 800b7d8:	061b      	lsls	r3, r3, #24
 800b7da:	b09d      	sub	sp, #116	; 0x74
 800b7dc:	4607      	mov	r7, r0
 800b7de:	460d      	mov	r5, r1
 800b7e0:	4614      	mov	r4, r2
 800b7e2:	d50e      	bpl.n	800b802 <_svfiprintf_r+0x32>
 800b7e4:	690b      	ldr	r3, [r1, #16]
 800b7e6:	b963      	cbnz	r3, 800b802 <_svfiprintf_r+0x32>
 800b7e8:	2140      	movs	r1, #64	; 0x40
 800b7ea:	f000 fb0b 	bl	800be04 <_malloc_r>
 800b7ee:	6028      	str	r0, [r5, #0]
 800b7f0:	6128      	str	r0, [r5, #16]
 800b7f2:	b920      	cbnz	r0, 800b7fe <_svfiprintf_r+0x2e>
 800b7f4:	230c      	movs	r3, #12
 800b7f6:	603b      	str	r3, [r7, #0]
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e0d1      	b.n	800b9a2 <_svfiprintf_r+0x1d2>
 800b7fe:	2340      	movs	r3, #64	; 0x40
 800b800:	616b      	str	r3, [r5, #20]
 800b802:	2300      	movs	r3, #0
 800b804:	9309      	str	r3, [sp, #36]	; 0x24
 800b806:	2320      	movs	r3, #32
 800b808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b810:	2330      	movs	r3, #48	; 0x30
 800b812:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9bc <_svfiprintf_r+0x1ec>
 800b816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b81a:	f04f 0901 	mov.w	r9, #1
 800b81e:	4623      	mov	r3, r4
 800b820:	469a      	mov	sl, r3
 800b822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b826:	b10a      	cbz	r2, 800b82c <_svfiprintf_r+0x5c>
 800b828:	2a25      	cmp	r2, #37	; 0x25
 800b82a:	d1f9      	bne.n	800b820 <_svfiprintf_r+0x50>
 800b82c:	ebba 0b04 	subs.w	fp, sl, r4
 800b830:	d00b      	beq.n	800b84a <_svfiprintf_r+0x7a>
 800b832:	465b      	mov	r3, fp
 800b834:	4622      	mov	r2, r4
 800b836:	4629      	mov	r1, r5
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ff6d 	bl	800b718 <__ssputs_r>
 800b83e:	3001      	adds	r0, #1
 800b840:	f000 80aa 	beq.w	800b998 <_svfiprintf_r+0x1c8>
 800b844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b846:	445a      	add	r2, fp
 800b848:	9209      	str	r2, [sp, #36]	; 0x24
 800b84a:	f89a 3000 	ldrb.w	r3, [sl]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 80a2 	beq.w	800b998 <_svfiprintf_r+0x1c8>
 800b854:	2300      	movs	r3, #0
 800b856:	f04f 32ff 	mov.w	r2, #4294967295
 800b85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b85e:	f10a 0a01 	add.w	sl, sl, #1
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	9307      	str	r3, [sp, #28]
 800b866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b86a:	931a      	str	r3, [sp, #104]	; 0x68
 800b86c:	4654      	mov	r4, sl
 800b86e:	2205      	movs	r2, #5
 800b870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b874:	4851      	ldr	r0, [pc, #324]	; (800b9bc <_svfiprintf_r+0x1ec>)
 800b876:	f7f4 fcc3 	bl	8000200 <memchr>
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	b9d8      	cbnz	r0, 800b8b6 <_svfiprintf_r+0xe6>
 800b87e:	06d0      	lsls	r0, r2, #27
 800b880:	bf44      	itt	mi
 800b882:	2320      	movmi	r3, #32
 800b884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b888:	0711      	lsls	r1, r2, #28
 800b88a:	bf44      	itt	mi
 800b88c:	232b      	movmi	r3, #43	; 0x2b
 800b88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b892:	f89a 3000 	ldrb.w	r3, [sl]
 800b896:	2b2a      	cmp	r3, #42	; 0x2a
 800b898:	d015      	beq.n	800b8c6 <_svfiprintf_r+0xf6>
 800b89a:	9a07      	ldr	r2, [sp, #28]
 800b89c:	4654      	mov	r4, sl
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f04f 0c0a 	mov.w	ip, #10
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8aa:	3b30      	subs	r3, #48	; 0x30
 800b8ac:	2b09      	cmp	r3, #9
 800b8ae:	d94e      	bls.n	800b94e <_svfiprintf_r+0x17e>
 800b8b0:	b1b0      	cbz	r0, 800b8e0 <_svfiprintf_r+0x110>
 800b8b2:	9207      	str	r2, [sp, #28]
 800b8b4:	e014      	b.n	800b8e0 <_svfiprintf_r+0x110>
 800b8b6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	9304      	str	r3, [sp, #16]
 800b8c2:	46a2      	mov	sl, r4
 800b8c4:	e7d2      	b.n	800b86c <_svfiprintf_r+0x9c>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	1d19      	adds	r1, r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	9103      	str	r1, [sp, #12]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bfbb      	ittet	lt
 800b8d2:	425b      	neglt	r3, r3
 800b8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8d8:	9307      	strge	r3, [sp, #28]
 800b8da:	9307      	strlt	r3, [sp, #28]
 800b8dc:	bfb8      	it	lt
 800b8de:	9204      	strlt	r2, [sp, #16]
 800b8e0:	7823      	ldrb	r3, [r4, #0]
 800b8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e4:	d10c      	bne.n	800b900 <_svfiprintf_r+0x130>
 800b8e6:	7863      	ldrb	r3, [r4, #1]
 800b8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ea:	d135      	bne.n	800b958 <_svfiprintf_r+0x188>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	9203      	str	r2, [sp, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bfb8      	it	lt
 800b8f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8fc:	3402      	adds	r4, #2
 800b8fe:	9305      	str	r3, [sp, #20]
 800b900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9cc <_svfiprintf_r+0x1fc>
 800b904:	7821      	ldrb	r1, [r4, #0]
 800b906:	2203      	movs	r2, #3
 800b908:	4650      	mov	r0, sl
 800b90a:	f7f4 fc79 	bl	8000200 <memchr>
 800b90e:	b140      	cbz	r0, 800b922 <_svfiprintf_r+0x152>
 800b910:	2340      	movs	r3, #64	; 0x40
 800b912:	eba0 000a 	sub.w	r0, r0, sl
 800b916:	fa03 f000 	lsl.w	r0, r3, r0
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	4303      	orrs	r3, r0
 800b91e:	3401      	adds	r4, #1
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b926:	4826      	ldr	r0, [pc, #152]	; (800b9c0 <_svfiprintf_r+0x1f0>)
 800b928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b92c:	2206      	movs	r2, #6
 800b92e:	f7f4 fc67 	bl	8000200 <memchr>
 800b932:	2800      	cmp	r0, #0
 800b934:	d038      	beq.n	800b9a8 <_svfiprintf_r+0x1d8>
 800b936:	4b23      	ldr	r3, [pc, #140]	; (800b9c4 <_svfiprintf_r+0x1f4>)
 800b938:	bb1b      	cbnz	r3, 800b982 <_svfiprintf_r+0x1b2>
 800b93a:	9b03      	ldr	r3, [sp, #12]
 800b93c:	3307      	adds	r3, #7
 800b93e:	f023 0307 	bic.w	r3, r3, #7
 800b942:	3308      	adds	r3, #8
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b948:	4433      	add	r3, r6
 800b94a:	9309      	str	r3, [sp, #36]	; 0x24
 800b94c:	e767      	b.n	800b81e <_svfiprintf_r+0x4e>
 800b94e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b952:	460c      	mov	r4, r1
 800b954:	2001      	movs	r0, #1
 800b956:	e7a5      	b.n	800b8a4 <_svfiprintf_r+0xd4>
 800b958:	2300      	movs	r3, #0
 800b95a:	3401      	adds	r4, #1
 800b95c:	9305      	str	r3, [sp, #20]
 800b95e:	4619      	mov	r1, r3
 800b960:	f04f 0c0a 	mov.w	ip, #10
 800b964:	4620      	mov	r0, r4
 800b966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96a:	3a30      	subs	r2, #48	; 0x30
 800b96c:	2a09      	cmp	r2, #9
 800b96e:	d903      	bls.n	800b978 <_svfiprintf_r+0x1a8>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0c5      	beq.n	800b900 <_svfiprintf_r+0x130>
 800b974:	9105      	str	r1, [sp, #20]
 800b976:	e7c3      	b.n	800b900 <_svfiprintf_r+0x130>
 800b978:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97c:	4604      	mov	r4, r0
 800b97e:	2301      	movs	r3, #1
 800b980:	e7f0      	b.n	800b964 <_svfiprintf_r+0x194>
 800b982:	ab03      	add	r3, sp, #12
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	462a      	mov	r2, r5
 800b988:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <_svfiprintf_r+0x1f8>)
 800b98a:	a904      	add	r1, sp, #16
 800b98c:	4638      	mov	r0, r7
 800b98e:	f3af 8000 	nop.w
 800b992:	1c42      	adds	r2, r0, #1
 800b994:	4606      	mov	r6, r0
 800b996:	d1d6      	bne.n	800b946 <_svfiprintf_r+0x176>
 800b998:	89ab      	ldrh	r3, [r5, #12]
 800b99a:	065b      	lsls	r3, r3, #25
 800b99c:	f53f af2c 	bmi.w	800b7f8 <_svfiprintf_r+0x28>
 800b9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9a2:	b01d      	add	sp, #116	; 0x74
 800b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a8:	ab03      	add	r3, sp, #12
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <_svfiprintf_r+0x1f8>)
 800b9b0:	a904      	add	r1, sp, #16
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	f000 f87a 	bl	800baac <_printf_i>
 800b9b8:	e7eb      	b.n	800b992 <_svfiprintf_r+0x1c2>
 800b9ba:	bf00      	nop
 800b9bc:	0800c048 	.word	0x0800c048
 800b9c0:	0800c052 	.word	0x0800c052
 800b9c4:	00000000 	.word	0x00000000
 800b9c8:	0800b719 	.word	0x0800b719
 800b9cc:	0800c04e 	.word	0x0800c04e

0800b9d0 <_printf_common>:
 800b9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d4:	4616      	mov	r6, r2
 800b9d6:	4699      	mov	r9, r3
 800b9d8:	688a      	ldr	r2, [r1, #8]
 800b9da:	690b      	ldr	r3, [r1, #16]
 800b9dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	bfb8      	it	lt
 800b9e4:	4613      	movlt	r3, r2
 800b9e6:	6033      	str	r3, [r6, #0]
 800b9e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	b10a      	cbz	r2, 800b9f6 <_printf_common+0x26>
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	6033      	str	r3, [r6, #0]
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	0699      	lsls	r1, r3, #26
 800b9fa:	bf42      	ittt	mi
 800b9fc:	6833      	ldrmi	r3, [r6, #0]
 800b9fe:	3302      	addmi	r3, #2
 800ba00:	6033      	strmi	r3, [r6, #0]
 800ba02:	6825      	ldr	r5, [r4, #0]
 800ba04:	f015 0506 	ands.w	r5, r5, #6
 800ba08:	d106      	bne.n	800ba18 <_printf_common+0x48>
 800ba0a:	f104 0a19 	add.w	sl, r4, #25
 800ba0e:	68e3      	ldr	r3, [r4, #12]
 800ba10:	6832      	ldr	r2, [r6, #0]
 800ba12:	1a9b      	subs	r3, r3, r2
 800ba14:	42ab      	cmp	r3, r5
 800ba16:	dc26      	bgt.n	800ba66 <_printf_common+0x96>
 800ba18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba1c:	1e13      	subs	r3, r2, #0
 800ba1e:	6822      	ldr	r2, [r4, #0]
 800ba20:	bf18      	it	ne
 800ba22:	2301      	movne	r3, #1
 800ba24:	0692      	lsls	r2, r2, #26
 800ba26:	d42b      	bmi.n	800ba80 <_printf_common+0xb0>
 800ba28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba2c:	4649      	mov	r1, r9
 800ba2e:	4638      	mov	r0, r7
 800ba30:	47c0      	blx	r8
 800ba32:	3001      	adds	r0, #1
 800ba34:	d01e      	beq.n	800ba74 <_printf_common+0xa4>
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	68e5      	ldr	r5, [r4, #12]
 800ba3a:	6832      	ldr	r2, [r6, #0]
 800ba3c:	f003 0306 	and.w	r3, r3, #6
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	bf08      	it	eq
 800ba44:	1aad      	subeq	r5, r5, r2
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	6922      	ldr	r2, [r4, #16]
 800ba4a:	bf0c      	ite	eq
 800ba4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba50:	2500      	movne	r5, #0
 800ba52:	4293      	cmp	r3, r2
 800ba54:	bfc4      	itt	gt
 800ba56:	1a9b      	subgt	r3, r3, r2
 800ba58:	18ed      	addgt	r5, r5, r3
 800ba5a:	2600      	movs	r6, #0
 800ba5c:	341a      	adds	r4, #26
 800ba5e:	42b5      	cmp	r5, r6
 800ba60:	d11a      	bne.n	800ba98 <_printf_common+0xc8>
 800ba62:	2000      	movs	r0, #0
 800ba64:	e008      	b.n	800ba78 <_printf_common+0xa8>
 800ba66:	2301      	movs	r3, #1
 800ba68:	4652      	mov	r2, sl
 800ba6a:	4649      	mov	r1, r9
 800ba6c:	4638      	mov	r0, r7
 800ba6e:	47c0      	blx	r8
 800ba70:	3001      	adds	r0, #1
 800ba72:	d103      	bne.n	800ba7c <_printf_common+0xac>
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7c:	3501      	adds	r5, #1
 800ba7e:	e7c6      	b.n	800ba0e <_printf_common+0x3e>
 800ba80:	18e1      	adds	r1, r4, r3
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	2030      	movs	r0, #48	; 0x30
 800ba86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba8a:	4422      	add	r2, r4
 800ba8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba94:	3302      	adds	r3, #2
 800ba96:	e7c7      	b.n	800ba28 <_printf_common+0x58>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	4638      	mov	r0, r7
 800baa0:	47c0      	blx	r8
 800baa2:	3001      	adds	r0, #1
 800baa4:	d0e6      	beq.n	800ba74 <_printf_common+0xa4>
 800baa6:	3601      	adds	r6, #1
 800baa8:	e7d9      	b.n	800ba5e <_printf_common+0x8e>
	...

0800baac <_printf_i>:
 800baac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bab0:	7e0f      	ldrb	r7, [r1, #24]
 800bab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bab4:	2f78      	cmp	r7, #120	; 0x78
 800bab6:	4691      	mov	r9, r2
 800bab8:	4680      	mov	r8, r0
 800baba:	460c      	mov	r4, r1
 800babc:	469a      	mov	sl, r3
 800babe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bac2:	d807      	bhi.n	800bad4 <_printf_i+0x28>
 800bac4:	2f62      	cmp	r7, #98	; 0x62
 800bac6:	d80a      	bhi.n	800bade <_printf_i+0x32>
 800bac8:	2f00      	cmp	r7, #0
 800baca:	f000 80d8 	beq.w	800bc7e <_printf_i+0x1d2>
 800bace:	2f58      	cmp	r7, #88	; 0x58
 800bad0:	f000 80a3 	beq.w	800bc1a <_printf_i+0x16e>
 800bad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800badc:	e03a      	b.n	800bb54 <_printf_i+0xa8>
 800bade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bae2:	2b15      	cmp	r3, #21
 800bae4:	d8f6      	bhi.n	800bad4 <_printf_i+0x28>
 800bae6:	a101      	add	r1, pc, #4	; (adr r1, 800baec <_printf_i+0x40>)
 800bae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baec:	0800bb45 	.word	0x0800bb45
 800baf0:	0800bb59 	.word	0x0800bb59
 800baf4:	0800bad5 	.word	0x0800bad5
 800baf8:	0800bad5 	.word	0x0800bad5
 800bafc:	0800bad5 	.word	0x0800bad5
 800bb00:	0800bad5 	.word	0x0800bad5
 800bb04:	0800bb59 	.word	0x0800bb59
 800bb08:	0800bad5 	.word	0x0800bad5
 800bb0c:	0800bad5 	.word	0x0800bad5
 800bb10:	0800bad5 	.word	0x0800bad5
 800bb14:	0800bad5 	.word	0x0800bad5
 800bb18:	0800bc65 	.word	0x0800bc65
 800bb1c:	0800bb89 	.word	0x0800bb89
 800bb20:	0800bc47 	.word	0x0800bc47
 800bb24:	0800bad5 	.word	0x0800bad5
 800bb28:	0800bad5 	.word	0x0800bad5
 800bb2c:	0800bc87 	.word	0x0800bc87
 800bb30:	0800bad5 	.word	0x0800bad5
 800bb34:	0800bb89 	.word	0x0800bb89
 800bb38:	0800bad5 	.word	0x0800bad5
 800bb3c:	0800bad5 	.word	0x0800bad5
 800bb40:	0800bc4f 	.word	0x0800bc4f
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	1d1a      	adds	r2, r3, #4
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	602a      	str	r2, [r5, #0]
 800bb4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb54:	2301      	movs	r3, #1
 800bb56:	e0a3      	b.n	800bca0 <_printf_i+0x1f4>
 800bb58:	6820      	ldr	r0, [r4, #0]
 800bb5a:	6829      	ldr	r1, [r5, #0]
 800bb5c:	0606      	lsls	r6, r0, #24
 800bb5e:	f101 0304 	add.w	r3, r1, #4
 800bb62:	d50a      	bpl.n	800bb7a <_printf_i+0xce>
 800bb64:	680e      	ldr	r6, [r1, #0]
 800bb66:	602b      	str	r3, [r5, #0]
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	da03      	bge.n	800bb74 <_printf_i+0xc8>
 800bb6c:	232d      	movs	r3, #45	; 0x2d
 800bb6e:	4276      	negs	r6, r6
 800bb70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb74:	485e      	ldr	r0, [pc, #376]	; (800bcf0 <_printf_i+0x244>)
 800bb76:	230a      	movs	r3, #10
 800bb78:	e019      	b.n	800bbae <_printf_i+0x102>
 800bb7a:	680e      	ldr	r6, [r1, #0]
 800bb7c:	602b      	str	r3, [r5, #0]
 800bb7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb82:	bf18      	it	ne
 800bb84:	b236      	sxthne	r6, r6
 800bb86:	e7ef      	b.n	800bb68 <_printf_i+0xbc>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	6820      	ldr	r0, [r4, #0]
 800bb8c:	1d19      	adds	r1, r3, #4
 800bb8e:	6029      	str	r1, [r5, #0]
 800bb90:	0601      	lsls	r1, r0, #24
 800bb92:	d501      	bpl.n	800bb98 <_printf_i+0xec>
 800bb94:	681e      	ldr	r6, [r3, #0]
 800bb96:	e002      	b.n	800bb9e <_printf_i+0xf2>
 800bb98:	0646      	lsls	r6, r0, #25
 800bb9a:	d5fb      	bpl.n	800bb94 <_printf_i+0xe8>
 800bb9c:	881e      	ldrh	r6, [r3, #0]
 800bb9e:	4854      	ldr	r0, [pc, #336]	; (800bcf0 <_printf_i+0x244>)
 800bba0:	2f6f      	cmp	r7, #111	; 0x6f
 800bba2:	bf0c      	ite	eq
 800bba4:	2308      	moveq	r3, #8
 800bba6:	230a      	movne	r3, #10
 800bba8:	2100      	movs	r1, #0
 800bbaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbae:	6865      	ldr	r5, [r4, #4]
 800bbb0:	60a5      	str	r5, [r4, #8]
 800bbb2:	2d00      	cmp	r5, #0
 800bbb4:	bfa2      	ittt	ge
 800bbb6:	6821      	ldrge	r1, [r4, #0]
 800bbb8:	f021 0104 	bicge.w	r1, r1, #4
 800bbbc:	6021      	strge	r1, [r4, #0]
 800bbbe:	b90e      	cbnz	r6, 800bbc4 <_printf_i+0x118>
 800bbc0:	2d00      	cmp	r5, #0
 800bbc2:	d04d      	beq.n	800bc60 <_printf_i+0x1b4>
 800bbc4:	4615      	mov	r5, r2
 800bbc6:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbca:	fb03 6711 	mls	r7, r3, r1, r6
 800bbce:	5dc7      	ldrb	r7, [r0, r7]
 800bbd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbd4:	4637      	mov	r7, r6
 800bbd6:	42bb      	cmp	r3, r7
 800bbd8:	460e      	mov	r6, r1
 800bbda:	d9f4      	bls.n	800bbc6 <_printf_i+0x11a>
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d10b      	bne.n	800bbf8 <_printf_i+0x14c>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	07de      	lsls	r6, r3, #31
 800bbe4:	d508      	bpl.n	800bbf8 <_printf_i+0x14c>
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	6861      	ldr	r1, [r4, #4]
 800bbea:	4299      	cmp	r1, r3
 800bbec:	bfde      	ittt	le
 800bbee:	2330      	movle	r3, #48	; 0x30
 800bbf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bbf8:	1b52      	subs	r2, r2, r5
 800bbfa:	6122      	str	r2, [r4, #16]
 800bbfc:	f8cd a000 	str.w	sl, [sp]
 800bc00:	464b      	mov	r3, r9
 800bc02:	aa03      	add	r2, sp, #12
 800bc04:	4621      	mov	r1, r4
 800bc06:	4640      	mov	r0, r8
 800bc08:	f7ff fee2 	bl	800b9d0 <_printf_common>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d14c      	bne.n	800bcaa <_printf_i+0x1fe>
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	b004      	add	sp, #16
 800bc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1a:	4835      	ldr	r0, [pc, #212]	; (800bcf0 <_printf_i+0x244>)
 800bc1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc20:	6829      	ldr	r1, [r5, #0]
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc28:	6029      	str	r1, [r5, #0]
 800bc2a:	061d      	lsls	r5, r3, #24
 800bc2c:	d514      	bpl.n	800bc58 <_printf_i+0x1ac>
 800bc2e:	07df      	lsls	r7, r3, #31
 800bc30:	bf44      	itt	mi
 800bc32:	f043 0320 	orrmi.w	r3, r3, #32
 800bc36:	6023      	strmi	r3, [r4, #0]
 800bc38:	b91e      	cbnz	r6, 800bc42 <_printf_i+0x196>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	f023 0320 	bic.w	r3, r3, #32
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	2310      	movs	r3, #16
 800bc44:	e7b0      	b.n	800bba8 <_printf_i+0xfc>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	f043 0320 	orr.w	r3, r3, #32
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	2378      	movs	r3, #120	; 0x78
 800bc50:	4828      	ldr	r0, [pc, #160]	; (800bcf4 <_printf_i+0x248>)
 800bc52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc56:	e7e3      	b.n	800bc20 <_printf_i+0x174>
 800bc58:	0659      	lsls	r1, r3, #25
 800bc5a:	bf48      	it	mi
 800bc5c:	b2b6      	uxthmi	r6, r6
 800bc5e:	e7e6      	b.n	800bc2e <_printf_i+0x182>
 800bc60:	4615      	mov	r5, r2
 800bc62:	e7bb      	b.n	800bbdc <_printf_i+0x130>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	6826      	ldr	r6, [r4, #0]
 800bc68:	6961      	ldr	r1, [r4, #20]
 800bc6a:	1d18      	adds	r0, r3, #4
 800bc6c:	6028      	str	r0, [r5, #0]
 800bc6e:	0635      	lsls	r5, r6, #24
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	d501      	bpl.n	800bc78 <_printf_i+0x1cc>
 800bc74:	6019      	str	r1, [r3, #0]
 800bc76:	e002      	b.n	800bc7e <_printf_i+0x1d2>
 800bc78:	0670      	lsls	r0, r6, #25
 800bc7a:	d5fb      	bpl.n	800bc74 <_printf_i+0x1c8>
 800bc7c:	8019      	strh	r1, [r3, #0]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	4615      	mov	r5, r2
 800bc84:	e7ba      	b.n	800bbfc <_printf_i+0x150>
 800bc86:	682b      	ldr	r3, [r5, #0]
 800bc88:	1d1a      	adds	r2, r3, #4
 800bc8a:	602a      	str	r2, [r5, #0]
 800bc8c:	681d      	ldr	r5, [r3, #0]
 800bc8e:	6862      	ldr	r2, [r4, #4]
 800bc90:	2100      	movs	r1, #0
 800bc92:	4628      	mov	r0, r5
 800bc94:	f7f4 fab4 	bl	8000200 <memchr>
 800bc98:	b108      	cbz	r0, 800bc9e <_printf_i+0x1f2>
 800bc9a:	1b40      	subs	r0, r0, r5
 800bc9c:	6060      	str	r0, [r4, #4]
 800bc9e:	6863      	ldr	r3, [r4, #4]
 800bca0:	6123      	str	r3, [r4, #16]
 800bca2:	2300      	movs	r3, #0
 800bca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bca8:	e7a8      	b.n	800bbfc <_printf_i+0x150>
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	462a      	mov	r2, r5
 800bcae:	4649      	mov	r1, r9
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	47d0      	blx	sl
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d0ab      	beq.n	800bc10 <_printf_i+0x164>
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	079b      	lsls	r3, r3, #30
 800bcbc:	d413      	bmi.n	800bce6 <_printf_i+0x23a>
 800bcbe:	68e0      	ldr	r0, [r4, #12]
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	4298      	cmp	r0, r3
 800bcc4:	bfb8      	it	lt
 800bcc6:	4618      	movlt	r0, r3
 800bcc8:	e7a4      	b.n	800bc14 <_printf_i+0x168>
 800bcca:	2301      	movs	r3, #1
 800bccc:	4632      	mov	r2, r6
 800bcce:	4649      	mov	r1, r9
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	47d0      	blx	sl
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d09b      	beq.n	800bc10 <_printf_i+0x164>
 800bcd8:	3501      	adds	r5, #1
 800bcda:	68e3      	ldr	r3, [r4, #12]
 800bcdc:	9903      	ldr	r1, [sp, #12]
 800bcde:	1a5b      	subs	r3, r3, r1
 800bce0:	42ab      	cmp	r3, r5
 800bce2:	dcf2      	bgt.n	800bcca <_printf_i+0x21e>
 800bce4:	e7eb      	b.n	800bcbe <_printf_i+0x212>
 800bce6:	2500      	movs	r5, #0
 800bce8:	f104 0619 	add.w	r6, r4, #25
 800bcec:	e7f5      	b.n	800bcda <_printf_i+0x22e>
 800bcee:	bf00      	nop
 800bcf0:	0800c059 	.word	0x0800c059
 800bcf4:	0800c06a 	.word	0x0800c06a

0800bcf8 <memmove>:
 800bcf8:	4288      	cmp	r0, r1
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	eb01 0402 	add.w	r4, r1, r2
 800bd00:	d902      	bls.n	800bd08 <memmove+0x10>
 800bd02:	4284      	cmp	r4, r0
 800bd04:	4623      	mov	r3, r4
 800bd06:	d807      	bhi.n	800bd18 <memmove+0x20>
 800bd08:	1e43      	subs	r3, r0, #1
 800bd0a:	42a1      	cmp	r1, r4
 800bd0c:	d008      	beq.n	800bd20 <memmove+0x28>
 800bd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd16:	e7f8      	b.n	800bd0a <memmove+0x12>
 800bd18:	4402      	add	r2, r0
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	428a      	cmp	r2, r1
 800bd1e:	d100      	bne.n	800bd22 <memmove+0x2a>
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd2a:	e7f7      	b.n	800bd1c <memmove+0x24>

0800bd2c <_free_r>:
 800bd2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	d044      	beq.n	800bdbc <_free_r+0x90>
 800bd32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd36:	9001      	str	r0, [sp, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f1a1 0404 	sub.w	r4, r1, #4
 800bd3e:	bfb8      	it	lt
 800bd40:	18e4      	addlt	r4, r4, r3
 800bd42:	f000 f913 	bl	800bf6c <__malloc_lock>
 800bd46:	4a1e      	ldr	r2, [pc, #120]	; (800bdc0 <_free_r+0x94>)
 800bd48:	9801      	ldr	r0, [sp, #4]
 800bd4a:	6813      	ldr	r3, [r2, #0]
 800bd4c:	b933      	cbnz	r3, 800bd5c <_free_r+0x30>
 800bd4e:	6063      	str	r3, [r4, #4]
 800bd50:	6014      	str	r4, [r2, #0]
 800bd52:	b003      	add	sp, #12
 800bd54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd58:	f000 b90e 	b.w	800bf78 <__malloc_unlock>
 800bd5c:	42a3      	cmp	r3, r4
 800bd5e:	d908      	bls.n	800bd72 <_free_r+0x46>
 800bd60:	6825      	ldr	r5, [r4, #0]
 800bd62:	1961      	adds	r1, r4, r5
 800bd64:	428b      	cmp	r3, r1
 800bd66:	bf01      	itttt	eq
 800bd68:	6819      	ldreq	r1, [r3, #0]
 800bd6a:	685b      	ldreq	r3, [r3, #4]
 800bd6c:	1949      	addeq	r1, r1, r5
 800bd6e:	6021      	streq	r1, [r4, #0]
 800bd70:	e7ed      	b.n	800bd4e <_free_r+0x22>
 800bd72:	461a      	mov	r2, r3
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	b10b      	cbz	r3, 800bd7c <_free_r+0x50>
 800bd78:	42a3      	cmp	r3, r4
 800bd7a:	d9fa      	bls.n	800bd72 <_free_r+0x46>
 800bd7c:	6811      	ldr	r1, [r2, #0]
 800bd7e:	1855      	adds	r5, r2, r1
 800bd80:	42a5      	cmp	r5, r4
 800bd82:	d10b      	bne.n	800bd9c <_free_r+0x70>
 800bd84:	6824      	ldr	r4, [r4, #0]
 800bd86:	4421      	add	r1, r4
 800bd88:	1854      	adds	r4, r2, r1
 800bd8a:	42a3      	cmp	r3, r4
 800bd8c:	6011      	str	r1, [r2, #0]
 800bd8e:	d1e0      	bne.n	800bd52 <_free_r+0x26>
 800bd90:	681c      	ldr	r4, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	6053      	str	r3, [r2, #4]
 800bd96:	4421      	add	r1, r4
 800bd98:	6011      	str	r1, [r2, #0]
 800bd9a:	e7da      	b.n	800bd52 <_free_r+0x26>
 800bd9c:	d902      	bls.n	800bda4 <_free_r+0x78>
 800bd9e:	230c      	movs	r3, #12
 800bda0:	6003      	str	r3, [r0, #0]
 800bda2:	e7d6      	b.n	800bd52 <_free_r+0x26>
 800bda4:	6825      	ldr	r5, [r4, #0]
 800bda6:	1961      	adds	r1, r4, r5
 800bda8:	428b      	cmp	r3, r1
 800bdaa:	bf04      	itt	eq
 800bdac:	6819      	ldreq	r1, [r3, #0]
 800bdae:	685b      	ldreq	r3, [r3, #4]
 800bdb0:	6063      	str	r3, [r4, #4]
 800bdb2:	bf04      	itt	eq
 800bdb4:	1949      	addeq	r1, r1, r5
 800bdb6:	6021      	streq	r1, [r4, #0]
 800bdb8:	6054      	str	r4, [r2, #4]
 800bdba:	e7ca      	b.n	800bd52 <_free_r+0x26>
 800bdbc:	b003      	add	sp, #12
 800bdbe:	bd30      	pop	{r4, r5, pc}
 800bdc0:	2000085c 	.word	0x2000085c

0800bdc4 <sbrk_aligned>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	4e0e      	ldr	r6, [pc, #56]	; (800be00 <sbrk_aligned+0x3c>)
 800bdc8:	460c      	mov	r4, r1
 800bdca:	6831      	ldr	r1, [r6, #0]
 800bdcc:	4605      	mov	r5, r0
 800bdce:	b911      	cbnz	r1, 800bdd6 <sbrk_aligned+0x12>
 800bdd0:	f000 f8bc 	bl	800bf4c <_sbrk_r>
 800bdd4:	6030      	str	r0, [r6, #0]
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f000 f8b7 	bl	800bf4c <_sbrk_r>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	d00a      	beq.n	800bdf8 <sbrk_aligned+0x34>
 800bde2:	1cc4      	adds	r4, r0, #3
 800bde4:	f024 0403 	bic.w	r4, r4, #3
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d007      	beq.n	800bdfc <sbrk_aligned+0x38>
 800bdec:	1a21      	subs	r1, r4, r0
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f000 f8ac 	bl	800bf4c <_sbrk_r>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d101      	bne.n	800bdfc <sbrk_aligned+0x38>
 800bdf8:	f04f 34ff 	mov.w	r4, #4294967295
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	20000860 	.word	0x20000860

0800be04 <_malloc_r>:
 800be04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be08:	1ccd      	adds	r5, r1, #3
 800be0a:	f025 0503 	bic.w	r5, r5, #3
 800be0e:	3508      	adds	r5, #8
 800be10:	2d0c      	cmp	r5, #12
 800be12:	bf38      	it	cc
 800be14:	250c      	movcc	r5, #12
 800be16:	2d00      	cmp	r5, #0
 800be18:	4607      	mov	r7, r0
 800be1a:	db01      	blt.n	800be20 <_malloc_r+0x1c>
 800be1c:	42a9      	cmp	r1, r5
 800be1e:	d905      	bls.n	800be2c <_malloc_r+0x28>
 800be20:	230c      	movs	r3, #12
 800be22:	603b      	str	r3, [r7, #0]
 800be24:	2600      	movs	r6, #0
 800be26:	4630      	mov	r0, r6
 800be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2c:	4e2e      	ldr	r6, [pc, #184]	; (800bee8 <_malloc_r+0xe4>)
 800be2e:	f000 f89d 	bl	800bf6c <__malloc_lock>
 800be32:	6833      	ldr	r3, [r6, #0]
 800be34:	461c      	mov	r4, r3
 800be36:	bb34      	cbnz	r4, 800be86 <_malloc_r+0x82>
 800be38:	4629      	mov	r1, r5
 800be3a:	4638      	mov	r0, r7
 800be3c:	f7ff ffc2 	bl	800bdc4 <sbrk_aligned>
 800be40:	1c43      	adds	r3, r0, #1
 800be42:	4604      	mov	r4, r0
 800be44:	d14d      	bne.n	800bee2 <_malloc_r+0xde>
 800be46:	6834      	ldr	r4, [r6, #0]
 800be48:	4626      	mov	r6, r4
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	d140      	bne.n	800bed0 <_malloc_r+0xcc>
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	4631      	mov	r1, r6
 800be52:	4638      	mov	r0, r7
 800be54:	eb04 0803 	add.w	r8, r4, r3
 800be58:	f000 f878 	bl	800bf4c <_sbrk_r>
 800be5c:	4580      	cmp	r8, r0
 800be5e:	d13a      	bne.n	800bed6 <_malloc_r+0xd2>
 800be60:	6821      	ldr	r1, [r4, #0]
 800be62:	3503      	adds	r5, #3
 800be64:	1a6d      	subs	r5, r5, r1
 800be66:	f025 0503 	bic.w	r5, r5, #3
 800be6a:	3508      	adds	r5, #8
 800be6c:	2d0c      	cmp	r5, #12
 800be6e:	bf38      	it	cc
 800be70:	250c      	movcc	r5, #12
 800be72:	4629      	mov	r1, r5
 800be74:	4638      	mov	r0, r7
 800be76:	f7ff ffa5 	bl	800bdc4 <sbrk_aligned>
 800be7a:	3001      	adds	r0, #1
 800be7c:	d02b      	beq.n	800bed6 <_malloc_r+0xd2>
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	442b      	add	r3, r5
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	e00e      	b.n	800bea4 <_malloc_r+0xa0>
 800be86:	6822      	ldr	r2, [r4, #0]
 800be88:	1b52      	subs	r2, r2, r5
 800be8a:	d41e      	bmi.n	800beca <_malloc_r+0xc6>
 800be8c:	2a0b      	cmp	r2, #11
 800be8e:	d916      	bls.n	800bebe <_malloc_r+0xba>
 800be90:	1961      	adds	r1, r4, r5
 800be92:	42a3      	cmp	r3, r4
 800be94:	6025      	str	r5, [r4, #0]
 800be96:	bf18      	it	ne
 800be98:	6059      	strne	r1, [r3, #4]
 800be9a:	6863      	ldr	r3, [r4, #4]
 800be9c:	bf08      	it	eq
 800be9e:	6031      	streq	r1, [r6, #0]
 800bea0:	5162      	str	r2, [r4, r5]
 800bea2:	604b      	str	r3, [r1, #4]
 800bea4:	4638      	mov	r0, r7
 800bea6:	f104 060b 	add.w	r6, r4, #11
 800beaa:	f000 f865 	bl	800bf78 <__malloc_unlock>
 800beae:	f026 0607 	bic.w	r6, r6, #7
 800beb2:	1d23      	adds	r3, r4, #4
 800beb4:	1af2      	subs	r2, r6, r3
 800beb6:	d0b6      	beq.n	800be26 <_malloc_r+0x22>
 800beb8:	1b9b      	subs	r3, r3, r6
 800beba:	50a3      	str	r3, [r4, r2]
 800bebc:	e7b3      	b.n	800be26 <_malloc_r+0x22>
 800bebe:	6862      	ldr	r2, [r4, #4]
 800bec0:	42a3      	cmp	r3, r4
 800bec2:	bf0c      	ite	eq
 800bec4:	6032      	streq	r2, [r6, #0]
 800bec6:	605a      	strne	r2, [r3, #4]
 800bec8:	e7ec      	b.n	800bea4 <_malloc_r+0xa0>
 800beca:	4623      	mov	r3, r4
 800becc:	6864      	ldr	r4, [r4, #4]
 800bece:	e7b2      	b.n	800be36 <_malloc_r+0x32>
 800bed0:	4634      	mov	r4, r6
 800bed2:	6876      	ldr	r6, [r6, #4]
 800bed4:	e7b9      	b.n	800be4a <_malloc_r+0x46>
 800bed6:	230c      	movs	r3, #12
 800bed8:	603b      	str	r3, [r7, #0]
 800beda:	4638      	mov	r0, r7
 800bedc:	f000 f84c 	bl	800bf78 <__malloc_unlock>
 800bee0:	e7a1      	b.n	800be26 <_malloc_r+0x22>
 800bee2:	6025      	str	r5, [r4, #0]
 800bee4:	e7de      	b.n	800bea4 <_malloc_r+0xa0>
 800bee6:	bf00      	nop
 800bee8:	2000085c 	.word	0x2000085c

0800beec <_realloc_r>:
 800beec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef0:	4680      	mov	r8, r0
 800bef2:	4614      	mov	r4, r2
 800bef4:	460e      	mov	r6, r1
 800bef6:	b921      	cbnz	r1, 800bf02 <_realloc_r+0x16>
 800bef8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800befc:	4611      	mov	r1, r2
 800befe:	f7ff bf81 	b.w	800be04 <_malloc_r>
 800bf02:	b92a      	cbnz	r2, 800bf10 <_realloc_r+0x24>
 800bf04:	f7ff ff12 	bl	800bd2c <_free_r>
 800bf08:	4625      	mov	r5, r4
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf10:	f000 f838 	bl	800bf84 <_malloc_usable_size_r>
 800bf14:	4284      	cmp	r4, r0
 800bf16:	4607      	mov	r7, r0
 800bf18:	d802      	bhi.n	800bf20 <_realloc_r+0x34>
 800bf1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf1e:	d812      	bhi.n	800bf46 <_realloc_r+0x5a>
 800bf20:	4621      	mov	r1, r4
 800bf22:	4640      	mov	r0, r8
 800bf24:	f7ff ff6e 	bl	800be04 <_malloc_r>
 800bf28:	4605      	mov	r5, r0
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d0ed      	beq.n	800bf0a <_realloc_r+0x1e>
 800bf2e:	42bc      	cmp	r4, r7
 800bf30:	4622      	mov	r2, r4
 800bf32:	4631      	mov	r1, r6
 800bf34:	bf28      	it	cs
 800bf36:	463a      	movcs	r2, r7
 800bf38:	f7ff fbb0 	bl	800b69c <memcpy>
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4640      	mov	r0, r8
 800bf40:	f7ff fef4 	bl	800bd2c <_free_r>
 800bf44:	e7e1      	b.n	800bf0a <_realloc_r+0x1e>
 800bf46:	4635      	mov	r5, r6
 800bf48:	e7df      	b.n	800bf0a <_realloc_r+0x1e>
	...

0800bf4c <_sbrk_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d06      	ldr	r5, [pc, #24]	; (800bf68 <_sbrk_r+0x1c>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4604      	mov	r4, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	602b      	str	r3, [r5, #0]
 800bf58:	f7f5 fc3a 	bl	80017d0 <_sbrk>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_sbrk_r+0x1a>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_sbrk_r+0x1a>
 800bf64:	6023      	str	r3, [r4, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	20000864 	.word	0x20000864

0800bf6c <__malloc_lock>:
 800bf6c:	4801      	ldr	r0, [pc, #4]	; (800bf74 <__malloc_lock+0x8>)
 800bf6e:	f000 b811 	b.w	800bf94 <__retarget_lock_acquire_recursive>
 800bf72:	bf00      	nop
 800bf74:	20000868 	.word	0x20000868

0800bf78 <__malloc_unlock>:
 800bf78:	4801      	ldr	r0, [pc, #4]	; (800bf80 <__malloc_unlock+0x8>)
 800bf7a:	f000 b80c 	b.w	800bf96 <__retarget_lock_release_recursive>
 800bf7e:	bf00      	nop
 800bf80:	20000868 	.word	0x20000868

0800bf84 <_malloc_usable_size_r>:
 800bf84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf88:	1f18      	subs	r0, r3, #4
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bfbc      	itt	lt
 800bf8e:	580b      	ldrlt	r3, [r1, r0]
 800bf90:	18c0      	addlt	r0, r0, r3
 800bf92:	4770      	bx	lr

0800bf94 <__retarget_lock_acquire_recursive>:
 800bf94:	4770      	bx	lr

0800bf96 <__retarget_lock_release_recursive>:
 800bf96:	4770      	bx	lr

0800bf98 <_init>:
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	bf00      	nop
 800bf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9e:	bc08      	pop	{r3}
 800bfa0:	469e      	mov	lr, r3
 800bfa2:	4770      	bx	lr

0800bfa4 <_fini>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	bf00      	nop
 800bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfaa:	bc08      	pop	{r3}
 800bfac:	469e      	mov	lr, r3
 800bfae:	4770      	bx	lr
