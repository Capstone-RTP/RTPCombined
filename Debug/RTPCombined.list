
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba48  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800bc08  0800bc08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce0  0800bce0  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800bce0  0800bce0  0001bce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce8  0800bce8  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bce8  0800bce8  0001bce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcec  0800bcec  0001bcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800bcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000330  0800c020  00020330  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  0800c020  00020838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208a5  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003207  00000000  00000000  00040c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00043e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00045648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b28  00000000  00000000  00046d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cab6  00000000  00000000  0004b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a5d5  00000000  00000000  00068326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001828fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c24  00000000  00000000  0018294c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000330 	.word	0x20000330
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bbf0 	.word	0x0800bbf0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000334 	.word	0x20000334
 80001fc:	0800bbf0 	.word	0x0800bbf0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 ffc6 	bl	800153a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f901 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fb93 	bl	8000cdc <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b6:	f000 f9db 	bl	8000970 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005ba:	f000 fac9 	bl	8000b50 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 80005be:	f000 f98b 	bl	80008d8 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80005c2:	f000 f949 	bl	8000858 <MX_I2C2_Init>
  MX_TIM3_Init();
 80005c6:	f000 fa4b 	bl	8000a60 <MX_TIM3_Init>
  MX_TIM5_Init();
 80005ca:	f000 fb39 	bl	8000c40 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 80005ce:	4b6b      	ldr	r3, [pc, #428]	; (800077c <main+0x1d8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68da      	ldr	r2, [r3, #12]
 80005d4:	4b69      	ldr	r3, [pc, #420]	; (800077c <main+0x1d8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f042 0201 	orr.w	r2, r2, #1
 80005dc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80005de:	4b68      	ldr	r3, [pc, #416]	; (8000780 <main+0x1dc>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68da      	ldr	r2, [r3, #12]
 80005e4:	4b66      	ldr	r3, [pc, #408]	; (8000780 <main+0x1dc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f042 0201 	orr.w	r2, r2, #1
 80005ec:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80005ee:	4b65      	ldr	r3, [pc, #404]	; (8000784 <main+0x1e0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68da      	ldr	r2, [r3, #12]
 80005f4:	4b63      	ldr	r3, [pc, #396]	; (8000784 <main+0x1e0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f042 0201 	orr.w	r2, r2, #1
 80005fc:	60da      	str	r2, [r3, #12]

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 800);
 80005fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	2320      	movs	r3, #32
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800060c:	2200      	movs	r2, #0
 800060e:	495b      	ldr	r1, [pc, #364]	; (800077c <main+0x1d8>)
 8000610:	485d      	ldr	r0, [pc, #372]	; (8000788 <main+0x1e4>)
 8000612:	f000 fcb0 	bl	8000f76 <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 600);
 8000616:	f44f 7316 	mov.w	r3, #600	; 0x258
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000624:	2200      	movs	r2, #0
 8000626:	4956      	ldr	r1, [pc, #344]	; (8000780 <main+0x1dc>)
 8000628:	4858      	ldr	r0, [pc, #352]	; (800078c <main+0x1e8>)
 800062a:	f000 fca4 	bl	8000f76 <initStepper>
	initStepper(&thetaMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 800);
 800062e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800063c:	2208      	movs	r2, #8
 800063e:	4951      	ldr	r1, [pc, #324]	; (8000784 <main+0x1e0>)
 8000640:	4851      	ldr	r0, [pc, #324]	; (8000788 <main+0x1e4>)
 8000642:	f000 fc98 	bl	8000f76 <initStepper>

	//I2C assignment to TOF API
	Dev->I2cHandle = &hi2c2;
 8000646:	4b52      	ldr	r3, [pc, #328]	; (8000790 <main+0x1ec>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a52      	ldr	r2, [pc, #328]	; (8000794 <main+0x1f0>)
 800064c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8000650:	4b4f      	ldr	r3, [pc, #316]	; (8000790 <main+0x1ec>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2252      	movs	r2, #82	; 0x52
 8000656:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	// VL53L0X init for Single Measurement
	VL53L0X_WaitDeviceBooted( Dev );
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <main+0x1ec>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f006 f91a 	bl	8006898 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000664:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <main+0x1ec>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fe2f 	bl	80062cc <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 800066e:	4b48      	ldr	r3, [pc, #288]	; (8000790 <main+0x1ec>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f005 ff8e 	bl	8006594 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000678:	4b45      	ldr	r3, [pc, #276]	; (8000790 <main+0x1ec>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1d7a      	adds	r2, r7, #5
 800067e:	1db9      	adds	r1, r7, #6
 8000680:	4618      	mov	r0, r3
 8000682:	f006 fe29 	bl	80072d8 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000686:	4b42      	ldr	r3, [pc, #264]	; (8000790 <main+0x1ec>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1dfa      	adds	r2, r7, #7
 800068c:	f107 0108 	add.w	r1, r7, #8
 8000690:	4618      	mov	r0, r3
 8000692:	f007 faaf 	bl	8007bf4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000696:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <main+0x1ec>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f006 f999 	bl	80069d4 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80006a2:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <main+0x1ec>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2201      	movs	r2, #1
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fc0e 	bl	8006ecc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <main+0x1ec>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2201      	movs	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f006 fc07 	bl	8006ecc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <main+0x1ec>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f641 1299 	movw	r2, #6553	; 0x1999
 80006c6:	2101      	movs	r1, #1
 80006c8:	4618      	mov	r0, r3
 80006ca:	f006 fcaf 	bl	800702c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80006ce:	4b30      	ldr	r3, [pc, #192]	; (8000790 <main+0x1ec>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fca7 	bl	800702c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 25000);
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <main+0x1ec>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 f9d2 	bl	8006a90 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <main+0x1ec>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2212      	movs	r2, #18
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f006 f9f1 	bl	8006adc <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <main+0x1ec>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	220e      	movs	r2, #14
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f006 f9ea 	bl	8006adc <VL53L0X_SetVcselPulsePeriod>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <main+0x1f4>)
 800070a:	f003 fdaf 	bl	800426c <HAL_TIM_Base_Start>
		//		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
		//
		//		if((HAL_GetTick()-timer>=5000) && (HAL_GetTick()-timer<=5180)){
		//			setTarget(&yMotor, 1000, 0);
		//		}
		timer = HAL_GetTick();
 800070e:	f000 ff7d 	bl	800160c <HAL_GetTick>
 8000712:	60f8      	str	r0, [r7, #12]
		VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <main+0x1ec>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4920      	ldr	r1, [pc, #128]	; (800079c <main+0x1f8>)
 800071a:	4618      	mov	r0, r3
 800071c:	f007 f87e 	bl	800781c <VL53L0X_PerformSingleRangingMeasurement>
		  if(RangingData.RangeStatus == 0)
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <main+0x1f8>)
 8000722:	7e1b      	ldrb	r3, [r3, #24]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f2      	bne.n	800070e <main+0x16a>
		  {
			  MessageLen = sprintf((char*)Message, "Measured distance: %i ", RangingData.RangeMilliMeter);
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <main+0x1f8>)
 800072a:	891b      	ldrh	r3, [r3, #8]
 800072c:	461a      	mov	r2, r3
 800072e:	491c      	ldr	r1, [pc, #112]	; (80007a0 <main+0x1fc>)
 8000730:	481c      	ldr	r0, [pc, #112]	; (80007a4 <main+0x200>)
 8000732:	f00a fdf5 	bl	800b320 <siprintf>
 8000736:	4603      	mov	r3, r0
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <main+0x204>)
 800073c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <main+0x204>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b29a      	uxth	r2, r3
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	4917      	ldr	r1, [pc, #92]	; (80007a4 <main+0x200>)
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <main+0x208>)
 800074a:	f004 ff61 	bl	8005610 <HAL_UART_Transmit>
			  MessageLen = sprintf((char*)Message, " Measure Time: %d\n\r",(int)(HAL_GetTick()-timer));
 800074e:	f000 ff5d 	bl	800160c <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	461a      	mov	r2, r3
 800075a:	4915      	ldr	r1, [pc, #84]	; (80007b0 <main+0x20c>)
 800075c:	4811      	ldr	r0, [pc, #68]	; (80007a4 <main+0x200>)
 800075e:	f00a fddf 	bl	800b320 <siprintf>
 8000762:	4603      	mov	r3, r0
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <main+0x204>)
 8000768:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <main+0x204>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b29a      	uxth	r2, r3
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	490c      	ldr	r1, [pc, #48]	; (80007a4 <main+0x200>)
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <main+0x208>)
 8000776:	f004 ff4b 	bl	8005610 <HAL_UART_Transmit>
		timer = HAL_GetTick();
 800077a:	e7c8      	b.n	800070e <main+0x16a>
 800077c:	2000047c 	.word	0x2000047c
 8000780:	20000430 	.word	0x20000430
 8000784:	200004c8 	.word	0x200004c8
 8000788:	20000560 	.word	0x20000560
 800078c:	20000590 	.word	0x20000590
 8000790:	20000000 	.word	0x20000000
 8000794:	2000034c 	.word	0x2000034c
 8000798:	20000514 	.word	0x20000514
 800079c:	20000634 	.word	0x20000634
 80007a0:	0800bc08 	.word	0x0800bc08
 80007a4:	200005f0 	.word	0x200005f0
 80007a8:	20000630 	.word	0x20000630
 80007ac:	200003a0 	.word	0x200003a0
 80007b0:	0800bc20 	.word	0x0800bc20

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b098      	sub	sp, #96	; 0x60
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	2248      	movs	r2, #72	; 0x48
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00a fda4 	bl	800b310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007d6:	2000      	movs	r0, #0
 80007d8:	f001 ffae 	bl	8002738 <HAL_PWREx_ControlVoltageScaling>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007e2:	f000 fbc3 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e6:	2310      	movs	r3, #16
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ea:	2301      	movs	r3, #1
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f2:	2360      	movs	r3, #96	; 0x60
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007fa:	2301      	movs	r3, #1
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f002 f842 	bl	80028a0 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000822:	f000 fba3 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2303      	movs	r3, #3
 800082c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2104      	movs	r1, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fcaa 	bl	8003198 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084a:	f000 fb8f 	bl	8000f6c <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3760      	adds	r7, #96	; 0x60
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_I2C2_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_I2C2_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_I2C2_Init+0x74>)
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <MX_I2C2_Init+0x7c>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_I2C2_Init+0x74>)
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_I2C2_Init+0x74>)
 8000894:	f001 f9a6 	bl	8001be4 <HAL_I2C_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800089e:	f000 fb65 	bl	8000f6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_I2C2_Init+0x74>)
 80008a6:	f001 fe8f 	bl	80025c8 <HAL_I2CEx_ConfigAnalogFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f000 fb5c 	bl	8000f6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2C2_Init+0x74>)
 80008b8:	f001 fed1 	bl	800265e <HAL_I2CEx_ConfigDigitalFilter>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f000 fb53 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000034c 	.word	0x2000034c
 80008d0:	40005800 	.word	0x40005800
 80008d4:	10c0ecff 	.word	0x10c0ecff

080008d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008dc:	4b22      	ldr	r3, [pc, #136]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 80008de:	4a23      	ldr	r2, [pc, #140]	; (800096c <MX_LPUART1_UART_Init+0x94>)
 80008e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 8000922:	f004 fe25 	bl	8005570 <HAL_UART_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800092c:	f000 fb1e 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 8000934:	f005 fbec 	bl	8006110 <HAL_UARTEx_SetTxFifoThreshold>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800093e:	f000 fb15 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4808      	ldr	r0, [pc, #32]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 8000946:	f005 fc21 	bl	800618c <HAL_UARTEx_SetRxFifoThreshold>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000950:	f000 fb0c 	bl	8000f6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_LPUART1_UART_Init+0x90>)
 8000956:	f005 fba2 	bl	800609e <HAL_UARTEx_DisableFifoMode>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 fb04 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200003a0 	.word	0x200003a0
 800096c:	40008000 	.word	0x40008000

08000970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	; 0x38
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009ac:	2263      	movs	r2, #99	; 0x63
 80009ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80009bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009be:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ca:	4824      	ldr	r0, [pc, #144]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009cc:	f003 fbf6 	bl	80041bc <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009d6:	f000 fac9 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e4:	4619      	mov	r1, r3
 80009e6:	481d      	ldr	r0, [pc, #116]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009e8:	f003 fffa 	bl	80049e0 <HAL_TIM_ConfigClockSource>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009f2:	f000 fabb 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009f6:	4819      	ldr	r0, [pc, #100]	; (8000a5c <MX_TIM2_Init+0xec>)
 80009f8:	f003 fcc7 	bl	800438a <HAL_TIM_PWM_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a02:	f000 fab3 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <MX_TIM2_Init+0xec>)
 8000a16:	f004 fd05 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a20:	f000 faa4 	bl	8000f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000a28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM2_Init+0xec>)
 8000a3e:	f003 febb 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a48:	f000 fa90 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM2_Init+0xec>)
 8000a4e:	f000 fc39 	bl	80012c4 <HAL_TIM_MspPostInit>

}
 8000a52:	bf00      	nop
 8000a54:	3738      	adds	r7, #56	; 0x38
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000430 	.word	0x20000430

08000a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000a94:	4a2d      	ldr	r2, [pc, #180]	; (8000b4c <MX_TIM3_Init+0xec>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000a9a:	2263      	movs	r2, #99	; 0x63
 8000a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000aa6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ab8:	4823      	ldr	r0, [pc, #140]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000aba:	f003 fb7f 	bl	80041bc <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ac4:	f000 fa52 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000ad6:	f003 ff83 	bl	80049e0 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ae0:	f000 fa44 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000ae6:	f003 fc50 	bl	800438a <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000af0:	f000 fa3c 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000b04:	f004 fc8e 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b0e:	f000 fa2d 	bl	8000f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b12:	2360      	movs	r3, #96	; 0x60
 8000b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000b16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000b2c:	f003 fe44 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b36:	f000 fa19 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <MX_TIM3_Init+0xe8>)
 8000b3c:	f000 fbc2 	bl	80012c4 <HAL_TIM_MspPostInit>

}
 8000b40:	bf00      	nop
 8000b42:	3738      	adds	r7, #56	; 0x38
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000047c 	.word	0x2000047c
 8000b4c:	40000400 	.word	0x40000400

08000b50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <MX_TIM4_Init+0xec>)
 8000b86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000b8a:	2263      	movs	r2, #99	; 0x63
 8000b8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000b96:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000baa:	f003 fb07 	bl	80041bc <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000bb4:	f000 f9da 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000bc6:	f003 ff0b 	bl	80049e0 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000bd0:	f000 f9cc 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000bd6:	f003 fbd8 	bl	800438a <HAL_TIM_PWM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000be0:	f000 f9c4 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000bf4:	f004 fc16 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000bfe:	f000 f9b5 	bl	8000f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c02:	2360      	movs	r3, #96	; 0x60
 8000c04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000c06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	2208      	movs	r2, #8
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000c1c:	f003 fdcc 	bl	80047b8 <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000c26:	f000 f9a1 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <MX_TIM4_Init+0xe8>)
 8000c2c:	f000 fb4a 	bl	80012c4 <HAL_TIM_MspPostInit>

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200004c8 	.word	0x200004c8
 8000c3c:	40000800 	.word	0x40000800

08000c40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <MX_TIM5_Init+0x98>)
 8000c62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000c66:	2263      	movs	r2, #99	; 0x63
 8000c68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000c72:	f04f 32ff 	mov.w	r2, #4294967295
 8000c76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000c86:	f003 fa99 	bl	80041bc <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000c90:	f000 f96c 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000ca2:	f003 fe9d 	bl	80049e0 <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f95e 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM5_Init+0x94>)
 8000cbe:	f004 fbb1 	bl	8005424 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 f950 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000514 	.word	0x20000514
 8000cd8:	40000c00 	.word	0x40000c00

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a1e      	ldr	r2, [pc, #120]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_GPIO_Init+0xc4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000d6a:	f001 fd89 	bl	8002880 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	21e0      	movs	r1, #224	; 0xe0
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f000 ff1d 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000d7a:	23e0      	movs	r3, #224	; 0xe0
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f000 fd7c 	bl	8001890 <HAL_GPIO_Init>

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000da8:	b088      	sub	sp, #32
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	4a64      	ldr	r2, [pc, #400]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d144      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x9c>
		if(thetaMotor.Status == RunningForward){
 8000db6:	4b64      	ldr	r3, [pc, #400]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d11a      	bne.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x54>
			thetaMotor.CurrentPosition++;
 8000dc2:	4b61      	ldr	r3, [pc, #388]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dc4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000dc8:	f112 0801 	adds.w	r8, r2, #1
 8000dcc:	f143 0900 	adc.w	r9, r3, #0
 8000dd0:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dd2:	e9c3 8906 	strd	r8, r9, [r3, #24]
			MessageLen = sprintf((char*)Message, "here2");
 8000dd6:	495d      	ldr	r1, [pc, #372]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000dd8:	485d      	ldr	r0, [pc, #372]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000dda:	f00a faa1 	bl	800b320 <siprintf>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b5c      	ldr	r3, [pc, #368]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000de4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 8000de6:	4b5b      	ldr	r3, [pc, #364]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	2364      	movs	r3, #100	; 0x64
 8000dee:	4958      	ldr	r1, [pc, #352]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000df0:	4859      	ldr	r0, [pc, #356]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000df2:	f004 fc0d 	bl	8005610 <HAL_UART_Transmit>
 8000df6:	e00e      	b.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x72>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000df8:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d108      	bne.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x72>
			thetaMotor.CurrentPosition--;
 8000e04:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e0a:	1e54      	subs	r4, r2, #1
 8000e0c:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000e10:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e12:	e9c3 4506 	strd	r4, r5, [r3, #24]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000e16:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e18:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e1c:	4b4a      	ldr	r3, [pc, #296]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e22:	4299      	cmp	r1, r3
 8000e24:	bf08      	it	eq
 8000e26:	4290      	cmpeq	r0, r2
 8000e28:	d10a      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x9c>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4845      	ldr	r0, [pc, #276]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e2e:	f003 fb0d 	bl	800444c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000e32:	4844      	ldr	r0, [pc, #272]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e34:	f003 fa82 	bl	800433c <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8000e38:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d13b      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x11c>
		if(yMotor.Status == RunningForward){
 8000e48:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10d      	bne.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0xcc>
			yMotor.CurrentPosition++;
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e56:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e5a:	1c51      	adds	r1, r2, #1
 8000e5c:	6139      	str	r1, [r7, #16]
 8000e5e:	f143 0300 	adc.w	r3, r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e6a:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000e6e:	e012      	b.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0xf2>
		}
		else if (yMotor.Status == RunningBackward){
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d10c      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0xf2>
			yMotor.CurrentPosition--;
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e7e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e82:	1e51      	subs	r1, r2, #1
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e92:	e9c3 1206 	strd	r1, r2, [r3, #24]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e98:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e9c:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	bf08      	it	eq
 8000ea6:	4290      	cmpeq	r0, r2
 8000ea8:	d10a      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	482b      	ldr	r0, [pc, #172]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000eae:	f003 facd 	bl	800444c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000eb2:	482a      	ldr	r0, [pc, #168]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000eb4:	f003 fa42 	bl	800433c <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d138      	bne.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x196>
		if(rMotor.Status == RunningForward){
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d10d      	bne.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition++;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ed6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000eda:	1c51      	adds	r1, r2, #1
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	f143 0300 	adc.w	r3, r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ee6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000eea:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000eee:	e00f      	b.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0x16c>
		}
		else if (rMotor.Status == RunningBackward){
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d109      	bne.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0x16c>
			rMotor.CurrentPosition--;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000efe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f02:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000f06:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f0c:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	bf08      	it	eq
 8000f20:	4290      	cmpeq	r0, r2
 8000f22:	d10a      	bne.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x196>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8000f24:	2108      	movs	r1, #8
 8000f26:	480f      	ldr	r0, [pc, #60]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f28:	f003 fa90 	bl	800444c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f2e:	f003 fa05 	bl	800433c <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000f34:	2203      	movs	r2, #3
 8000f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f44:	2000047c 	.word	0x2000047c
 8000f48:	20000560 	.word	0x20000560
 8000f4c:	0800bc34 	.word	0x0800bc34
 8000f50:	200005f0 	.word	0x200005f0
 8000f54:	20000630 	.word	0x20000630
 8000f58:	200003a0 	.word	0x200003a0
 8000f5c:	20000430 	.word	0x20000430
 8000f60:	20000590 	.word	0x20000590
 8000f64:	200004c8 	.word	0x200004c8
 8000f68:	200005c0 	.word	0x200005c0

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>

08000f76 <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8b3a      	ldrh	r2, [r7, #24]
 8000f9a:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 8000fa2:	68f9      	ldr	r1, [r7, #12]
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	stepper->TargetPosition =0;
 8000fb0:	68f9      	ldr	r1, [r7, #12]
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Set status
	stepper->Status = Stopped;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 f805 	bl	8000fdc <setSpeed>
	//return stepper structure pointer
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <setSpeed>:
	//setDirection
	//if stepper isn't running, run and set direction

}

void setSpeed (stepper * stepper, uint32_t speed){
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	005a      	lsls	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4909      	ldr	r1, [pc, #36]	; (800101c <setSpeed+0x40>)
 8000ff8:	fbb1 f2f2 	udiv	r2, r1, r2
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 8000ffe:	4a07      	ldr	r2, [pc, #28]	; (800101c <setSpeed+0x40>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	fbb2 f2f3 	udiv	r2, r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3a01      	subs	r2, #1
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	000f4240 	.word	0x000f4240

08001020 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	; 0x60
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b0b0      	sub	sp, #192	; 0xc0
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2298      	movs	r2, #152	; 0x98
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00a f941 	bl	800b310 <memset>
  if(hi2c->Instance==I2C2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_I2C_MspInit+0xb0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d13a      	bne.n	800110e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fb35 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010b0:	f7ff ff5c 	bl	8000f6c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_I2C_MspInit+0xb4>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a18      	ldr	r2, [pc, #96]	; (800111c <HAL_I2C_MspInit+0xb4>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_I2C_MspInit+0xb4>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010cc:	2303      	movs	r3, #3
 80010ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d2:	2312      	movs	r3, #18
 80010d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010e4:	2304      	movs	r3, #4
 80010e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <HAL_I2C_MspInit+0xb8>)
 80010f2:	f000 fbcd 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_I2C_MspInit+0xb4>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_I2C_MspInit+0xb4>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_I2C_MspInit+0xb4>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	37c0      	adds	r7, #192	; 0xc0
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40005800 	.word	0x40005800
 800111c:	40021000 	.word	0x40021000
 8001120:	48001400 	.word	0x48001400

08001124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0b0      	sub	sp, #192	; 0xc0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2298      	movs	r2, #152	; 0x98
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00a f8e3 	bl	800b310 <memset>
  if(huart->Instance==LPUART1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_UART_MspInit+0xb4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d13d      	bne.n	80011d0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001154:	2320      	movs	r3, #32
 8001156:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001158:	2300      	movs	r3, #0
 800115a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fad7 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800116c:	f7ff fefe 	bl	8000f6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_UART_MspInit+0xb8>)
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_UART_MspInit+0xb8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_UART_MspInit+0xb8>)
 800117e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_UART_MspInit+0xb8>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_UART_MspInit+0xb8>)
 800118e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_UART_MspInit+0xb8>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80011a0:	f001 fb6e 	bl	8002880 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80011a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80011be:	2308      	movs	r3, #8
 80011c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011c8:	4619      	mov	r1, r3
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_UART_MspInit+0xbc>)
 80011cc:	f000 fb60 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	37c0      	adds	r7, #192	; 0xc0
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40008000 	.word	0x40008000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48001800 	.word	0x48001800

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f4:	d114      	bne.n	8001220 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f6:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6593      	str	r3, [r2, #88]	; 0x58
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	201c      	movs	r0, #28
 8001214:	f000 fb05 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001218:	201c      	movs	r0, #28
 800121a:	f000 fb1e 	bl	800185a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800121e:	e044      	b.n	80012aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d114      	bne.n	8001254 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	201d      	movs	r0, #29
 8001248:	f000 faeb 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800124c:	201d      	movs	r0, #29
 800124e:	f000 fb04 	bl	800185a <HAL_NVIC_EnableIRQ>
}
 8001252:	e02a      	b.n	80012aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_TIM_Base_MspInit+0xd8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d114      	bne.n	8001288 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	201e      	movs	r0, #30
 800127c:	f000 fad1 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001280:	201e      	movs	r0, #30
 8001282:	f000 faea 	bl	800185a <HAL_NVIC_EnableIRQ>
}
 8001286:	e010      	b.n	80012aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <HAL_TIM_Base_MspInit+0xdc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10b      	bne.n	80012aa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6593      	str	r3, [r2, #88]	; 0x58
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_TIM_Base_MspInit+0xd0>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40000400 	.word	0x40000400
 80012bc:	40000800 	.word	0x40000800
 80012c0:	40000c00 	.word	0x40000c00

080012c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d11d      	bne.n	8001322 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800130e:	2301      	movs	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f000 fab8 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001320:	e043      	b.n	80013aa <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <HAL_TIM_MspPostInit+0xf4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d11c      	bne.n	8001366 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	4a20      	ldr	r2, [pc, #128]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001344:	2308      	movs	r3, #8
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001354:	2302      	movs	r3, #2
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <HAL_TIM_MspPostInit+0xf8>)
 8001360:	f000 fa96 	bl	8001890 <HAL_GPIO_Init>
}
 8001364:	e021      	b.n	80013aa <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_TIM_MspPostInit+0xfc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d11c      	bne.n	80013aa <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_TIM_MspPostInit+0xf0>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800139a:	2302      	movs	r3, #2
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <HAL_TIM_MspPostInit+0x100>)
 80013a6:	f000 fa73 	bl	8001890 <HAL_GPIO_Init>
}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40000400 	.word	0x40000400
 80013bc:	48001000 	.word	0x48001000
 80013c0:	40000800 	.word	0x40000800
 80013c4:	48000c00 	.word	0x48000c00

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f8e6 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM2_IRQHandler+0x10>)
 8001422:	f003 f8a9 	bl	8004578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000430 	.word	0x20000430

08001430 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM3_IRQHandler+0x10>)
 8001436:	f003 f89f 	bl	8004578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000047c 	.word	0x2000047c

08001444 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM4_IRQHandler+0x10>)
 800144a:	f003 f895 	bl	8004578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200004c8 	.word	0x200004c8

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f009 ff0a 	bl	800b2a0 <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20050000 	.word	0x20050000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	200007e0 	.word	0x200007e0
 80014c0:	20000838 	.word	0x20000838

080014c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ec:	f7ff ffea 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopForever+0xe>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopForever+0x16>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f009 fec9 	bl	800b2ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151a:	f7ff f843 	bl	80005a4 <main>

0800151e <LoopForever>:

LoopForever:
    b LoopForever
 800151e:	e7fe      	b.n	800151e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001520:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 800152c:	0800bcf0 	.word	0x0800bcf0
  ldr r2, =_sbss
 8001530:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8001534:	20000838 	.word	0x20000838

08001538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC1_2_IRQHandler>

0800153a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f961 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f80e 	bl	800156c <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	e001      	b.n	8001560 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800155c:	f7ff fd60 	bl	8001020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001560:	79fb      	ldrb	r3, [r7, #7]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_InitTick+0x6c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d023      	beq.n	80015c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_InitTick+0x70>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_InitTick+0x6c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f96d 	bl	8001876 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10f      	bne.n	80015c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d809      	bhi.n	80015bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f937 	bl	8001822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_InitTick+0x74>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e007      	b.n	80015cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e004      	b.n	80015cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e001      	b.n	80015cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	20000004 	.word	0x20000004
 80015e0:	20000008 	.word	0x20000008

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2000000c 	.word	0x2000000c
 8001608:	200007e4 	.word	0x200007e4

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200007e4 	.word	0x200007e4

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff ffee 	bl	800160c <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_Delay+0x44>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffde 	bl	800160c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000000c 	.word	0x2000000c

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff29 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff3e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff31 	bl	80016d0 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e166      	b.n	8001b6e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8158 	beq.w	8001b68 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d005      	beq.n	80018d0 <HAL_GPIO_Init+0x40>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 0201 	and.w	r2, r3, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b03      	cmp	r3, #3
 800193c:	d017      	beq.n	800196e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d123      	bne.n	80019c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	6939      	ldr	r1, [r7, #16]
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0203 	and.w	r2, r3, #3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80b2 	beq.w	8001b68 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a04:	4b61      	ldr	r3, [pc, #388]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a08:	4a60      	ldr	r2, [pc, #384]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a1c:	4a5c      	ldr	r2, [pc, #368]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a46:	d02b      	beq.n	8001aa0 <HAL_GPIO_Init+0x210>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d025      	beq.n	8001a9c <HAL_GPIO_Init+0x20c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a51      	ldr	r2, [pc, #324]	; (8001b98 <HAL_GPIO_Init+0x308>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01f      	beq.n	8001a98 <HAL_GPIO_Init+0x208>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a50      	ldr	r2, [pc, #320]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d019      	beq.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a4f      	ldr	r2, [pc, #316]	; (8001ba0 <HAL_GPIO_Init+0x310>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_GPIO_Init+0x200>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ba4 <HAL_GPIO_Init+0x314>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1fc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a4d      	ldr	r2, [pc, #308]	; (8001ba8 <HAL_GPIO_Init+0x318>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1f8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a4c      	ldr	r2, [pc, #304]	; (8001bac <HAL_GPIO_Init+0x31c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1f4>
 8001a80:	2307      	movs	r3, #7
 8001a82:	e00e      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a84:	2308      	movs	r3, #8
 8001a86:	e00c      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a88:	2306      	movs	r3, #6
 8001a8a:	e00a      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a8c:	2305      	movs	r3, #5
 8001a8e:	e008      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a90:	2304      	movs	r3, #4
 8001a92:	e006      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e004      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ab2:	4937      	ldr	r1, [pc, #220]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ae4:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b38:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f ae91 	bne.w	80018a0 <HAL_GPIO_Init+0x10>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00
 8001ba0:	48001000 	.word	0x48001000
 8001ba4:	48001400 	.word	0x48001400
 8001ba8:	48001800 	.word	0x48001800
 8001bac:	48001c00 	.word	0x48001c00
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e081      	b.n	8001cfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fa2c 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2224      	movs	r2, #36	; 0x24
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	e006      	b.n	8001c6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d104      	bne.n	8001c7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69d9      	ldr	r1, [r3, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	460b      	mov	r3, r1
 8001d12:	817b      	strh	r3, [r7, #10]
 8001d14:	4613      	mov	r3, r2
 8001d16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	f040 80da 	bne.w	8001eda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2C_Master_Transmit+0x30>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e0d3      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fc66 	bl	800160c <HAL_GetTick>
 8001d40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2319      	movs	r3, #25
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f9e6 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0be      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2221      	movs	r2, #33	; 0x21
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	893a      	ldrh	r2, [r7, #8]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d90e      	bls.n	8001dae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fbdc 	bl	8002564 <I2C_TransferConfig>
 8001dac:	e06c      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	8979      	ldrh	r1, [r7, #10]
 8001dc0:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fbcb 	bl	8002564 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001dce:	e05b      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	6a39      	ldr	r1, [r7, #32]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f9e3 	bl	80021a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e07b      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d034      	beq.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d130      	bne.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f975 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e04d      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d90e      	bls.n	8001e68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	8979      	ldrh	r1, [r7, #10]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fb7f 	bl	8002564 <I2C_TransferConfig>
 8001e66:	e00f      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	8979      	ldrh	r1, [r7, #10]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fb6e 	bl	8002564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d19e      	bne.n	8001dd0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f9c2 	bl	8002220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e01a      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001eba:	400b      	ands	r3, r1
 8001ebc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	80002000 	.word	0x80002000
 8001ee8:	fe00e800 	.word	0xfe00e800

08001eec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
 8001efc:	4613      	mov	r3, r2
 8001efe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	f040 80db 	bne.w	80020c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_I2C_Master_Receive+0x30>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e0d4      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f24:	f7ff fb72 	bl	800160c <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2319      	movs	r3, #25
 8001f30:	2201      	movs	r2, #1
 8001f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f8f2 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0bf      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2222      	movs	r2, #34	; 0x22
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2210      	movs	r2, #16
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	893a      	ldrh	r2, [r7, #8]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2bff      	cmp	r3, #255	; 0xff
 8001f76:	d90e      	bls.n	8001f96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <HAL_I2C_Master_Receive+0x1e4>)
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fae8 	bl	8002564 <I2C_TransferConfig>
 8001f94:	e06d      	b.n	8002072 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8979      	ldrh	r1, [r7, #10]
 8001fa8:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_I2C_Master_Receive+0x1e4>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fad7 	bl	8002564 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001fb6:	e05c      	b.n	8002072 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	6a39      	ldr	r1, [r7, #32]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 f96b 	bl	8002298 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e07c      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d034      	beq.n	8002072 <HAL_I2C_Master_Receive+0x186>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d130      	bne.n	8002072 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2200      	movs	r2, #0
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f880 	bl	8002120 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e04d      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	2bff      	cmp	r3, #255	; 0xff
 8002032:	d90e      	bls.n	8002052 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	22ff      	movs	r2, #255	; 0xff
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	b2da      	uxtb	r2, r3
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fa8a 	bl	8002564 <I2C_TransferConfig>
 8002050:	e00f      	b.n	8002072 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fa79 	bl	8002564 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d19d      	bne.n	8001fb8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	6a39      	ldr	r1, [r7, #32]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f8cd 	bl	8002220 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e01a      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2220      	movs	r2, #32
 8002096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_I2C_Master_Receive+0x1e8>)
 80020a4:	400b      	ands	r3, r1
 80020a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e000      	b.n	80020c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020c4:	2302      	movs	r3, #2
  }
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	80002400 	.word	0x80002400
 80020d4:	fe00e800 	.word	0xfe00e800

080020d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d103      	bne.n	80020f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d007      	beq.n	8002114 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	619a      	str	r2, [r3, #24]
  }
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002130:	e022      	b.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d01e      	beq.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7ff fa67 	bl	800160c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d113      	bne.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e00f      	b.n	8002198 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	429a      	cmp	r2, r3
 8002194:	d0cd      	beq.n	8002132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ac:	e02c      	b.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f8ea 	bl	800238c <I2C_IsErrorOccurred>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e02a      	b.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d01e      	beq.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff fa1f 	bl	800160c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d113      	bne.n	8002208 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d1cb      	bne.n	80021ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800222c:	e028      	b.n	8002280 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8aa 	bl	800238c <I2C_IsErrorOccurred>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e026      	b.n	8002290 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7ff f9e3 	bl	800160c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b20      	cmp	r3, #32
 800228c:	d1cf      	bne.n	800222e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022a4:	e064      	b.n	8002370 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f86e 	bl	800238c <I2C_IsErrorOccurred>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e062      	b.n	8002380 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d138      	bne.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d105      	bne.n	80022e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e04e      	b.n	8002380 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d107      	bne.n	8002300 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2210      	movs	r2, #16
 80022f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2204      	movs	r2, #4
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
 80022fe:	e002      	b.n	8002306 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2220      	movs	r2, #32
 800230c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800231a:	400b      	ands	r3, r1
 800231c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e022      	b.n	8002380 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7ff f967 	bl	800160c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10f      	bne.n	8002370 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e007      	b.n	8002380 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d193      	bne.n	80022a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	fe00e800 	.word	0xfe00e800

0800238c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d075      	beq.n	80024a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2210      	movs	r2, #16
 80023be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023c0:	e056      	b.n	8002470 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d052      	beq.n	8002470 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff f91f 	bl	800160c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_IsErrorOccurred+0x54>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d147      	bne.n	8002470 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d12e      	bne.n	8002462 <I2C_IsErrorOccurred+0xd6>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240a:	d02a      	beq.n	8002462 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b20      	cmp	r3, #32
 8002410:	d027      	beq.n	8002462 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002422:	f7ff f8f3 	bl	800160c <HAL_GetTick>
 8002426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	e01b      	b.n	8002462 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800242a:	f7ff f8ef 	bl	800160c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b19      	cmp	r3, #25
 8002436:	d914      	bls.n	8002462 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d1dc      	bne.n	800242a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b20      	cmp	r3, #32
 800247c:	d003      	beq.n	8002486 <I2C_IsErrorOccurred+0xfa>
 800247e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002482:	2b00      	cmp	r3, #0
 8002484:	d09d      	beq.n	80023c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2220      	movs	r2, #32
 8002494:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f043 0308 	orr.w	r3, r3, #8
 80024de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01c      	beq.n	8002554 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fddc 	bl	80020d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <I2C_IsErrorOccurred+0x1d4>)
 800252c:	400b      	ands	r3, r1
 800252e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002558:	4618      	mov	r0, r3
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	4613      	mov	r3, r2
 8002574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800257c:	7a7b      	ldrb	r3, [r7, #9]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002584:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	4313      	orrs	r3, r2
 800258e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002592:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <I2C_TransferConfig+0x60>)
 80025a4:	430b      	orrs	r3, r1
 80025a6:	43db      	mvns	r3, r3
 80025a8:	ea02 0103 	and.w	r1, r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	03ff63ff 	.word	0x03ff63ff

080025c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d138      	bne.n	8002650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e032      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800261a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	d139      	bne.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800267e:	2302      	movs	r3, #2
 8002680:	e033      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2224      	movs	r2, #36	; 0x24
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_PWREx_GetVoltageRange+0x3c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002708:	d102      	bne.n	8002710 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800270a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270e:	e00b      	b.n	8002728 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271e:	d102      	bne.n	8002726 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002724:	e000      	b.n	8002728 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002726:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40007000 	.word	0x40007000

08002738 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d141      	bne.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002746:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002752:	d131      	bne.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002754:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275a:	4a46      	ldr	r2, [pc, #280]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002764:	4b43      	ldr	r3, [pc, #268]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800276c:	4a41      	ldr	r2, [pc, #260]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002774:	4b40      	ldr	r3, [pc, #256]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2232      	movs	r2, #50	; 0x32
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	4a3f      	ldr	r2, [pc, #252]	; (800287c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278a:	e002      	b.n	8002792 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3b01      	subs	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d102      	bne.n	80027a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f2      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d158      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e057      	b.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b8:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027be:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c8:	e04d      	b.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d0:	d141      	bne.n	8002856 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027d2:	4b28      	ldr	r3, [pc, #160]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	d131      	bne.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e6:	4a23      	ldr	r2, [pc, #140]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f0:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f8:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2232      	movs	r2, #50	; 0x32
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	0c9b      	lsrs	r3, r3, #18
 8002812:	3301      	adds	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002816:	e002      	b.n	800281e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3b01      	subs	r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282a:	d102      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f2      	bne.n	8002818 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283e:	d112      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e011      	b.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002854:	e007      	b.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002864:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40007000 	.word	0x40007000
 8002878:	20000004 	.word	0x20000004
 800287c:	431bde83 	.word	0x431bde83

08002880 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_PWREx_EnableVddIO2+0x1c>)
 800288a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288e:	6053      	str	r3, [r2, #4]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40007000 	.word	0x40007000

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f000 bc68 	b.w	8003184 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b4:	4b97      	ldr	r3, [pc, #604]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028be:	4b95      	ldr	r3, [pc, #596]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80e6 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_RCC_OscConfig+0x4c>
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	f040 808d 	bne.w	80029fe <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 8089 	bne.w	80029fe <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ec:	4b89      	ldr	r3, [pc, #548]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_RCC_OscConfig+0x66>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f000 bc3f 	b.w	8003184 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290a:	4b82      	ldr	r3, [pc, #520]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <HAL_RCC_OscConfig+0x80>
 8002916:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291e:	e005      	b.n	800292c <HAL_RCC_OscConfig+0x8c>
 8002920:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292c:	4293      	cmp	r3, r2
 800292e:	d224      	bcs.n	800297a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fe2d 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f000 bc1f 	b.w	8003184 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a72      	ldr	r2, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	496d      	ldr	r1, [pc, #436]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002964:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	4968      	ldr	r1, [pc, #416]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e025      	b.n	80029c6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800297a:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a65      	ldr	r2, [pc, #404]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	4960      	ldr	r1, [pc, #384]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002998:	4b5e      	ldr	r3, [pc, #376]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	495b      	ldr	r1, [pc, #364]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fdec 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e3de      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c6:	f000 fd21 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b51      	ldr	r3, [pc, #324]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	4950      	ldr	r1, [pc, #320]	; (8002b18 <HAL_RCC_OscConfig+0x278>)
 80029d8:	5ccb      	ldrb	r3, [r1, r3]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <HAL_RCC_OscConfig+0x27c>)
 80029e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fdbe 	bl	800156c <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d052      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	e3c2      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d032      	beq.n	8002a6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a42      	ldr	r2, [pc, #264]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fdfb 	bl	800160c <HAL_GetTick>
 8002a16:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fdf7 	bl	800160c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e3ab      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2c:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	f043 0308 	orr.w	r3, r3, #8
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	4930      	ldr	r1, [pc, #192]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	492b      	ldr	r1, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
 8002a6a:	e01a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a78:	f7fe fdc8 	bl	800160c <HAL_GetTick>
 8002a7c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a80:	f7fe fdc4 	bl	800160c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e378      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x1e0>
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d073      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x220>
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d10b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d063      	beq.n	8002b94 <HAL_RCC_OscConfig+0x2f4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d15f      	bne.n	8002b94 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e355      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCC_OscConfig+0x250>
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e025      	b.n	8002b3c <HAL_RCC_OscConfig+0x29c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af8:	d114      	bne.n	8002b24 <HAL_RCC_OscConfig+0x284>
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a02      	ldr	r2, [pc, #8]	; (8002b14 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e013      	b.n	8002b3c <HAL_RCC_OscConfig+0x29c>
 8002b14:	40021000 	.word	0x40021000
 8002b18:	0800bc3c 	.word	0x0800bc3c
 8002b1c:	20000004 	.word	0x20000004
 8002b20:	20000008 	.word	0x20000008
 8002b24:	4b8f      	ldr	r3, [pc, #572]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a8e      	ldr	r2, [pc, #568]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b8c      	ldr	r3, [pc, #560]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a8b      	ldr	r2, [pc, #556]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fd62 	bl	800160c <HAL_GetTick>
 8002b48:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fd5e 	bl	800160c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e312      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5e:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2ac>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fd4e 	bl	800160c <HAL_GetTick>
 8002b70:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fd4a 	bl	800160c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e2fe      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b86:	4b77      	ldr	r3, [pc, #476]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2d4>
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d060      	beq.n	8002c64 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x314>
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d119      	bne.n	8002be2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d116      	bne.n	8002be2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb4:	4b6b      	ldr	r3, [pc, #428]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_OscConfig+0x32c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e2db      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	4962      	ldr	r1, [pc, #392]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	e040      	b.n	8002c64 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d023      	beq.n	8002c32 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bea:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fd09 	bl	800160c <HAL_GetTick>
 8002bfa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fd05 	bl	800160c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e2b9      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	494e      	ldr	r1, [pc, #312]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	e018      	b.n	8002c64 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b4c      	ldr	r3, [pc, #304]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fce5 	bl	800160c <HAL_GetTick>
 8002c42:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c46:	f7fe fce1 	bl	800160c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e295      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8082 	beq.w	8002d76 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d05f      	beq.n	8002d3a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c7a:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d037      	beq.n	8002d00 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e26d      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01b      	beq.n	8002cea <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc2:	f7fe fca3 	bl	800160c <HAL_GetTick>
 8002cc6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cca:	f7fe fc9f 	bl	800160c <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b11      	cmp	r3, #17
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e253      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cdc:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1ef      	bne.n	8002cca <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf0:	f023 0210 	bic.w	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	491a      	ldr	r1, [pc, #104]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fc7c 	bl	800160c <HAL_GetTick>
 8002d14:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fc78 	bl	800160c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b11      	cmp	r3, #17
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e22c      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCC_OscConfig+0x478>
 8002d38:	e01d      	b.n	8002d76 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fc5f 	bl	800160c <HAL_GetTick>
 8002d4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d52:	f7fe fc5b 	bl	800160c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b11      	cmp	r3, #17
 8002d5e:	d903      	bls.n	8002d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e20f      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
 8002d64:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d68:	4b83      	ldr	r3, [pc, #524]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ed      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80bd 	beq.w	8002efe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d8a:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	4b78      	ldr	r3, [pc, #480]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	4a77      	ldr	r2, [pc, #476]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6593      	str	r3, [r2, #88]	; 0x58
 8002da2:	4b75      	ldr	r3, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db4:	4b71      	ldr	r3, [pc, #452]	; (8002f7c <HAL_RCC_OscConfig+0x6dc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d118      	bne.n	8002df2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	4b6e      	ldr	r3, [pc, #440]	; (8002f7c <HAL_RCC_OscConfig+0x6dc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6d      	ldr	r2, [pc, #436]	; (8002f7c <HAL_RCC_OscConfig+0x6dc>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fc1e 	bl	800160c <HAL_GetTick>
 8002dd0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe fc1a 	bl	800160c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1ce      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de6:	4b65      	ldr	r3, [pc, #404]	; (8002f7c <HAL_RCC_OscConfig+0x6dc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002dfe:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	4959      	ldr	r1, [pc, #356]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e24:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a53      	ldr	r2, [pc, #332]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	4a4f      	ldr	r2, [pc, #316]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e44:	e018      	b.n	8002e78 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e46:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e56:	e00f      	b.n	8002e78 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e58:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d016      	beq.n	8002eae <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fbc4 	bl	800160c <HAL_GetTick>
 8002e84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe fbc0 	bl	800160c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e172      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9e:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ed      	beq.n	8002e88 <HAL_RCC_OscConfig+0x5e8>
 8002eac:	e01d      	b.n	8002eea <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fe fbad 	bl	800160c <HAL_GetTick>
 8002eb2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe fba9 	bl	800160c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e15b      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ed      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002eda:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d041      	beq.n	8002f8e <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f18:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe fb73 	bl	800160c <HAL_GetTick>
 8002f26:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f2a:	f7fe fb6f 	bl	800160c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e123      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0ef      	beq.n	8002f2a <HAL_RCC_OscConfig+0x68a>
 8002f4a:	e020      	b.n	8002f8e <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <HAL_RCC_OscConfig+0x6d8>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fe fb56 	bl	800160c <HAL_GetTick>
 8002f60:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f62:	e00d      	b.n	8002f80 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f64:	f7fe fb52 	bl	800160c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d906      	bls.n	8002f80 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e106      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f80:	4b82      	ldr	r3, [pc, #520]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8002f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ea      	bne.n	8002f64 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80f5 	beq.w	8003182 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	f040 80cb 	bne.w	8003138 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fa2:	4b7a      	ldr	r3, [pc, #488]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0203 	and.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d12c      	bne.n	8003010 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d123      	bne.n	8003010 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d11b      	bne.n	8003010 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d113      	bne.n	8003010 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d109      	bne.n	8003010 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	3b01      	subs	r3, #1
 800300a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d06d      	beq.n	80030ec <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d068      	beq.n	80030e8 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003016:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003022:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0a8      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a55      	ldr	r2, [pc, #340]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800303c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800303e:	f7fe fae5 	bl	800160c <HAL_GetTick>
 8003042:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fae1 	bl	800160c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e095      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003058:	4b4c      	ldr	r3, [pc, #304]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003064:	4b49      	ldr	r3, [pc, #292]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	4b49      	ldr	r3, [pc, #292]	; (8003190 <HAL_RCC_OscConfig+0x8f0>)
 800306a:	4013      	ands	r3, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003074:	3a01      	subs	r2, #1
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800307e:	0212      	lsls	r2, r2, #8
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	3a01      	subs	r2, #1
 800308a:	0552      	lsls	r2, r2, #21
 800308c:	4311      	orrs	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003092:	0852      	lsrs	r2, r2, #1
 8003094:	3a01      	subs	r2, #1
 8003096:	0652      	lsls	r2, r2, #25
 8003098:	4311      	orrs	r1, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800309e:	06d2      	lsls	r2, r2, #27
 80030a0:	430a      	orrs	r2, r1
 80030a2:	493a      	ldr	r1, [pc, #232]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030a8:	4b38      	ldr	r3, [pc, #224]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a37      	ldr	r2, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c0:	f7fe faa4 	bl	800160c <HAL_GetTick>
 80030c4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe faa0 	bl	800160c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e054      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e6:	e04c      	b.n	8003182 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04b      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d144      	bne.n	8003182 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4a20      	ldr	r2, [pc, #128]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003110:	f7fe fa7c 	bl	800160c <HAL_GetTick>
 8003114:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fa78 	bl	800160c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e02c      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x878>
 8003136:	e024      	b.n	8003182 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d01f      	beq.n	800317e <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe fa5f 	bl	800160c <HAL_GetTick>
 800314e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003152:	f7fe fa5b 	bl	800160c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e00f      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f0      	bne.n	8003152 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	4905      	ldr	r1, [pc, #20]	; (800318c <HAL_RCC_OscConfig+0x8ec>)
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCC_OscConfig+0x8f4>)
 8003178:	4013      	ands	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
 800317c:	e001      	b.n	8003182 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	019d800c 	.word	0x019d800c
 8003194:	feeefffc 	.word	0xfeeefffc

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e11d      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b90      	ldr	r3, [pc, #576]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d910      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b8d      	ldr	r3, [pc, #564]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 020f 	bic.w	r2, r3, #15
 80031c6:	498b      	ldr	r1, [pc, #556]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b89      	ldr	r3, [pc, #548]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e105      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4b81      	ldr	r3, [pc, #516]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d908      	bls.n	800320e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b7e      	ldr	r3, [pc, #504]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	497b      	ldr	r1, [pc, #492]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d079      	beq.n	800330e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d11e      	bne.n	8003260 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0dc      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003232:	f000 fa09 	bl	8003648 <RCC_GetSysClockFreqFromPLLSource>
 8003236:	4603      	mov	r3, r0
 8003238:	4a70      	ldr	r2, [pc, #448]	; (80033fc <HAL_RCC_ClockConfig+0x264>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d946      	bls.n	80032cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800323e:	4b6e      	ldr	r3, [pc, #440]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d140      	bne.n	80032cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800324a:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003252:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003258:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e035      	b.n	80032cc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d107      	bne.n	8003278 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003268:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d115      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0b9      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d107      	bne.n	8003290 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003280:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0ad      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003290:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0a5      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80032a0:	f000 f8b4 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4a55      	ldr	r2, [pc, #340]	; (80033fc <HAL_RCC_ClockConfig+0x264>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d90f      	bls.n	80032cc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032ac:	4b52      	ldr	r3, [pc, #328]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032b8:	4b4f      	ldr	r3, [pc, #316]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c0:	4a4d      	ldr	r2, [pc, #308]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80032c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032cc:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 0203 	bic.w	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4947      	ldr	r1, [pc, #284]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032de:	f7fe f995 	bl	800160c <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e6:	f7fe f991 	bl	800160c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e077      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 020c 	and.w	r2, r3, #12
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	429a      	cmp	r2, r3
 800330c:	d1eb      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d105      	bne.n	8003320 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800331a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003338:	429a      	cmp	r2, r3
 800333a:	d208      	bcs.n	800334e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	492b      	ldr	r1, [pc, #172]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d210      	bcs.n	800337e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 020f 	bic.w	r2, r3, #15
 8003364:	4923      	ldr	r1, [pc, #140]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_ClockConfig+0x25c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e036      	b.n	80033ec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	4918      	ldr	r1, [pc, #96]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4910      	ldr	r1, [pc, #64]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033bc:	f000 f826 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <HAL_RCC_ClockConfig+0x260>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <HAL_RCC_ClockConfig+0x268>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x26c>)
 80033da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe f8c3 	bl	800156c <HAL_InitTick>
 80033e6:	4603      	mov	r3, r0
 80033e8:	73fb      	strb	r3, [r7, #15]

  return status;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40021000 	.word	0x40021000
 80033fc:	04c4b400 	.word	0x04c4b400
 8003400:	0800bc3c 	.word	0x0800bc3c
 8003404:	20000004 	.word	0x20000004
 8003408:	20000008 	.word	0x20000008

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d121      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d11e      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003440:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e005      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800345c:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <HAL_RCC_GetSysClockFreq+0x10c>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10d      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d102      	bne.n	800348a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e004      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d101      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_RCC_GetSysClockFreq+0x114>)
 8003492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b0c      	cmp	r3, #12
 8003498:	d134      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d003      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0xac>
 80034b0:	e005      	b.n	80034be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_RCC_GetSysClockFreq+0x110>)
 80034b4:	617b      	str	r3, [r7, #20]
      break;
 80034b6:	e005      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_GetSysClockFreq+0x114>)
 80034ba:	617b      	str	r3, [r7, #20]
      break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	617b      	str	r3, [r7, #20]
      break;
 80034c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3301      	adds	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	fb03 f202 	mul.w	r2, r3, r2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	0e5b      	lsrs	r3, r3, #25
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	3301      	adds	r3, #1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003504:	69bb      	ldr	r3, [r7, #24]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	0800bc54 	.word	0x0800bc54
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000004 	.word	0x20000004

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4904      	ldr	r1, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	0800bc4c 	.word	0x0800bc4c

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800356c:	f7ff ffda 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0adb      	lsrs	r3, r3, #11
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	0800bc4c 	.word	0x0800bc4c

08003594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035a0:	4b27      	ldr	r3, [pc, #156]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035ac:	f7ff f8a4 	bl	80026f8 <HAL_PWREx_GetVoltageRange>
 80035b0:	6178      	str	r0, [r7, #20]
 80035b2:	e014      	b.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6593      	str	r3, [r2, #88]	; 0x58
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035cc:	f7ff f894 	bl	80026f8 <HAL_PWREx_GetVoltageRange>
 80035d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e4:	d10b      	bne.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d913      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2ba0      	cmp	r3, #160	; 0xa0
 80035f0:	d902      	bls.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f2:	2302      	movs	r3, #2
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e00d      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f8:	2301      	movs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e00a      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b7f      	cmp	r3, #127	; 0x7f
 8003602:	d902      	bls.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003604:	2302      	movs	r3, #2
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e004      	b.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b70      	cmp	r3, #112	; 0x70
 800360e:	d101      	bne.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003610:	2301      	movs	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 020f 	bic.w	r2, r3, #15
 800361c:	4909      	ldr	r1, [pc, #36]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003624:	4b07      	ldr	r3, [pc, #28]	; (8003644 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	40022000 	.word	0x40022000

08003648 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d00b      	beq.n	8003676 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d825      	bhi.n	80036b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d008      	beq.n	800367c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d11f      	bne.n	80036b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003672:	613b      	str	r3, [r7, #16]
    break;
 8003674:	e01f      	b.n	80036b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003678:	613b      	str	r3, [r7, #16]
    break;
 800367a:	e01c      	b.n	80036b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e005      	b.n	80036a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ac:	613b      	str	r3, [r7, #16]
    break;
 80036ae:	e002      	b.n	80036b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
    break;
 80036b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	3301      	adds	r3, #1
 80036c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	fb03 f202 	mul.w	r2, r3, r2
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036dc:	4b09      	ldr	r3, [pc, #36]	; (8003704 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0e5b      	lsrs	r3, r3, #25
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80036f6:	683b      	ldr	r3, [r7, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40021000 	.word	0x40021000
 8003708:	00f42400 	.word	0x00f42400
 800370c:	007a1200 	.word	0x007a1200
 8003710:	0800bc54 	.word	0x0800bc54

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800371c:	2300      	movs	r3, #0
 800371e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003720:	2300      	movs	r3, #0
 8003722:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372c:	2b00      	cmp	r3, #0
 800372e:	d040      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d02a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d825      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800373c:	2b60      	cmp	r3, #96	; 0x60
 800373e:	d026      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003740:	2b60      	cmp	r3, #96	; 0x60
 8003742:	d821      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d006      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d81d      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d010      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003754:	e018      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003756:	4b89      	ldr	r3, [pc, #548]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a88      	ldr	r2, [pc, #544]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003762:	e015      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fb3e 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003774:	e00c      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3320      	adds	r3, #32
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fc29 	bl	8003fd4 <RCCEx_PLLSAI2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003786:	e003      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	74fb      	strb	r3, [r7, #19]
      break;
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800378e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003796:	4b79      	ldr	r3, [pc, #484]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800379c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a4:	4975      	ldr	r1, [pc, #468]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037ac:	e001      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d047      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d030      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037cc:	d82a      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d2:	d02a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80037d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d8:	d824      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80037e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e4:	d81e      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d010      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037f0:	e018      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f2:	4b62      	ldr	r3, [pc, #392]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a61      	ldr	r2, [pc, #388]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037fe:	e015      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f000 faf0 	bl	8003dec <RCCEx_PLLSAI1_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003810:	e00c      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3320      	adds	r3, #32
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fbdb 	bl	8003fd4 <RCCEx_PLLSAI2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003822:	e003      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	74fb      	strb	r3, [r7, #19]
      break;
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800382a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003832:	4b52      	ldr	r3, [pc, #328]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003840:	494e      	ldr	r1, [pc, #312]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003848:	e001      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 809f 	beq.w	800399a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385c:	2300      	movs	r3, #0
 800385e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003860:	4b46      	ldr	r3, [pc, #280]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003870:	2300      	movs	r3, #0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4a40      	ldr	r2, [pc, #256]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
 8003882:	4b3e      	ldr	r3, [pc, #248]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003892:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3a      	ldr	r2, [pc, #232]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800389e:	f7fd feb5 	bl	800160c <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038a4:	e009      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd feb1 	bl	800160c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	74fb      	strb	r3, [r7, #19]
        break;
 80038b8:	e005      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ef      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d15b      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01f      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d019      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f6:	4b21      	ldr	r3, [pc, #132]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	4a1b      	ldr	r2, [pc, #108]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003916:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd fe70 	bl	800160c <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392e:	e00b      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd fe6c 	bl	800160c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d902      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	74fb      	strb	r3, [r7, #19]
            break;
 8003946:	e006      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0ec      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10c      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003974:	e008      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	74bb      	strb	r3, [r7, #18]
 800397a:	e005      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003988:	7c7b      	ldrb	r3, [r7, #17]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d105      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398e:	4ba0      	ldr	r3, [pc, #640]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	4a9f      	ldr	r2, [pc, #636]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003998:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a6:	4b9a      	ldr	r3, [pc, #616]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f023 0203 	bic.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	4996      	ldr	r1, [pc, #600]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c8:	4b91      	ldr	r3, [pc, #580]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f023 020c 	bic.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	498e      	ldr	r1, [pc, #568]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	4985      	ldr	r1, [pc, #532]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a0c:	4b80      	ldr	r3, [pc, #512]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1a:	497d      	ldr	r1, [pc, #500]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2e:	4b78      	ldr	r3, [pc, #480]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3c:	4974      	ldr	r1, [pc, #464]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a50:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	496c      	ldr	r1, [pc, #432]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a72:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a80:	4963      	ldr	r1, [pc, #396]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa2:	495b      	ldr	r1, [pc, #364]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ab6:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	4952      	ldr	r1, [pc, #328]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	494a      	ldr	r1, [pc, #296]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003afa:	4b45      	ldr	r3, [pc, #276]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	4941      	ldr	r1, [pc, #260]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b1c:	4b3c      	ldr	r3, [pc, #240]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	4939      	ldr	r1, [pc, #228]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d028      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	4930      	ldr	r1, [pc, #192]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b68:	60d3      	str	r3, [r2, #12]
 8003b6a:	e011      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f935 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d04d      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba4:	d108      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003bb6:	e012      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bbe:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd6:	490e      	ldr	r1, [pc, #56]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e020      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bfe:	d109      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a02      	ldr	r2, [pc, #8]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	60d3      	str	r3, [r2, #12]
 8003c0c:	e014      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f8e1 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d028      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c44:	4b68      	ldr	r3, [pc, #416]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c52:	4965      	ldr	r1, [pc, #404]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c62:	d106      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c64:	4b60      	ldr	r3, [pc, #384]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a5f      	ldr	r2, [pc, #380]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6e:	60d3      	str	r3, [r2, #12]
 8003c70:	e011      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c7a:	d10c      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f8b2 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca2:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb2:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f88d 	bl	8003dec <RCCEx_PLLSAI1_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cec:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cf2:	f023 0204 	bic.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	493a      	ldr	r1, [pc, #232]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d10:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d16:	f023 0218 	bic.w	r2, r3, #24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	4931      	ldr	r1, [pc, #196]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d035      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d40:	f7fd fc64 	bl	800160c <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d46:	e009      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d48:	f7fd fc60 	bl	800160c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d902      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	74fb      	strb	r3, [r7, #19]
        break;
 8003d5a:	e005      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ef      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d113      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d7e:	491a      	ldr	r1, [pc, #104]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3320      	adds	r3, #32
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f921 	bl	8003fd4 <RCCEx_PLLSAI2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d017      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	490a      	ldr	r1, [pc, #40]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dce:	d105      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ddc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000

08003dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e06:	4b6f      	ldr	r3, [pc, #444]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d103      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
       ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d142      	bne.n	8003ea4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	e03f      	b.n	8003ea4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d018      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x72>
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d825      	bhi.n	8003e7c <RCCEx_PLLSAI1_Config+0x90>
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d002      	beq.n	8003e3a <RCCEx_PLLSAI1_Config+0x4e>
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d009      	beq.n	8003e4c <RCCEx_PLLSAI1_Config+0x60>
 8003e38:	e020      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e3a:	4b62      	ldr	r3, [pc, #392]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11d      	bne.n	8003e82 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4a:	e01a      	b.n	8003e82 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e4c:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d116      	bne.n	8003e86 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5c:	e013      	b.n	8003e86 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e5e:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e6a:	4b56      	ldr	r3, [pc, #344]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e7a:	e006      	b.n	8003e8a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e004      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003e92:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4949      	ldr	r1, [pc, #292]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 8086 	bne.w	8003fb8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003eac:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a44      	ldr	r2, [pc, #272]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fd fba8 	bl	800160c <HAL_GetTick>
 8003ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ebe:	e009      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ec0:	f7fd fba4 	bl	800160c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d902      	bls.n	8003ed4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ed2:	e005      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ef      	bne.n	8003ec0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d168      	bne.n	8003fb8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d113      	bne.n	8003f14 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eec:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6892      	ldr	r2, [r2, #8]
 8003ef8:	0211      	lsls	r1, r2, #8
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	06d2      	lsls	r2, r2, #27
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6852      	ldr	r2, [r2, #4]
 8003f06:	3a01      	subs	r2, #1
 8003f08:	0112      	lsls	r2, r2, #4
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	492d      	ldr	r1, [pc, #180]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
 8003f12:	e02d      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d115      	bne.n	8003f46 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6892      	ldr	r2, [r2, #8]
 8003f26:	0211      	lsls	r1, r2, #8
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6912      	ldr	r2, [r2, #16]
 8003f2c:	0852      	lsrs	r2, r2, #1
 8003f2e:	3a01      	subs	r2, #1
 8003f30:	0552      	lsls	r2, r2, #21
 8003f32:	4311      	orrs	r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6852      	ldr	r2, [r2, #4]
 8003f38:	3a01      	subs	r2, #1
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	4921      	ldr	r1, [pc, #132]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	610b      	str	r3, [r1, #16]
 8003f44:	e014      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6892      	ldr	r2, [r2, #8]
 8003f52:	0211      	lsls	r1, r2, #8
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6952      	ldr	r2, [r2, #20]
 8003f58:	0852      	lsrs	r2, r2, #1
 8003f5a:	3a01      	subs	r2, #1
 8003f5c:	0652      	lsls	r2, r2, #25
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6852      	ldr	r2, [r2, #4]
 8003f64:	3a01      	subs	r2, #1
 8003f66:	0112      	lsls	r2, r2, #4
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	4916      	ldr	r1, [pc, #88]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fd fb46 	bl	800160c <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f82:	e009      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f84:	f7fd fb42 	bl	800160c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d902      	bls.n	8003f98 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	73fb      	strb	r3, [r7, #15]
          break;
 8003f96:	e005      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ef      	beq.n	8003f84 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	4904      	ldr	r1, [pc, #16]	; (8003fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	07ff800f 	.word	0x07ff800f
 8003fcc:	ff9f800f 	.word	0xff9f800f
 8003fd0:	f9ff800f 	.word	0xf9ff800f

08003fd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fe2:	4b72      	ldr	r3, [pc, #456]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fee:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0203 	and.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d103      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
       ||
 8004002:	2b00      	cmp	r3, #0
 8004004:	d142      	bne.n	800408c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	e03f      	b.n	800408c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d018      	beq.n	8004046 <RCCEx_PLLSAI2_Config+0x72>
 8004014:	2b03      	cmp	r3, #3
 8004016:	d825      	bhi.n	8004064 <RCCEx_PLLSAI2_Config+0x90>
 8004018:	2b01      	cmp	r3, #1
 800401a:	d002      	beq.n	8004022 <RCCEx_PLLSAI2_Config+0x4e>
 800401c:	2b02      	cmp	r3, #2
 800401e:	d009      	beq.n	8004034 <RCCEx_PLLSAI2_Config+0x60>
 8004020:	e020      	b.n	8004064 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004022:	4b62      	ldr	r3, [pc, #392]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11d      	bne.n	800406a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004032:	e01a      	b.n	800406a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004034:	4b5d      	ldr	r3, [pc, #372]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d116      	bne.n	800406e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004044:	e013      	b.n	800406e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004046:	4b59      	ldr	r3, [pc, #356]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004052:	4b56      	ldr	r3, [pc, #344]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004062:	e006      	b.n	8004072 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      break;
 8004068:	e004      	b.n	8004074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800406a:	bf00      	nop
 800406c:	e002      	b.n	8004074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800406e:	bf00      	nop
 8004070:	e000      	b.n	8004074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004072:	bf00      	nop
    }

    if(status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800407a:	4b4c      	ldr	r3, [pc, #304]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4949      	ldr	r1, [pc, #292]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004088:	4313      	orrs	r3, r2
 800408a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f040 8086 	bne.w	80041a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004094:	4b45      	ldr	r3, [pc, #276]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a44      	ldr	r2, [pc, #272]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a0:	f7fd fab4 	bl	800160c <HAL_GetTick>
 80040a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040a6:	e009      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040a8:	f7fd fab0 	bl	800160c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d902      	bls.n	80040bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	73fb      	strb	r3, [r7, #15]
        break;
 80040ba:	e005      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ef      	bne.n	80040a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d168      	bne.n	80041a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d113      	bne.n	80040fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040d4:	4b35      	ldr	r3, [pc, #212]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80040da:	4013      	ands	r3, r2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6892      	ldr	r2, [r2, #8]
 80040e0:	0211      	lsls	r1, r2, #8
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68d2      	ldr	r2, [r2, #12]
 80040e6:	06d2      	lsls	r2, r2, #27
 80040e8:	4311      	orrs	r1, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6852      	ldr	r2, [r2, #4]
 80040ee:	3a01      	subs	r2, #1
 80040f0:	0112      	lsls	r2, r2, #4
 80040f2:	430a      	orrs	r2, r1
 80040f4:	492d      	ldr	r1, [pc, #180]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	614b      	str	r3, [r1, #20]
 80040fa:	e02d      	b.n	8004158 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d115      	bne.n	800412e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004102:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6892      	ldr	r2, [r2, #8]
 800410e:	0211      	lsls	r1, r2, #8
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6912      	ldr	r2, [r2, #16]
 8004114:	0852      	lsrs	r2, r2, #1
 8004116:	3a01      	subs	r2, #1
 8004118:	0552      	lsls	r2, r2, #21
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6852      	ldr	r2, [r2, #4]
 8004120:	3a01      	subs	r2, #1
 8004122:	0112      	lsls	r2, r2, #4
 8004124:	430a      	orrs	r2, r1
 8004126:	4921      	ldr	r1, [pc, #132]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004128:	4313      	orrs	r3, r2
 800412a:	614b      	str	r3, [r1, #20]
 800412c:	e014      	b.n	8004158 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800412e:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004134:	4013      	ands	r3, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6892      	ldr	r2, [r2, #8]
 800413a:	0211      	lsls	r1, r2, #8
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6952      	ldr	r2, [r2, #20]
 8004140:	0852      	lsrs	r2, r2, #1
 8004142:	3a01      	subs	r2, #1
 8004144:	0652      	lsls	r2, r2, #25
 8004146:	4311      	orrs	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6852      	ldr	r2, [r2, #4]
 800414c:	3a01      	subs	r2, #1
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	430a      	orrs	r2, r1
 8004152:	4916      	ldr	r1, [pc, #88]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a13      	ldr	r2, [pc, #76]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004162:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd fa52 	bl	800160c <HAL_GetTick>
 8004168:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800416a:	e009      	b.n	8004180 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800416c:	f7fd fa4e 	bl	800160c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d902      	bls.n	8004180 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	73fb      	strb	r3, [r7, #15]
          break;
 800417e:	e005      	b.n	800418c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ef      	beq.n	800416c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	4904      	ldr	r1, [pc, #16]	; (80041ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	07ff800f 	.word	0x07ff800f
 80041b4:	ff9f800f 	.word	0xff9f800f
 80041b8:	f9ff800f 	.word	0xf9ff800f

080041bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e049      	b.n	8004262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc fffe 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f000 fce2 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d001      	beq.n	8004284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e047      	b.n	8004314 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a23      	ldr	r2, [pc, #140]	; (8004320 <HAL_TIM_Base_Start+0xb4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01d      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d018      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_TIM_Base_Start+0xb8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <HAL_TIM_Base_Start+0xbc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	; (800432c <HAL_TIM_Base_Start+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_TIM_Base_Start+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_TIM_Base_Start+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d115      	bne.n	80042fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_TIM_Base_Start+0xcc>)
 80042da:	4013      	ands	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d015      	beq.n	8004310 <HAL_TIM_Base_Start+0xa4>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d011      	beq.n	8004310 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	e008      	b.n	8004310 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e000      	b.n	8004312 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40014000 	.word	0x40014000
 8004338:	00010007 	.word	0x00010007

0800433c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	f241 1311 	movw	r3, #4369	; 0x1111
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10f      	bne.n	8004374 <HAL_TIM_Base_Stop+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	f240 4344 	movw	r3, #1092	; 0x444
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <HAL_TIM_Base_Stop+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e049      	b.n	8004430 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f841 	bl	8004438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f000 fbfb 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 ffba 	bl	80053d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3e      	ldr	r2, [pc, #248]	; (8004564 <HAL_TIM_PWM_Stop+0x118>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_TIM_PWM_Stop+0x4a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3d      	ldr	r2, [pc, #244]	; (8004568 <HAL_TIM_PWM_Stop+0x11c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIM_PWM_Stop+0x4a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3b      	ldr	r2, [pc, #236]	; (800456c <HAL_TIM_PWM_Stop+0x120>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_TIM_PWM_Stop+0x4a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3a      	ldr	r2, [pc, #232]	; (8004570 <HAL_TIM_PWM_Stop+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIM_PWM_Stop+0x4a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a38      	ldr	r2, [pc, #224]	; (8004574 <HAL_TIM_PWM_Stop+0x128>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_Stop+0x4e>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_TIM_PWM_Stop+0x50>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d017      	beq.n	80044d0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a1a      	ldr	r2, [r3, #32]
 80044a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10f      	bne.n	80044d0 <HAL_TIM_PWM_Stop+0x84>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	f240 4344 	movw	r3, #1092	; 0x444
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_PWM_Stop+0x84>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10f      	bne.n	8004500 <HAL_TIM_PWM_Stop+0xb4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	f240 4344 	movw	r3, #1092	; 0x444
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_PWM_Stop+0xb4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d104      	bne.n	8004510 <HAL_TIM_PWM_Stop+0xc4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450e:	e023      	b.n	8004558 <HAL_TIM_PWM_Stop+0x10c>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b04      	cmp	r3, #4
 8004514:	d104      	bne.n	8004520 <HAL_TIM_PWM_Stop+0xd4>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800451e:	e01b      	b.n	8004558 <HAL_TIM_PWM_Stop+0x10c>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b08      	cmp	r3, #8
 8004524:	d104      	bne.n	8004530 <HAL_TIM_PWM_Stop+0xe4>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800452e:	e013      	b.n	8004558 <HAL_TIM_PWM_Stop+0x10c>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d104      	bne.n	8004540 <HAL_TIM_PWM_Stop+0xf4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800453e:	e00b      	b.n	8004558 <HAL_TIM_PWM_Stop+0x10c>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b10      	cmp	r3, #16
 8004544:	d104      	bne.n	8004550 <HAL_TIM_PWM_Stop+0x104>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800454e:	e003      	b.n	8004558 <HAL_TIM_PWM_Stop+0x10c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0202 	mvn.w	r2, #2
 80045a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fae3 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fad5 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fae6 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0204 	mvn.w	r2, #4
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fab9 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 faab 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fabc 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b08      	cmp	r3, #8
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b08      	cmp	r3, #8
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0208 	mvn.w	r2, #8
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2204      	movs	r2, #4
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fa8f 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa81 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fa92 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b10      	cmp	r3, #16
 8004688:	d122      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b10      	cmp	r3, #16
 8004696:	d11b      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0210 	mvn.w	r2, #16
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2208      	movs	r2, #8
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fa65 	bl	8004b86 <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa57 	bl	8004b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fa68 	bl	8004b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d10e      	bne.n	80046fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0201 	mvn.w	r2, #1
 80046f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fb54 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b80      	cmp	r3, #128	; 0x80
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b80      	cmp	r3, #128	; 0x80
 8004716:	d107      	bne.n	8004728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 ff10 	bl	8005548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004736:	d10e      	bne.n	8004756 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d107      	bne.n	8004756 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800474e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 ff03 	bl	800555c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d10e      	bne.n	8004782 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d107      	bne.n	8004782 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800477a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fa16 	bl	8004bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b20      	cmp	r3, #32
 800478e:	d10e      	bne.n	80047ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b20      	cmp	r3, #32
 800479c:	d107      	bne.n	80047ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0220 	mvn.w	r2, #32
 80047a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fec3 	bl	8005534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0ff      	b.n	80049d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b14      	cmp	r3, #20
 80047e2:	f200 80f0 	bhi.w	80049c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	08004841 	.word	0x08004841
 80047f0:	080049c7 	.word	0x080049c7
 80047f4:	080049c7 	.word	0x080049c7
 80047f8:	080049c7 	.word	0x080049c7
 80047fc:	08004881 	.word	0x08004881
 8004800:	080049c7 	.word	0x080049c7
 8004804:	080049c7 	.word	0x080049c7
 8004808:	080049c7 	.word	0x080049c7
 800480c:	080048c3 	.word	0x080048c3
 8004810:	080049c7 	.word	0x080049c7
 8004814:	080049c7 	.word	0x080049c7
 8004818:	080049c7 	.word	0x080049c7
 800481c:	08004903 	.word	0x08004903
 8004820:	080049c7 	.word	0x080049c7
 8004824:	080049c7 	.word	0x080049c7
 8004828:	080049c7 	.word	0x080049c7
 800482c:	08004945 	.word	0x08004945
 8004830:	080049c7 	.word	0x080049c7
 8004834:	080049c7 	.word	0x080049c7
 8004838:	080049c7 	.word	0x080049c7
 800483c:	08004985 	.word	0x08004985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fa56 	bl	8004cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0208 	orr.w	r2, r2, #8
 800485a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0204 	bic.w	r2, r2, #4
 800486a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6999      	ldr	r1, [r3, #24]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	619a      	str	r2, [r3, #24]
      break;
 800487e:	e0a5      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fac6 	bl	8004e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6999      	ldr	r1, [r3, #24]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	021a      	lsls	r2, r3, #8
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	619a      	str	r2, [r3, #24]
      break;
 80048c0:	e084      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fb2f 	bl	8004f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0208 	orr.w	r2, r2, #8
 80048dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0204 	bic.w	r2, r2, #4
 80048ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69d9      	ldr	r1, [r3, #28]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	61da      	str	r2, [r3, #28]
      break;
 8004900:	e064      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fb97 	bl	800503c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800491c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69d9      	ldr	r1, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	021a      	lsls	r2, r3, #8
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	61da      	str	r2, [r3, #28]
      break;
 8004942:	e043      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fbe0 	bl	8005110 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0208 	orr.w	r2, r2, #8
 800495e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0204 	bic.w	r2, r2, #4
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004982:	e023      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fc24 	bl	80051d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800499e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	021a      	lsls	r2, r3, #8
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049c4:	e002      	b.n	80049cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop

080049e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIM_ConfigClockSource+0x1c>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e0b6      	b.n	8004b6a <HAL_TIM_ConfigClockSource+0x18a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a38:	d03e      	beq.n	8004ab8 <HAL_TIM_ConfigClockSource+0xd8>
 8004a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3e:	f200 8087 	bhi.w	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a46:	f000 8086 	beq.w	8004b56 <HAL_TIM_ConfigClockSource+0x176>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d87f      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a50:	2b70      	cmp	r3, #112	; 0x70
 8004a52:	d01a      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0xaa>
 8004a54:	2b70      	cmp	r3, #112	; 0x70
 8004a56:	d87b      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a58:	2b60      	cmp	r3, #96	; 0x60
 8004a5a:	d050      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x11e>
 8004a5c:	2b60      	cmp	r3, #96	; 0x60
 8004a5e:	d877      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a60:	2b50      	cmp	r3, #80	; 0x50
 8004a62:	d03c      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xfe>
 8004a64:	2b50      	cmp	r3, #80	; 0x50
 8004a66:	d873      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d058      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x13e>
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d86f      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d064      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a74:	2b30      	cmp	r3, #48	; 0x30
 8004a76:	d86b      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d060      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d867      	bhi.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d05c      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d05a      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x15e>
 8004a88:	e062      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6899      	ldr	r1, [r3, #8]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f000 fc7d 	bl	8005398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	609a      	str	r2, [r3, #8]
      break;
 8004ab6:	e04f      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	6899      	ldr	r1, [r3, #8]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f000 fc66 	bl	8005398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ada:	609a      	str	r2, [r3, #8]
      break;
 8004adc:	e03c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f000 fbda 	bl	80052a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2150      	movs	r1, #80	; 0x50
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fc33 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004afc:	e02c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 fbf9 	bl	8005302 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2160      	movs	r1, #96	; 0x60
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fc23 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e01c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 fbba 	bl	80052a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2140      	movs	r1, #64	; 0x40
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fc13 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e00c      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f000 fc0a 	bl	8005362 <TIM_ITRx_SetConfig>
      break;
 8004b4e:	e003      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      break;
 8004b54:	e000      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a40      	ldr	r2, [pc, #256]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d00f      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a3d      	ldr	r2, [pc, #244]	; (8004cdc <TIM_Base_SetConfig+0x118>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3c      	ldr	r2, [pc, #240]	; (8004ce0 <TIM_Base_SetConfig+0x11c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a3b      	ldr	r2, [pc, #236]	; (8004ce4 <TIM_Base_SetConfig+0x120>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ce8 <TIM_Base_SetConfig+0x124>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d108      	bne.n	8004c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2f      	ldr	r2, [pc, #188]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01f      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d01b      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <TIM_Base_SetConfig+0x118>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d017      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a2b      	ldr	r2, [pc, #172]	; (8004ce0 <TIM_Base_SetConfig+0x11c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <TIM_Base_SetConfig+0x120>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <TIM_Base_SetConfig+0x124>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00b      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <TIM_Base_SetConfig+0x128>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d007      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <TIM_Base_SetConfig+0x12c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d003      	beq.n	8004c5e <TIM_Base_SetConfig+0x9a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <TIM_Base_SetConfig+0x130>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d108      	bne.n	8004c70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00f      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <TIM_Base_SetConfig+0x124>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a11      	ldr	r2, [pc, #68]	; (8004cec <TIM_Base_SetConfig+0x128>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <TIM_Base_SetConfig+0x12c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0xf8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <TIM_Base_SetConfig+0x130>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d103      	bne.n	8004cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	615a      	str	r2, [r3, #20]
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800

08004cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f023 0201 	bic.w	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 0302 	bic.w	r3, r3, #2
 8004d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <TIM_OC1_SetConfig+0x10c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00f      	beq.n	8004d78 <TIM_OC1_SetConfig+0x80>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <TIM_OC1_SetConfig+0x110>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_OC1_SetConfig+0x80>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <TIM_OC1_SetConfig+0x114>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_OC1_SetConfig+0x80>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <TIM_OC1_SetConfig+0x118>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_OC1_SetConfig+0x80>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a28      	ldr	r2, [pc, #160]	; (8004e14 <TIM_OC1_SetConfig+0x11c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10c      	bne.n	8004d92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0308 	bic.w	r3, r3, #8
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <TIM_OC1_SetConfig+0x10c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00f      	beq.n	8004dba <TIM_OC1_SetConfig+0xc2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1a      	ldr	r2, [pc, #104]	; (8004e08 <TIM_OC1_SetConfig+0x110>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_OC1_SetConfig+0xc2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <TIM_OC1_SetConfig+0x114>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_OC1_SetConfig+0xc2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <TIM_OC1_SetConfig+0x118>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC1_SetConfig+0xc2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a17      	ldr	r2, [pc, #92]	; (8004e14 <TIM_OC1_SetConfig+0x11c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d111      	bne.n	8004dde <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800

08004e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0210 	bic.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0320 	bic.w	r3, r3, #32
 8004e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <TIM_OC2_SetConfig+0x100>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_OC2_SetConfig+0x6c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <TIM_OC2_SetConfig+0x104>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d10d      	bne.n	8004ea0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <TIM_OC2_SetConfig+0x100>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00f      	beq.n	8004ec8 <TIM_OC2_SetConfig+0xb0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <TIM_OC2_SetConfig+0x104>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <TIM_OC2_SetConfig+0xb0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <TIM_OC2_SetConfig+0x108>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_OC2_SetConfig+0xb0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <TIM_OC2_SetConfig+0x10c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC2_SetConfig+0xb0>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <TIM_OC2_SetConfig+0x110>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d113      	bne.n	8004ef0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40013400 	.word	0x40013400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800

08004f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a27      	ldr	r2, [pc, #156]	; (8005028 <TIM_OC3_SetConfig+0xfc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_OC3_SetConfig+0x6a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a26      	ldr	r2, [pc, #152]	; (800502c <TIM_OC3_SetConfig+0x100>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d10d      	bne.n	8004fb2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <TIM_OC3_SetConfig+0xfc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00f      	beq.n	8004fda <TIM_OC3_SetConfig+0xae>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	; (800502c <TIM_OC3_SetConfig+0x100>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00b      	beq.n	8004fda <TIM_OC3_SetConfig+0xae>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1a      	ldr	r2, [pc, #104]	; (8005030 <TIM_OC3_SetConfig+0x104>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <TIM_OC3_SetConfig+0xae>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a19      	ldr	r2, [pc, #100]	; (8005034 <TIM_OC3_SetConfig+0x108>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_OC3_SetConfig+0xae>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	; (8005038 <TIM_OC3_SetConfig+0x10c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d113      	bne.n	8005002 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	621a      	str	r2, [r3, #32]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800

0800503c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800508a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <TIM_OC4_SetConfig+0xc0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <TIM_OC4_SetConfig+0x84>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <TIM_OC4_SetConfig+0xc4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_OC4_SetConfig+0x84>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <TIM_OC4_SetConfig+0xc8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_OC4_SetConfig+0x84>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a15      	ldr	r2, [pc, #84]	; (8005108 <TIM_OC4_SetConfig+0xcc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC4_SetConfig+0x84>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <TIM_OC4_SetConfig+0xd0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d109      	bne.n	80050d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	019b      	lsls	r3, r3, #6
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800

08005110 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005154:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a17      	ldr	r2, [pc, #92]	; (80051c4 <TIM_OC5_SetConfig+0xb4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_OC5_SetConfig+0x7a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a16      	ldr	r2, [pc, #88]	; (80051c8 <TIM_OC5_SetConfig+0xb8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_OC5_SetConfig+0x7a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a15      	ldr	r2, [pc, #84]	; (80051cc <TIM_OC5_SetConfig+0xbc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_OC5_SetConfig+0x7a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <TIM_OC5_SetConfig+0xc0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC5_SetConfig+0x7a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <TIM_OC5_SetConfig+0xc4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d109      	bne.n	800519e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005190:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800521e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	051b      	lsls	r3, r3, #20
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <TIM_OC6_SetConfig+0xb8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00f      	beq.n	8005254 <TIM_OC6_SetConfig+0x7c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <TIM_OC6_SetConfig+0xbc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00b      	beq.n	8005254 <TIM_OC6_SetConfig+0x7c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <TIM_OC6_SetConfig+0xc0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_OC6_SetConfig+0x7c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <TIM_OC6_SetConfig+0xc4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC6_SetConfig+0x7c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <TIM_OC6_SetConfig+0xc8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d109      	bne.n	8005268 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	029b      	lsls	r3, r3, #10
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40013400 	.word	0x40013400
 8005298:	40014000 	.word	0x40014000
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800

080052a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0201 	bic.w	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 030a 	bic.w	r3, r3, #10
 80052e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005302:	b480      	push	{r7}
 8005304:	b087      	sub	sp, #28
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0210 	bic.w	r2, r3, #16
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800532c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	031b      	lsls	r3, r3, #12
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800533e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	f043 0307 	orr.w	r3, r3, #7
 8005384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	609a      	str	r2, [r3, #8]
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	021a      	lsls	r2, r3, #8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2201      	movs	r2, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e068      	b.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2e      	ldr	r2, [pc, #184]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005476:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1e      	ldr	r2, [pc, #120]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01d      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d018      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a18      	ldr	r2, [pc, #96]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a14      	ldr	r2, [pc, #80]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10c      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40012c00 	.word	0x40012c00
 8005520:	40013400 	.word	0x40013400
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40014000 	.word	0x40014000

08005534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e042      	b.n	8005608 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fb fdc5 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2224      	movs	r2, #36	; 0x24
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f8c2 	bl	800573c <UART_SetConfig>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e022      	b.n	8005608 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fbb2 	bl	8005d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fc39 	bl	8005e78 <UART_CheckIdleState>
 8005606:	4603      	mov	r3, r0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005626:	2b20      	cmp	r3, #32
 8005628:	f040 8083 	bne.w	8005732 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_UART_Transmit+0x28>
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e07b      	b.n	8005734 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_UART_Transmit+0x3a>
 8005646:	2302      	movs	r3, #2
 8005648:	e074      	b.n	8005734 <HAL_UART_Transmit+0x124>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2221      	movs	r2, #33	; 0x21
 800565e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005662:	f7fb ffd3 	bl	800160c <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005680:	d108      	bne.n	8005694 <HAL_UART_Transmit+0x84>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e003      	b.n	800569c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056a4:	e02c      	b.n	8005700 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fc2c 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e039      	b.n	8005734 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	3302      	adds	r3, #2
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e007      	b.n	80056ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	3301      	adds	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1cc      	bne.n	80056a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	2140      	movs	r1, #64	; 0x40
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fbf9 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e006      	b.n	8005734 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e000      	b.n	8005734 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005732:	2302      	movs	r3, #2
  }
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800573c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005740:	b08c      	sub	sp, #48	; 0x30
 8005742:	af00      	add	r7, sp, #0
 8005744:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	431a      	orrs	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	431a      	orrs	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	4313      	orrs	r3, r2
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4baa      	ldr	r3, [pc, #680]	; (8005a14 <UART_SetConfig+0x2d8>)
 800576c:	4013      	ands	r3, r2
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005774:	430b      	orrs	r3, r1
 8005776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a9f      	ldr	r2, [pc, #636]	; (8005a18 <UART_SetConfig+0x2dc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057a4:	4313      	orrs	r3, r2
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057bc:	430b      	orrs	r3, r1
 80057be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	f023 010f 	bic.w	r1, r3, #15
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a90      	ldr	r2, [pc, #576]	; (8005a1c <UART_SetConfig+0x2e0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d125      	bne.n	800582c <UART_SetConfig+0xf0>
 80057e0:	4b8f      	ldr	r3, [pc, #572]	; (8005a20 <UART_SetConfig+0x2e4>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d81a      	bhi.n	8005824 <UART_SetConfig+0xe8>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0xb8>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005805 	.word	0x08005805
 80057f8:	08005815 	.word	0x08005815
 80057fc:	0800580d 	.word	0x0800580d
 8005800:	0800581d 	.word	0x0800581d
 8005804:	2301      	movs	r3, #1
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800580a:	e116      	b.n	8005a3a <UART_SetConfig+0x2fe>
 800580c:	2302      	movs	r3, #2
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005812:	e112      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e10e      	b.n	8005a3a <UART_SetConfig+0x2fe>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e10a      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e106      	b.n	8005a3a <UART_SetConfig+0x2fe>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a7c      	ldr	r2, [pc, #496]	; (8005a24 <UART_SetConfig+0x2e8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d138      	bne.n	80058a8 <UART_SetConfig+0x16c>
 8005836:	4b7a      	ldr	r3, [pc, #488]	; (8005a20 <UART_SetConfig+0x2e4>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f003 030c 	and.w	r3, r3, #12
 8005840:	2b0c      	cmp	r3, #12
 8005842:	d82d      	bhi.n	80058a0 <UART_SetConfig+0x164>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0x110>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005881 	.word	0x08005881
 8005850:	080058a1 	.word	0x080058a1
 8005854:	080058a1 	.word	0x080058a1
 8005858:	080058a1 	.word	0x080058a1
 800585c:	08005891 	.word	0x08005891
 8005860:	080058a1 	.word	0x080058a1
 8005864:	080058a1 	.word	0x080058a1
 8005868:	080058a1 	.word	0x080058a1
 800586c:	08005889 	.word	0x08005889
 8005870:	080058a1 	.word	0x080058a1
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058a1 	.word	0x080058a1
 800587c:	08005899 	.word	0x08005899
 8005880:	2300      	movs	r3, #0
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005886:	e0d8      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588e:	e0d4      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005896:	e0d0      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589e:	e0cc      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a6:	e0c8      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5e      	ldr	r2, [pc, #376]	; (8005a28 <UART_SetConfig+0x2ec>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d125      	bne.n	80058fe <UART_SetConfig+0x1c2>
 80058b2:	4b5b      	ldr	r3, [pc, #364]	; (8005a20 <UART_SetConfig+0x2e4>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058bc:	2b30      	cmp	r3, #48	; 0x30
 80058be:	d016      	beq.n	80058ee <UART_SetConfig+0x1b2>
 80058c0:	2b30      	cmp	r3, #48	; 0x30
 80058c2:	d818      	bhi.n	80058f6 <UART_SetConfig+0x1ba>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d00a      	beq.n	80058de <UART_SetConfig+0x1a2>
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d814      	bhi.n	80058f6 <UART_SetConfig+0x1ba>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <UART_SetConfig+0x19a>
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d008      	beq.n	80058e6 <UART_SetConfig+0x1aa>
 80058d4:	e00f      	b.n	80058f6 <UART_SetConfig+0x1ba>
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058dc:	e0ad      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80058de:	2302      	movs	r3, #2
 80058e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e4:	e0a9      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80058e6:	2304      	movs	r3, #4
 80058e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ec:	e0a5      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80058ee:	2308      	movs	r3, #8
 80058f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f4:	e0a1      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80058f6:	2310      	movs	r3, #16
 80058f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fc:	e09d      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <UART_SetConfig+0x2f0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d125      	bne.n	8005954 <UART_SetConfig+0x218>
 8005908:	4b45      	ldr	r3, [pc, #276]	; (8005a20 <UART_SetConfig+0x2e4>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005912:	2bc0      	cmp	r3, #192	; 0xc0
 8005914:	d016      	beq.n	8005944 <UART_SetConfig+0x208>
 8005916:	2bc0      	cmp	r3, #192	; 0xc0
 8005918:	d818      	bhi.n	800594c <UART_SetConfig+0x210>
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d00a      	beq.n	8005934 <UART_SetConfig+0x1f8>
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d814      	bhi.n	800594c <UART_SetConfig+0x210>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <UART_SetConfig+0x1f0>
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d008      	beq.n	800593c <UART_SetConfig+0x200>
 800592a:	e00f      	b.n	800594c <UART_SetConfig+0x210>
 800592c:	2300      	movs	r3, #0
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005932:	e082      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005934:	2302      	movs	r3, #2
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593a:	e07e      	b.n	8005a3a <UART_SetConfig+0x2fe>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005942:	e07a      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800594a:	e076      	b.n	8005a3a <UART_SetConfig+0x2fe>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005952:	e072      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <UART_SetConfig+0x2f4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d12a      	bne.n	80059b4 <UART_SetConfig+0x278>
 800595e:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <UART_SetConfig+0x2e4>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800596c:	d01a      	beq.n	80059a4 <UART_SetConfig+0x268>
 800596e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005972:	d81b      	bhi.n	80059ac <UART_SetConfig+0x270>
 8005974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005978:	d00c      	beq.n	8005994 <UART_SetConfig+0x258>
 800597a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597e:	d815      	bhi.n	80059ac <UART_SetConfig+0x270>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <UART_SetConfig+0x250>
 8005984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005988:	d008      	beq.n	800599c <UART_SetConfig+0x260>
 800598a:	e00f      	b.n	80059ac <UART_SetConfig+0x270>
 800598c:	2300      	movs	r3, #0
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e052      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005994:	2302      	movs	r3, #2
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599a:	e04e      	b.n	8005a3a <UART_SetConfig+0x2fe>
 800599c:	2304      	movs	r3, #4
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a2:	e04a      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80059a4:	2308      	movs	r3, #8
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059aa:	e046      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80059ac:	2310      	movs	r3, #16
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b2:	e042      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <UART_SetConfig+0x2dc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d13a      	bne.n	8005a34 <UART_SetConfig+0x2f8>
 80059be:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <UART_SetConfig+0x2e4>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059cc:	d01a      	beq.n	8005a04 <UART_SetConfig+0x2c8>
 80059ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059d2:	d81b      	bhi.n	8005a0c <UART_SetConfig+0x2d0>
 80059d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d8:	d00c      	beq.n	80059f4 <UART_SetConfig+0x2b8>
 80059da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059de:	d815      	bhi.n	8005a0c <UART_SetConfig+0x2d0>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <UART_SetConfig+0x2b0>
 80059e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e8:	d008      	beq.n	80059fc <UART_SetConfig+0x2c0>
 80059ea:	e00f      	b.n	8005a0c <UART_SetConfig+0x2d0>
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e022      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80059f4:	2302      	movs	r3, #2
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fa:	e01e      	b.n	8005a3a <UART_SetConfig+0x2fe>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a02:	e01a      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0a:	e016      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e012      	b.n	8005a3a <UART_SetConfig+0x2fe>
 8005a14:	cfff69f3 	.word	0xcfff69f3
 8005a18:	40008000 	.word	0x40008000
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40004400 	.word	0x40004400
 8005a28:	40004800 	.word	0x40004800
 8005a2c:	40004c00 	.word	0x40004c00
 8005a30:	40005000 	.word	0x40005000
 8005a34:	2310      	movs	r3, #16
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4aae      	ldr	r2, [pc, #696]	; (8005cf8 <UART_SetConfig+0x5bc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	f040 8097 	bne.w	8005b74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d823      	bhi.n	8005a96 <UART_SetConfig+0x35a>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0x318>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a97 	.word	0x08005a97
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a97 	.word	0x08005a97
 8005a64:	08005a87 	.word	0x08005a87
 8005a68:	08005a97 	.word	0x08005a97
 8005a6c:	08005a97 	.word	0x08005a97
 8005a70:	08005a97 	.word	0x08005a97
 8005a74:	08005a8f 	.word	0x08005a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a78:	f7fd fd60 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8005a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a7e:	e010      	b.n	8005aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a80:	4b9e      	ldr	r3, [pc, #632]	; (8005cfc <UART_SetConfig+0x5c0>)
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a84:	e00d      	b.n	8005aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a86:	f7fd fcc1 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a8c:	e009      	b.n	8005aa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a94:	e005      	b.n	8005aa2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8130 	beq.w	8005d0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	4a94      	ldr	r2, [pc, #592]	; (8005d00 <UART_SetConfig+0x5c4>)
 8005ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d305      	bcc.n	8005ada <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d903      	bls.n	8005ae2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ae0:	e113      	b.n	8005d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	60fa      	str	r2, [r7, #12]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	4a84      	ldr	r2, [pc, #528]	; (8005d00 <UART_SetConfig+0x5c4>)
 8005af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2200      	movs	r2, #0
 8005af8:	603b      	str	r3, [r7, #0]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b04:	f7fa fbcc 	bl	80002a0 <__aeabi_uldivmod>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	020b      	lsls	r3, r1, #8
 8005b1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b1e:	0202      	lsls	r2, r0, #8
 8005b20:	6979      	ldr	r1, [r7, #20]
 8005b22:	6849      	ldr	r1, [r1, #4]
 8005b24:	0849      	lsrs	r1, r1, #1
 8005b26:	2000      	movs	r0, #0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	eb12 0804 	adds.w	r8, r2, r4
 8005b30:	eb43 0905 	adc.w	r9, r3, r5
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	469a      	mov	sl, r3
 8005b3c:	4693      	mov	fp, r2
 8005b3e:	4652      	mov	r2, sl
 8005b40:	465b      	mov	r3, fp
 8005b42:	4640      	mov	r0, r8
 8005b44:	4649      	mov	r1, r9
 8005b46:	f7fa fbab 	bl	80002a0 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4613      	mov	r3, r2
 8005b50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b58:	d308      	bcc.n	8005b6c <UART_SetConfig+0x430>
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b60:	d204      	bcs.n	8005b6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a3a      	ldr	r2, [r7, #32]
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	e0ce      	b.n	8005d0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b72:	e0ca      	b.n	8005d0a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7c:	d166      	bne.n	8005c4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d827      	bhi.n	8005bd6 <UART_SetConfig+0x49a>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <UART_SetConfig+0x450>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	08005bd7 	.word	0x08005bd7
 8005b9c:	08005bc7 	.word	0x08005bc7
 8005ba0:	08005bd7 	.word	0x08005bd7
 8005ba4:	08005bd7 	.word	0x08005bd7
 8005ba8:	08005bd7 	.word	0x08005bd7
 8005bac:	08005bcf 	.word	0x08005bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb0:	f7fd fcc4 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8005bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bb6:	e014      	b.n	8005be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb8:	f7fd fcd6 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8005bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bbe:	e010      	b.n	8005be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <UART_SetConfig+0x5c0>)
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bc4:	e00d      	b.n	8005be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bc6:	f7fd fc21 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8005bca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bcc:	e009      	b.n	8005be2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bd4:	e005      	b.n	8005be2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005be0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8090 	beq.w	8005d0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	4a44      	ldr	r2, [pc, #272]	; (8005d00 <UART_SetConfig+0x5c4>)
 8005bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfc:	005a      	lsls	r2, r3, #1
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	441a      	add	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	d916      	bls.n	8005c44 <UART_SetConfig+0x508>
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1c:	d212      	bcs.n	8005c44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f023 030f 	bic.w	r3, r3, #15
 8005c26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	8bfb      	ldrh	r3, [r7, #30]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	8bfa      	ldrh	r2, [r7, #30]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e062      	b.n	8005d0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c4a:	e05e      	b.n	8005d0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d828      	bhi.n	8005ca6 <UART_SetConfig+0x56a>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <UART_SetConfig+0x520>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c89 	.word	0x08005c89
 8005c64:	08005c91 	.word	0x08005c91
 8005c68:	08005ca7 	.word	0x08005ca7
 8005c6c:	08005c97 	.word	0x08005c97
 8005c70:	08005ca7 	.word	0x08005ca7
 8005c74:	08005ca7 	.word	0x08005ca7
 8005c78:	08005ca7 	.word	0x08005ca7
 8005c7c:	08005c9f 	.word	0x08005c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c80:	f7fd fc5c 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c86:	e014      	b.n	8005cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fd fc6e 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c8e:	e010      	b.n	8005cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c90:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <UART_SetConfig+0x5c0>)
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c94:	e00d      	b.n	8005cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c96:	f7fd fbb9 	bl	800340c <HAL_RCC_GetSysClockFreq>
 8005c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c9c:	e009      	b.n	8005cb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ca4:	e005      	b.n	8005cb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d028      	beq.n	8005d0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <UART_SetConfig+0x5c4>)
 8005cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	441a      	add	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	d910      	bls.n	8005d04 <UART_SetConfig+0x5c8>
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d20c      	bcs.n	8005d04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60da      	str	r2, [r3, #12]
 8005cf4:	e009      	b.n	8005d0a <UART_SetConfig+0x5ce>
 8005cf6:	bf00      	nop
 8005cf8:	40008000 	.word	0x40008000
 8005cfc:	00f42400 	.word	0x00f42400
 8005d00:	0800bc84 	.word	0x0800bc84
      }
      else
      {
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2200      	movs	r2, #0
 8005d24:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3730      	adds	r7, #48	; 0x30
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e32:	d10a      	bne.n	8005e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e88:	f7fb fbc0 	bl	800160c <HAL_GetTick>
 8005e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d10e      	bne.n	8005eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f82f 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e025      	b.n	8005f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d10e      	bne.n	8005ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f819 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e00f      	b.n	8005f06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b09c      	sub	sp, #112	; 0x70
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1e:	e0a9      	b.n	8006074 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	f000 80a5 	beq.w	8006074 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2a:	f7fb fb6f 	bl	800160c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d140      	bne.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f54:	667b      	str	r3, [r7, #100]	; 0x64
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e6      	bne.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3308      	adds	r3, #8
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	663b      	str	r3, [r7, #96]	; 0x60
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e069      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d051      	beq.n	8006074 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fde:	d149      	bne.n	8006074 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800600e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	613b      	str	r3, [r7, #16]
   return(result);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	66bb      	str	r3, [r7, #104]	; 0x68
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800603c:	623a      	str	r2, [r7, #32]
 800603e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	6a3a      	ldr	r2, [r7, #32]
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	61bb      	str	r3, [r7, #24]
   return(result);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e010      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4013      	ands	r3, r2
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	429a      	cmp	r2, r3
 8006082:	bf0c      	ite	eq
 8006084:	2301      	moveq	r3, #1
 8006086:	2300      	movne	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	429a      	cmp	r2, r3
 8006090:	f43f af46 	beq.w	8005f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3770      	adds	r7, #112	; 0x70
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e027      	b.n	8006104 <HAL_UARTEx_DisableFifoMode+0x66>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2224      	movs	r2, #36	; 0x24
 80060c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e02d      	b.n	8006184 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2224      	movs	r2, #36	; 0x24
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0201 	bic.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f84f 	bl	8006208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e02d      	b.n	8006200 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2224      	movs	r2, #36	; 0x24
 80061b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0201 	bic.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f811 	bl	8006208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006214:	2b00      	cmp	r3, #0
 8006216:	d108      	bne.n	800622a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006228:	e031      	b.n	800628e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800622a:	2308      	movs	r3, #8
 800622c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800622e:	2308      	movs	r3, #8
 8006230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	0e5b      	lsrs	r3, r3, #25
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	0f5b      	lsrs	r3, r3, #29
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	7b3a      	ldrb	r2, [r7, #12]
 8006256:	4911      	ldr	r1, [pc, #68]	; (800629c <UARTEx_SetNbDataToProcess+0x94>)
 8006258:	5c8a      	ldrb	r2, [r1, r2]
 800625a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800625e:	7b3a      	ldrb	r2, [r7, #12]
 8006260:	490f      	ldr	r1, [pc, #60]	; (80062a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006264:	fb93 f3f2 	sdiv	r3, r3, r2
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	7b7a      	ldrb	r2, [r7, #13]
 8006274:	4909      	ldr	r1, [pc, #36]	; (800629c <UARTEx_SetNbDataToProcess+0x94>)
 8006276:	5c8a      	ldrb	r2, [r1, r2]
 8006278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800627c:	7b7a      	ldrb	r2, [r7, #13]
 800627e:	4908      	ldr	r1, [pc, #32]	; (80062a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006282:	fb93 f3f2 	sdiv	r3, r3, r2
 8006286:	b29a      	uxth	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	0800bc9c 	.word	0x0800bc9c
 80062a0:	0800bca4 	.word	0x0800bca4

080062a4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 fcb2 	bl	8007c1e <VL53L0X_get_offset_calibration_data_micro_meter>
 80062ba:	4603      	mov	r3, r0
 80062bc:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80062be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80062cc:	b5b0      	push	{r4, r5, r7, lr}
 80062ce:	b096      	sub	sp, #88	; 0x58
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80062da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2188      	movs	r1, #136	; 0x88
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f004 feaa 	bl	800b040 <VL53L0X_WrByte>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006300:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800630a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a9e      	ldr	r2, [pc, #632]	; (800658c <VL53L0X_DataInit+0x2c0>)
 8006312:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a9d      	ldr	r2, [pc, #628]	; (8006590 <VL53L0X_DataInit+0x2c4>)
 800631a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006324:	f107 0310 	add.w	r3, r7, #16
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fac2 	bl	80068b4 <VL53L0X_GetDeviceParameters>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006336:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800633a:	2b00      	cmp	r3, #0
 800633c:	d112      	bne.n	8006364 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800633e:	2300      	movs	r3, #0
 8006340:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006342:	2300      	movs	r3, #0
 8006344:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f103 0410 	add.w	r4, r3, #16
 800634c:	f107 0510 	add.w	r5, r7, #16
 8006350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800635a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2264      	movs	r2, #100	; 0x64
 8006368:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006372:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800637c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006386:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006392:	2201      	movs	r2, #1
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f004 fe52 	bl	800b040 <VL53L0X_WrByte>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80063aa:	2201      	movs	r2, #1
 80063ac:	21ff      	movs	r1, #255	; 0xff
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f004 fe46 	bl	800b040 <VL53L0X_WrByte>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063bc:	4313      	orrs	r3, r2
 80063be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80063c2:	2200      	movs	r2, #0
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f004 fe3a 	bl	800b040 <VL53L0X_WrByte>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80063da:	f107 030f 	add.w	r3, r7, #15
 80063de:	461a      	mov	r2, r3
 80063e0:	2191      	movs	r1, #145	; 0x91
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f004 feae 	bl	800b144 <VL53L0X_RdByte>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80063f6:	7bfa      	ldrb	r2, [r7, #15]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80063fe:	2201      	movs	r2, #1
 8006400:	2100      	movs	r1, #0
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f004 fe1c 	bl	800b040 <VL53L0X_WrByte>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006410:	4313      	orrs	r3, r2
 8006412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006416:	2200      	movs	r2, #0
 8006418:	21ff      	movs	r1, #255	; 0xff
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f004 fe10 	bl	800b040 <VL53L0X_WrByte>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006428:	4313      	orrs	r3, r2
 800642a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f004 fe04 	bl	800b040 <VL53L0X_WrByte>
 8006438:	4603      	mov	r3, r0
 800643a:	461a      	mov	r2, r3
 800643c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006440:	4313      	orrs	r3, r2
 8006442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006446:	2300      	movs	r3, #0
 8006448:	653b      	str	r3, [r7, #80]	; 0x50
 800644a:	e014      	b.n	8006476 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800644c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006450:	2b00      	cmp	r3, #0
 8006452:	d114      	bne.n	800647e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006456:	b29b      	uxth	r3, r3
 8006458:	2201      	movs	r2, #1
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fd35 	bl	8006ecc <VL53L0X_SetLimitCheckEnable>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800646a:	4313      	orrs	r3, r2
 800646c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006472:	3301      	adds	r3, #1
 8006474:	653b      	str	r3, [r7, #80]	; 0x50
 8006476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006478:	2b05      	cmp	r3, #5
 800647a:	dde7      	ble.n	800644c <VL53L0X_DataInit+0x180>
 800647c:	e000      	b.n	8006480 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800647e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006480:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006488:	2200      	movs	r2, #0
 800648a:	2102      	movs	r1, #2
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fd1d 	bl	8006ecc <VL53L0X_SetLimitCheckEnable>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006498:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800649c:	2b00      	cmp	r3, #0
 800649e:	d107      	bne.n	80064b0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80064a0:	2200      	movs	r2, #0
 80064a2:	2103      	movs	r1, #3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fd11 	bl	8006ecc <VL53L0X_SetLimitCheckEnable>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80064b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d107      	bne.n	80064c8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80064b8:	2200      	movs	r2, #0
 80064ba:	2104      	movs	r1, #4
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fd05 	bl	8006ecc <VL53L0X_SetLimitCheckEnable>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80064c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d107      	bne.n	80064e0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80064d0:	2200      	movs	r2, #0
 80064d2:	2105      	movs	r1, #5
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fcf9 	bl	8006ecc <VL53L0X_SetLimitCheckEnable>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80064e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d108      	bne.n	80064fa <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80064e8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80064ec:	2100      	movs	r1, #0
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fd9c 	bl	800702c <VL53L0X_SetLimitCheckValue>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80064fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d108      	bne.n	8006514 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006506:	2101      	movs	r1, #1
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fd8f 	bl	800702c <VL53L0X_SetLimitCheckValue>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006514:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006518:	2b00      	cmp	r3, #0
 800651a:	d108      	bne.n	800652e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800651c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006520:	2102      	movs	r1, #2
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fd82 	bl	800702c <VL53L0X_SetLimitCheckValue>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800652e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006532:	2b00      	cmp	r3, #0
 8006534:	d107      	bne.n	8006546 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006536:	2200      	movs	r2, #0
 8006538:	2103      	movs	r1, #3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fd76 	bl	800702c <VL53L0X_SetLimitCheckValue>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006546:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10f      	bne.n	800656e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	22ff      	movs	r2, #255	; 0xff
 8006552:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006556:	22ff      	movs	r2, #255	; 0xff
 8006558:	2101      	movs	r1, #1
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f004 fd70 	bl	800b040 <VL53L0X_WrByte>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800656e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800657e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006582:	4618      	mov	r0, r3
 8006584:	3758      	adds	r7, #88	; 0x58
 8006586:	46bd      	mov	sp, r7
 8006588:	bdb0      	pop	{r4, r5, r7, pc}
 800658a:	bf00      	nop
 800658c:	00016b85 	.word	0x00016b85
 8006590:	000970a4 	.word	0x000970a4

08006594 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006594:	b5b0      	push	{r4, r5, r7, lr}
 8006596:	b09e      	sub	sp, #120	; 0x78
 8006598:	af02      	add	r7, sp, #8
 800659a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800659c:	2300      	movs	r3, #0
 800659e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80065a2:	f107 031c 	add.w	r3, r7, #28
 80065a6:	2240      	movs	r2, #64	; 0x40
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f004 feb0 	bl	800b310 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80065d0:	2101      	movs	r1, #1
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f002 fa79 	bl	8008aca <VL53L0X_get_info_from_device>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80065e4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80065ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80065f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d80d      	bhi.n	8006614 <VL53L0X_StaticInit+0x80>
 80065f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006602:	2b20      	cmp	r3, #32
 8006604:	d806      	bhi.n	8006614 <VL53L0X_StaticInit+0x80>
 8006606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10e      	bne.n	800662c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800660e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006610:	2b0c      	cmp	r3, #12
 8006612:	d90b      	bls.n	800662c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006614:	f107 0218 	add.w	r2, r7, #24
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fcf8 	bl	8008014 <VL53L0X_perform_ref_spad_management>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800662a:	e009      	b.n	8006640 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800662c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006630:	461a      	mov	r2, r3
 8006632:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fef9 	bl	800842c <VL53L0X_set_reference_spads>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006640:	4b94      	ldr	r3, [pc, #592]	; (8006894 <VL53L0X_StaticInit+0x300>)
 8006642:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006644:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10f      	bne.n	800666c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006656:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006664:	66bb      	str	r3, [r7, #104]	; 0x68
 8006666:	e001      	b.n	800666c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006668:	4b8a      	ldr	r3, [pc, #552]	; (8006894 <VL53L0X_StaticInit+0x300>)
 800666a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800666c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006674:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f003 fdcc 	bl	800a214 <VL53L0X_load_tuning_settings>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006682:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800668a:	2300      	movs	r3, #0
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2304      	movs	r3, #4
 8006690:	2200      	movs	r2, #0
 8006692:	2100      	movs	r1, #0
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f8f1 	bl	800787c <VL53L0X_SetGpioConfig>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d121      	bne.n	80066ec <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066a8:	2201      	movs	r2, #1
 80066aa:	21ff      	movs	r1, #255	; 0xff
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f004 fcc7 	bl	800b040 <VL53L0X_WrByte>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80066b8:	f107 031a 	add.w	r3, r7, #26
 80066bc:	461a      	mov	r2, r3
 80066be:	2184      	movs	r1, #132	; 0x84
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f004 fd69 	bl	800b198 <VL53L0X_RdWord>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80066d4:	2200      	movs	r2, #0
 80066d6:	21ff      	movs	r1, #255	; 0xff
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f004 fcb1 	bl	800b040 <VL53L0X_WrByte>
 80066de:	4603      	mov	r3, r0
 80066e0:	461a      	mov	r2, r3
 80066e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80066f4:	8b7b      	ldrh	r3, [r7, #26]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006700:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006704:	2b00      	cmp	r3, #0
 8006706:	d108      	bne.n	800671a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006708:	f107 031c 	add.w	r3, r7, #28
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8d0 	bl	80068b4 <VL53L0X_GetDeviceParameters>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800671a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800671e:	2b00      	cmp	r3, #0
 8006720:	d110      	bne.n	8006744 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006722:	f107 0319 	add.w	r3, r7, #25
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f992 	bl	8006a52 <VL53L0X_GetFractionEnable>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006734:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800673c:	7e7a      	ldrb	r2, [r7, #25]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006744:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10e      	bne.n	800676a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f103 0410 	add.w	r4, r3, #16
 8006752:	f107 051c 	add.w	r5, r7, #28
 8006756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800675c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006762:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800676a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800676e:	2b00      	cmp	r3, #0
 8006770:	d111      	bne.n	8006796 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006772:	f107 0319 	add.w	r3, r7, #25
 8006776:	461a      	mov	r2, r3
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f004 fce2 	bl	800b144 <VL53L0X_RdByte>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006786:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800678e:	7e7a      	ldrb	r2, [r7, #25]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006796:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800679a:	2b00      	cmp	r3, #0
 800679c:	d107      	bne.n	80067ae <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800679e:	2200      	movs	r2, #0
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f9ca 	bl	8006b3c <VL53L0X_SetSequenceStepEnable>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80067ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80067b6:	2200      	movs	r2, #0
 80067b8:	2102      	movs	r1, #2
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9be 	bl	8006b3c <VL53L0X_SetSequenceStepEnable>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80067c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2203      	movs	r2, #3
 80067d2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80067d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80067de:	f107 0313 	add.w	r3, r7, #19
 80067e2:	461a      	mov	r2, r3
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f990 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80067fa:	7cfa      	ldrb	r2, [r7, #19]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006802:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800680a:	f107 0313 	add.w	r3, r7, #19
 800680e:	461a      	mov	r2, r3
 8006810:	2101      	movs	r1, #1
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f97a 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800681e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006826:	7cfa      	ldrb	r2, [r7, #19]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800682e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006836:	f107 030c 	add.w	r3, r7, #12
 800683a:	461a      	mov	r2, r3
 800683c:	2103      	movs	r1, #3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f002 fec4 	bl	80095cc <get_sequence_step_timeout>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800684a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800685a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006862:	f107 030c 	add.w	r3, r7, #12
 8006866:	461a      	mov	r2, r3
 8006868:	2104      	movs	r1, #4
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f002 feae 	bl	80095cc <get_sequence_step_timeout>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006876:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006886:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800688a:	4618      	mov	r0, r3
 800688c:	3770      	adds	r7, #112	; 0x70
 800688e:	46bd      	mov	sp, r7
 8006890:	bdb0      	pop	{r4, r5, r7, pc}
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010

08006898 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80068a0:	239d      	movs	r3, #157	; 0x9d
 80068a2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80068a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068be:	2300      	movs	r3, #0
 80068c0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8b0 	bl	8006a2c <VL53L0X_GetDeviceMode>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80068d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa78 	bl	8006dd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80068e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80068f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d107      	bne.n	800690e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	3310      	adds	r3, #16
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 faae 	bl	8006e66 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800690e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d107      	bne.n	8006926 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	3314      	adds	r3, #20
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff fcc1 	bl	80062a4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006922:	4603      	mov	r3, r0
 8006924:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d134      	bne.n	8006998 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	e02a      	b.n	800698a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d12a      	bne.n	8006992 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	b299      	uxth	r1, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3308      	adds	r3, #8
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	4413      	add	r3, r2
 800694a:	3304      	adds	r3, #4
 800694c:	461a      	mov	r2, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fbce 	bl	80070f0 <VL53L0X_GetLimitCheckValue>
 8006954:	4603      	mov	r3, r0
 8006956:	461a      	mov	r2, r3
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	4313      	orrs	r3, r2
 800695c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800695e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d117      	bne.n	8006996 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	b299      	uxth	r1, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	3318      	adds	r3, #24
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	4413      	add	r3, r2
 8006972:	461a      	mov	r2, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fb35 	bl	8006fe4 <VL53L0X_GetLimitCheckEnable>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	4313      	orrs	r3, r2
 8006982:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	3301      	adds	r3, #1
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b05      	cmp	r3, #5
 800698e:	ddd1      	ble.n	8006934 <VL53L0X_GetDeviceParameters+0x80>
 8006990:	e002      	b.n	8006998 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006996:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d107      	bne.n	80069b0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	333c      	adds	r3, #60	; 0x3c
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fc30 	bl	800720c <VL53L0X_GetWrapAroundCheckEnable>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80069b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d107      	bne.n	80069c8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f879 	bl	8006ab6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	2b15      	cmp	r3, #21
 80069e8:	bf8c      	ite	hi
 80069ea:	2201      	movhi	r2, #1
 80069ec:	2200      	movls	r2, #0
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	d10e      	bne.n	8006a12 <VL53L0X_SetDeviceMode+0x3e>
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <VL53L0X_SetDeviceMode+0x54>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	741a      	strb	r2, [r3, #16]
		break;
 8006a10:	e001      	b.n	8006a16 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006a12:	23f8      	movs	r3, #248	; 0xf8
 8006a14:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	0030000b 	.word	0x0030000b

08006a2c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7c1a      	ldrb	r2, [r3, #16]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	2109      	movs	r1, #9
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f004 fb6d 	bl	800b144 <VL53L0X_RdByte>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f003 fa26 	bl	8009ef2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f003 faf3 	bl	800a0b2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006af0:	78ba      	ldrb	r2, [r7, #2]
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f002 ff3b 	bl	8009972 <VL53L0X_set_vcsel_pulse_period>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	460b      	mov	r3, r1
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006b1e:	7afb      	ldrb	r3, [r7, #11]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f003 f9ad 	bl	8009e84 <VL53L0X_get_vcsel_pulse_period>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006b58:	f107 030f 	add.w	r3, r7, #15
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	2101      	movs	r1, #1
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f004 faef 	bl	800b144 <VL53L0X_RdByte>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d15a      	bne.n	8006c2c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006b76:	78bb      	ldrb	r3, [r7, #2]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d12b      	bne.n	8006bd4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d825      	bhi.n	8006bce <VL53L0X_SetSequenceStepEnable+0x92>
 8006b82:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006b9d 	.word	0x08006b9d
 8006b8c:	08006ba7 	.word	0x08006ba7
 8006b90:	08006bb1 	.word	0x08006bb1
 8006b94:	08006bbb 	.word	0x08006bbb
 8006b98:	08006bc5 	.word	0x08006bc5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006b9c:	7dbb      	ldrb	r3, [r7, #22]
 8006b9e:	f043 0310 	orr.w	r3, r3, #16
 8006ba2:	75bb      	strb	r3, [r7, #22]
				break;
 8006ba4:	e043      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006ba6:	7dbb      	ldrb	r3, [r7, #22]
 8006ba8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006bac:	75bb      	strb	r3, [r7, #22]
				break;
 8006bae:	e03e      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006bb0:	7dbb      	ldrb	r3, [r7, #22]
 8006bb2:	f043 0304 	orr.w	r3, r3, #4
 8006bb6:	75bb      	strb	r3, [r7, #22]
				break;
 8006bb8:	e039      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006bba:	7dbb      	ldrb	r3, [r7, #22]
 8006bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc0:	75bb      	strb	r3, [r7, #22]
				break;
 8006bc2:	e034      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006bc4:	7dbb      	ldrb	r3, [r7, #22]
 8006bc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bca:	75bb      	strb	r3, [r7, #22]
				break;
 8006bcc:	e02f      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bce:	23fc      	movs	r3, #252	; 0xfc
 8006bd0:	75fb      	strb	r3, [r7, #23]
 8006bd2:	e02c      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d825      	bhi.n	8006c26 <VL53L0X_SetSequenceStepEnable+0xea>
 8006bda:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006bf5 	.word	0x08006bf5
 8006be4:	08006bff 	.word	0x08006bff
 8006be8:	08006c09 	.word	0x08006c09
 8006bec:	08006c13 	.word	0x08006c13
 8006bf0:	08006c1d 	.word	0x08006c1d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
 8006bf6:	f023 0310 	bic.w	r3, r3, #16
 8006bfa:	75bb      	strb	r3, [r7, #22]
				break;
 8006bfc:	e017      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006bfe:	7dbb      	ldrb	r3, [r7, #22]
 8006c00:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006c04:	75bb      	strb	r3, [r7, #22]
				break;
 8006c06:	e012      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006c08:	7dbb      	ldrb	r3, [r7, #22]
 8006c0a:	f023 0304 	bic.w	r3, r3, #4
 8006c0e:	75bb      	strb	r3, [r7, #22]
				break;
 8006c10:	e00d      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006c12:	7dbb      	ldrb	r3, [r7, #22]
 8006c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c18:	75bb      	strb	r3, [r7, #22]
				break;
 8006c1a:	e008      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006c1c:	7dbb      	ldrb	r3, [r7, #22]
 8006c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c22:	75bb      	strb	r3, [r7, #22]
				break;
 8006c24:	e003      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c26:	23fc      	movs	r3, #252	; 0xfc
 8006c28:	75fb      	strb	r3, [r7, #23]
 8006c2a:	e000      	b.n	8006c2e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006c2c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	7dba      	ldrb	r2, [r7, #22]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d01e      	beq.n	8006c74 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006c3e:	7dbb      	ldrb	r3, [r7, #22]
 8006c40:	461a      	mov	r2, r3
 8006c42:	2101      	movs	r1, #1
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f004 f9fb 	bl	800b040 <VL53L0X_WrByte>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7dba      	ldrb	r2, [r7, #22]
 8006c5a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006c6c:	6939      	ldr	r1, [r7, #16]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff ff0e 	bl	8006a90 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	607b      	str	r3, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	72fb      	strb	r3, [r7, #11]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d836      	bhi.n	8006d10 <sequence_step_enabled+0x90>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <sequence_step_enabled+0x28>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006cbd 	.word	0x08006cbd
 8006cac:	08006ccf 	.word	0x08006ccf
 8006cb0:	08006ce1 	.word	0x08006ce1
 8006cb4:	08006cf3 	.word	0x08006cf3
 8006cb8:	08006d05 	.word	0x08006d05
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006cbc:	7abb      	ldrb	r3, [r7, #10]
 8006cbe:	111b      	asrs	r3, r3, #4
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	701a      	strb	r2, [r3, #0]
		break;
 8006ccc:	e022      	b.n	8006d14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006cce:	7abb      	ldrb	r3, [r7, #10]
 8006cd0:	10db      	asrs	r3, r3, #3
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	701a      	strb	r2, [r3, #0]
		break;
 8006cde:	e019      	b.n	8006d14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006ce0:	7abb      	ldrb	r3, [r7, #10]
 8006ce2:	109b      	asrs	r3, r3, #2
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	701a      	strb	r2, [r3, #0]
		break;
 8006cf0:	e010      	b.n	8006d14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006cf2:	7abb      	ldrb	r3, [r7, #10]
 8006cf4:	119b      	asrs	r3, r3, #6
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	701a      	strb	r2, [r3, #0]
		break;
 8006d02:	e007      	b.n	8006d14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006d04:	7abb      	ldrb	r3, [r7, #10]
 8006d06:	09db      	lsrs	r3, r3, #7
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	701a      	strb	r2, [r3, #0]
		break;
 8006d0e:	e001      	b.n	8006d14 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d10:	23fc      	movs	r3, #252	; 0xfc
 8006d12:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006d36:	f107 030e 	add.w	r3, r7, #14
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f004 fa00 	bl	800b144 <VL53L0X_RdByte>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d107      	bne.n	8006d60 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006d50:	7bba      	ldrb	r2, [r7, #14]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff ff92 	bl	8006c80 <sequence_step_enabled>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d108      	bne.n	8006d7a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006d68:	7bba      	ldrb	r2, [r7, #14]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	2101      	movs	r1, #1
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff ff85 	bl	8006c80 <sequence_step_enabled>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d108      	bne.n	8006d94 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006d82:	7bba      	ldrb	r2, [r7, #14]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	3301      	adds	r3, #1
 8006d88:	2102      	movs	r1, #2
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff ff78 	bl	8006c80 <sequence_step_enabled>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006d9c:	7bba      	ldrb	r2, [r7, #14]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3303      	adds	r3, #3
 8006da2:	2103      	movs	r1, #3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff6b 	bl	8006c80 <sequence_step_enabled>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d108      	bne.n	8006dc8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006db6:	7bba      	ldrb	r2, [r7, #14]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	2104      	movs	r1, #4
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff ff5e 	bl	8006c80 <sequence_step_enabled>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006de2:	f107 030c 	add.w	r3, r7, #12
 8006de6:	461a      	mov	r2, r3
 8006de8:	21f8      	movs	r1, #248	; 0xf8
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f004 f9d4 	bl	800b198 <VL53L0X_RdWord>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d108      	bne.n	8006e0e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006dfc:	f107 0308 	add.w	r3, r7, #8
 8006e00:	461a      	mov	r2, r3
 8006e02:	2104      	movs	r1, #4
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f004 f9ff 	bl	800b208 <VL53L0X_RdDWord>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10c      	bne.n	8006e30 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006e16:	89bb      	ldrh	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	89ba      	ldrh	r2, [r7, #12]
 8006e20:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7f1b      	ldrb	r3, [r3, #28]
 8006e4e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	7bba      	ldrb	r2, [r7, #14]
 8006e54:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006e74:	f107 030e 	add.w	r3, r7, #14
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2120      	movs	r1, #32
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f004 f98b 	bl	800b198 <VL53L0X_RdWord>
 8006e82:	4603      	mov	r3, r0
 8006e84:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d118      	bne.n	8006ec0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	771a      	strb	r2, [r3, #28]
 8006ea6:	e00b      	b.n	8006ec0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006ea8:	89fb      	ldrh	r3, [r7, #14]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	807b      	strh	r3, [r7, #2]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006eec:	887b      	ldrh	r3, [r7, #2]
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	d902      	bls.n	8006ef8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ef2:	23fc      	movs	r3, #252	; 0xfc
 8006ef4:	75fb      	strb	r3, [r7, #23]
 8006ef6:	e05b      	b.n	8006fb0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006ef8:	787b      	ldrb	r3, [r7, #1]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006f06:	2301      	movs	r3, #1
 8006f08:	73bb      	strb	r3, [r7, #14]
 8006f0a:	e00a      	b.n	8006f22 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006f0c:	887b      	ldrh	r3, [r7, #2]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	330c      	adds	r3, #12
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006f22:	887b      	ldrh	r3, [r7, #2]
 8006f24:	2b05      	cmp	r3, #5
 8006f26:	d841      	bhi.n	8006fac <VL53L0X_SetLimitCheckEnable+0xe0>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f53 	.word	0x08006f53
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006f7d 	.word	0x08006f7d
 8006f44:	08006f95 	.word	0x08006f95

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7bfa      	ldrb	r2, [r7, #15]
 8006f4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006f50:	e02e      	b.n	8006fb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2144      	movs	r1, #68	; 0x44
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f004 f893 	bl	800b088 <VL53L0X_WrWord>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]

			break;
 8006f66:	e023      	b.n	8006fb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	7bfa      	ldrb	r2, [r7, #15]
 8006f6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006f70:	e01e      	b.n	8006fb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7bfa      	ldrb	r2, [r7, #15]
 8006f76:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006f7a:	e019      	b.n	8006fb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	22fe      	movs	r2, #254	; 0xfe
 8006f86:	2160      	movs	r1, #96	; 0x60
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f004 f8a7 	bl	800b0dc <VL53L0X_UpdateByte>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006f92:	e00d      	b.n	8006fb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006f9a:	7b7b      	ldrb	r3, [r7, #13]
 8006f9c:	22ef      	movs	r2, #239	; 0xef
 8006f9e:	2160      	movs	r1, #96	; 0x60
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f004 f89b 	bl	800b0dc <VL53L0X_UpdateByte>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006faa:	e001      	b.n	8006fb0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fac:	23fc      	movs	r3, #252	; 0xfc
 8006fae:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10f      	bne.n	8006fd8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006fb8:	787b      	ldrb	r3, [r7, #1]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d106      	bne.n	8006fcc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006fbe:	887b      	ldrh	r3, [r7, #2]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006fca:	e005      	b.n	8006fd8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006fcc:	887b      	ldrh	r3, [r7, #2]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	460b      	mov	r3, r1
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006ff6:	897b      	ldrh	r3, [r7, #10]
 8006ff8:	2b05      	cmp	r3, #5
 8006ffa:	d905      	bls.n	8007008 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ffc:	23fc      	movs	r3, #252	; 0xfc
 8006ffe:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e008      	b.n	800701a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007008:	897b      	ldrh	r3, [r7, #10]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007012:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	7dba      	ldrb	r2, [r7, #22]
 8007018:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800701a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800701e:	4618      	mov	r0, r3
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	460b      	mov	r3, r1
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800703a:	2300      	movs	r3, #0
 800703c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800703e:	897b      	ldrh	r3, [r7, #10]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007048:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800704a:	7dbb      	ldrb	r3, [r7, #22]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d107      	bne.n	8007060 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007050:	897b      	ldrh	r3, [r7, #10]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	330c      	adds	r3, #12
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	605a      	str	r2, [r3, #4]
 800705e:	e040      	b.n	80070e2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007060:	897b      	ldrh	r3, [r7, #10]
 8007062:	2b05      	cmp	r3, #5
 8007064:	d830      	bhi.n	80070c8 <VL53L0X_SetLimitCheckValue+0x9c>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <VL53L0X_SetLimitCheckValue+0x40>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	08007085 	.word	0x08007085
 8007070:	0800708d 	.word	0x0800708d
 8007074:	080070a3 	.word	0x080070a3
 8007078:	080070ab 	.word	0x080070ab
 800707c:	080070b3 	.word	0x080070b3
 8007080:	080070b3 	.word	0x080070b3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800708a:	e01f      	b.n	80070cc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007090:	b29b      	uxth	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	2144      	movs	r1, #68	; 0x44
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f003 fff6 	bl	800b088 <VL53L0X_WrWord>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80070a0:	e014      	b.n	80070cc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80070a8:	e010      	b.n	80070cc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80070b0:	e00c      	b.n	80070cc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	2164      	movs	r1, #100	; 0x64
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f003 ffe3 	bl	800b088 <VL53L0X_WrWord>
 80070c2:	4603      	mov	r3, r0
 80070c4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80070c6:	e001      	b.n	80070cc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070c8:	23fc      	movs	r3, #252	; 0xfc
 80070ca:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80070cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070d4:	897b      	ldrh	r3, [r7, #10]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	330c      	adds	r3, #12
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop

080070f0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	460b      	mov	r3, r1
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070fe:	2300      	movs	r3, #0
 8007100:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007106:	897b      	ldrh	r3, [r7, #10]
 8007108:	2b05      	cmp	r3, #5
 800710a:	d847      	bhi.n	800719c <VL53L0X_GetLimitCheckValue+0xac>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <VL53L0X_GetLimitCheckValue+0x24>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	0800712d 	.word	0x0800712d
 8007118:	08007139 	.word	0x08007139
 800711c:	0800715f 	.word	0x0800715f
 8007120:	0800716b 	.word	0x0800716b
 8007124:	08007177 	.word	0x08007177
 8007128:	08007177 	.word	0x08007177

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007130:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	77bb      	strb	r3, [r7, #30]
		break;
 8007136:	e033      	b.n	80071a0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007138:	f107 0316 	add.w	r3, r7, #22
 800713c:	461a      	mov	r2, r3
 800713e:	2144      	movs	r1, #68	; 0x44
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f004 f829 	bl	800b198 <VL53L0X_RdWord>
 8007146:	4603      	mov	r3, r0
 8007148:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800714a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007152:	8afb      	ldrh	r3, [r7, #22]
 8007154:	025b      	lsls	r3, r3, #9
 8007156:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007158:	2301      	movs	r3, #1
 800715a:	77bb      	strb	r3, [r7, #30]
		break;
 800715c:	e020      	b.n	80071a0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	77bb      	strb	r3, [r7, #30]
		break;
 8007168:	e01a      	b.n	80071a0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	77bb      	strb	r3, [r7, #30]
		break;
 8007174:	e014      	b.n	80071a0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007176:	f107 0316 	add.w	r3, r7, #22
 800717a:	461a      	mov	r2, r3
 800717c:	2164      	movs	r1, #100	; 0x64
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f004 f80a 	bl	800b198 <VL53L0X_RdWord>
 8007184:	4603      	mov	r3, r0
 8007186:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007188:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007190:	8afb      	ldrh	r3, [r7, #22]
 8007192:	025b      	lsls	r3, r3, #9
 8007194:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	77bb      	strb	r3, [r7, #30]
		break;
 800719a:	e001      	b.n	80071a0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800719c:	23fc      	movs	r3, #252	; 0xfc
 800719e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80071a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d12a      	bne.n	80071fe <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80071a8:	7fbb      	ldrb	r3, [r7, #30]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d124      	bne.n	80071f8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d110      	bne.n	80071d6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80071b4:	897b      	ldrh	r3, [r7, #10]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	330c      	adds	r3, #12
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80071c8:	897b      	ldrh	r3, [r7, #10]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80071d4:	e013      	b.n	80071fe <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80071dc:	897b      	ldrh	r3, [r7, #10]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	330c      	adds	r3, #12
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80071ea:	897b      	ldrh	r3, [r7, #10]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80071f6:	e002      	b.n	80071fe <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071fe:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007202:	4618      	mov	r0, r3
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop

0800720c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800721a:	f107 030e 	add.w	r3, r7, #14
 800721e:	461a      	mov	r2, r3
 8007220:	2101      	movs	r1, #1
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f003 ff8e 	bl	800b144 <VL53L0X_RdByte>
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800722c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10e      	bne.n	8007252 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007234:	7bba      	ldrb	r2, [r7, #14]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	b25b      	sxtb	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	da03      	bge.n	800724c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e002      	b.n	8007252 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d104      	bne.n	8007264 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800727c:	f107 030e 	add.w	r3, r7, #14
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff fbd2 	bl	8006a2c <VL53L0X_GetDeviceMode>
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800728c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f898 	bl	80073d0 <VL53L0X_StartMeasurement>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80072a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 fb3f 	bl	8008930 <VL53L0X_measurement_poll_for_completion>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80072b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2203      	movs	r2, #3
 80072c8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80072cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80072e8:	2301      	movs	r3, #1
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 fae1 	bl	80088b6 <VL53L0X_perform_ref_calibration>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80072f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007310:	2300      	movs	r3, #0
 8007312:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800731a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800731c:	7dbb      	ldrb	r3, [r7, #22]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d005      	beq.n	800732e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007322:	7dbb      	ldrb	r3, [r7, #22]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d002      	beq.n	800732e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007328:	7dbb      	ldrb	r3, [r7, #22]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d147      	bne.n	80073be <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800732e:	f107 030c 	add.w	r3, r7, #12
 8007332:	f107 0210 	add.w	r2, r7, #16
 8007336:	2101      	movs	r1, #1
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fbc3 	bl	8007ac4 <VL53L0X_GetInterruptThresholds>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007348:	d803      	bhi.n	8007352 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800734a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800734c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007350:	d935      	bls.n	80073be <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d131      	bne.n	80073be <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007360:	491a      	ldr	r1, [pc, #104]	; (80073cc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f002 ff56 	bl	800a214 <VL53L0X_load_tuning_settings>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]
 800736c:	e027      	b.n	80073be <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800736e:	2204      	movs	r2, #4
 8007370:	21ff      	movs	r1, #255	; 0xff
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f003 fe64 	bl	800b040 <VL53L0X_WrByte>
 8007378:	4603      	mov	r3, r0
 800737a:	461a      	mov	r2, r3
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	4313      	orrs	r3, r2
 8007380:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007382:	2200      	movs	r2, #0
 8007384:	2170      	movs	r1, #112	; 0x70
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f003 fe5a 	bl	800b040 <VL53L0X_WrByte>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	4313      	orrs	r3, r2
 8007394:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007396:	2200      	movs	r2, #0
 8007398:	21ff      	movs	r1, #255	; 0xff
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f003 fe50 	bl	800b040 <VL53L0X_WrByte>
 80073a0:	4603      	mov	r3, r0
 80073a2:	461a      	mov	r2, r3
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80073aa:	2200      	movs	r2, #0
 80073ac:	2180      	movs	r1, #128	; 0x80
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f003 fe46 	bl	800b040 <VL53L0X_WrByte>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80073be:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000104 	.word	0x20000104

080073d0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80073dc:	2301      	movs	r3, #1
 80073de:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80073e0:	f107 030e 	add.w	r3, r7, #14
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fb20 	bl	8006a2c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80073ec:	2201      	movs	r2, #1
 80073ee:	2180      	movs	r1, #128	; 0x80
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f003 fe25 	bl	800b040 <VL53L0X_WrByte>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80073fa:	2201      	movs	r2, #1
 80073fc:	21ff      	movs	r1, #255	; 0xff
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f003 fe1e 	bl	800b040 <VL53L0X_WrByte>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007408:	2200      	movs	r2, #0
 800740a:	2100      	movs	r1, #0
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f003 fe17 	bl	800b040 <VL53L0X_WrByte>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800741c:	461a      	mov	r2, r3
 800741e:	2191      	movs	r1, #145	; 0x91
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f003 fe0d 	bl	800b040 <VL53L0X_WrByte>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800742a:	2201      	movs	r2, #1
 800742c:	2100      	movs	r1, #0
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f003 fe06 	bl	800b040 <VL53L0X_WrByte>
 8007434:	4603      	mov	r3, r0
 8007436:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007438:	2200      	movs	r2, #0
 800743a:	21ff      	movs	r1, #255	; 0xff
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f003 fdff 	bl	800b040 <VL53L0X_WrByte>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007446:	2200      	movs	r2, #0
 8007448:	2180      	movs	r1, #128	; 0x80
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f003 fdf8 	bl	800b040 <VL53L0X_WrByte>
 8007450:	4603      	mov	r3, r0
 8007452:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d054      	beq.n	8007504 <VL53L0X_StartMeasurement+0x134>
 800745a:	2b03      	cmp	r3, #3
 800745c:	dc6c      	bgt.n	8007538 <VL53L0X_StartMeasurement+0x168>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <VL53L0X_StartMeasurement+0x98>
 8007462:	2b01      	cmp	r3, #1
 8007464:	d034      	beq.n	80074d0 <VL53L0X_StartMeasurement+0x100>
 8007466:	e067      	b.n	8007538 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007468:	2201      	movs	r2, #1
 800746a:	2100      	movs	r1, #0
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f003 fde7 	bl	800b040 <VL53L0X_WrByte>
 8007472:	4603      	mov	r3, r0
 8007474:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800747a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d15d      	bne.n	800753e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800748c:	f107 030d 	add.w	r3, r7, #13
 8007490:	461a      	mov	r2, r3
 8007492:	2100      	movs	r1, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f003 fe55 	bl	800b144 <VL53L0X_RdByte>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3301      	adds	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80074a4:	7b7a      	ldrb	r2, [r7, #13]
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	4013      	ands	r3, r2
 80074aa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80074ac:	7bfa      	ldrb	r2, [r7, #15]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d107      	bne.n	80074c2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80074b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80074c0:	d3e1      	bcc.n	8007486 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80074c8:	d339      	bcc.n	800753e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80074ca:	23f9      	movs	r3, #249	; 0xf9
 80074cc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80074ce:	e036      	b.n	800753e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80074d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80074d8:	2101      	movs	r1, #1
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff ff12 	bl	8007304 <VL53L0X_CheckAndLoadInterruptSettings>
 80074e0:	4603      	mov	r3, r0
 80074e2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80074e4:	2202      	movs	r2, #2
 80074e6:	2100      	movs	r1, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f003 fda9 	bl	800b040 <VL53L0X_WrByte>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80074f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d123      	bne.n	8007542 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2204      	movs	r2, #4
 80074fe:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007502:	e01e      	b.n	8007542 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800750c:	2101      	movs	r1, #1
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fef8 	bl	8007304 <VL53L0X_CheckAndLoadInterruptSettings>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007518:	2204      	movs	r2, #4
 800751a:	2100      	movs	r1, #0
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f003 fd8f 	bl	800b040 <VL53L0X_WrByte>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10b      	bne.n	8007546 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2204      	movs	r2, #4
 8007532:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007536:	e006      	b.n	8007546 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007538:	23f8      	movs	r3, #248	; 0xf8
 800753a:	75fb      	strb	r3, [r7, #23]
 800753c:	e004      	b.n	8007548 <VL53L0X_StartMeasurement+0x178>
		break;
 800753e:	bf00      	nop
 8007540:	e002      	b.n	8007548 <VL53L0X_StartMeasurement+0x178>
		break;
 8007542:	bf00      	nop
 8007544:	e000      	b.n	8007548 <VL53L0X_StartMeasurement+0x178>
		break;
 8007546:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007548:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007568:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b04      	cmp	r3, #4
 800756e:	d112      	bne.n	8007596 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007570:	f107 0308 	add.w	r3, r7, #8
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fb1a 	bl	8007bb0 <VL53L0X_GetInterruptMaskStatus>
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b04      	cmp	r3, #4
 8007584:	d103      	bne.n	800758e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2201      	movs	r2, #1
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	e01c      	b.n	80075c8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	e018      	b.n	80075c8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007596:	f107 030d 	add.w	r3, r7, #13
 800759a:	461a      	mov	r2, r3
 800759c:	2114      	movs	r1, #20
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f003 fdd0 	bl	800b144 <VL53L0X_RdByte>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80075a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10b      	bne.n	80075c8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80075b0:	7b7b      	ldrb	r3, [r7, #13]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2201      	movs	r2, #1
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	e002      	b.n	80075c8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2200      	movs	r2, #0
 80075c6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80075d4:	b5b0      	push	{r4, r5, r7, lr}
 80075d6:	b096      	sub	sp, #88	; 0x58
 80075d8:	af02      	add	r7, sp, #8
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80075e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80075e8:	230c      	movs	r3, #12
 80075ea:	2114      	movs	r1, #20
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f003 fcfb 	bl	800afe8 <VL53L0X_ReadMulti>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80075f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 80d1 	bne.w	80077a4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2200      	movs	r2, #0
 8007606:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800760e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007612:	b29b      	uxth	r3, r3
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	b29a      	uxth	r2, r3
 8007618:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800761c:	b29b      	uxth	r3, r3
 800761e:	4413      	add	r3, r2
 8007620:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800762a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800762e:	b29b      	uxth	r3, r3
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	b29a      	uxth	r2, r3
 8007634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007638:	b29b      	uxth	r3, r3
 800763a:	4413      	add	r3, r2
 800763c:	b29b      	uxth	r3, r3
 800763e:	025b      	lsls	r3, r3, #9
 8007640:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007646:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007648:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800764c:	b29b      	uxth	r3, r3
 800764e:	021b      	lsls	r3, r3, #8
 8007650:	b29a      	uxth	r2, r3
 8007652:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007656:	b29b      	uxth	r3, r3
 8007658:	4413      	add	r3, r2
 800765a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800765e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007662:	025b      	lsls	r3, r3, #9
 8007664:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800766a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800766e:	b29b      	uxth	r3, r3
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	b29a      	uxth	r2, r3
 8007674:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007678:	b29b      	uxth	r3, r3
 800767a:	4413      	add	r3, r2
 800767c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007686:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007688:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800768c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007696:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800769e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80076a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80076a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a8:	d046      	beq.n	8007738 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80076aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80076ac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80076b0:	fb02 f303 	mul.w	r3, r2, r3
 80076b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80076b8:	4a57      	ldr	r2, [pc, #348]	; (8007818 <VL53L0X_GetRangingMeasurementData+0x244>)
 80076ba:	fb82 1203 	smull	r1, r2, r2, r3
 80076be:	1192      	asrs	r2, r2, #6
 80076c0:	17db      	asrs	r3, r3, #31
 80076c2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80076c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7f1b      	ldrb	r3, [r3, #28]
 80076d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80076d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d02c      	beq.n	8007738 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80076de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076e0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80076e4:	fb02 f303 	mul.w	r3, r2, r3
 80076e8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80076ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d10d      	bne.n	800770c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80076f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80076f8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80076fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007700:	e016      	b.n	8007730 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007702:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007706:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800770a:	e011      	b.n	8007730 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800770c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007712:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007716:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007718:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800771c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007720:	121b      	asrs	r3, r3, #8
 8007722:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007726:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007728:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800772c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007730:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007734:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007738:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00d      	beq.n	800775c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007740:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007744:	089b      	lsrs	r3, r3, #2
 8007746:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800774c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007750:	b2db      	uxtb	r3, r3
 8007752:	019b      	lsls	r3, r3, #6
 8007754:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	75da      	strb	r2, [r3, #23]
 800775a:	e006      	b.n	800776a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007762:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800776a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800776e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007772:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f003 f9e5 	bl	800ab50 <VL53L0X_get_pal_range_status>
 8007786:	4603      	mov	r3, r0
 8007788:	461a      	mov	r2, r3
 800778a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800778e:	4313      	orrs	r3, r2
 8007790:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007794:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800779c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d12f      	bne.n	800780c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f107 040c 	add.w	r4, r7, #12
 80077b2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80077b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80077be:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80077c6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80077cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80077d4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80077da:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80077e0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80077e6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80077ec:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80077f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80077fc:	f107 050c 	add.w	r5, r7, #12
 8007800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800780c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007810:	4618      	mov	r0, r3
 8007812:	3750      	adds	r7, #80	; 0x50
 8007814:	46bd      	mov	sp, r7
 8007816:	bdb0      	pop	{r4, r5, r7, pc}
 8007818:	10624dd3 	.word	0x10624dd3

0800781c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800782a:	2100      	movs	r1, #0
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff f8d1 	bl	80069d4 <VL53L0X_SetDeviceMode>
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d104      	bne.n	8007848 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fd16 	bl	8007270 <VL53L0X_PerformSingleMeasurement>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff febe 	bl	80075d4 <VL53L0X_GetRangingMeasurementData>
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800785c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f962 	bl	8007b30 <VL53L0X_ClearInterruptMask>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007870:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4603      	mov	r3, r0
 800788c:	70fb      	strb	r3, [r7, #3]
 800788e:	460b      	mov	r3, r1
 8007890:	70bb      	strb	r3, [r7, #2]
 8007892:	4613      	mov	r3, r2
 8007894:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80078a0:	23f6      	movs	r3, #246	; 0xf6
 80078a2:	73fb      	strb	r3, [r7, #15]
 80078a4:	e107      	b.n	8007ab6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80078a6:	78bb      	ldrb	r3, [r7, #2]
 80078a8:	2b14      	cmp	r3, #20
 80078aa:	d110      	bne.n	80078ce <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80078ac:	7e3b      	ldrb	r3, [r7, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d102      	bne.n	80078b8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80078b2:	2310      	movs	r3, #16
 80078b4:	73bb      	strb	r3, [r7, #14]
 80078b6:	e001      	b.n	80078bc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	461a      	mov	r2, r3
 80078c0:	2184      	movs	r1, #132	; 0x84
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f003 fbbc 	bl	800b040 <VL53L0X_WrByte>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
 80078cc:	e0f3      	b.n	8007ab6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80078ce:	78bb      	ldrb	r3, [r7, #2]
 80078d0:	2b15      	cmp	r3, #21
 80078d2:	f040 8097 	bne.w	8007a04 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80078d6:	2201      	movs	r2, #1
 80078d8:	21ff      	movs	r1, #255	; 0xff
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f003 fbb0 	bl	800b040 <VL53L0X_WrByte>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80078ea:	2200      	movs	r2, #0
 80078ec:	2100      	movs	r1, #0
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f003 fba6 	bl	800b040 <VL53L0X_WrByte>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461a      	mov	r2, r3
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80078fe:	2200      	movs	r2, #0
 8007900:	21ff      	movs	r1, #255	; 0xff
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f003 fb9c 	bl	800b040 <VL53L0X_WrByte>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	4313      	orrs	r3, r2
 8007910:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007912:	2201      	movs	r2, #1
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f003 fb92 	bl	800b040 <VL53L0X_WrByte>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	4313      	orrs	r3, r2
 8007924:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007926:	2202      	movs	r2, #2
 8007928:	2185      	movs	r1, #133	; 0x85
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f003 fb88 	bl	800b040 <VL53L0X_WrByte>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	4313      	orrs	r3, r2
 8007938:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800793a:	2204      	movs	r2, #4
 800793c:	21ff      	movs	r1, #255	; 0xff
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f003 fb7e 	bl	800b040 <VL53L0X_WrByte>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	4313      	orrs	r3, r2
 800794c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800794e:	2200      	movs	r2, #0
 8007950:	21cd      	movs	r1, #205	; 0xcd
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f003 fb74 	bl	800b040 <VL53L0X_WrByte>
 8007958:	4603      	mov	r3, r0
 800795a:	461a      	mov	r2, r3
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	4313      	orrs	r3, r2
 8007960:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007962:	2211      	movs	r2, #17
 8007964:	21cc      	movs	r1, #204	; 0xcc
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f003 fb6a 	bl	800b040 <VL53L0X_WrByte>
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	4313      	orrs	r3, r2
 8007974:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007976:	2207      	movs	r2, #7
 8007978:	21ff      	movs	r1, #255	; 0xff
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f003 fb60 	bl	800b040 <VL53L0X_WrByte>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4313      	orrs	r3, r2
 8007988:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800798a:	2200      	movs	r2, #0
 800798c:	21be      	movs	r1, #190	; 0xbe
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f003 fb56 	bl	800b040 <VL53L0X_WrByte>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	4313      	orrs	r3, r2
 800799c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800799e:	2206      	movs	r2, #6
 80079a0:	21ff      	movs	r1, #255	; 0xff
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f003 fb4c 	bl	800b040 <VL53L0X_WrByte>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461a      	mov	r2, r3
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80079b2:	2209      	movs	r2, #9
 80079b4:	21cc      	movs	r1, #204	; 0xcc
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f003 fb42 	bl	800b040 <VL53L0X_WrByte>
 80079bc:	4603      	mov	r3, r0
 80079be:	461a      	mov	r2, r3
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80079c6:	2200      	movs	r2, #0
 80079c8:	21ff      	movs	r1, #255	; 0xff
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f003 fb38 	bl	800b040 <VL53L0X_WrByte>
 80079d0:	4603      	mov	r3, r0
 80079d2:	461a      	mov	r2, r3
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80079da:	2201      	movs	r2, #1
 80079dc:	21ff      	movs	r1, #255	; 0xff
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f003 fb2e 	bl	800b040 <VL53L0X_WrByte>
 80079e4:	4603      	mov	r3, r0
 80079e6:	461a      	mov	r2, r3
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f003 fb24 	bl	800b040 <VL53L0X_WrByte>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	e058      	b.n	8007ab6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d121      	bne.n	8007a50 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007a0c:	787b      	ldrb	r3, [r7, #1]
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d81b      	bhi.n	8007a4a <VL53L0X_SetGpioConfig+0x1ce>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <VL53L0X_SetGpioConfig+0x19c>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a2d 	.word	0x08007a2d
 8007a1c:	08007a33 	.word	0x08007a33
 8007a20:	08007a39 	.word	0x08007a39
 8007a24:	08007a3f 	.word	0x08007a3f
 8007a28:	08007a45 	.word	0x08007a45
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73bb      	strb	r3, [r7, #14]
				break;
 8007a30:	e00f      	b.n	8007a52 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73bb      	strb	r3, [r7, #14]
				break;
 8007a36:	e00c      	b.n	8007a52 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	73bb      	strb	r3, [r7, #14]
				break;
 8007a3c:	e009      	b.n	8007a52 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	73bb      	strb	r3, [r7, #14]
				break;
 8007a42:	e006      	b.n	8007a52 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007a44:	2304      	movs	r3, #4
 8007a46:	73bb      	strb	r3, [r7, #14]
				break;
 8007a48:	e003      	b.n	8007a52 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007a4a:	23f5      	movs	r3, #245	; 0xf5
 8007a4c:	73fb      	strb	r3, [r7, #15]
 8007a4e:	e000      	b.n	8007a52 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007a50:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d107      	bne.n	8007a6a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	210a      	movs	r1, #10
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f003 faed 	bl	800b040 <VL53L0X_WrByte>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10f      	bne.n	8007a92 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007a72:	7e3b      	ldrb	r3, [r7, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73bb      	strb	r3, [r7, #14]
 8007a7c:	e001      	b.n	8007a82 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007a7e:	2310      	movs	r3, #16
 8007a80:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	22ef      	movs	r2, #239	; 0xef
 8007a86:	2184      	movs	r1, #132	; 0x84
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f003 fb27 	bl	800b0dc <VL53L0X_UpdateByte>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	787a      	ldrb	r2, [r7, #1]
 8007a9e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d105      	bne.n	8007ab6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f83f 	bl	8007b30 <VL53L0X_ClearInterruptMask>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop

08007ac4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007ad8:	f107 0314 	add.w	r3, r7, #20
 8007adc:	461a      	mov	r2, r3
 8007ade:	210e      	movs	r1, #14
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f003 fb59 	bl	800b198 <VL53L0X_RdWord>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007aea:	8abb      	ldrh	r3, [r7, #20]
 8007aec:	045b      	lsls	r3, r3, #17
 8007aee:	461a      	mov	r2, r3
 8007af0:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <VL53L0X_GetInterruptThresholds+0x68>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10f      	bne.n	8007b20 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007b00:	f107 0314 	add.w	r3, r7, #20
 8007b04:	461a      	mov	r2, r3
 8007b06:	210c      	movs	r1, #12
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f003 fb45 	bl	800b198 <VL53L0X_RdWord>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007b12:	8abb      	ldrh	r3, [r7, #20]
 8007b14:	045b      	lsls	r3, r3, #17
 8007b16:	461a      	mov	r2, r3
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <VL53L0X_GetInterruptThresholds+0x68>)
 8007b1a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	1ffe0000 	.word	0x1ffe0000

08007b30 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007b42:	2201      	movs	r2, #1
 8007b44:	210b      	movs	r1, #11
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f003 fa7a 	bl	800b040 <VL53L0X_WrByte>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007b50:	2200      	movs	r2, #0
 8007b52:	210b      	movs	r1, #11
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f003 fa73 	bl	800b040 <VL53L0X_WrByte>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007b64:	f107 030d 	add.w	r3, r7, #13
 8007b68:	461a      	mov	r2, r3
 8007b6a:	2113      	movs	r1, #19
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f003 fae9 	bl	800b144 <VL53L0X_RdByte>
 8007b72:	4603      	mov	r3, r0
 8007b74:	461a      	mov	r2, r3
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007b82:	7b7b      	ldrb	r3, [r7, #13]
 8007b84:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d006      	beq.n	8007b9a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d803      	bhi.n	8007b9a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0d3      	beq.n	8007b42 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007ba0:	23f4      	movs	r3, #244	; 0xf4
 8007ba2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007bbe:	f107 030e 	add.w	r3, r7, #14
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	2113      	movs	r1, #19
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f003 fabc 	bl	800b144 <VL53L0X_RdByte>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	f003 0207 	and.w	r2, r3, #7
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	f003 0318 	and.w	r3, r3, #24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007be4:	23fa      	movs	r3, #250	; 0xfa
 8007be6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fa03 	bl	8008014 <VL53L0X_perform_ref_spad_management>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007c2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007c30:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c36:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2128      	movs	r1, #40	; 0x28
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f003 faa9 	bl	800b198 <VL53L0X_RdWord>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d11e      	bne.n	8007c90 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007c52:	893b      	ldrh	r3, [r7, #8]
 8007c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007c5c:	893b      	ldrh	r3, [r7, #8]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	dd0b      	ble.n	8007c80 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007c68:	893a      	ldrh	r2, [r7, #8]
 8007c6a:	897b      	ldrh	r3, [r7, #10]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	b21b      	sxth	r3, r3
 8007c72:	461a      	mov	r2, r3
					* 250;
 8007c74:	23fa      	movs	r3, #250	; 0xfa
 8007c76:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	e007      	b.n	8007c90 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007c80:	893b      	ldrh	r3, [r7, #8]
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	23fa      	movs	r3, #250	; 0xfa
 8007c88:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b08b      	sub	sp, #44	; 0x2c
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007caa:	2308      	movs	r3, #8
 8007cac:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	fb01 f202 	mul.w	r2, r1, r2
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cda:	e030      	b.n	8007d3e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	4413      	add	r3, r2
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d11e      	bne.n	8007d30 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007cf2:	7ffa      	ldrb	r2, [r7, #31]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	fa42 f303 	asr.w	r3, r2, r3
 8007cfa:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007d00:	e016      	b.n	8007d30 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007d02:	7ffb      	ldrb	r3, [r7, #31]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <get_next_good_spad+0x88>
				success = 1;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	fb03 f202 	mul.w	r2, r3, r2
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	601a      	str	r2, [r3, #0]
				break;
 8007d22:	e009      	b.n	8007d38 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007d24:	7ffb      	ldrb	r3, [r7, #31]
 8007d26:	085b      	lsrs	r3, r3, #1
 8007d28:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007d30:	6a3a      	ldr	r2, [r7, #32]
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d3e4      	bcc.n	8007d02 <get_next_good_spad+0x66>
				coarseIndex++) {
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d202      	bcs.n	8007d4c <get_next_good_spad+0xb0>
 8007d46:	7fbb      	ldrb	r3, [r7, #30]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0c7      	beq.n	8007cdc <get_next_good_spad+0x40>
		}
	}
}
 8007d4c:	bf00      	nop
 8007d4e:	372c      	adds	r7, #44	; 0x2c
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007d6a:	4a07      	ldr	r2, [pc, #28]	; (8007d88 <is_aperture+0x30>)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <is_aperture+0x22>
		isAperture = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	200002bc 	.word	0x200002bc

08007d8c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b089      	sub	sp, #36	; 0x24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007db2:	69b9      	ldr	r1, [r7, #24]
 8007db4:	fb01 f202 	mul.w	r2, r1, r2
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d302      	bcc.n	8007dca <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007dc4:	23ce      	movs	r3, #206	; 0xce
 8007dc6:	77fb      	strb	r3, [r7, #31]
 8007dc8:	e010      	b.n	8007dec <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	4413      	add	r3, r2
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b25a      	sxtb	r2, r3
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	b259      	sxtb	r1, r3
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	4413      	add	r3, r2
 8007de8:	b2ca      	uxtb	r2, r1
 8007dea:	701a      	strb	r2, [r3, #0]

	return status;
 8007dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3724      	adds	r7, #36	; 0x24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007e06:	2306      	movs	r3, #6
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	21b0      	movs	r1, #176	; 0xb0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f003 f8bb 	bl	800af88 <VL53L0X_WriteMulti>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007e2c:	2306      	movs	r3, #6
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	21b0      	movs	r1, #176	; 0xb0
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f003 f8d8 	bl	800afe8 <VL53L0X_ReadMulti>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08c      	sub	sp, #48	; 0x30
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	460b      	mov	r3, r1
 8007e56:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e60:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e64:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007e66:	2300      	movs	r3, #0
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e6a:	e02b      	b.n	8007ec4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007e6c:	f107 031c 	add.w	r3, r7, #28
 8007e70:	6a3a      	ldr	r2, [r7, #32]
 8007e72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff ff11 	bl	8007c9c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e80:	d103      	bne.n	8007e8a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e82:	23ce      	movs	r3, #206	; 0xce
 8007e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007e88:	e020      	b.n	8007ecc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e90:	4413      	add	r3, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff ff60 	bl	8007d58 <is_aperture>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007ea2:	23ce      	movs	r3, #206	; 0xce
 8007ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007ea8:	e010      	b.n	8007ecc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007eae:	6a3a      	ldr	r2, [r7, #32]
 8007eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007eb2:	6838      	ldr	r0, [r7, #0]
 8007eb4:	f7ff ff6a 	bl	8007d8c <enable_spad_bit>
		currentSpad++;
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d3cf      	bcc.n	8007e6c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ece:	6a3a      	ldr	r2, [r7, #32]
 8007ed0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007ed2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f7ff ff8d 	bl	8007dfc <set_ref_spad_map>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007ee8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d121      	bne.n	8007f34 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff ff93 	bl	8007e22 <get_ref_spad_map>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007f06:	e011      	b.n	8007f2c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	4413      	add	r3, r2
 8007f0e:	781a      	ldrb	r2, [r3, #0]
 8007f10:	f107 0114 	add.w	r1, r7, #20
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	440b      	add	r3, r1
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d003      	beq.n	8007f26 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007f1e:	23ce      	movs	r3, #206	; 0xce
 8007f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007f24:	e006      	b.n	8007f34 <enable_ref_spads+0xec>
			}
			i++;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	3301      	adds	r3, #1
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d3e9      	bcc.n	8007f08 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007f34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3730      	adds	r7, #48	; 0x30
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007f5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007f60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d107      	bne.n	8007f78 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007f68:	22c0      	movs	r2, #192	; 0xc0
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f003 f867 	bl	800b040 <VL53L0X_WrByte>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007f78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d108      	bne.n	8007f92 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007f80:	f107 0308 	add.w	r3, r7, #8
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fc48 	bl	800781c <VL53L0X_PerformSingleRangingMeasurement>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007f92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d107      	bne.n	8007faa <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	21ff      	movs	r1, #255	; 0xff
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f003 f84e 	bl	800b040 <VL53L0X_WrByte>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d107      	bne.n	8007fc2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	21b6      	movs	r1, #182	; 0xb6
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f003 f8ee 	bl	800b198 <VL53L0X_RdWord>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007fc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d107      	bne.n	8007fda <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007fca:	2200      	movs	r2, #0
 8007fcc:	21ff      	movs	r1, #255	; 0xff
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f003 f836 	bl	800b040 <VL53L0X_WrByte>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007fda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d112      	bne.n	8008008 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	2101      	movs	r1, #1
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f003 f828 	bl	800b040 <VL53L0X_WrByte>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007ff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008004:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008008:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800800c:	4618      	mov	r0, r3
 800800e:	3728      	adds	r7, #40	; 0x28
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b09d      	sub	sp, #116	; 0x74
 8008018:	af06      	add	r7, sp, #24
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008020:	2300      	movs	r3, #0
 8008022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008026:	23b4      	movs	r3, #180	; 0xb4
 8008028:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800802c:	2303      	movs	r3, #3
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008030:	232c      	movs	r3, #44	; 0x2c
 8008032:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008040:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008044:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800804e:	2306      	movs	r3, #6
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008078:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800807a:	2300      	movs	r3, #0
 800807c:	64bb      	str	r3, [r7, #72]	; 0x48
 800807e:	e009      	b.n	8008094 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008084:	4413      	add	r3, r2
 8008086:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800808e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008090:	3301      	adds	r3, #1
 8008092:	64bb      	str	r3, [r7, #72]	; 0x48
 8008094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	429a      	cmp	r2, r3
 800809a:	d3f1      	bcc.n	8008080 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800809c:	2201      	movs	r2, #1
 800809e:	21ff      	movs	r1, #255	; 0xff
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f002 ffcd 	bl	800b040 <VL53L0X_WrByte>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80080ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d107      	bne.n	80080c4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80080b4:	2200      	movs	r2, #0
 80080b6:	214f      	movs	r1, #79	; 0x4f
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f002 ffc1 	bl	800b040 <VL53L0X_WrByte>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80080c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d107      	bne.n	80080dc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80080cc:	222c      	movs	r2, #44	; 0x2c
 80080ce:	214e      	movs	r1, #78	; 0x4e
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f002 ffb5 	bl	800b040 <VL53L0X_WrByte>
 80080d6:	4603      	mov	r3, r0
 80080d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80080dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d107      	bne.n	80080f4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80080e4:	2200      	movs	r2, #0
 80080e6:	21ff      	movs	r1, #255	; 0xff
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f002 ffa9 	bl	800b040 <VL53L0X_WrByte>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80080f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d109      	bne.n	8008110 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80080fc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008100:	461a      	mov	r2, r3
 8008102:	21b6      	movs	r1, #182	; 0xb6
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f002 ff9b 	bl	800b040 <VL53L0X_WrByte>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008110:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008114:	2b00      	cmp	r3, #0
 8008116:	d107      	bne.n	8008128 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008118:	2200      	movs	r2, #0
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f002 ff8f 	bl	800b040 <VL53L0X_WrByte>
 8008122:	4603      	mov	r3, r0
 8008124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008128:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008130:	f107 0210 	add.w	r2, r7, #16
 8008134:	f107 0111 	add.w	r1, r7, #17
 8008138:	2300      	movs	r3, #0
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 fbbb 	bl	80088b6 <VL53L0X_perform_ref_calibration>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008146:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800814a:	2b00      	cmp	r3, #0
 800814c:	d121      	bne.n	8008192 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008154:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800815a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800816a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800816e:	f107 0218 	add.w	r2, r7, #24
 8008172:	9204      	str	r2, [sp, #16]
 8008174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008176:	9203      	str	r2, [sp, #12]
 8008178:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800817a:	9202      	str	r2, [sp, #8]
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4623      	mov	r3, r4
 8008184:	4602      	mov	r2, r0
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff fe5e 	bl	8007e48 <enable_ref_spads>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008192:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008196:	2b00      	cmp	r3, #0
 8008198:	d174      	bne.n	8008284 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800819e:	f107 0312 	add.w	r3, r7, #18
 80081a2:	4619      	mov	r1, r3
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff fecb 	bl	8007f40 <perform_ref_signal_measurement>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80081b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d161      	bne.n	800827c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80081b8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80081ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80081bc:	429a      	cmp	r2, r3
 80081be:	d25d      	bcs.n	800827c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80081c0:	2300      	movs	r3, #0
 80081c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081c4:	e009      	b.n	80081da <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80081d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d6:	3301      	adds	r3, #1
 80081d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80081da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	429a      	cmp	r2, r3
 80081e0:	d3f1      	bcc.n	80081c6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80081e2:	e002      	b.n	80081ea <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80081e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e6:	3301      	adds	r3, #1
 80081e8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80081ea:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80081ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f0:	4413      	add	r3, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fdb0 	bl	8007d58 <is_aperture>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80081fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	429a      	cmp	r2, r3
 8008204:	d3ee      	bcc.n	80081e4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008206:	2301      	movs	r3, #1
 8008208:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800820a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800821a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800821e:	f107 0218 	add.w	r2, r7, #24
 8008222:	9204      	str	r2, [sp, #16]
 8008224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008226:	9203      	str	r2, [sp, #12]
 8008228:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800822a:	9202      	str	r2, [sp, #8]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4623      	mov	r3, r4
 8008234:	4602      	mov	r2, r0
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7ff fe06 	bl	8007e48 <enable_ref_spads>
 800823c:	4603      	mov	r3, r0
 800823e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008242:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008246:	2b00      	cmp	r3, #0
 8008248:	d11b      	bne.n	8008282 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800824e:	f107 0312 	add.w	r3, r7, #18
 8008252:	4619      	mov	r1, r3
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7ff fe73 	bl	8007f40 <perform_ref_signal_measurement>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008260:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10c      	bne.n	8008282 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008268:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800826a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800826c:	429a      	cmp	r2, r3
 800826e:	d208      	bcs.n	8008282 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800827a:	e002      	b.n	8008282 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008280:	e000      	b.n	8008284 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008282:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008284:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 80af 	bne.w	80083ec <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800828e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008290:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008292:	429a      	cmp	r2, r3
 8008294:	f240 80aa 	bls.w	80083ec <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800829e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80082a8:	f107 031c 	add.w	r3, r7, #28
 80082ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ae:	4618      	mov	r0, r3
 80082b0:	f003 f820 	bl	800b2f4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80082b4:	8a7b      	ldrh	r3, [r7, #18]
 80082b6:	461a      	mov	r2, r3
 80082b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	bfb8      	it	lt
 80082c0:	425b      	neglt	r3, r3
 80082c2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80082ca:	e086      	b.n	80083da <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80082d2:	f107 0314 	add.w	r3, r7, #20
 80082d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082da:	f7ff fcdf 	bl	8007c9c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d103      	bne.n	80082ee <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80082e6:	23ce      	movs	r3, #206	; 0xce
 80082e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80082ec:	e07e      	b.n	80083ec <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80082ee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4413      	add	r3, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff fd2e 	bl	8007d58 <is_aperture>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008302:	4293      	cmp	r3, r2
 8008304:	d003      	beq.n	800830e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800830c:	e06e      	b.n	80083ec <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800830e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008310:	3301      	adds	r3, #1
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800831e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff fd32 	bl	8007d8c <enable_spad_bit>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800832e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10c      	bne.n	8008350 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008338:	3301      	adds	r3, #1
 800833a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff fd59 	bl	8007dfc <set_ref_spad_map>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008350:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008354:	2b00      	cmp	r3, #0
 8008356:	d146      	bne.n	80083e6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008358:	f107 0312 	add.w	r3, r7, #18
 800835c:	4619      	mov	r1, r3
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff fdee 	bl	8007f40 <perform_ref_signal_measurement>
 8008364:	4603      	mov	r3, r0
 8008366:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800836a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800836e:	2b00      	cmp	r3, #0
 8008370:	d13b      	bne.n	80083ea <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008372:	8a7b      	ldrh	r3, [r7, #18]
 8008374:	461a      	mov	r2, r3
 8008376:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	bfb8      	it	lt
 800837e:	425b      	neglt	r3, r3
 8008380:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008382:	8a7b      	ldrh	r3, [r7, #18]
 8008384:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008386:	429a      	cmp	r2, r3
 8008388:	d21c      	bcs.n	80083c4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800838a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800838c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800838e:	429a      	cmp	r2, r3
 8008390:	d914      	bls.n	80083bc <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008392:	f107 031c 	add.w	r3, r7, #28
 8008396:	4619      	mov	r1, r3
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f7ff fd2f 	bl	8007dfc <set_ref_spad_map>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80083aa:	f107 011c 	add.w	r1, r7, #28
 80083ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 ff9f 	bl	800b2f4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80083b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b8:	3b01      	subs	r3, #1
 80083ba:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80083bc:	2301      	movs	r3, #1
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e00a      	b.n	80083da <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80083ce:	f107 031c 	add.w	r3, r7, #28
 80083d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d4:	4618      	mov	r0, r3
 80083d6:	f002 ff8d 	bl	800b2f4 <memcpy>
		while (!complete) {
 80083da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f43f af74 	beq.w	80082cc <VL53L0X_perform_ref_spad_management+0x2b8>
 80083e4:	e002      	b.n	80083ec <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80083e6:	bf00      	nop
 80083e8:	e000      	b.n	80083ec <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80083ea:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d115      	bne.n	8008420 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083f8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008400:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	b2da      	uxtb	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	781a      	ldrb	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008420:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008424:	4618      	mov	r0, r3
 8008426:	375c      	adds	r7, #92	; 0x5c
 8008428:	46bd      	mov	sp, r7
 800842a:	bd90      	pop	{r4, r7, pc}

0800842c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b093      	sub	sp, #76	; 0x4c
 8008430:	af06      	add	r7, sp, #24
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800843a:	2300      	movs	r3, #0
 800843c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008444:	23b4      	movs	r3, #180	; 0xb4
 8008446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800844a:	2306      	movs	r3, #6
 800844c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800844e:	232c      	movs	r3, #44	; 0x2c
 8008450:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008452:	2201      	movs	r2, #1
 8008454:	21ff      	movs	r1, #255	; 0xff
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f002 fdf2 	bl	800b040 <VL53L0X_WrByte>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008462:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008466:	2b00      	cmp	r3, #0
 8008468:	d107      	bne.n	800847a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800846a:	2200      	movs	r2, #0
 800846c:	214f      	movs	r1, #79	; 0x4f
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f002 fde6 	bl	800b040 <VL53L0X_WrByte>
 8008474:	4603      	mov	r3, r0
 8008476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800847a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800847e:	2b00      	cmp	r3, #0
 8008480:	d107      	bne.n	8008492 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008482:	222c      	movs	r2, #44	; 0x2c
 8008484:	214e      	movs	r1, #78	; 0x4e
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f002 fdda 	bl	800b040 <VL53L0X_WrByte>
 800848c:	4603      	mov	r3, r0
 800848e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008492:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800849a:	2200      	movs	r2, #0
 800849c:	21ff      	movs	r1, #255	; 0xff
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f002 fdce 	bl	800b040 <VL53L0X_WrByte>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80084aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d109      	bne.n	80084c6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80084b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084b6:	461a      	mov	r2, r3
 80084b8:	21b6      	movs	r1, #182	; 0xb6
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f002 fdc0 	bl	800b040 <VL53L0X_WrByte>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80084c6:	2300      	movs	r3, #0
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
 80084ca:	e009      	b.n	80084e0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80084d6:	2200      	movs	r2, #0
 80084d8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	3301      	adds	r3, #1
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
 80084e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d3f1      	bcc.n	80084cc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d011      	beq.n	8008512 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80084ee:	e002      	b.n	80084f6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	3301      	adds	r3, #1
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80084f6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	4413      	add	r3, r2
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fc2a 	bl	8007d58 <is_aperture>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d103      	bne.n	8008512 <VL53L0X_set_reference_spads+0xe6>
 800850a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	429a      	cmp	r2, r3
 8008510:	d3ee      	bcc.n	80084f0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800851e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008522:	79f9      	ldrb	r1, [r7, #7]
 8008524:	f107 0214 	add.w	r2, r7, #20
 8008528:	9204      	str	r2, [sp, #16]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	9203      	str	r2, [sp, #12]
 800852e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008530:	9202      	str	r2, [sp, #8]
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4623      	mov	r3, r4
 800853a:	4602      	mov	r2, r0
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7ff fc83 	bl	8007e48 <enable_ref_spads>
 8008542:	4603      	mov	r3, r0
 8008544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10c      	bne.n	800856a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	b2da      	uxtb	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	79fa      	ldrb	r2, [r7, #7]
 8008566:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800856a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800856e:	4618      	mov	r0, r3
 8008570:	3734      	adds	r7, #52	; 0x34
 8008572:	46bd      	mov	sp, r7
 8008574:	bd90      	pop	{r4, r7, pc}

08008576 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	b2db      	uxtb	r3, r3
 8008596:	461a      	mov	r2, r3
 8008598:	2100      	movs	r1, #0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f002 fd50 	bl	800b040 <VL53L0X_WrByte>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80085a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f9bf 	bl	8008930 <VL53L0X_measurement_poll_for_completion>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80085b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80085be:	2100      	movs	r1, #0
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fab5 	bl	8007b30 <VL53L0X_ClearInterruptMask>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80085ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80085d2:	2200      	movs	r2, #0
 80085d4:	2100      	movs	r1, #0
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f002 fd32 	bl	800b040 <VL53L0X_WrByte>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]

	return Status;
 80085e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	4608      	mov	r0, r1
 80085f6:	4611      	mov	r1, r2
 80085f8:	461a      	mov	r2, r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	70fb      	strb	r3, [r7, #3]
 80085fe:	460b      	mov	r3, r1
 8008600:	70bb      	strb	r3, [r7, #2]
 8008602:	4613      	mov	r3, r2
 8008604:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800860e:	2201      	movs	r2, #1
 8008610:	21ff      	movs	r1, #255	; 0xff
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f002 fd14 	bl	800b040 <VL53L0X_WrByte>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	4313      	orrs	r3, r2
 8008620:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008622:	2200      	movs	r2, #0
 8008624:	2100      	movs	r1, #0
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f002 fd0a 	bl	800b040 <VL53L0X_WrByte>
 800862c:	4603      	mov	r3, r0
 800862e:	461a      	mov	r2, r3
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	4313      	orrs	r3, r2
 8008634:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008636:	2200      	movs	r2, #0
 8008638:	21ff      	movs	r1, #255	; 0xff
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f002 fd00 	bl	800b040 <VL53L0X_WrByte>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	4313      	orrs	r3, r2
 8008648:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01e      	beq.n	800868e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008650:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	21cb      	movs	r1, #203	; 0xcb
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f002 fd71 	bl	800b144 <VL53L0X_RdByte>
 8008662:	4603      	mov	r3, r0
 8008664:	461a      	mov	r2, r3
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	4313      	orrs	r3, r2
 800866a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800866c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d02a      	beq.n	80086ca <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008674:	f107 030e 	add.w	r3, r7, #14
 8008678:	461a      	mov	r2, r3
 800867a:	21ee      	movs	r1, #238	; 0xee
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f002 fd61 	bl	800b144 <VL53L0X_RdByte>
 8008682:	4603      	mov	r3, r0
 8008684:	461a      	mov	r2, r3
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	4313      	orrs	r3, r2
 800868a:	73fb      	strb	r3, [r7, #15]
 800868c:	e01d      	b.n	80086ca <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800868e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008696:	78bb      	ldrb	r3, [r7, #2]
 8008698:	461a      	mov	r2, r3
 800869a:	21cb      	movs	r1, #203	; 0xcb
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f002 fccf 	bl	800b040 <VL53L0X_WrByte>
 80086a2:	4603      	mov	r3, r0
 80086a4:	461a      	mov	r2, r3
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80086ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80086b4:	787b      	ldrb	r3, [r7, #1]
 80086b6:	2280      	movs	r2, #128	; 0x80
 80086b8:	21ee      	movs	r1, #238	; 0xee
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f002 fd0e 	bl	800b0dc <VL53L0X_UpdateByte>
 80086c0:	4603      	mov	r3, r0
 80086c2:	461a      	mov	r2, r3
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80086ca:	2201      	movs	r2, #1
 80086cc:	21ff      	movs	r1, #255	; 0xff
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f002 fcb6 	bl	800b040 <VL53L0X_WrByte>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4313      	orrs	r3, r2
 80086dc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80086de:	2201      	movs	r2, #1
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f002 fcac 	bl	800b040 <VL53L0X_WrByte>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80086f2:	2200      	movs	r2, #0
 80086f4:	21ff      	movs	r1, #255	; 0xff
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f002 fca2 	bl	800b040 <VL53L0X_WrByte>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4313      	orrs	r3, r2
 8008704:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	f023 0310 	bic.w	r3, r3, #16
 800870c:	b2da      	uxtb	r2, r3
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	701a      	strb	r2, [r3, #0]

	return Status;
 8008712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b08a      	sub	sp, #40	; 0x28
 8008722:	af04      	add	r7, sp, #16
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	4611      	mov	r1, r2
 800872a:	461a      	mov	r2, r3
 800872c:	460b      	mov	r3, r1
 800872e:	71fb      	strb	r3, [r7, #7]
 8008730:	4613      	mov	r3, r2
 8008732:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008748:	79bb      	ldrb	r3, [r7, #6]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008754:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008756:	2201      	movs	r2, #1
 8008758:	2101      	movs	r1, #1
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f002 fc70 	bl	800b040 <VL53L0X_WrByte>
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800876c:	2140      	movs	r1, #64	; 0x40
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff ff01 	bl	8008576 <VL53L0X_perform_single_ref_calibration>
 8008774:	4603      	mov	r3, r0
 8008776:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d115      	bne.n	80087ac <VL53L0X_perform_vhv_calibration+0x8e>
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d112      	bne.n	80087ac <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008786:	7d39      	ldrb	r1, [r7, #20]
 8008788:	7d7a      	ldrb	r2, [r7, #21]
 800878a:	2300      	movs	r3, #0
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	2301      	movs	r3, #1
 8008790:	9302      	str	r3, [sp, #8]
 8008792:	f107 0313 	add.w	r3, r7, #19
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	460b      	mov	r3, r1
 800879e:	2101      	movs	r1, #1
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff ff23 	bl	80085ec <VL53L0X_ref_calibration_io>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75fb      	strb	r3, [r7, #23]
 80087aa:	e002      	b.n	80087b2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80087b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d112      	bne.n	80087e0 <VL53L0X_perform_vhv_calibration+0xc2>
 80087ba:	79bb      	ldrb	r3, [r7, #6]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00f      	beq.n	80087e0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80087c0:	7dbb      	ldrb	r3, [r7, #22]
 80087c2:	461a      	mov	r2, r3
 80087c4:	2101      	movs	r1, #1
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f002 fc3a 	bl	800b040 <VL53L0X_WrByte>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80087d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	7dba      	ldrb	r2, [r7, #22]
 80087dc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80087e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af04      	add	r7, sp, #16
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4611      	mov	r1, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	460b      	mov	r3, r1
 80087fc:	71fb      	strb	r3, [r7, #7]
 80087fe:	4613      	mov	r3, r2
 8008800:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008812:	79bb      	ldrb	r3, [r7, #6]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800881e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008820:	2202      	movs	r2, #2
 8008822:	2101      	movs	r1, #1
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f002 fc0b 	bl	800b040 <VL53L0X_WrByte>
 800882a:	4603      	mov	r3, r0
 800882c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800882e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d105      	bne.n	8008842 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008836:	2100      	movs	r1, #0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff fe9c 	bl	8008576 <VL53L0X_perform_single_ref_calibration>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d115      	bne.n	8008876 <VL53L0X_perform_phase_calibration+0x8a>
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d112      	bne.n	8008876 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008850:	7d39      	ldrb	r1, [r7, #20]
 8008852:	7d7a      	ldrb	r2, [r7, #21]
 8008854:	2301      	movs	r3, #1
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	2300      	movs	r3, #0
 800885a:	9302      	str	r3, [sp, #8]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	f107 0313 	add.w	r3, r7, #19
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	460b      	mov	r3, r1
 8008868:	2101      	movs	r1, #1
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff febe 	bl	80085ec <VL53L0X_ref_calibration_io>
 8008870:	4603      	mov	r3, r0
 8008872:	75fb      	strb	r3, [r7, #23]
 8008874:	e002      	b.n	800887c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2200      	movs	r2, #0
 800887a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800887c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d112      	bne.n	80088aa <VL53L0X_perform_phase_calibration+0xbe>
 8008884:	79bb      	ldrb	r3, [r7, #6]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00f      	beq.n	80088aa <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800888a:	7dbb      	ldrb	r3, [r7, #22]
 800888c:	461a      	mov	r2, r3
 800888e:	2101      	movs	r1, #1
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f002 fbd5 	bl	800b040 <VL53L0X_WrByte>
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800889a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d103      	bne.n	80088aa <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	7dba      	ldrb	r2, [r7, #22]
 80088a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80088aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b086      	sub	sp, #24
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80088d2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	2300      	movs	r3, #0
 80088d8:	68b9      	ldr	r1, [r7, #8]
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff ff1f 	bl	800871e <VL53L0X_perform_vhv_calibration>
 80088e0:	4603      	mov	r3, r0
 80088e2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80088e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d107      	bne.n	80088fc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	2300      	movs	r3, #0
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7ff ff7a 	bl	80087ec <VL53L0X_perform_phase_calibration>
 80088f8:	4603      	mov	r3, r0
 80088fa:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80088fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10f      	bne.n	8008924 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008904:	7dbb      	ldrb	r3, [r7, #22]
 8008906:	461a      	mov	r2, r3
 8008908:	2101      	movs	r1, #1
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f002 fb98 	bl	800b040 <VL53L0X_WrByte>
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7dba      	ldrb	r2, [r7, #22]
 8008920:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008924:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008938:	2300      	movs	r3, #0
 800893a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008944:	f107 030f 	add.w	r3, r7, #15
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fe fe02 	bl	8007554 <VL53L0X_GetMeasurementDataReady>
 8008950:	4603      	mov	r3, r0
 8008952:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d110      	bne.n	800897e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d00f      	beq.n	8008982 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	3301      	adds	r3, #1
 8008966:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800896e:	d302      	bcc.n	8008976 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008970:	23f9      	movs	r3, #249	; 0xf9
 8008972:	75fb      	strb	r3, [r7, #23]
			break;
 8008974:	e006      	b.n	8008984 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f002 fc82 	bl	800b280 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800897c:	e7e2      	b.n	8008944 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800897e:	bf00      	nop
 8008980:	e000      	b.n	8008984 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008982:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	3301      	adds	r3, #1
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	4603      	mov	r3, r0
 80089be:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	085b      	lsrs	r3, r3, #1
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	3b01      	subs	r3, #1
 80089cc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80089e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ec:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80089ee:	e002      	b.n	80089f6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	089b      	lsrs	r3, r3, #2
 80089f4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d8f8      	bhi.n	80089f0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80089fe:	e017      	b.n	8008a30 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d30b      	bcc.n	8008a24 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	085b      	lsrs	r3, r3, #1
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	4413      	add	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	e002      	b.n	8008a2a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e4      	bne.n	8008a00 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008a36:	68fb      	ldr	r3, [r7, #12]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008a50:	2200      	movs	r2, #0
 8008a52:	2183      	movs	r1, #131	; 0x83
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f002 faf3 	bl	800b040 <VL53L0X_WrByte>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d11e      	bne.n	8008aaa <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008a70:	f107 030f 	add.w	r3, r7, #15
 8008a74:	461a      	mov	r2, r3
 8008a76:	2183      	movs	r1, #131	; 0x83
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f002 fb63 	bl	800b144 <VL53L0X_RdByte>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <VL53L0X_device_read_strobe+0x5a>
 8008a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	3301      	adds	r3, #1
 8008a94:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a9c:	d3e8      	bcc.n	8008a70 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008aa4:	d301      	bcc.n	8008aaa <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008aa6:	23f9      	movs	r3, #249	; 0xf9
 8008aa8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008aaa:	2201      	movs	r2, #1
 8008aac:	2183      	movs	r1, #131	; 0x83
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f002 fac6 	bl	800b040 <VL53L0X_WrByte>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008abe:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3718      	adds	r7, #24
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b098      	sub	sp, #96	; 0x60
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008afa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008afe:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008b12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008b16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b1a:	2b07      	cmp	r3, #7
 8008b1c:	f000 8408 	beq.w	8009330 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008b20:	2201      	movs	r2, #1
 8008b22:	2180      	movs	r1, #128	; 0x80
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f002 fa8b 	bl	800b040 <VL53L0X_WrByte>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008b38:	2201      	movs	r2, #1
 8008b3a:	21ff      	movs	r1, #255	; 0xff
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f002 fa7f 	bl	800b040 <VL53L0X_WrByte>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008b50:	2200      	movs	r2, #0
 8008b52:	2100      	movs	r1, #0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f002 fa73 	bl	800b040 <VL53L0X_WrByte>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008b68:	2206      	movs	r2, #6
 8008b6a:	21ff      	movs	r1, #255	; 0xff
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f002 fa67 	bl	800b040 <VL53L0X_WrByte>
 8008b72:	4603      	mov	r3, r0
 8008b74:	461a      	mov	r2, r3
 8008b76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008b80:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008b84:	461a      	mov	r2, r3
 8008b86:	2183      	movs	r1, #131	; 0x83
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f002 fadb 	bl	800b144 <VL53L0X_RdByte>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b96:	4313      	orrs	r3, r2
 8008b98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ba0:	f043 0304 	orr.w	r3, r3, #4
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	2183      	movs	r1, #131	; 0x83
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f002 fa48 	bl	800b040 <VL53L0X_WrByte>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008bbe:	2207      	movs	r2, #7
 8008bc0:	21ff      	movs	r1, #255	; 0xff
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f002 fa3c 	bl	800b040 <VL53L0X_WrByte>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	2181      	movs	r1, #129	; 0x81
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f002 fa30 	bl	800b040 <VL53L0X_WrByte>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008be8:	4313      	orrs	r3, r2
 8008bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f002 fb46 	bl	800b280 <VL53L0X_PollingDelay>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008c02:	2201      	movs	r2, #1
 8008c04:	2180      	movs	r1, #128	; 0x80
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f002 fa1a 	bl	800b040 <VL53L0X_WrByte>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c14:	4313      	orrs	r3, r2
 8008c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 8098 	beq.w	8008d56 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c2a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 8091 	bne.w	8008d56 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008c34:	226b      	movs	r2, #107	; 0x6b
 8008c36:	2194      	movs	r1, #148	; 0x94
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f002 fa01 	bl	800b040 <VL53L0X_WrByte>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	461a      	mov	r2, r3
 8008c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c46:	4313      	orrs	r3, r2
 8008c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff fef9 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461a      	mov	r2, r3
 8008c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c64:	461a      	mov	r2, r3
 8008c66:	2190      	movs	r1, #144	; 0x90
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f002 facd 	bl	800b208 <VL53L0X_RdDWord>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	461a      	mov	r2, r3
 8008c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c86:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	0bdb      	lsrs	r3, r3, #15
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008c98:	2224      	movs	r2, #36	; 0x24
 8008c9a:	2194      	movs	r1, #148	; 0x94
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f002 f9cf 	bl	800b040 <VL53L0X_WrByte>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008caa:	4313      	orrs	r3, r2
 8008cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff fec7 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2190      	movs	r1, #144	; 0x90
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f002 fa9b 	bl	800b208 <VL53L0X_RdDWord>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	0e1b      	lsrs	r3, r3, #24
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	0c1b      	lsrs	r3, r3, #16
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008cfe:	2225      	movs	r2, #37	; 0x25
 8008d00:	2194      	movs	r1, #148	; 0x94
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f002 f99c 	bl	800b040 <VL53L0X_WrByte>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d10:	4313      	orrs	r3, r2
 8008d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff fe94 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d24:	4313      	orrs	r3, r2
 8008d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2190      	movs	r1, #144	; 0x90
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f002 fa68 	bl	800b208 <VL53L0X_RdDWord>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d40:	4313      	orrs	r3, r2
 8008d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	0e1b      	lsrs	r3, r3, #24
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	0c1b      	lsrs	r3, r3, #16
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8189 	beq.w	8009074 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008d62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d66:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f040 8182 	bne.w	8009074 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008d70:	2202      	movs	r2, #2
 8008d72:	2194      	movs	r1, #148	; 0x94
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f002 f963 	bl	800b040 <VL53L0X_WrByte>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d82:	4313      	orrs	r3, r2
 8008d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff fe5b 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	461a      	mov	r2, r3
 8008d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d96:	4313      	orrs	r3, r2
 8008d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008d9c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008da0:	461a      	mov	r2, r3
 8008da2:	2190      	movs	r1, #144	; 0x90
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f002 f9cd 	bl	800b144 <VL53L0X_RdByte>
 8008daa:	4603      	mov	r3, r0
 8008dac:	461a      	mov	r2, r3
 8008dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008db8:	227b      	movs	r2, #123	; 0x7b
 8008dba:	2194      	movs	r1, #148	; 0x94
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f002 f93f 	bl	800b040 <VL53L0X_WrByte>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff fe37 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008de4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008de8:	461a      	mov	r2, r3
 8008dea:	2190      	movs	r1, #144	; 0x90
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f002 f9a9 	bl	800b144 <VL53L0X_RdByte>
 8008df2:	4603      	mov	r3, r0
 8008df4:	461a      	mov	r2, r3
 8008df6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008e00:	2277      	movs	r2, #119	; 0x77
 8008e02:	2194      	movs	r1, #148	; 0x94
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f002 f91b 	bl	800b040 <VL53L0X_WrByte>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e12:	4313      	orrs	r3, r2
 8008e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff fe13 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	461a      	mov	r2, r3
 8008e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e30:	461a      	mov	r2, r3
 8008e32:	2190      	movs	r1, #144	; 0x90
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f002 f9e7 	bl	800b208 <VL53L0X_RdDWord>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e42:	4313      	orrs	r3, r2
 8008e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	0e5b      	lsrs	r3, r3, #25
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	0c9b      	lsrs	r3, r3, #18
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	0adb      	lsrs	r3, r3, #11
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	091b      	lsrs	r3, r3, #4
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008e92:	2278      	movs	r2, #120	; 0x78
 8008e94:	2194      	movs	r1, #148	; 0x94
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f002 f8d2 	bl	800b040 <VL53L0X_WrByte>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff fdca 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ebe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	2190      	movs	r1, #144	; 0x90
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 f99e 	bl	800b208 <VL53L0X_RdDWord>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	0f5b      	lsrs	r3, r3, #29
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008ee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008eea:	4413      	add	r3, r2
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef2:	0d9b      	lsrs	r3, r3, #22
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	0bdb      	lsrs	r3, r3, #15
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	0a1b      	lsrs	r3, r3, #8
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	019b      	lsls	r3, r3, #6
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008f3a:	2279      	movs	r2, #121	; 0x79
 8008f3c:	2194      	movs	r1, #148	; 0x94
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f002 f87e 	bl	800b040 <VL53L0X_WrByte>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fd76 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f60:	4313      	orrs	r3, r2
 8008f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	2190      	movs	r1, #144	; 0x90
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f002 f94a 	bl	800b208 <VL53L0X_RdDWord>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	0e9b      	lsrs	r3, r3, #26
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f92:	4413      	add	r3, r2
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9a:	0cdb      	lsrs	r3, r3, #19
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	0b1b      	lsrs	r3, r3, #12
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008fd4:	227a      	movs	r2, #122	; 0x7a
 8008fd6:	2194      	movs	r1, #148	; 0x94
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f002 f831 	bl	800b040 <VL53L0X_WrByte>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff fd29 	bl	8008a44 <VL53L0X_device_read_strobe>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009004:	461a      	mov	r2, r3
 8009006:	2190      	movs	r1, #144	; 0x90
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f002 f8fd 	bl	800b208 <VL53L0X_RdDWord>
 800900e:	4603      	mov	r3, r0
 8009010:	461a      	mov	r2, r3
 8009012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009016:	4313      	orrs	r3, r2
 8009018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	0f9b      	lsrs	r3, r3, #30
 8009020:	b2db      	uxtb	r3, r3
 8009022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009026:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800902c:	4413      	add	r3, r2
 800902e:	b2db      	uxtb	r3, r3
 8009030:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	0ddb      	lsrs	r3, r3, #23
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800903c:	b2db      	uxtb	r3, r3
 800903e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	0c1b      	lsrs	r3, r3, #16
 8009044:	b2db      	uxtb	r3, r3
 8009046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904a:	b2db      	uxtb	r3, r3
 800904c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	0a5b      	lsrs	r3, r3, #9
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	089b      	lsrs	r3, r3, #2
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009068:	b2db      	uxtb	r3, r3
 800906a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800906e:	2300      	movs	r3, #0
 8009070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 80f1 	beq.w	8009262 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009084:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009088:	2b00      	cmp	r3, #0
 800908a:	f040 80ea 	bne.w	8009262 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800908e:	227b      	movs	r2, #123	; 0x7b
 8009090:	2194      	movs	r1, #148	; 0x94
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 ffd4 	bl	800b040 <VL53L0X_WrByte>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fccc 	bl	8008a44 <VL53L0X_device_read_strobe>
 80090ac:	4603      	mov	r3, r0
 80090ae:	461a      	mov	r2, r3
 80090b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090b4:	4313      	orrs	r3, r2
 80090b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80090ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090be:	461a      	mov	r2, r3
 80090c0:	2190      	movs	r1, #144	; 0x90
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f002 f8a0 	bl	800b208 <VL53L0X_RdDWord>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80090d6:	227c      	movs	r2, #124	; 0x7c
 80090d8:	2194      	movs	r1, #148	; 0x94
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 ffb0 	bl	800b040 <VL53L0X_WrByte>
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fca8 	bl	8008a44 <VL53L0X_device_read_strobe>
 80090f4:	4603      	mov	r3, r0
 80090f6:	461a      	mov	r2, r3
 80090f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fc:	4313      	orrs	r3, r2
 80090fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009106:	461a      	mov	r2, r3
 8009108:	2190      	movs	r1, #144	; 0x90
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f002 f87c 	bl	800b208 <VL53L0X_RdDWord>
 8009110:	4603      	mov	r3, r0
 8009112:	461a      	mov	r2, r3
 8009114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009118:	4313      	orrs	r3, r2
 800911a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800911e:	2273      	movs	r2, #115	; 0x73
 8009120:	2194      	movs	r1, #148	; 0x94
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 ff8c 	bl	800b040 <VL53L0X_WrByte>
 8009128:	4603      	mov	r3, r0
 800912a:	461a      	mov	r2, r3
 800912c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009130:	4313      	orrs	r3, r2
 8009132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff fc84 	bl	8008a44 <VL53L0X_device_read_strobe>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009144:	4313      	orrs	r3, r2
 8009146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800914a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800914e:	461a      	mov	r2, r3
 8009150:	2190      	movs	r1, #144	; 0x90
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f002 f858 	bl	800b208 <VL53L0X_RdDWord>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009160:	4313      	orrs	r3, r2
 8009162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800916a:	b29b      	uxth	r3, r3
 800916c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800916e:	2274      	movs	r2, #116	; 0x74
 8009170:	2194      	movs	r1, #148	; 0x94
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 ff64 	bl	800b040 <VL53L0X_WrByte>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009180:	4313      	orrs	r3, r2
 8009182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fc5c 	bl	8008a44 <VL53L0X_device_read_strobe>
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009194:	4313      	orrs	r3, r2
 8009196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800919a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800919e:	461a      	mov	r2, r3
 80091a0:	2190      	movs	r1, #144	; 0x90
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f002 f830 	bl	800b208 <VL53L0X_RdDWord>
 80091a8:	4603      	mov	r3, r0
 80091aa:	461a      	mov	r2, r3
 80091ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b0:	4313      	orrs	r3, r2
 80091b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80091ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091bc:	4313      	orrs	r3, r2
 80091be:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80091c0:	2275      	movs	r2, #117	; 0x75
 80091c2:	2194      	movs	r1, #148	; 0x94
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 ff3b 	bl	800b040 <VL53L0X_WrByte>
 80091ca:	4603      	mov	r3, r0
 80091cc:	461a      	mov	r2, r3
 80091ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff fc33 	bl	8008a44 <VL53L0X_device_read_strobe>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80091ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091f0:	461a      	mov	r2, r3
 80091f2:	2190      	movs	r1, #144	; 0x90
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f002 f807 	bl	800b208 <VL53L0X_RdDWord>
 80091fa:	4603      	mov	r3, r0
 80091fc:	461a      	mov	r2, r3
 80091fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009202:	4313      	orrs	r3, r2
 8009204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800920c:	b29b      	uxth	r3, r3
 800920e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009210:	2276      	movs	r2, #118	; 0x76
 8009212:	2194      	movs	r1, #148	; 0x94
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 ff13 	bl	800b040 <VL53L0X_WrByte>
 800921a:	4603      	mov	r3, r0
 800921c:	461a      	mov	r2, r3
 800921e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009222:	4313      	orrs	r3, r2
 8009224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff fc0b 	bl	8008a44 <VL53L0X_device_read_strobe>
 800922e:	4603      	mov	r3, r0
 8009230:	461a      	mov	r2, r3
 8009232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009236:	4313      	orrs	r3, r2
 8009238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800923c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009240:	461a      	mov	r2, r3
 8009242:	2190      	movs	r1, #144	; 0x90
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 ffdf 	bl	800b208 <VL53L0X_RdDWord>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009252:	4313      	orrs	r3, r2
 8009254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800925c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800925e:	4313      	orrs	r3, r2
 8009260:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009262:	2200      	movs	r2, #0
 8009264:	2181      	movs	r1, #129	; 0x81
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 feea 	bl	800b040 <VL53L0X_WrByte>
 800926c:	4603      	mov	r3, r0
 800926e:	461a      	mov	r2, r3
 8009270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009274:	4313      	orrs	r3, r2
 8009276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800927a:	2206      	movs	r2, #6
 800927c:	21ff      	movs	r1, #255	; 0xff
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 fede 	bl	800b040 <VL53L0X_WrByte>
 8009284:	4603      	mov	r3, r0
 8009286:	461a      	mov	r2, r3
 8009288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800928c:	4313      	orrs	r3, r2
 800928e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009292:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009296:	461a      	mov	r2, r3
 8009298:	2183      	movs	r1, #131	; 0x83
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 ff52 	bl	800b144 <VL53L0X_RdByte>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461a      	mov	r2, r3
 80092a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092a8:	4313      	orrs	r3, r2
 80092aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80092ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092b2:	f023 0304 	bic.w	r3, r3, #4
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	461a      	mov	r2, r3
 80092ba:	2183      	movs	r1, #131	; 0x83
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 febf 	bl	800b040 <VL53L0X_WrByte>
 80092c2:	4603      	mov	r3, r0
 80092c4:	461a      	mov	r2, r3
 80092c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ca:	4313      	orrs	r3, r2
 80092cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80092d0:	2201      	movs	r2, #1
 80092d2:	21ff      	movs	r1, #255	; 0xff
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 feb3 	bl	800b040 <VL53L0X_WrByte>
 80092da:	4603      	mov	r3, r0
 80092dc:	461a      	mov	r2, r3
 80092de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092e2:	4313      	orrs	r3, r2
 80092e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80092e8:	2201      	movs	r2, #1
 80092ea:	2100      	movs	r1, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 fea7 	bl	800b040 <VL53L0X_WrByte>
 80092f2:	4603      	mov	r3, r0
 80092f4:	461a      	mov	r2, r3
 80092f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092fa:	4313      	orrs	r3, r2
 80092fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009300:	2200      	movs	r2, #0
 8009302:	21ff      	movs	r1, #255	; 0xff
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fe9b 	bl	800b040 <VL53L0X_WrByte>
 800930a:	4603      	mov	r3, r0
 800930c:	461a      	mov	r2, r3
 800930e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009312:	4313      	orrs	r3, r2
 8009314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009318:	2200      	movs	r2, #0
 800931a:	2180      	movs	r1, #128	; 0x80
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 fe8f 	bl	800b040 <VL53L0X_WrByte>
 8009322:	4603      	mov	r3, r0
 8009324:	461a      	mov	r2, r3
 8009326:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800932a:	4313      	orrs	r3, r2
 800932c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009330:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009334:	2b00      	cmp	r3, #0
 8009336:	f040 808f 	bne.w	8009458 <VL53L0X_get_info_from_device+0x98e>
 800933a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800933e:	2b07      	cmp	r3, #7
 8009340:	f000 808a 	beq.w	8009458 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d024      	beq.n	8009398 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800934e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009352:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009356:	2b00      	cmp	r3, #0
 8009358:	d11e      	bne.n	8009398 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009360:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800936a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800936e:	2300      	movs	r3, #0
 8009370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009372:	e00e      	b.n	8009392 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009374:	f107 0208 	add.w	r2, r7, #8
 8009378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800937a:	4413      	add	r3, r2
 800937c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009382:	4413      	add	r3, r2
 8009384:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009388:	460a      	mov	r2, r1
 800938a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800938c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938e:	3301      	adds	r3, #1
 8009390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009394:	2b05      	cmp	r3, #5
 8009396:	dded      	ble.n	8009374 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d018      	beq.n	80093d4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80093a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093a6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d112      	bne.n	80093d4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093b8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	33f3      	adds	r3, #243	; 0xf3
 80093c6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80093c8:	f107 0310 	add.w	r3, r7, #16
 80093cc:	4619      	mov	r1, r3
 80093ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093d0:	f001 ffc6 	bl	800b360 <strcpy>

		}

		if (((option & 4) == 4) &&
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d030      	beq.n	8009440 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80093de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093e2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d12a      	bne.n	8009440 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80093fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093fc:	025b      	lsls	r3, r3, #9
 80093fe:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009404:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800940e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009410:	2b00      	cmp	r3, #0
 8009412:	d011      	beq.n	8009438 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800941c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800941e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009428:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800942c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009430:	425b      	negs	r3, r3
 8009432:	b29b      	uxth	r3, r3
 8009434:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009438:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009440:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	4313      	orrs	r3, r2
 8009448:	b2db      	uxtb	r3, r3
 800944a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800944e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009458:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800945c:	4618      	mov	r0, r3
 800945e:	3760      	adds	r7, #96	; 0x60
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009470:	f240 6277 	movw	r2, #1655	; 0x677
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800947c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009480:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	fb02 f303 	mul.w	r3, r2, r3
 8009490:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009492:	68bb      	ldr	r3, [r7, #8]
}
 8009494:	4618      	mov	r0, r3
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d017      	beq.n	80094ea <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3b01      	subs	r3, #1
 80094be:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80094c0:	e005      	b.n	80094ce <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	085b      	lsrs	r3, r3, #1
 80094c6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80094c8:	89fb      	ldrh	r3, [r7, #14]
 80094ca:	3301      	adds	r3, #1
 80094cc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1f4      	bne.n	80094c2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80094d8:	89fb      	ldrh	r3, [r7, #14]
 80094da:	021b      	lsls	r3, r3, #8
 80094dc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80094e6:	4413      	add	r3, r2
 80094e8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80094ea:	8afb      	ldrh	r3, [r7, #22]

}
 80094ec:	4618      	mov	r0, r3
 80094ee:	371c      	adds	r7, #28
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009506:	88fb      	ldrh	r3, [r7, #6]
 8009508:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	0a12      	lsrs	r2, r2, #8
 800950e:	b292      	uxth	r2, r2
 8009510:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009512:	3301      	adds	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009516:	68fb      	ldr	r3, [r7, #12]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	4619      	mov	r1, r3
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7ff ff92 	bl	8009464 <VL53L0X_calc_macro_period_ps>
 8009540:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009548:	4a0a      	ldr	r2, [pc, #40]	; (8009574 <VL53L0X_calc_timeout_mclks+0x50>)
 800954a:	fba2 2303 	umull	r2, r3, r2, r3
 800954e:	099b      	lsrs	r3, r3, #6
 8009550:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009558:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	085b      	lsrs	r3, r3, #1
 8009560:	441a      	add	r2, r3
	timeout_period_mclks =
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800956a:	69fb      	ldr	r3, [r7, #28]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	10624dd3 	.word	0x10624dd3

08009578 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	807b      	strh	r3, [r7, #2]
 8009584:	4613      	mov	r3, r2
 8009586:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800958c:	787b      	ldrb	r3, [r7, #1]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff ff67 	bl	8009464 <VL53L0X_calc_macro_period_ps>
 8009596:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800959e:	4a0a      	ldr	r2, [pc, #40]	; (80095c8 <VL53L0X_calc_timeout_us+0x50>)
 80095a0:	fba2 2303 	umull	r2, r3, r2, r3
 80095a4:	099b      	lsrs	r3, r3, #6
 80095a6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80095a8:	887b      	ldrh	r3, [r7, #2]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	fb02 f303 	mul.w	r3, r2, r3
 80095b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80095b4:	4a04      	ldr	r2, [pc, #16]	; (80095c8 <VL53L0X_calc_timeout_us+0x50>)
 80095b6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ba:	099b      	lsrs	r3, r3, #6
 80095bc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80095be:	697b      	ldr	r3, [r7, #20]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	10624dd3 	.word	0x10624dd3

080095cc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	; 0x30
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	460b      	mov	r3, r1
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095da:	2300      	movs	r3, #0
 80095dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80095f2:	7afb      	ldrb	r3, [r7, #11]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d005      	beq.n	8009604 <get_sequence_step_timeout+0x38>
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d002      	beq.n	8009604 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80095fe:	7afb      	ldrb	r3, [r7, #11]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d128      	bne.n	8009656 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009604:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009608:	461a      	mov	r2, r3
 800960a:	2100      	movs	r1, #0
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7fd fa7d 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009618:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009620:	f107 0320 	add.w	r3, r7, #32
 8009624:	461a      	mov	r2, r3
 8009626:	2146      	movs	r1, #70	; 0x46
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f001 fd8b 	bl	800b144 <VL53L0X_RdByte>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009634:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009638:	b29b      	uxth	r3, r3
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff ff5c 	bl	80094f8 <VL53L0X_decode_timeout>
 8009640:	4603      	mov	r3, r0
 8009642:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009644:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800964a:	4619      	mov	r1, r3
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff ff93 	bl	8009578 <VL53L0X_calc_timeout_us>
 8009652:	62b8      	str	r0, [r7, #40]	; 0x28
 8009654:	e092      	b.n	800977c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009656:	7afb      	ldrb	r3, [r7, #11]
 8009658:	2b03      	cmp	r3, #3
 800965a:	d135      	bne.n	80096c8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800965c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009660:	461a      	mov	r2, r3
 8009662:	2100      	movs	r1, #0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7fd fa51 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009670:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009674:	2b00      	cmp	r3, #0
 8009676:	f040 8081 	bne.w	800977c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800967a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800967e:	461a      	mov	r2, r3
 8009680:	2100      	movs	r1, #0
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7fd fa42 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800968e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009692:	2b00      	cmp	r3, #0
 8009694:	d109      	bne.n	80096aa <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009696:	f107 031e 	add.w	r3, r7, #30
 800969a:	461a      	mov	r2, r3
 800969c:	2151      	movs	r1, #81	; 0x51
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f001 fd7a 	bl	800b198 <VL53L0X_RdWord>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80096aa:	8bfb      	ldrh	r3, [r7, #30]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff ff23 	bl	80094f8 <VL53L0X_decode_timeout>
 80096b2:	4603      	mov	r3, r0
 80096b4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80096b6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80096ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096bc:	4619      	mov	r1, r3
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff ff5a 	bl	8009578 <VL53L0X_calc_timeout_us>
 80096c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80096c6:	e059      	b.n	800977c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d156      	bne.n	800977c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80096ce:	f107 0314 	add.w	r3, r7, #20
 80096d2:	4619      	mov	r1, r3
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f7fd fb25 	bl	8006d24 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01d      	beq.n	8009720 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80096e4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80096e8:	461a      	mov	r2, r3
 80096ea:	2100      	movs	r1, #0
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7fd fa0d 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80096f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10f      	bne.n	8009720 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009700:	f107 031e 	add.w	r3, r7, #30
 8009704:	461a      	mov	r2, r3
 8009706:	2151      	movs	r1, #81	; 0x51
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f001 fd45 	bl	800b198 <VL53L0X_RdWord>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009714:	8bfb      	ldrh	r3, [r7, #30]
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff feee 	bl	80094f8 <VL53L0X_decode_timeout>
 800971c:	4603      	mov	r3, r0
 800971e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009720:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009724:	2b00      	cmp	r3, #0
 8009726:	d109      	bne.n	800973c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009728:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800972c:	461a      	mov	r2, r3
 800972e:	2101      	movs	r1, #1
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f7fd f9eb 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800973c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10f      	bne.n	8009764 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009744:	f107 031c 	add.w	r3, r7, #28
 8009748:	461a      	mov	r2, r3
 800974a:	2171      	movs	r1, #113	; 0x71
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f001 fd23 	bl	800b198 <VL53L0X_RdWord>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009758:	8bbb      	ldrh	r3, [r7, #28]
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff fecc 	bl	80094f8 <VL53L0X_decode_timeout>
 8009760:	4603      	mov	r3, r0
 8009762:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009764:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009766:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800976c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009772:	4619      	mov	r1, r3
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f7ff feff 	bl	8009578 <VL53L0X_calc_timeout_us>
 800977a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009780:	601a      	str	r2, [r3, #0]

	return Status;
 8009782:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009786:	4618      	mov	r0, r3
 8009788:	3730      	adds	r7, #48	; 0x30
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b08a      	sub	sp, #40	; 0x28
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	460b      	mov	r3, r1
 8009798:	607a      	str	r2, [r7, #4]
 800979a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80097a2:	7afb      	ldrb	r3, [r7, #11]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d005      	beq.n	80097b4 <set_sequence_step_timeout+0x26>
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d002      	beq.n	80097b4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d138      	bne.n	8009826 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80097b4:	f107 031b 	add.w	r3, r7, #27
 80097b8:	461a      	mov	r2, r3
 80097ba:	2100      	movs	r1, #0
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7fd f9a5 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80097c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d11a      	bne.n	8009806 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80097d0:	7efb      	ldrb	r3, [r7, #27]
 80097d2:	461a      	mov	r2, r3
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f7ff fea4 	bl	8009524 <VL53L0X_calc_timeout_mclks>
 80097dc:	4603      	mov	r3, r0
 80097de:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80097e0:	8bbb      	ldrh	r3, [r7, #28]
 80097e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e6:	d903      	bls.n	80097f0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80097e8:	23ff      	movs	r3, #255	; 0xff
 80097ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80097ee:	e004      	b.n	80097fa <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80097f0:	8bbb      	ldrh	r3, [r7, #28]
 80097f2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80097f4:	3b01      	subs	r3, #1
 80097f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009806:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800980a:	2b00      	cmp	r3, #0
 800980c:	f040 80ab 	bne.w	8009966 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009814:	461a      	mov	r2, r3
 8009816:	2146      	movs	r1, #70	; 0x46
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f001 fc11 	bl	800b040 <VL53L0X_WrByte>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009824:	e09f      	b.n	8009966 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009826:	7afb      	ldrb	r3, [r7, #11]
 8009828:	2b03      	cmp	r3, #3
 800982a:	d135      	bne.n	8009898 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800982c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11b      	bne.n	800986c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009834:	f107 031b 	add.w	r3, r7, #27
 8009838:	461a      	mov	r2, r3
 800983a:	2100      	movs	r1, #0
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7fd f965 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 8009842:	4603      	mov	r3, r0
 8009844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009848:	7efb      	ldrb	r3, [r7, #27]
 800984a:	461a      	mov	r2, r3
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f7ff fe68 	bl	8009524 <VL53L0X_calc_timeout_mclks>
 8009854:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009856:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff fe20 	bl	80094a0 <VL53L0X_encode_timeout>
 8009860:	4603      	mov	r3, r0
 8009862:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009864:	8b3a      	ldrh	r2, [r7, #24]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800986c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009870:	2b00      	cmp	r3, #0
 8009872:	d108      	bne.n	8009886 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009874:	8b3b      	ldrh	r3, [r7, #24]
 8009876:	461a      	mov	r2, r3
 8009878:	2151      	movs	r1, #81	; 0x51
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f001 fc04 	bl	800b088 <VL53L0X_WrWord>
 8009880:	4603      	mov	r3, r0
 8009882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800988a:	2b00      	cmp	r3, #0
 800988c:	d16b      	bne.n	8009966 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009896:	e066      	b.n	8009966 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	2b04      	cmp	r3, #4
 800989c:	d160      	bne.n	8009960 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800989e:	f107 0310 	add.w	r3, r7, #16
 80098a2:	4619      	mov	r1, r3
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7fd fa3d 	bl	8006d24 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80098ae:	7cfb      	ldrb	r3, [r7, #19]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01d      	beq.n	80098f0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80098b4:	f107 031b 	add.w	r3, r7, #27
 80098b8:	461a      	mov	r2, r3
 80098ba:	2100      	movs	r1, #0
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7fd f925 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80098c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10f      	bne.n	80098f0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80098d0:	f107 0318 	add.w	r3, r7, #24
 80098d4:	461a      	mov	r2, r3
 80098d6:	2151      	movs	r1, #81	; 0x51
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f001 fc5d 	bl	800b198 <VL53L0X_RdWord>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80098e4:	8b3b      	ldrh	r3, [r7, #24]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff fe06 	bl	80094f8 <VL53L0X_decode_timeout>
 80098ec:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80098ee:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80098f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80098f8:	f107 031b 	add.w	r3, r7, #27
 80098fc:	461a      	mov	r2, r3
 80098fe:	2101      	movs	r1, #1
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7fd f903 	bl	8006b0c <VL53L0X_GetVcselPulsePeriod>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800990c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009910:	2b00      	cmp	r3, #0
 8009912:	d128      	bne.n	8009966 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009914:	7efb      	ldrb	r3, [r7, #27]
 8009916:	461a      	mov	r2, r3
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fe02 	bl	8009524 <VL53L0X_calc_timeout_mclks>
 8009920:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009924:	6a3a      	ldr	r2, [r7, #32]
 8009926:	4413      	add	r3, r2
 8009928:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800992a:	6a38      	ldr	r0, [r7, #32]
 800992c:	f7ff fdb8 	bl	80094a0 <VL53L0X_encode_timeout>
 8009930:	4603      	mov	r3, r0
 8009932:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800993c:	8bfb      	ldrh	r3, [r7, #30]
 800993e:	461a      	mov	r2, r3
 8009940:	2171      	movs	r1, #113	; 0x71
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f001 fba0 	bl	800b088 <VL53L0X_WrWord>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800994e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009952:	2b00      	cmp	r3, #0
 8009954:	d107      	bne.n	8009966 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800995e:	e002      	b.n	8009966 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009960:	23fc      	movs	r3, #252	; 0xfc
 8009962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009966:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800996a:	4618      	mov	r0, r3
 800996c:	3728      	adds	r7, #40	; 0x28
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b08a      	sub	sp, #40	; 0x28
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
 800997e:	4613      	mov	r3, r2
 8009980:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009982:	2300      	movs	r3, #0
 8009984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009988:	230c      	movs	r3, #12
 800998a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800998e:	2312      	movs	r3, #18
 8009990:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009994:	2308      	movs	r3, #8
 8009996:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800999a:	230e      	movs	r3, #14
 800999c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80099a4:	78bb      	ldrb	r3, [r7, #2]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099b0:	23fc      	movs	r3, #252	; 0xfc
 80099b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099b6:	e020      	b.n	80099fa <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10d      	bne.n	80099da <VL53L0X_set_vcsel_pulse_period+0x68>
 80099be:	78ba      	ldrb	r2, [r7, #2]
 80099c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d304      	bcc.n	80099d2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80099c8:	78ba      	ldrb	r2, [r7, #2]
 80099ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d903      	bls.n	80099da <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099d2:	23fc      	movs	r3, #252	; 0xfc
 80099d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099d8:	e00f      	b.n	80099fa <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d10c      	bne.n	80099fa <VL53L0X_set_vcsel_pulse_period+0x88>
 80099e0:	78ba      	ldrb	r2, [r7, #2]
 80099e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d304      	bcc.n	80099f4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80099ea:	78ba      	ldrb	r2, [r7, #2]
 80099ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d902      	bls.n	80099fa <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099f4:	23fc      	movs	r3, #252	; 0xfc
 80099f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80099fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009a02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a06:	e239      	b.n	8009e7c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d150      	bne.n	8009ab0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009a0e:	78bb      	ldrb	r3, [r7, #2]
 8009a10:	2b0c      	cmp	r3, #12
 8009a12:	d110      	bne.n	8009a36 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009a14:	2218      	movs	r2, #24
 8009a16:	2157      	movs	r1, #87	; 0x57
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fb11 	bl	800b040 <VL53L0X_WrByte>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009a24:	2208      	movs	r2, #8
 8009a26:	2156      	movs	r1, #86	; 0x56
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 fb09 	bl	800b040 <VL53L0X_WrByte>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a34:	e17f      	b.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009a36:	78bb      	ldrb	r3, [r7, #2]
 8009a38:	2b0e      	cmp	r3, #14
 8009a3a:	d110      	bne.n	8009a5e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009a3c:	2230      	movs	r2, #48	; 0x30
 8009a3e:	2157      	movs	r1, #87	; 0x57
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 fafd 	bl	800b040 <VL53L0X_WrByte>
 8009a46:	4603      	mov	r3, r0
 8009a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	2156      	movs	r1, #86	; 0x56
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f001 faf5 	bl	800b040 <VL53L0X_WrByte>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a5c:	e16b      	b.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009a5e:	78bb      	ldrb	r3, [r7, #2]
 8009a60:	2b10      	cmp	r3, #16
 8009a62:	d110      	bne.n	8009a86 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009a64:	2240      	movs	r2, #64	; 0x40
 8009a66:	2157      	movs	r1, #87	; 0x57
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 fae9 	bl	800b040 <VL53L0X_WrByte>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009a74:	2208      	movs	r2, #8
 8009a76:	2156      	movs	r1, #86	; 0x56
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 fae1 	bl	800b040 <VL53L0X_WrByte>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a84:	e157      	b.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009a86:	78bb      	ldrb	r3, [r7, #2]
 8009a88:	2b12      	cmp	r3, #18
 8009a8a:	f040 8154 	bne.w	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009a8e:	2250      	movs	r2, #80	; 0x50
 8009a90:	2157      	movs	r1, #87	; 0x57
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f001 fad4 	bl	800b040 <VL53L0X_WrByte>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009a9e:	2208      	movs	r2, #8
 8009aa0:	2156      	movs	r1, #86	; 0x56
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f001 facc 	bl	800b040 <VL53L0X_WrByte>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009aae:	e142      	b.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	f040 813f 	bne.w	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009ab8:	78bb      	ldrb	r3, [r7, #2]
 8009aba:	2b08      	cmp	r3, #8
 8009abc:	d14c      	bne.n	8009b58 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009abe:	2210      	movs	r2, #16
 8009ac0:	2148      	movs	r1, #72	; 0x48
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 fabc 	bl	800b040 <VL53L0X_WrByte>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009ace:	2208      	movs	r2, #8
 8009ad0:	2147      	movs	r1, #71	; 0x47
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f001 fab4 	bl	800b040 <VL53L0X_WrByte>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009ade:	2202      	movs	r2, #2
 8009ae0:	2132      	movs	r1, #50	; 0x32
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f001 faac 	bl	800b040 <VL53L0X_WrByte>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	461a      	mov	r2, r3
 8009aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af0:	4313      	orrs	r3, r2
 8009af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009af6:	220c      	movs	r2, #12
 8009af8:	2130      	movs	r1, #48	; 0x30
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 faa0 	bl	800b040 <VL53L0X_WrByte>
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009b0e:	2201      	movs	r2, #1
 8009b10:	21ff      	movs	r1, #255	; 0xff
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 fa94 	bl	800b040 <VL53L0X_WrByte>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b20:	4313      	orrs	r3, r2
 8009b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009b26:	2230      	movs	r2, #48	; 0x30
 8009b28:	2130      	movs	r1, #48	; 0x30
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f001 fa88 	bl	800b040 <VL53L0X_WrByte>
 8009b30:	4603      	mov	r3, r0
 8009b32:	461a      	mov	r2, r3
 8009b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009b3e:	2200      	movs	r2, #0
 8009b40:	21ff      	movs	r1, #255	; 0xff
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f001 fa7c 	bl	800b040 <VL53L0X_WrByte>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b50:	4313      	orrs	r3, r2
 8009b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b56:	e0ee      	b.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009b58:	78bb      	ldrb	r3, [r7, #2]
 8009b5a:	2b0a      	cmp	r3, #10
 8009b5c:	d14c      	bne.n	8009bf8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009b5e:	2228      	movs	r2, #40	; 0x28
 8009b60:	2148      	movs	r1, #72	; 0x48
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 fa6c 	bl	800b040 <VL53L0X_WrByte>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009b6e:	2208      	movs	r2, #8
 8009b70:	2147      	movs	r1, #71	; 0x47
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f001 fa64 	bl	800b040 <VL53L0X_WrByte>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009b7e:	2203      	movs	r2, #3
 8009b80:	2132      	movs	r1, #50	; 0x32
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 fa5c 	bl	800b040 <VL53L0X_WrByte>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b90:	4313      	orrs	r3, r2
 8009b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009b96:	2209      	movs	r2, #9
 8009b98:	2130      	movs	r1, #48	; 0x30
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 fa50 	bl	800b040 <VL53L0X_WrByte>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009bae:	2201      	movs	r2, #1
 8009bb0:	21ff      	movs	r1, #255	; 0xff
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 fa44 	bl	800b040 <VL53L0X_WrByte>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	2130      	movs	r1, #48	; 0x30
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fa38 	bl	800b040 <VL53L0X_WrByte>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009bde:	2200      	movs	r2, #0
 8009be0:	21ff      	movs	r1, #255	; 0xff
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 fa2c 	bl	800b040 <VL53L0X_WrByte>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461a      	mov	r2, r3
 8009bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bf6:	e09e      	b.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009bf8:	78bb      	ldrb	r3, [r7, #2]
 8009bfa:	2b0c      	cmp	r3, #12
 8009bfc:	d14c      	bne.n	8009c98 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009bfe:	2238      	movs	r2, #56	; 0x38
 8009c00:	2148      	movs	r1, #72	; 0x48
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 fa1c 	bl	800b040 <VL53L0X_WrByte>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009c0e:	2208      	movs	r2, #8
 8009c10:	2147      	movs	r1, #71	; 0x47
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 fa14 	bl	800b040 <VL53L0X_WrByte>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009c1e:	2203      	movs	r2, #3
 8009c20:	2132      	movs	r1, #50	; 0x32
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fa0c 	bl	800b040 <VL53L0X_WrByte>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c30:	4313      	orrs	r3, r2
 8009c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009c36:	2208      	movs	r2, #8
 8009c38:	2130      	movs	r1, #48	; 0x30
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 fa00 	bl	800b040 <VL53L0X_WrByte>
 8009c40:	4603      	mov	r3, r0
 8009c42:	461a      	mov	r2, r3
 8009c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009c4e:	2201      	movs	r2, #1
 8009c50:	21ff      	movs	r1, #255	; 0xff
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 f9f4 	bl	800b040 <VL53L0X_WrByte>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c60:	4313      	orrs	r3, r2
 8009c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009c66:	2220      	movs	r2, #32
 8009c68:	2130      	movs	r1, #48	; 0x30
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 f9e8 	bl	800b040 <VL53L0X_WrByte>
 8009c70:	4603      	mov	r3, r0
 8009c72:	461a      	mov	r2, r3
 8009c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009c7e:	2200      	movs	r2, #0
 8009c80:	21ff      	movs	r1, #255	; 0xff
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 f9dc 	bl	800b040 <VL53L0X_WrByte>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c96:	e04e      	b.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009c98:	78bb      	ldrb	r3, [r7, #2]
 8009c9a:	2b0e      	cmp	r3, #14
 8009c9c:	d14b      	bne.n	8009d36 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009c9e:	2248      	movs	r2, #72	; 0x48
 8009ca0:	2148      	movs	r1, #72	; 0x48
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f001 f9cc 	bl	800b040 <VL53L0X_WrByte>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009cae:	2208      	movs	r2, #8
 8009cb0:	2147      	movs	r1, #71	; 0x47
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 f9c4 	bl	800b040 <VL53L0X_WrByte>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009cbe:	2203      	movs	r2, #3
 8009cc0:	2132      	movs	r1, #50	; 0x32
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f001 f9bc 	bl	800b040 <VL53L0X_WrByte>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009cd6:	2207      	movs	r2, #7
 8009cd8:	2130      	movs	r1, #48	; 0x30
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f001 f9b0 	bl	800b040 <VL53L0X_WrByte>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009cee:	2201      	movs	r2, #1
 8009cf0:	21ff      	movs	r1, #255	; 0xff
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f001 f9a4 	bl	800b040 <VL53L0X_WrByte>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d00:	4313      	orrs	r3, r2
 8009d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009d06:	2220      	movs	r2, #32
 8009d08:	2130      	movs	r1, #48	; 0x30
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f001 f998 	bl	800b040 <VL53L0X_WrByte>
 8009d10:	4603      	mov	r3, r0
 8009d12:	461a      	mov	r2, r3
 8009d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	21ff      	movs	r1, #255	; 0xff
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f001 f98c 	bl	800b040 <VL53L0X_WrByte>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d30:	4313      	orrs	r3, r2
 8009d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009d36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d17f      	bne.n	8009e3e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009d3e:	78bb      	ldrb	r3, [r7, #2]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fe38 	bl	80089b6 <VL53L0X_encode_vcsel_period>
 8009d46:	4603      	mov	r3, r0
 8009d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009d4c:	78fb      	ldrb	r3, [r7, #3]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d045      	beq.n	8009de2 <VL53L0X_set_vcsel_pulse_period+0x470>
 8009d56:	e06e      	b.n	8009e36 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009d58:	f107 0314 	add.w	r3, r7, #20
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	2103      	movs	r1, #3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fc33 	bl	80095cc <get_sequence_step_timeout>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d109      	bne.n	8009d88 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009d74:	f107 0310 	add.w	r3, r7, #16
 8009d78:	461a      	mov	r2, r3
 8009d7a:	2102      	movs	r1, #2
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff fc25 	bl	80095cc <get_sequence_step_timeout>
 8009d82:	4603      	mov	r3, r0
 8009d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009d88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d109      	bne.n	8009da4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009d90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d94:	461a      	mov	r2, r3
 8009d96:	2150      	movs	r1, #80	; 0x50
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f001 f951 	bl	800b040 <VL53L0X_WrByte>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d108      	bne.n	8009dbe <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	461a      	mov	r2, r3
 8009db0:	2103      	movs	r1, #3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff fceb 	bl	800978e <set_sequence_step_timeout>
 8009db8:	4603      	mov	r3, r0
 8009dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009dbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d108      	bne.n	8009dd8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2102      	movs	r1, #2
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff fcde 	bl	800978e <set_sequence_step_timeout>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	78ba      	ldrb	r2, [r7, #2]
 8009ddc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009de0:	e02e      	b.n	8009e40 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009de2:	f107 0318 	add.w	r3, r7, #24
 8009de6:	461a      	mov	r2, r3
 8009de8:	2104      	movs	r1, #4
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fbee 	bl	80095cc <get_sequence_step_timeout>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009df6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d109      	bne.n	8009e12 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009dfe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e02:	461a      	mov	r2, r3
 8009e04:	2170      	movs	r1, #112	; 0x70
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f001 f91a 	bl	800b040 <VL53L0X_WrByte>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009e12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d108      	bne.n	8009e2c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2104      	movs	r1, #4
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fcb4 	bl	800978e <set_sequence_step_timeout>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	78ba      	ldrb	r2, [r7, #2]
 8009e30:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009e34:	e004      	b.n	8009e40 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e36:	23fc      	movs	r3, #252	; 0xfc
 8009e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e3c:	e000      	b.n	8009e40 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8009e3e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d109      	bne.n	8009e5c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009e4e:	69f9      	ldr	r1, [r7, #28]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7fc fe1d 	bl	8006a90 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009e56:	4603      	mov	r3, r0
 8009e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d109      	bne.n	8009e78 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009e64:	f107 010f 	add.w	r1, r7, #15
 8009e68:	2301      	movs	r3, #1
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7fe fcbd 	bl	80087ec <VL53L0X_perform_phase_calibration>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009e78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3728      	adds	r7, #40	; 0x28
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d00a      	beq.n	8009eb6 <VL53L0X_get_vcsel_pulse_period+0x32>
 8009ea0:	e013      	b.n	8009eca <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009ea2:	f107 0316 	add.w	r3, r7, #22
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	2150      	movs	r1, #80	; 0x50
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f001 f94a 	bl	800b144 <VL53L0X_RdByte>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009eb4:	e00b      	b.n	8009ece <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009eb6:	f107 0316 	add.w	r3, r7, #22
 8009eba:	461a      	mov	r2, r3
 8009ebc:	2170      	movs	r1, #112	; 0x70
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f001 f940 	bl	800b144 <VL53L0X_RdByte>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009ec8:	e001      	b.n	8009ece <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009eca:	23fc      	movs	r3, #252	; 0xfc
 8009ecc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d107      	bne.n	8009ee6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009ed6:	7dbb      	ldrb	r3, [r7, #22]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe fd59 	bl	8008990 <VL53L0X_decode_vcsel_period>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	701a      	strb	r2, [r3, #0]

	return Status;
 8009ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b092      	sub	sp, #72	; 0x48
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009efc:	2300      	movs	r3, #0
 8009efe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009f02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009f06:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009f08:	f240 7376 	movw	r3, #1910	; 0x776
 8009f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009f0e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009f12:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009f14:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009f1a:	f240 234e 	movw	r3, #590	; 0x24e
 8009f1e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009f20:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009f24:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009f26:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009f2c:	f240 2326 	movw	r3, #550	; 0x226
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009f36:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009f3a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d205      	bcs.n	8009f54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f48:	23fc      	movs	r3, #252	; 0xfc
 8009f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009f4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f52:	e0aa      	b.n	800a0aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009f54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009f60:	f107 0314 	add.w	r3, r7, #20
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7fc fedc 	bl	8006d24 <VL53L0X_GetSequenceStepEnables>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009f72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d15b      	bne.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009f7a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d105      	bne.n	8009f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009f80:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d102      	bne.n	8009f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009f86:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d052      	beq.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009f8c:	f107 0310 	add.w	r3, r7, #16
 8009f90:	461a      	mov	r2, r3
 8009f92:	2102      	movs	r1, #2
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff fb19 	bl	80095cc <get_sequence_step_timeout>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009fa0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009fa8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fac:	e07d      	b.n	800a0aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009fae:	7d3b      	ldrb	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00f      	beq.n	8009fd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009fb4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb8:	4413      	add	r3, r2
 8009fba:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009fbc:	69fa      	ldr	r2, [r7, #28]
 8009fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d204      	bcs.n	8009fce <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	643b      	str	r3, [r7, #64]	; 0x40
 8009fcc:	e002      	b.n	8009fd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009fce:	23fc      	movs	r3, #252	; 0xfc
 8009fd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009fd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009fdc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fe0:	e063      	b.n	800a0aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009fe2:	7dbb      	ldrb	r3, [r7, #22]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d011      	beq.n	800a00c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	4413      	add	r3, r2
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d204      	bcs.n	800a004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	643b      	str	r3, [r7, #64]	; 0x40
 800a002:	e016      	b.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a004:	23fc      	movs	r3, #252	; 0xfc
 800a006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a00a:	e012      	b.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a00c:	7d7b      	ldrb	r3, [r7, #21]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00f      	beq.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a016:	4413      	add	r3, r2
 800a018:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a01a:	69fa      	ldr	r2, [r7, #28]
 800a01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a01e:	429a      	cmp	r2, r3
 800a020:	d204      	bcs.n	800a02c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	643b      	str	r3, [r7, #64]	; 0x40
 800a02a:	e002      	b.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a02c:	23fc      	movs	r3, #252	; 0xfc
 800a02e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a032:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a03a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a03e:	e034      	b.n	800a0aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d019      	beq.n	800a07a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a046:	f107 030c 	add.w	r3, r7, #12
 800a04a:	461a      	mov	r2, r3
 800a04c:	2103      	movs	r1, #3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff fabc 	bl	80095cc <get_sequence_step_timeout>
 800a054:	4603      	mov	r3, r0
 800a056:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a05e:	4413      	add	r3, r2
 800a060:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a066:	429a      	cmp	r2, r3
 800a068:	d204      	bcs.n	800a074 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a06a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	643b      	str	r3, [r7, #64]	; 0x40
 800a072:	e002      	b.n	800a07a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a074:	23fc      	movs	r3, #252	; 0xfc
 800a076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a07a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d111      	bne.n	800a0a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a082:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00e      	beq.n	800a0a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a092:	2104      	movs	r1, #4
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff fb7a 	bl	800978e <set_sequence_step_timeout>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a0a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3748      	adds	r7, #72	; 0x48
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b090      	sub	sp, #64	; 0x40
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a0c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a0c6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a0c8:	f240 7376 	movw	r3, #1910	; 0x776
 800a0cc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a0ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a0d2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a0d4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a0da:	f240 234e 	movw	r3, #590	; 0x24e
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a0e0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a0e6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a0ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a0ec:	f240 2326 	movw	r3, #550	; 0x226
 800a0f0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a0f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fa:	441a      	add	r2, r3
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a100:	f107 0318 	add.w	r3, r7, #24
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7fc fe0c 	bl	8006d24 <VL53L0X_GetSequenceStepEnables>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a112:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a11a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a11e:	e075      	b.n	800a20c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a120:	7e3b      	ldrb	r3, [r7, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d105      	bne.n	800a132 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a126:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a12c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d030      	beq.n	800a194 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a132:	f107 0310 	add.w	r3, r7, #16
 800a136:	461a      	mov	r2, r3
 800a138:	2102      	movs	r1, #2
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fa46 	bl	80095cc <get_sequence_step_timeout>
 800a140:	4603      	mov	r3, r0
 800a142:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a146:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d122      	bne.n	800a194 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a14e:	7e3b      	ldrb	r3, [r7, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d007      	beq.n	800a164 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a158:	6939      	ldr	r1, [r7, #16]
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a15e:	441a      	add	r2, r3
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a164:	7ebb      	ldrb	r3, [r7, #26]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a16e:	6939      	ldr	r1, [r7, #16]
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	440b      	add	r3, r1
 800a174:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a176:	441a      	add	r2, r3
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	e00a      	b.n	800a194 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a17e:	7e7b      	ldrb	r3, [r7, #25]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a188:	6939      	ldr	r1, [r7, #16]
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a18e:	441a      	add	r2, r3
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a194:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d114      	bne.n	800a1c6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a19c:	7efb      	ldrb	r3, [r7, #27]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d011      	beq.n	800a1c6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a1a2:	f107 030c 	add.w	r3, r7, #12
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	2103      	movs	r1, #3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff fa0e 	bl	80095cc <get_sequence_step_timeout>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a1ba:	68f9      	ldr	r1, [r7, #12]
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a1c0:	441a      	add	r2, r3
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d114      	bne.n	800a1f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a1ce:	7f3b      	ldrb	r3, [r7, #28]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d011      	beq.n	800a1f8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a1d4:	f107 0314 	add.w	r3, r7, #20
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2104      	movs	r1, #4
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff f9f5 	bl	80095cc <get_sequence_step_timeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a1ec:	6979      	ldr	r1, [r7, #20]
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a1f2:	441a      	add	r2, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d103      	bne.n	800a208 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a208:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3740      	adds	r7, #64	; 0x40
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a21e:	2300      	movs	r3, #0
 800a220:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a226:	e0c6      	b.n	800a3b6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4413      	add	r3, r2
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	3301      	adds	r3, #1
 800a236:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a238:	7cfb      	ldrb	r3, [r7, #19]
 800a23a:	2bff      	cmp	r3, #255	; 0xff
 800a23c:	f040 808d 	bne.w	800a35a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4413      	add	r3, r2
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	747b      	strb	r3, [r7, #17]
			Index++;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	3301      	adds	r3, #1
 800a24e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a250:	7c7b      	ldrb	r3, [r7, #17]
 800a252:	2b03      	cmp	r3, #3
 800a254:	d87e      	bhi.n	800a354 <VL53L0X_load_tuning_settings+0x140>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <VL53L0X_load_tuning_settings+0x48>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a26d 	.word	0x0800a26d
 800a260:	0800a2a7 	.word	0x0800a2a7
 800a264:	0800a2e1 	.word	0x0800a2e1
 800a268:	0800a31b 	.word	0x0800a31b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	4413      	add	r3, r2
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	743b      	strb	r3, [r7, #16]
				Index++;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	3301      	adds	r3, #1
 800a27a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4413      	add	r3, r2
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	3301      	adds	r3, #1
 800a28a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a28c:	7c3b      	ldrb	r3, [r7, #16]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	021b      	lsls	r3, r3, #8
 800a292:	b29a      	uxth	r2, r3
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	b29b      	uxth	r3, r3
 800a298:	4413      	add	r3, r2
 800a29a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	89ba      	ldrh	r2, [r7, #12]
 800a2a0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a2a4:	e087      	b.n	800a3b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	743b      	strb	r3, [r7, #16]
				Index++;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a2c6:	7c3b      	ldrb	r3, [r7, #16]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	89ba      	ldrh	r2, [r7, #12]
 800a2da:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a2de:	e06a      	b.n	800a3b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	743b      	strb	r3, [r7, #16]
				Index++;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a300:	7c3b      	ldrb	r3, [r7, #16]
 800a302:	b29b      	uxth	r3, r3
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	b29a      	uxth	r2, r3
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	4413      	add	r3, r2
 800a30e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	89ba      	ldrh	r2, [r7, #12]
 800a314:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a318:	e04d      	b.n	800a3b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	4413      	add	r3, r2
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	743b      	strb	r3, [r7, #16]
				Index++;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	3301      	adds	r3, #1
 800a328:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	4413      	add	r3, r2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	3301      	adds	r3, #1
 800a338:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a33a:	7c3b      	ldrb	r3, [r7, #16]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	021b      	lsls	r3, r3, #8
 800a340:	b29a      	uxth	r2, r3
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	b29b      	uxth	r3, r3
 800a346:	4413      	add	r3, r2
 800a348:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	89ba      	ldrh	r2, [r7, #12]
 800a34e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a352:	e030      	b.n	800a3b6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a354:	23fc      	movs	r3, #252	; 0xfc
 800a356:	77fb      	strb	r3, [r7, #31]
 800a358:	e02d      	b.n	800a3b6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a35a:	7cfb      	ldrb	r3, [r7, #19]
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d828      	bhi.n	800a3b2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4413      	add	r3, r2
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	3301      	adds	r3, #1
 800a36e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a370:	2300      	movs	r3, #0
 800a372:	61bb      	str	r3, [r7, #24]
 800a374:	e00f      	b.n	800a396 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	4413      	add	r3, r2
 800a37c:	7819      	ldrb	r1, [r3, #0]
 800a37e:	f107 0208 	add.w	r2, r7, #8
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	4413      	add	r3, r2
 800a386:	460a      	mov	r2, r1
 800a388:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	3301      	adds	r3, #1
 800a38e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	3301      	adds	r3, #1
 800a394:	61bb      	str	r3, [r7, #24]
 800a396:	7cfb      	ldrb	r3, [r7, #19]
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	dbeb      	blt.n	800a376 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a39e:	7cfb      	ldrb	r3, [r7, #19]
 800a3a0:	f107 0208 	add.w	r2, r7, #8
 800a3a4:	7cb9      	ldrb	r1, [r7, #18]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fdee 	bl	800af88 <VL53L0X_WriteMulti>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	77fb      	strb	r3, [r7, #31]
 800a3b0:	e001      	b.n	800a3b6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3b2:	23fc      	movs	r3, #252	; 0xfc
 800a3b4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d004      	beq.n	800a3cc <VL53L0X_load_tuning_settings+0x1b8>
 800a3c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f43f af2e 	beq.w	800a228 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3720      	adds	r7, #32
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a3ee:	f107 0313 	add.w	r3, r7, #19
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7fc fd21 	bl	8006e3c <VL53L0X_GetXTalkCompensationEnable>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a3fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d111      	bne.n	800a42a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a406:	7cfb      	ldrb	r3, [r7, #19]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00e      	beq.n	800a42a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	8a9b      	ldrh	r3, [r3, #20]
 800a416:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	fb02 f303 	mul.w	r3, r2, r3
 800a41e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	3380      	adds	r3, #128	; 0x80
 800a424:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a42a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3720      	adds	r7, #32
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b086      	sub	sp, #24
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60f8      	str	r0, [r7, #12]
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a442:	2300      	movs	r3, #0
 800a444:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a44e:	f107 0310 	add.w	r3, r7, #16
 800a452:	461a      	mov	r2, r3
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7ff ffbe 	bl	800a3d8 <VL53L0X_get_total_xtalk_rate>
 800a45c:	4603      	mov	r3, r0
 800a45e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a460:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d105      	bne.n	800a474 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	441a      	add	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]

	return Status;
 800a474:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b09a      	sub	sp, #104	; 0x68
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a48e:	2312      	movs	r3, #18
 800a490:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a496:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a498:	2342      	movs	r3, #66	; 0x42
 800a49a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a49c:	2306      	movs	r3, #6
 800a49e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a4a0:	2307      	movs	r3, #7
 800a4a2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a4b0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a4b8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4be:	fb02 f303 	mul.w	r3, r2, r3
 800a4c2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c6:	3380      	adds	r3, #128	; 0x80
 800a4c8:	0a1b      	lsrs	r3, r3, #8
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4d0:	fb02 f303 	mul.w	r3, r2, r3
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01a      	beq.n	800a516 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	029b      	lsls	r3, r3, #10
 800a4e4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ec:	4413      	add	r3, r2
 800a4ee:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a4f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a4fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	4413      	add	r3, r2
 800a502:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a506:	fb03 f303 	mul.w	r3, r3, r3
 800a50a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a50c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a50e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a512:	0c1b      	lsrs	r3, r3, #16
 800a514:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a51a:	fb02 f303 	mul.w	r3, r2, r3
 800a51e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a526:	0c1b      	lsrs	r3, r3, #16
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	fb03 f303 	mul.w	r3, r3, r3
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a534:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a538:	0c1b      	lsrs	r3, r3, #16
 800a53a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a53c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a53e:	085a      	lsrs	r2, r3, #1
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	441a      	add	r2, r3
 800a544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a546:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a550:	fb02 f303 	mul.w	r3, r2, r3
 800a554:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a55c:	d302      	bcc.n	800a564 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a55e:	4b54      	ldr	r3, [pc, #336]	; (800a6b0 <VL53L0X_calc_dmax+0x230>)
 800a560:	663b      	str	r3, [r7, #96]	; 0x60
 800a562:	e015      	b.n	800a590 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a566:	085a      	lsrs	r2, r3, #1
 800a568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a56a:	441a      	add	r2, r3
 800a56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a572:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a578:	fb02 f303 	mul.w	r3, r2, r3
 800a57c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a57e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a580:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a584:	0c1b      	lsrs	r3, r3, #16
 800a586:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a58a:	fb03 f303 	mul.w	r3, r3, r3
 800a58e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a592:	039b      	lsls	r3, r3, #14
 800a594:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a598:	4a46      	ldr	r2, [pc, #280]	; (800a6b4 <VL53L0X_calc_dmax+0x234>)
 800a59a:	fba2 2303 	umull	r2, r3, r2, r3
 800a59e:	099b      	lsrs	r3, r3, #6
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	fb03 f303 	mul.w	r3, r3, r3
 800a5a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ac:	fb03 f303 	mul.w	r3, r3, r3
 800a5b0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	091b      	lsrs	r3, r3, #4
 800a5b8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	4413      	add	r3, r2
 800a5ca:	011b      	lsls	r3, r3, #4
 800a5cc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a5d4:	0b9b      	lsrs	r3, r3, #14
 800a5d6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a5d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5dc:	4413      	add	r3, r2
 800a5de:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a5e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a5ea:	69ba      	ldr	r2, [r7, #24]
 800a5ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	039b      	lsls	r3, r3, #14
 800a5f8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	085b      	lsrs	r3, r3, #1
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	4413      	add	r3, r2
 800a602:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a612:	fb02 f303 	mul.w	r3, r2, r3
 800a616:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a61e:	4a25      	ldr	r2, [pc, #148]	; (800a6b4 <VL53L0X_calc_dmax+0x234>)
 800a620:	fba2 2303 	umull	r2, r3, r2, r3
 800a624:	099b      	lsrs	r3, r3, #6
 800a626:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	011b      	lsls	r3, r3, #4
 800a62c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a634:	4a1f      	ldr	r2, [pc, #124]	; (800a6b4 <VL53L0X_calc_dmax+0x234>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	099b      	lsrs	r3, r3, #6
 800a63c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a63e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a640:	3380      	adds	r3, #128	; 0x80
 800a642:	0a1b      	lsrs	r3, r3, #8
 800a644:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d008      	beq.n	800a65e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	085a      	lsrs	r2, r3, #1
 800a650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a652:	441a      	add	r2, r3
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	fbb2 f3f3 	udiv	r3, r2, r3
 800a65a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a65c:	e001      	b.n	800a662 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a662:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a664:	f7fe f9ba 	bl	80089dc <VL53L0X_isqrt>
 800a668:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d008      	beq.n	800a682 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	085a      	lsrs	r2, r3, #1
 800a674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a676:	441a      	add	r2, r3
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a680:	e001      	b.n	800a686 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a686:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a688:	f7fe f9a8 	bl	80089dc <VL53L0X_isqrt>
 800a68c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a68e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a698:	429a      	cmp	r2, r3
 800a69a:	d902      	bls.n	800a6a2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a69c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a69e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6a0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a6a2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3768      	adds	r7, #104	; 0x68
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	fff00000 	.word	0xfff00000
 800a6b4:	10624dd3 	.word	0x10624dd3

0800a6b8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b0b4      	sub	sp, #208	; 0xd0
 800a6bc:	af04      	add	r7, sp, #16
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a6c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a6ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a6ce:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a6d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a6d6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a6da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a6de:	f241 235c 	movw	r3, #4700	; 0x125c
 800a6e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a6e6:	4b9e      	ldr	r3, [pc, #632]	; (800a960 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a6e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a6ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a6f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a6f2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a6f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6fe:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a700:	4b98      	ldr	r3, [pc, #608]	; (800a964 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a702:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a708:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a70a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a70e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a710:	f240 6377 	movw	r3, #1655	; 0x677
 800a714:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a716:	2300      	movs	r3, #0
 800a718:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a72a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a72e:	0c1b      	lsrs	r3, r3, #16
 800a730:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a738:	f107 0310 	add.w	r3, r7, #16
 800a73c:	461a      	mov	r2, r3
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7ff fe78 	bl	800a436 <VL53L0X_get_total_signal_rate>
 800a746:	4603      	mov	r3, r0
 800a748:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	461a      	mov	r2, r3
 800a752:	68b9      	ldr	r1, [r7, #8]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff fe3f 	bl	800a3d8 <VL53L0X_get_total_xtalk_rate>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a766:	fb02 f303 	mul.w	r3, r2, r3
 800a76a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a76c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a76e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a772:	0c1b      	lsrs	r3, r3, #16
 800a774:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a77c:	fb02 f303 	mul.w	r3, r2, r3
 800a780:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a784:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d902      	bls.n	800a794 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a794:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d168      	bne.n	800a86e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a7a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a7ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a7b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7fe feb2 	bl	8009524 <VL53L0X_calc_timeout_mclks>
 800a7c0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a7c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a7d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a7d6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7fe fe9f 	bl	8009524 <VL53L0X_calc_timeout_mclks>
 800a7e6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a7ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a7f2:	2b08      	cmp	r3, #8
 800a7f4:	d102      	bne.n	800a7fc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a7fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a800:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a802:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a806:	fb02 f303 	mul.w	r3, r2, r3
 800a80a:	02db      	lsls	r3, r3, #11
 800a80c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a810:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a814:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a818:	4a53      	ldr	r2, [pc, #332]	; (800a968 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a81a:	fba2 2303 	umull	r2, r3, r2, r3
 800a81e:	099b      	lsrs	r3, r3, #6
 800a820:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a828:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a82a:	fb02 f303 	mul.w	r3, r2, r3
 800a82e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a836:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a83a:	4a4b      	ldr	r2, [pc, #300]	; (800a968 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a83c:	fba2 2303 	umull	r2, r3, r2, r3
 800a840:	099b      	lsrs	r3, r3, #6
 800a842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	3380      	adds	r3, #128	; 0x80
 800a84a:	0a1b      	lsrs	r3, r3, #8
 800a84c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a854:	fb02 f303 	mul.w	r3, r2, r3
 800a858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a85c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a860:	3380      	adds	r3, #128	; 0x80
 800a862:	0a1b      	lsrs	r3, r3, #8
 800a864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a86e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a876:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a87a:	e15e      	b.n	800ab3a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800a87c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10c      	bne.n	800a89c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a888:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a890:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e14c      	b.n	800ab36 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a89c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a8aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8ae:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a8b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8b2:	041a      	lsls	r2, r3, #16
 800a8b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a8be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d902      	bls.n	800a8ce <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a8c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a8ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a8d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a8d6:	fb02 f303 	mul.w	r3, r2, r3
 800a8da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a8de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe f876 	bl	80089dc <VL53L0X_isqrt>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	891b      	ldrh	r3, [r3, #8]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a906:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a90c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a90e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a910:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a914:	4a14      	ldr	r2, [pc, #80]	; (800a968 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	099b      	lsrs	r3, r3, #6
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a91e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a920:	041b      	lsls	r3, r3, #16
 800a922:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a926:	4a10      	ldr	r2, [pc, #64]	; (800a968 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a928:	fba2 2303 	umull	r2, r3, r2, r3
 800a92c:	099b      	lsrs	r3, r3, #6
 800a92e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a932:	021b      	lsls	r3, r3, #8
 800a934:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfb8      	it	lt
 800a942:	425b      	neglt	r3, r3
 800a944:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	7e1b      	ldrb	r3, [r3, #24]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a95c:	e033      	b.n	800a9c6 <VL53L0X_calc_sigma_estimate+0x30e>
 800a95e:	bf00      	nop
 800a960:	028f87ae 	.word	0x028f87ae
 800a964:	0006999a 	.word	0x0006999a
 800a968:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a96c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a96e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a972:	fbb2 f3f3 	udiv	r3, r2, r3
 800a976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a97c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a984:	fb02 f303 	mul.w	r3, r2, r3
 800a988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a98c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a992:	4413      	add	r3, r2
 800a994:	0c1b      	lsrs	r3, r3, #16
 800a996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a99a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a99e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a9a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a9a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9aa:	085b      	lsrs	r3, r3, #1
 800a9ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a9b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9b4:	fb03 f303 	mul.w	r3, r3, r3
 800a9b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a9bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9c0:	0b9b      	lsrs	r3, r3, #14
 800a9c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a9c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9cc:	fb02 f303 	mul.w	r3, r2, r3
 800a9d0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a9d8:	0c1b      	lsrs	r3, r3, #16
 800a9da:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	fb03 f303 	mul.w	r3, r3, r3
 800a9e2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a9e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a9e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a9f0:	0c1b      	lsrs	r3, r3, #16
 800a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f6:	fb03 f303 	mul.w	r3, r3, r3
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	4413      	add	r3, r2
 800aa02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800aa04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa06:	f7fd ffe9 	bl	80089dc <VL53L0X_isqrt>
 800aa0a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	041b      	lsls	r3, r3, #16
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	3332      	adds	r3, #50	; 0x32
 800aa16:	4a4b      	ldr	r2, [pc, #300]	; (800ab44 <VL53L0X_calc_sigma_estimate+0x48c>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	095a      	lsrs	r2, r3, #5
 800aa1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa20:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800aa28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa2c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800aa30:	fb02 f303 	mul.w	r3, r2, r3
 800aa34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800aa38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa3c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800aa40:	3308      	adds	r3, #8
 800aa42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800aa46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa4a:	4a3f      	ldr	r2, [pc, #252]	; (800ab48 <VL53L0X_calc_sigma_estimate+0x490>)
 800aa4c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa50:	0b5b      	lsrs	r3, r3, #13
 800aa52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800aa56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d902      	bls.n	800aa66 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800aa60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800aa66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800aa74:	4a35      	ldr	r2, [pc, #212]	; (800ab4c <VL53L0X_calc_sigma_estimate+0x494>)
 800aa76:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7a:	099b      	lsrs	r3, r3, #6
 800aa7c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800aa82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa86:	441a      	add	r2, r3
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fd ffa4 	bl	80089dc <VL53L0X_isqrt>
 800aa94:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	021b      	lsls	r3, r3, #8
 800aa9a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aaa2:	4a2a      	ldr	r2, [pc, #168]	; (800ab4c <VL53L0X_calc_sigma_estimate+0x494>)
 800aaa4:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa8:	099b      	lsrs	r3, r3, #6
 800aaaa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800aaac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aab0:	fb03 f303 	mul.w	r3, r3, r3
 800aab4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	fb03 f303 	mul.w	r3, r3, r3
 800aabc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800aabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	4413      	add	r3, r2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fd ff89 	bl	80089dc <VL53L0X_isqrt>
 800aaca:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aad2:	fb02 f303 	mul.w	r3, r2, r3
 800aad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800aada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d009      	beq.n	800aaf4 <VL53L0X_calc_sigma_estimate+0x43c>
 800aae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d005      	beq.n	800aaf4 <VL53L0X_calc_sigma_estimate+0x43c>
 800aae8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aaec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d903      	bls.n	800aafc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800aaf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ab02:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800ab0e:	6939      	ldr	r1, [r7, #16]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	9303      	str	r3, [sp, #12]
 800ab14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab18:	9302      	str	r3, [sp, #8]
 800ab1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff fca8 	bl	800a480 <VL53L0X_calc_dmax>
 800ab30:	4603      	mov	r3, r0
 800ab32:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab36:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	37c0      	adds	r7, #192	; 0xc0
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	51eb851f 	.word	0x51eb851f
 800ab48:	d1b71759 	.word	0xd1b71759
 800ab4c:	10624dd3 	.word	0x10624dd3

0800ab50 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b090      	sub	sp, #64	; 0x40
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	72fb      	strb	r3, [r7, #11]
 800ab60:	4613      	mov	r3, r2
 800ab62:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab64:	2300      	movs	r3, #0
 800ab66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800aba2:	7afb      	ldrb	r3, [r7, #11]
 800aba4:	10db      	asrs	r3, r3, #3
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	f003 030f 	and.w	r3, r3, #15
 800abac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800abb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d017      	beq.n	800abe8 <VL53L0X_get_pal_range_status+0x98>
 800abb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abbc:	2b05      	cmp	r3, #5
 800abbe:	d013      	beq.n	800abe8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800abc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abc4:	2b07      	cmp	r3, #7
 800abc6:	d00f      	beq.n	800abe8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800abc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abcc:	2b0c      	cmp	r3, #12
 800abce:	d00b      	beq.n	800abe8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800abd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abd4:	2b0d      	cmp	r3, #13
 800abd6:	d007      	beq.n	800abe8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800abd8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abdc:	2b0e      	cmp	r3, #14
 800abde:	d003      	beq.n	800abe8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800abe0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800abe4:	2b0f      	cmp	r3, #15
 800abe6:	d103      	bne.n	800abf0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800abe8:	2301      	movs	r3, #1
 800abea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800abee:	e002      	b.n	800abf6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800abf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d109      	bne.n	800ac12 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800abfe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ac02:	461a      	mov	r2, r3
 800ac04:	2100      	movs	r1, #0
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7fc f9ec 	bl	8006fe4 <VL53L0X_GetLimitCheckEnable>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800ac12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d02e      	beq.n	800ac78 <VL53L0X_get_pal_range_status+0x128>
 800ac1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d12a      	bne.n	800ac78 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800ac22:	f107 0310 	add.w	r3, r7, #16
 800ac26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ac2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff fd43 	bl	800a6b8 <VL53L0X_calc_sigma_estimate>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800ac38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d103      	bne.n	800ac48 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac46:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ac48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d113      	bne.n	800ac78 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ac50:	f107 0320 	add.w	r3, r7, #32
 800ac54:	461a      	mov	r2, r3
 800ac56:	2100      	movs	r1, #0
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f7fc fa49 	bl	80070f0 <VL53L0X_GetLimitCheckValue>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d006      	beq.n	800ac78 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ac6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d902      	bls.n	800ac78 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ac78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ac80:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ac84:	461a      	mov	r2, r3
 800ac86:	2102      	movs	r1, #2
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7fc f9ab 	bl	8006fe4 <VL53L0X_GetLimitCheckEnable>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800ac94:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d044      	beq.n	800ad26 <VL53L0X_get_pal_range_status+0x1d6>
 800ac9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d140      	bne.n	800ad26 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800aca4:	f107 031c 	add.w	r3, r7, #28
 800aca8:	461a      	mov	r2, r3
 800acaa:	2102      	movs	r1, #2
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f7fc fa1f 	bl	80070f0 <VL53L0X_GetLimitCheckValue>
 800acb2:	4603      	mov	r3, r0
 800acb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800acb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d107      	bne.n	800acd0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800acc0:	2201      	movs	r2, #1
 800acc2:	21ff      	movs	r1, #255	; 0xff
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f9bb 	bl	800b040 <VL53L0X_WrByte>
 800acca:	4603      	mov	r3, r0
 800accc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800acd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d109      	bne.n	800acec <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800acd8:	f107 0316 	add.w	r3, r7, #22
 800acdc:	461a      	mov	r2, r3
 800acde:	21b6      	movs	r1, #182	; 0xb6
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 fa59 	bl	800b198 <VL53L0X_RdWord>
 800ace6:	4603      	mov	r3, r0
 800ace8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800acec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d107      	bne.n	800ad04 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800acf4:	2200      	movs	r2, #0
 800acf6:	21ff      	movs	r1, #255	; 0xff
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f9a1 	bl	800b040 <VL53L0X_WrByte>
 800acfe:	4603      	mov	r3, r0
 800ad00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ad04:	8afb      	ldrh	r3, [r7, #22]
 800ad06:	025b      	lsls	r3, r3, #9
 800ad08:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad0e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d006      	beq.n	800ad26 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ad18:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ad1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d902      	bls.n	800ad26 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ad20:	2301      	movs	r3, #1
 800ad22:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ad26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d109      	bne.n	800ad42 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ad2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad32:	461a      	mov	r2, r3
 800ad34:	2103      	movs	r1, #3
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7fc f954 	bl	8006fe4 <VL53L0X_GetLimitCheckEnable>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ad42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d023      	beq.n	800ad92 <VL53L0X_get_pal_range_status+0x242>
 800ad4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d11f      	bne.n	800ad92 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ad52:	893b      	ldrh	r3, [r7, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad5c:	e005      	b.n	800ad6a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	021a      	lsls	r2, r3, #8
 800ad62:	893b      	ldrh	r3, [r7, #8]
 800ad64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ad6a:	f107 0318 	add.w	r3, r7, #24
 800ad6e:	461a      	mov	r2, r3
 800ad70:	2103      	movs	r1, #3
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f7fc f9bc 	bl	80070f0 <VL53L0X_GetLimitCheckValue>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ad84:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ad86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d202      	bcs.n	800ad92 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d14a      	bne.n	800ae30 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ad9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d103      	bne.n	800adaa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ada2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	701a      	strb	r2, [r3, #0]
 800ada8:	e042      	b.n	800ae30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800adaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d007      	beq.n	800adc2 <VL53L0X_get_pal_range_status+0x272>
 800adb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d003      	beq.n	800adc2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800adba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d103      	bne.n	800adca <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800adc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc4:	2205      	movs	r2, #5
 800adc6:	701a      	strb	r2, [r3, #0]
 800adc8:	e032      	b.n	800ae30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800adca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adce:	2b06      	cmp	r3, #6
 800add0:	d003      	beq.n	800adda <VL53L0X_get_pal_range_status+0x28a>
 800add2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800add6:	2b09      	cmp	r3, #9
 800add8:	d103      	bne.n	800ade2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800adda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800addc:	2204      	movs	r2, #4
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	e026      	b.n	800ae30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ade2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ade6:	2b08      	cmp	r3, #8
 800ade8:	d007      	beq.n	800adfa <VL53L0X_get_pal_range_status+0x2aa>
 800adea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adee:	2b0a      	cmp	r3, #10
 800adf0:	d003      	beq.n	800adfa <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800adf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d103      	bne.n	800ae02 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800adfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adfc:	2203      	movs	r2, #3
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e016      	b.n	800ae30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ae02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d003      	beq.n	800ae12 <VL53L0X_get_pal_range_status+0x2c2>
 800ae0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d103      	bne.n	800ae1a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800ae12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae14:	2202      	movs	r2, #2
 800ae16:	701a      	strb	r2, [r3, #0]
 800ae18:	e00a      	b.n	800ae30 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800ae1a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d103      	bne.n	800ae2a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800ae22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae24:	2201      	movs	r2, #1
 800ae26:	701a      	strb	r2, [r3, #0]
 800ae28:	e002      	b.n	800ae30 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800ae2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800ae30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d102      	bne.n	800ae3e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800ae38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ae3e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800ae42:	461a      	mov	r2, r3
 800ae44:	2101      	movs	r1, #1
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7fc f8cc 	bl	8006fe4 <VL53L0X_GetLimitCheckEnable>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800ae52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d14f      	bne.n	800aefa <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800ae5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <VL53L0X_get_pal_range_status+0x31a>
 800ae62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d103      	bne.n	800ae72 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae70:	e002      	b.n	800ae78 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ae7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800ae82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d003      	beq.n	800ae92 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800ae8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d103      	bne.n	800ae9a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800ae92:	2301      	movs	r3, #1
 800ae94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae98:	e002      	b.n	800aea0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aea6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800aeaa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <VL53L0X_get_pal_range_status+0x36a>
 800aeb2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d103      	bne.n	800aec2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800aeba:	2301      	movs	r3, #1
 800aebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec0:	e002      	b.n	800aec8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800aed2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <VL53L0X_get_pal_range_status+0x392>
 800aeda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d103      	bne.n	800aeea <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800aee2:	2301      	movs	r3, #1
 800aee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee8:	e002      	b.n	800aef0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aef6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aefa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800aefe:	4618      	mov	r0, r3
 800af00:	3740      	adds	r7, #64	; 0x40
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800af06:	b580      	push	{r7, lr}
 800af08:	b088      	sub	sp, #32
 800af0a:	af02      	add	r7, sp, #8
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	330a      	adds	r3, #10
 800af16:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800af24:	b299      	uxth	r1, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	b29a      	uxth	r2, r3
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	4613      	mov	r3, r2
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	f7f6 fee7 	bl	8001d04 <HAL_I2C_Master_Transmit>
 800af36:	4603      	mov	r3, r0
 800af38:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800af3a:	693b      	ldr	r3, [r7, #16]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800af44:	b580      	push	{r7, lr}
 800af46:	b088      	sub	sp, #32
 800af48:	af02      	add	r7, sp, #8
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	330a      	adds	r3, #10
 800af54:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800af62:	f043 0301 	orr.w	r3, r3, #1
 800af66:	b2db      	uxtb	r3, r3
 800af68:	b299      	uxth	r1, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	4613      	mov	r3, r2
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	f7f6 ffb9 	bl	8001eec <HAL_I2C_Master_Receive>
 800af7a:	4603      	mov	r3, r0
 800af7c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800af7e:	693b      	ldr	r3, [r7, #16]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	460b      	mov	r3, r1
 800af96:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af98:	2300      	movs	r3, #0
 800af9a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b3f      	cmp	r3, #63	; 0x3f
 800afa0:	d902      	bls.n	800afa8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800afa2:	f06f 0303 	mvn.w	r3, #3
 800afa6:	e016      	b.n	800afd6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800afa8:	4a0d      	ldr	r2, [pc, #52]	; (800afe0 <VL53L0X_WriteMulti+0x58>)
 800afaa:	7afb      	ldrb	r3, [r7, #11]
 800afac:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	480c      	ldr	r0, [pc, #48]	; (800afe4 <VL53L0X_WriteMulti+0x5c>)
 800afb4:	f000 f99e 	bl	800b2f4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	3301      	adds	r3, #1
 800afbc:	461a      	mov	r2, r3
 800afbe:	4908      	ldr	r1, [pc, #32]	; (800afe0 <VL53L0X_WriteMulti+0x58>)
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff ffa0 	bl	800af06 <_I2CWrite>
 800afc6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800afce:	23ec      	movs	r3, #236	; 0xec
 800afd0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800afd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200007e8 	.word	0x200007e8
 800afe4:	200007e9 	.word	0x200007e9

0800afe8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	607a      	str	r2, [r7, #4]
 800aff2:	603b      	str	r3, [r7, #0]
 800aff4:	460b      	mov	r3, r1
 800aff6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aff8:	2300      	movs	r3, #0
 800affa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800affc:	f107 030b 	add.w	r3, r7, #11
 800b000:	2201      	movs	r2, #1
 800b002:	4619      	mov	r1, r3
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7ff ff7e 	bl	800af06 <_I2CWrite>
 800b00a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b012:	23ec      	movs	r3, #236	; 0xec
 800b014:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b016:	e00c      	b.n	800b032 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff ff91 	bl	800af44 <_I2CRead>
 800b022:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d002      	beq.n	800b030 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b02a:	23ec      	movs	r3, #236	; 0xec
 800b02c:	75fb      	strb	r3, [r7, #23]
 800b02e:	e000      	b.n	800b032 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b030:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b032:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	70fb      	strb	r3, [r7, #3]
 800b04c:	4613      	mov	r3, r2
 800b04e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b054:	4a0b      	ldr	r2, [pc, #44]	; (800b084 <VL53L0X_WrByte+0x44>)
 800b056:	78fb      	ldrb	r3, [r7, #3]
 800b058:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b05a:	4a0a      	ldr	r2, [pc, #40]	; (800b084 <VL53L0X_WrByte+0x44>)
 800b05c:	78bb      	ldrb	r3, [r7, #2]
 800b05e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b060:	2202      	movs	r2, #2
 800b062:	4908      	ldr	r1, [pc, #32]	; (800b084 <VL53L0X_WrByte+0x44>)
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7ff ff4e 	bl	800af06 <_I2CWrite>
 800b06a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b072:	23ec      	movs	r3, #236	; 0xec
 800b074:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200007e8 	.word	0x200007e8

0800b088 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	70fb      	strb	r3, [r7, #3]
 800b094:	4613      	mov	r3, r2
 800b096:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b09c:	4a0e      	ldr	r2, [pc, #56]	; (800b0d8 <VL53L0X_WrWord+0x50>)
 800b09e:	78fb      	ldrb	r3, [r7, #3]
 800b0a0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b0a2:	883b      	ldrh	r3, [r7, #0]
 800b0a4:	0a1b      	lsrs	r3, r3, #8
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <VL53L0X_WrWord+0x50>)
 800b0ac:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b0ae:	883b      	ldrh	r3, [r7, #0]
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	4b09      	ldr	r3, [pc, #36]	; (800b0d8 <VL53L0X_WrWord+0x50>)
 800b0b4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	4907      	ldr	r1, [pc, #28]	; (800b0d8 <VL53L0X_WrWord+0x50>)
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff ff23 	bl	800af06 <_I2CWrite>
 800b0c0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b0c8:	23ec      	movs	r3, #236	; 0xec
 800b0ca:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b0cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	200007e8 	.word	0x200007e8

0800b0dc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	70fb      	strb	r3, [r7, #3]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70bb      	strb	r3, [r7, #2]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b0fa:	f107 020e 	add.w	r2, r7, #14
 800b0fe:	78fb      	ldrb	r3, [r7, #3]
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f81e 	bl	800b144 <VL53L0X_RdByte>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d110      	bne.n	800b136 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b114:	7bba      	ldrb	r2, [r7, #14]
 800b116:	78bb      	ldrb	r3, [r7, #2]
 800b118:	4013      	ands	r3, r2
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	787b      	ldrb	r3, [r7, #1]
 800b11e:	4313      	orrs	r3, r2
 800b120:	b2db      	uxtb	r3, r3
 800b122:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b124:	7bba      	ldrb	r2, [r7, #14]
 800b126:	78fb      	ldrb	r3, [r7, #3]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff ff88 	bl	800b040 <VL53L0X_WrByte>
 800b130:	4603      	mov	r3, r0
 800b132:	73fb      	strb	r3, [r7, #15]
 800b134:	e000      	b.n	800b138 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b136:	bf00      	nop
done:
    return Status;
 800b138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	460b      	mov	r3, r1
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b152:	2300      	movs	r3, #0
 800b154:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b156:	f107 030b 	add.w	r3, r7, #11
 800b15a:	2201      	movs	r2, #1
 800b15c:	4619      	mov	r1, r3
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f7ff fed1 	bl	800af06 <_I2CWrite>
 800b164:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b16c:	23ec      	movs	r3, #236	; 0xec
 800b16e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b170:	e00c      	b.n	800b18c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b172:	2201      	movs	r2, #1
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f7ff fee4 	bl	800af44 <_I2CRead>
 800b17c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b184:	23ec      	movs	r3, #236	; 0xec
 800b186:	75fb      	strb	r3, [r7, #23]
 800b188:	e000      	b.n	800b18c <VL53L0X_RdByte+0x48>
    }
done:
 800b18a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b18c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b1aa:	f107 030b 	add.w	r3, r7, #11
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f7ff fea7 	bl	800af06 <_I2CWrite>
 800b1b8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1c0:	23ec      	movs	r3, #236	; 0xec
 800b1c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b1c4:	e017      	b.n	800b1f6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	490e      	ldr	r1, [pc, #56]	; (800b204 <VL53L0X_RdWord+0x6c>)
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff feba 	bl	800af44 <_I2CRead>
 800b1d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b1d8:	23ec      	movs	r3, #236	; 0xec
 800b1da:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b1dc:	e00b      	b.n	800b1f6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b1de:	4b09      	ldr	r3, [pc, #36]	; (800b204 <VL53L0X_RdWord+0x6c>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	021b      	lsls	r3, r3, #8
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	4b06      	ldr	r3, [pc, #24]	; (800b204 <VL53L0X_RdWord+0x6c>)
 800b1ea:	785b      	ldrb	r3, [r3, #1]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b1f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	200007e8 	.word	0x200007e8

0800b208 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	460b      	mov	r3, r1
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b216:	2300      	movs	r3, #0
 800b218:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b21a:	f107 030b 	add.w	r3, r7, #11
 800b21e:	2201      	movs	r2, #1
 800b220:	4619      	mov	r1, r3
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7ff fe6f 	bl	800af06 <_I2CWrite>
 800b228:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d002      	beq.n	800b236 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b230:	23ec      	movs	r3, #236	; 0xec
 800b232:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b234:	e01b      	b.n	800b26e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b236:	2204      	movs	r2, #4
 800b238:	4910      	ldr	r1, [pc, #64]	; (800b27c <VL53L0X_RdDWord+0x74>)
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f7ff fe82 	bl	800af44 <_I2CRead>
 800b240:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b248:	23ec      	movs	r3, #236	; 0xec
 800b24a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b24c:	e00f      	b.n	800b26e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b24e:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <VL53L0X_RdDWord+0x74>)
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	061a      	lsls	r2, r3, #24
 800b254:	4b09      	ldr	r3, [pc, #36]	; (800b27c <VL53L0X_RdDWord+0x74>)
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	041b      	lsls	r3, r3, #16
 800b25a:	441a      	add	r2, r3
 800b25c:	4b07      	ldr	r3, [pc, #28]	; (800b27c <VL53L0X_RdDWord+0x74>)
 800b25e:	789b      	ldrb	r3, [r3, #2]
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	4413      	add	r3, r2
 800b264:	4a05      	ldr	r2, [pc, #20]	; (800b27c <VL53L0X_RdDWord+0x74>)
 800b266:	78d2      	ldrb	r2, [r2, #3]
 800b268:	441a      	add	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	200007e8 	.word	0x200007e8

0800b280 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b28c:	2002      	movs	r0, #2
 800b28e:	f7f6 f9c9 	bl	8001624 <HAL_Delay>
    return status;
 800b292:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
	...

0800b2a0 <__errno>:
 800b2a0:	4b01      	ldr	r3, [pc, #4]	; (800b2a8 <__errno+0x8>)
 800b2a2:	6818      	ldr	r0, [r3, #0]
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	200002cc 	.word	0x200002cc

0800b2ac <__libc_init_array>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	4d0d      	ldr	r5, [pc, #52]	; (800b2e4 <__libc_init_array+0x38>)
 800b2b0:	4c0d      	ldr	r4, [pc, #52]	; (800b2e8 <__libc_init_array+0x3c>)
 800b2b2:	1b64      	subs	r4, r4, r5
 800b2b4:	10a4      	asrs	r4, r4, #2
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	42a6      	cmp	r6, r4
 800b2ba:	d109      	bne.n	800b2d0 <__libc_init_array+0x24>
 800b2bc:	4d0b      	ldr	r5, [pc, #44]	; (800b2ec <__libc_init_array+0x40>)
 800b2be:	4c0c      	ldr	r4, [pc, #48]	; (800b2f0 <__libc_init_array+0x44>)
 800b2c0:	f000 fc96 	bl	800bbf0 <_init>
 800b2c4:	1b64      	subs	r4, r4, r5
 800b2c6:	10a4      	asrs	r4, r4, #2
 800b2c8:	2600      	movs	r6, #0
 800b2ca:	42a6      	cmp	r6, r4
 800b2cc:	d105      	bne.n	800b2da <__libc_init_array+0x2e>
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d4:	4798      	blx	r3
 800b2d6:	3601      	adds	r6, #1
 800b2d8:	e7ee      	b.n	800b2b8 <__libc_init_array+0xc>
 800b2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2de:	4798      	blx	r3
 800b2e0:	3601      	adds	r6, #1
 800b2e2:	e7f2      	b.n	800b2ca <__libc_init_array+0x1e>
 800b2e4:	0800bce8 	.word	0x0800bce8
 800b2e8:	0800bce8 	.word	0x0800bce8
 800b2ec:	0800bce8 	.word	0x0800bce8
 800b2f0:	0800bcec 	.word	0x0800bcec

0800b2f4 <memcpy>:
 800b2f4:	440a      	add	r2, r1
 800b2f6:	4291      	cmp	r1, r2
 800b2f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2fc:	d100      	bne.n	800b300 <memcpy+0xc>
 800b2fe:	4770      	bx	lr
 800b300:	b510      	push	{r4, lr}
 800b302:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b30a:	4291      	cmp	r1, r2
 800b30c:	d1f9      	bne.n	800b302 <memcpy+0xe>
 800b30e:	bd10      	pop	{r4, pc}

0800b310 <memset>:
 800b310:	4402      	add	r2, r0
 800b312:	4603      	mov	r3, r0
 800b314:	4293      	cmp	r3, r2
 800b316:	d100      	bne.n	800b31a <memset+0xa>
 800b318:	4770      	bx	lr
 800b31a:	f803 1b01 	strb.w	r1, [r3], #1
 800b31e:	e7f9      	b.n	800b314 <memset+0x4>

0800b320 <siprintf>:
 800b320:	b40e      	push	{r1, r2, r3}
 800b322:	b500      	push	{lr}
 800b324:	b09c      	sub	sp, #112	; 0x70
 800b326:	ab1d      	add	r3, sp, #116	; 0x74
 800b328:	9002      	str	r0, [sp, #8]
 800b32a:	9006      	str	r0, [sp, #24]
 800b32c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b330:	4809      	ldr	r0, [pc, #36]	; (800b358 <siprintf+0x38>)
 800b332:	9107      	str	r1, [sp, #28]
 800b334:	9104      	str	r1, [sp, #16]
 800b336:	4909      	ldr	r1, [pc, #36]	; (800b35c <siprintf+0x3c>)
 800b338:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33c:	9105      	str	r1, [sp, #20]
 800b33e:	6800      	ldr	r0, [r0, #0]
 800b340:	9301      	str	r3, [sp, #4]
 800b342:	a902      	add	r1, sp, #8
 800b344:	f000 f870 	bl	800b428 <_svfiprintf_r>
 800b348:	9b02      	ldr	r3, [sp, #8]
 800b34a:	2200      	movs	r2, #0
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	b01c      	add	sp, #112	; 0x70
 800b350:	f85d eb04 	ldr.w	lr, [sp], #4
 800b354:	b003      	add	sp, #12
 800b356:	4770      	bx	lr
 800b358:	200002cc 	.word	0x200002cc
 800b35c:	ffff0208 	.word	0xffff0208

0800b360 <strcpy>:
 800b360:	4603      	mov	r3, r0
 800b362:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b366:	f803 2b01 	strb.w	r2, [r3], #1
 800b36a:	2a00      	cmp	r2, #0
 800b36c:	d1f9      	bne.n	800b362 <strcpy+0x2>
 800b36e:	4770      	bx	lr

0800b370 <__ssputs_r>:
 800b370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b374:	688e      	ldr	r6, [r1, #8]
 800b376:	429e      	cmp	r6, r3
 800b378:	4682      	mov	sl, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	4690      	mov	r8, r2
 800b37e:	461f      	mov	r7, r3
 800b380:	d838      	bhi.n	800b3f4 <__ssputs_r+0x84>
 800b382:	898a      	ldrh	r2, [r1, #12]
 800b384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b388:	d032      	beq.n	800b3f0 <__ssputs_r+0x80>
 800b38a:	6825      	ldr	r5, [r4, #0]
 800b38c:	6909      	ldr	r1, [r1, #16]
 800b38e:	eba5 0901 	sub.w	r9, r5, r1
 800b392:	6965      	ldr	r5, [r4, #20]
 800b394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b398:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b39c:	3301      	adds	r3, #1
 800b39e:	444b      	add	r3, r9
 800b3a0:	106d      	asrs	r5, r5, #1
 800b3a2:	429d      	cmp	r5, r3
 800b3a4:	bf38      	it	cc
 800b3a6:	461d      	movcc	r5, r3
 800b3a8:	0553      	lsls	r3, r2, #21
 800b3aa:	d531      	bpl.n	800b410 <__ssputs_r+0xa0>
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f000 fb55 	bl	800ba5c <_malloc_r>
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	b950      	cbnz	r0, 800b3cc <__ssputs_r+0x5c>
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	f8ca 3000 	str.w	r3, [sl]
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3cc:	6921      	ldr	r1, [r4, #16]
 800b3ce:	464a      	mov	r2, r9
 800b3d0:	f7ff ff90 	bl	800b2f4 <memcpy>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	6126      	str	r6, [r4, #16]
 800b3e2:	6165      	str	r5, [r4, #20]
 800b3e4:	444e      	add	r6, r9
 800b3e6:	eba5 0509 	sub.w	r5, r5, r9
 800b3ea:	6026      	str	r6, [r4, #0]
 800b3ec:	60a5      	str	r5, [r4, #8]
 800b3ee:	463e      	mov	r6, r7
 800b3f0:	42be      	cmp	r6, r7
 800b3f2:	d900      	bls.n	800b3f6 <__ssputs_r+0x86>
 800b3f4:	463e      	mov	r6, r7
 800b3f6:	6820      	ldr	r0, [r4, #0]
 800b3f8:	4632      	mov	r2, r6
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	f000 faa8 	bl	800b950 <memmove>
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	1b9b      	subs	r3, r3, r6
 800b404:	60a3      	str	r3, [r4, #8]
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	4433      	add	r3, r6
 800b40a:	6023      	str	r3, [r4, #0]
 800b40c:	2000      	movs	r0, #0
 800b40e:	e7db      	b.n	800b3c8 <__ssputs_r+0x58>
 800b410:	462a      	mov	r2, r5
 800b412:	f000 fb97 	bl	800bb44 <_realloc_r>
 800b416:	4606      	mov	r6, r0
 800b418:	2800      	cmp	r0, #0
 800b41a:	d1e1      	bne.n	800b3e0 <__ssputs_r+0x70>
 800b41c:	6921      	ldr	r1, [r4, #16]
 800b41e:	4650      	mov	r0, sl
 800b420:	f000 fab0 	bl	800b984 <_free_r>
 800b424:	e7c7      	b.n	800b3b6 <__ssputs_r+0x46>
	...

0800b428 <_svfiprintf_r>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	4698      	mov	r8, r3
 800b42e:	898b      	ldrh	r3, [r1, #12]
 800b430:	061b      	lsls	r3, r3, #24
 800b432:	b09d      	sub	sp, #116	; 0x74
 800b434:	4607      	mov	r7, r0
 800b436:	460d      	mov	r5, r1
 800b438:	4614      	mov	r4, r2
 800b43a:	d50e      	bpl.n	800b45a <_svfiprintf_r+0x32>
 800b43c:	690b      	ldr	r3, [r1, #16]
 800b43e:	b963      	cbnz	r3, 800b45a <_svfiprintf_r+0x32>
 800b440:	2140      	movs	r1, #64	; 0x40
 800b442:	f000 fb0b 	bl	800ba5c <_malloc_r>
 800b446:	6028      	str	r0, [r5, #0]
 800b448:	6128      	str	r0, [r5, #16]
 800b44a:	b920      	cbnz	r0, 800b456 <_svfiprintf_r+0x2e>
 800b44c:	230c      	movs	r3, #12
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e0d1      	b.n	800b5fa <_svfiprintf_r+0x1d2>
 800b456:	2340      	movs	r3, #64	; 0x40
 800b458:	616b      	str	r3, [r5, #20]
 800b45a:	2300      	movs	r3, #0
 800b45c:	9309      	str	r3, [sp, #36]	; 0x24
 800b45e:	2320      	movs	r3, #32
 800b460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b464:	f8cd 800c 	str.w	r8, [sp, #12]
 800b468:	2330      	movs	r3, #48	; 0x30
 800b46a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b614 <_svfiprintf_r+0x1ec>
 800b46e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b472:	f04f 0901 	mov.w	r9, #1
 800b476:	4623      	mov	r3, r4
 800b478:	469a      	mov	sl, r3
 800b47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47e:	b10a      	cbz	r2, 800b484 <_svfiprintf_r+0x5c>
 800b480:	2a25      	cmp	r2, #37	; 0x25
 800b482:	d1f9      	bne.n	800b478 <_svfiprintf_r+0x50>
 800b484:	ebba 0b04 	subs.w	fp, sl, r4
 800b488:	d00b      	beq.n	800b4a2 <_svfiprintf_r+0x7a>
 800b48a:	465b      	mov	r3, fp
 800b48c:	4622      	mov	r2, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	4638      	mov	r0, r7
 800b492:	f7ff ff6d 	bl	800b370 <__ssputs_r>
 800b496:	3001      	adds	r0, #1
 800b498:	f000 80aa 	beq.w	800b5f0 <_svfiprintf_r+0x1c8>
 800b49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b49e:	445a      	add	r2, fp
 800b4a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 80a2 	beq.w	800b5f0 <_svfiprintf_r+0x1c8>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	9307      	str	r3, [sp, #28]
 800b4be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c4:	4654      	mov	r4, sl
 800b4c6:	2205      	movs	r2, #5
 800b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4cc:	4851      	ldr	r0, [pc, #324]	; (800b614 <_svfiprintf_r+0x1ec>)
 800b4ce:	f7f4 fe97 	bl	8000200 <memchr>
 800b4d2:	9a04      	ldr	r2, [sp, #16]
 800b4d4:	b9d8      	cbnz	r0, 800b50e <_svfiprintf_r+0xe6>
 800b4d6:	06d0      	lsls	r0, r2, #27
 800b4d8:	bf44      	itt	mi
 800b4da:	2320      	movmi	r3, #32
 800b4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e0:	0711      	lsls	r1, r2, #28
 800b4e2:	bf44      	itt	mi
 800b4e4:	232b      	movmi	r3, #43	; 0x2b
 800b4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f0:	d015      	beq.n	800b51e <_svfiprintf_r+0xf6>
 800b4f2:	9a07      	ldr	r2, [sp, #28]
 800b4f4:	4654      	mov	r4, sl
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f04f 0c0a 	mov.w	ip, #10
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b502:	3b30      	subs	r3, #48	; 0x30
 800b504:	2b09      	cmp	r3, #9
 800b506:	d94e      	bls.n	800b5a6 <_svfiprintf_r+0x17e>
 800b508:	b1b0      	cbz	r0, 800b538 <_svfiprintf_r+0x110>
 800b50a:	9207      	str	r2, [sp, #28]
 800b50c:	e014      	b.n	800b538 <_svfiprintf_r+0x110>
 800b50e:	eba0 0308 	sub.w	r3, r0, r8
 800b512:	fa09 f303 	lsl.w	r3, r9, r3
 800b516:	4313      	orrs	r3, r2
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	46a2      	mov	sl, r4
 800b51c:	e7d2      	b.n	800b4c4 <_svfiprintf_r+0x9c>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	1d19      	adds	r1, r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	9103      	str	r1, [sp, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	bfbb      	ittet	lt
 800b52a:	425b      	neglt	r3, r3
 800b52c:	f042 0202 	orrlt.w	r2, r2, #2
 800b530:	9307      	strge	r3, [sp, #28]
 800b532:	9307      	strlt	r3, [sp, #28]
 800b534:	bfb8      	it	lt
 800b536:	9204      	strlt	r2, [sp, #16]
 800b538:	7823      	ldrb	r3, [r4, #0]
 800b53a:	2b2e      	cmp	r3, #46	; 0x2e
 800b53c:	d10c      	bne.n	800b558 <_svfiprintf_r+0x130>
 800b53e:	7863      	ldrb	r3, [r4, #1]
 800b540:	2b2a      	cmp	r3, #42	; 0x2a
 800b542:	d135      	bne.n	800b5b0 <_svfiprintf_r+0x188>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	1d1a      	adds	r2, r3, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	9203      	str	r2, [sp, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfb8      	it	lt
 800b550:	f04f 33ff 	movlt.w	r3, #4294967295
 800b554:	3402      	adds	r4, #2
 800b556:	9305      	str	r3, [sp, #20]
 800b558:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b624 <_svfiprintf_r+0x1fc>
 800b55c:	7821      	ldrb	r1, [r4, #0]
 800b55e:	2203      	movs	r2, #3
 800b560:	4650      	mov	r0, sl
 800b562:	f7f4 fe4d 	bl	8000200 <memchr>
 800b566:	b140      	cbz	r0, 800b57a <_svfiprintf_r+0x152>
 800b568:	2340      	movs	r3, #64	; 0x40
 800b56a:	eba0 000a 	sub.w	r0, r0, sl
 800b56e:	fa03 f000 	lsl.w	r0, r3, r0
 800b572:	9b04      	ldr	r3, [sp, #16]
 800b574:	4303      	orrs	r3, r0
 800b576:	3401      	adds	r4, #1
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57e:	4826      	ldr	r0, [pc, #152]	; (800b618 <_svfiprintf_r+0x1f0>)
 800b580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b584:	2206      	movs	r2, #6
 800b586:	f7f4 fe3b 	bl	8000200 <memchr>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d038      	beq.n	800b600 <_svfiprintf_r+0x1d8>
 800b58e:	4b23      	ldr	r3, [pc, #140]	; (800b61c <_svfiprintf_r+0x1f4>)
 800b590:	bb1b      	cbnz	r3, 800b5da <_svfiprintf_r+0x1b2>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	3307      	adds	r3, #7
 800b596:	f023 0307 	bic.w	r3, r3, #7
 800b59a:	3308      	adds	r3, #8
 800b59c:	9303      	str	r3, [sp, #12]
 800b59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a0:	4433      	add	r3, r6
 800b5a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a4:	e767      	b.n	800b476 <_svfiprintf_r+0x4e>
 800b5a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	e7a5      	b.n	800b4fc <_svfiprintf_r+0xd4>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	9305      	str	r3, [sp, #20]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	f04f 0c0a 	mov.w	ip, #10
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c2:	3a30      	subs	r2, #48	; 0x30
 800b5c4:	2a09      	cmp	r2, #9
 800b5c6:	d903      	bls.n	800b5d0 <_svfiprintf_r+0x1a8>
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d0c5      	beq.n	800b558 <_svfiprintf_r+0x130>
 800b5cc:	9105      	str	r1, [sp, #20]
 800b5ce:	e7c3      	b.n	800b558 <_svfiprintf_r+0x130>
 800b5d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e7f0      	b.n	800b5bc <_svfiprintf_r+0x194>
 800b5da:	ab03      	add	r3, sp, #12
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	462a      	mov	r2, r5
 800b5e0:	4b0f      	ldr	r3, [pc, #60]	; (800b620 <_svfiprintf_r+0x1f8>)
 800b5e2:	a904      	add	r1, sp, #16
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f3af 8000 	nop.w
 800b5ea:	1c42      	adds	r2, r0, #1
 800b5ec:	4606      	mov	r6, r0
 800b5ee:	d1d6      	bne.n	800b59e <_svfiprintf_r+0x176>
 800b5f0:	89ab      	ldrh	r3, [r5, #12]
 800b5f2:	065b      	lsls	r3, r3, #25
 800b5f4:	f53f af2c 	bmi.w	800b450 <_svfiprintf_r+0x28>
 800b5f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5fa:	b01d      	add	sp, #116	; 0x74
 800b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b600:	ab03      	add	r3, sp, #12
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	462a      	mov	r2, r5
 800b606:	4b06      	ldr	r3, [pc, #24]	; (800b620 <_svfiprintf_r+0x1f8>)
 800b608:	a904      	add	r1, sp, #16
 800b60a:	4638      	mov	r0, r7
 800b60c:	f000 f87a 	bl	800b704 <_printf_i>
 800b610:	e7eb      	b.n	800b5ea <_svfiprintf_r+0x1c2>
 800b612:	bf00      	nop
 800b614:	0800bcac 	.word	0x0800bcac
 800b618:	0800bcb6 	.word	0x0800bcb6
 800b61c:	00000000 	.word	0x00000000
 800b620:	0800b371 	.word	0x0800b371
 800b624:	0800bcb2 	.word	0x0800bcb2

0800b628 <_printf_common>:
 800b628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b62c:	4616      	mov	r6, r2
 800b62e:	4699      	mov	r9, r3
 800b630:	688a      	ldr	r2, [r1, #8]
 800b632:	690b      	ldr	r3, [r1, #16]
 800b634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b638:	4293      	cmp	r3, r2
 800b63a:	bfb8      	it	lt
 800b63c:	4613      	movlt	r3, r2
 800b63e:	6033      	str	r3, [r6, #0]
 800b640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b644:	4607      	mov	r7, r0
 800b646:	460c      	mov	r4, r1
 800b648:	b10a      	cbz	r2, 800b64e <_printf_common+0x26>
 800b64a:	3301      	adds	r3, #1
 800b64c:	6033      	str	r3, [r6, #0]
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	0699      	lsls	r1, r3, #26
 800b652:	bf42      	ittt	mi
 800b654:	6833      	ldrmi	r3, [r6, #0]
 800b656:	3302      	addmi	r3, #2
 800b658:	6033      	strmi	r3, [r6, #0]
 800b65a:	6825      	ldr	r5, [r4, #0]
 800b65c:	f015 0506 	ands.w	r5, r5, #6
 800b660:	d106      	bne.n	800b670 <_printf_common+0x48>
 800b662:	f104 0a19 	add.w	sl, r4, #25
 800b666:	68e3      	ldr	r3, [r4, #12]
 800b668:	6832      	ldr	r2, [r6, #0]
 800b66a:	1a9b      	subs	r3, r3, r2
 800b66c:	42ab      	cmp	r3, r5
 800b66e:	dc26      	bgt.n	800b6be <_printf_common+0x96>
 800b670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b674:	1e13      	subs	r3, r2, #0
 800b676:	6822      	ldr	r2, [r4, #0]
 800b678:	bf18      	it	ne
 800b67a:	2301      	movne	r3, #1
 800b67c:	0692      	lsls	r2, r2, #26
 800b67e:	d42b      	bmi.n	800b6d8 <_printf_common+0xb0>
 800b680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b684:	4649      	mov	r1, r9
 800b686:	4638      	mov	r0, r7
 800b688:	47c0      	blx	r8
 800b68a:	3001      	adds	r0, #1
 800b68c:	d01e      	beq.n	800b6cc <_printf_common+0xa4>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	68e5      	ldr	r5, [r4, #12]
 800b692:	6832      	ldr	r2, [r6, #0]
 800b694:	f003 0306 	and.w	r3, r3, #6
 800b698:	2b04      	cmp	r3, #4
 800b69a:	bf08      	it	eq
 800b69c:	1aad      	subeq	r5, r5, r2
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	6922      	ldr	r2, [r4, #16]
 800b6a2:	bf0c      	ite	eq
 800b6a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6a8:	2500      	movne	r5, #0
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	bfc4      	itt	gt
 800b6ae:	1a9b      	subgt	r3, r3, r2
 800b6b0:	18ed      	addgt	r5, r5, r3
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	341a      	adds	r4, #26
 800b6b6:	42b5      	cmp	r5, r6
 800b6b8:	d11a      	bne.n	800b6f0 <_printf_common+0xc8>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	e008      	b.n	800b6d0 <_printf_common+0xa8>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	4652      	mov	r2, sl
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	47c0      	blx	r8
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d103      	bne.n	800b6d4 <_printf_common+0xac>
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	e7c6      	b.n	800b666 <_printf_common+0x3e>
 800b6d8:	18e1      	adds	r1, r4, r3
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	2030      	movs	r0, #48	; 0x30
 800b6de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6e2:	4422      	add	r2, r4
 800b6e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6ec:	3302      	adds	r3, #2
 800b6ee:	e7c7      	b.n	800b680 <_printf_common+0x58>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	47c0      	blx	r8
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	d0e6      	beq.n	800b6cc <_printf_common+0xa4>
 800b6fe:	3601      	adds	r6, #1
 800b700:	e7d9      	b.n	800b6b6 <_printf_common+0x8e>
	...

0800b704 <_printf_i>:
 800b704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b708:	7e0f      	ldrb	r7, [r1, #24]
 800b70a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b70c:	2f78      	cmp	r7, #120	; 0x78
 800b70e:	4691      	mov	r9, r2
 800b710:	4680      	mov	r8, r0
 800b712:	460c      	mov	r4, r1
 800b714:	469a      	mov	sl, r3
 800b716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b71a:	d807      	bhi.n	800b72c <_printf_i+0x28>
 800b71c:	2f62      	cmp	r7, #98	; 0x62
 800b71e:	d80a      	bhi.n	800b736 <_printf_i+0x32>
 800b720:	2f00      	cmp	r7, #0
 800b722:	f000 80d8 	beq.w	800b8d6 <_printf_i+0x1d2>
 800b726:	2f58      	cmp	r7, #88	; 0x58
 800b728:	f000 80a3 	beq.w	800b872 <_printf_i+0x16e>
 800b72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b734:	e03a      	b.n	800b7ac <_printf_i+0xa8>
 800b736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b73a:	2b15      	cmp	r3, #21
 800b73c:	d8f6      	bhi.n	800b72c <_printf_i+0x28>
 800b73e:	a101      	add	r1, pc, #4	; (adr r1, 800b744 <_printf_i+0x40>)
 800b740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b744:	0800b79d 	.word	0x0800b79d
 800b748:	0800b7b1 	.word	0x0800b7b1
 800b74c:	0800b72d 	.word	0x0800b72d
 800b750:	0800b72d 	.word	0x0800b72d
 800b754:	0800b72d 	.word	0x0800b72d
 800b758:	0800b72d 	.word	0x0800b72d
 800b75c:	0800b7b1 	.word	0x0800b7b1
 800b760:	0800b72d 	.word	0x0800b72d
 800b764:	0800b72d 	.word	0x0800b72d
 800b768:	0800b72d 	.word	0x0800b72d
 800b76c:	0800b72d 	.word	0x0800b72d
 800b770:	0800b8bd 	.word	0x0800b8bd
 800b774:	0800b7e1 	.word	0x0800b7e1
 800b778:	0800b89f 	.word	0x0800b89f
 800b77c:	0800b72d 	.word	0x0800b72d
 800b780:	0800b72d 	.word	0x0800b72d
 800b784:	0800b8df 	.word	0x0800b8df
 800b788:	0800b72d 	.word	0x0800b72d
 800b78c:	0800b7e1 	.word	0x0800b7e1
 800b790:	0800b72d 	.word	0x0800b72d
 800b794:	0800b72d 	.word	0x0800b72d
 800b798:	0800b8a7 	.word	0x0800b8a7
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	1d1a      	adds	r2, r3, #4
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	602a      	str	r2, [r5, #0]
 800b7a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e0a3      	b.n	800b8f8 <_printf_i+0x1f4>
 800b7b0:	6820      	ldr	r0, [r4, #0]
 800b7b2:	6829      	ldr	r1, [r5, #0]
 800b7b4:	0606      	lsls	r6, r0, #24
 800b7b6:	f101 0304 	add.w	r3, r1, #4
 800b7ba:	d50a      	bpl.n	800b7d2 <_printf_i+0xce>
 800b7bc:	680e      	ldr	r6, [r1, #0]
 800b7be:	602b      	str	r3, [r5, #0]
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	da03      	bge.n	800b7cc <_printf_i+0xc8>
 800b7c4:	232d      	movs	r3, #45	; 0x2d
 800b7c6:	4276      	negs	r6, r6
 800b7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7cc:	485e      	ldr	r0, [pc, #376]	; (800b948 <_printf_i+0x244>)
 800b7ce:	230a      	movs	r3, #10
 800b7d0:	e019      	b.n	800b806 <_printf_i+0x102>
 800b7d2:	680e      	ldr	r6, [r1, #0]
 800b7d4:	602b      	str	r3, [r5, #0]
 800b7d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7da:	bf18      	it	ne
 800b7dc:	b236      	sxthne	r6, r6
 800b7de:	e7ef      	b.n	800b7c0 <_printf_i+0xbc>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	6820      	ldr	r0, [r4, #0]
 800b7e4:	1d19      	adds	r1, r3, #4
 800b7e6:	6029      	str	r1, [r5, #0]
 800b7e8:	0601      	lsls	r1, r0, #24
 800b7ea:	d501      	bpl.n	800b7f0 <_printf_i+0xec>
 800b7ec:	681e      	ldr	r6, [r3, #0]
 800b7ee:	e002      	b.n	800b7f6 <_printf_i+0xf2>
 800b7f0:	0646      	lsls	r6, r0, #25
 800b7f2:	d5fb      	bpl.n	800b7ec <_printf_i+0xe8>
 800b7f4:	881e      	ldrh	r6, [r3, #0]
 800b7f6:	4854      	ldr	r0, [pc, #336]	; (800b948 <_printf_i+0x244>)
 800b7f8:	2f6f      	cmp	r7, #111	; 0x6f
 800b7fa:	bf0c      	ite	eq
 800b7fc:	2308      	moveq	r3, #8
 800b7fe:	230a      	movne	r3, #10
 800b800:	2100      	movs	r1, #0
 800b802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b806:	6865      	ldr	r5, [r4, #4]
 800b808:	60a5      	str	r5, [r4, #8]
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	bfa2      	ittt	ge
 800b80e:	6821      	ldrge	r1, [r4, #0]
 800b810:	f021 0104 	bicge.w	r1, r1, #4
 800b814:	6021      	strge	r1, [r4, #0]
 800b816:	b90e      	cbnz	r6, 800b81c <_printf_i+0x118>
 800b818:	2d00      	cmp	r5, #0
 800b81a:	d04d      	beq.n	800b8b8 <_printf_i+0x1b4>
 800b81c:	4615      	mov	r5, r2
 800b81e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b822:	fb03 6711 	mls	r7, r3, r1, r6
 800b826:	5dc7      	ldrb	r7, [r0, r7]
 800b828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b82c:	4637      	mov	r7, r6
 800b82e:	42bb      	cmp	r3, r7
 800b830:	460e      	mov	r6, r1
 800b832:	d9f4      	bls.n	800b81e <_printf_i+0x11a>
 800b834:	2b08      	cmp	r3, #8
 800b836:	d10b      	bne.n	800b850 <_printf_i+0x14c>
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	07de      	lsls	r6, r3, #31
 800b83c:	d508      	bpl.n	800b850 <_printf_i+0x14c>
 800b83e:	6923      	ldr	r3, [r4, #16]
 800b840:	6861      	ldr	r1, [r4, #4]
 800b842:	4299      	cmp	r1, r3
 800b844:	bfde      	ittt	le
 800b846:	2330      	movle	r3, #48	; 0x30
 800b848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b84c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b850:	1b52      	subs	r2, r2, r5
 800b852:	6122      	str	r2, [r4, #16]
 800b854:	f8cd a000 	str.w	sl, [sp]
 800b858:	464b      	mov	r3, r9
 800b85a:	aa03      	add	r2, sp, #12
 800b85c:	4621      	mov	r1, r4
 800b85e:	4640      	mov	r0, r8
 800b860:	f7ff fee2 	bl	800b628 <_printf_common>
 800b864:	3001      	adds	r0, #1
 800b866:	d14c      	bne.n	800b902 <_printf_i+0x1fe>
 800b868:	f04f 30ff 	mov.w	r0, #4294967295
 800b86c:	b004      	add	sp, #16
 800b86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b872:	4835      	ldr	r0, [pc, #212]	; (800b948 <_printf_i+0x244>)
 800b874:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b878:	6829      	ldr	r1, [r5, #0]
 800b87a:	6823      	ldr	r3, [r4, #0]
 800b87c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b880:	6029      	str	r1, [r5, #0]
 800b882:	061d      	lsls	r5, r3, #24
 800b884:	d514      	bpl.n	800b8b0 <_printf_i+0x1ac>
 800b886:	07df      	lsls	r7, r3, #31
 800b888:	bf44      	itt	mi
 800b88a:	f043 0320 	orrmi.w	r3, r3, #32
 800b88e:	6023      	strmi	r3, [r4, #0]
 800b890:	b91e      	cbnz	r6, 800b89a <_printf_i+0x196>
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	f023 0320 	bic.w	r3, r3, #32
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	2310      	movs	r3, #16
 800b89c:	e7b0      	b.n	800b800 <_printf_i+0xfc>
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	f043 0320 	orr.w	r3, r3, #32
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	2378      	movs	r3, #120	; 0x78
 800b8a8:	4828      	ldr	r0, [pc, #160]	; (800b94c <_printf_i+0x248>)
 800b8aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8ae:	e7e3      	b.n	800b878 <_printf_i+0x174>
 800b8b0:	0659      	lsls	r1, r3, #25
 800b8b2:	bf48      	it	mi
 800b8b4:	b2b6      	uxthmi	r6, r6
 800b8b6:	e7e6      	b.n	800b886 <_printf_i+0x182>
 800b8b8:	4615      	mov	r5, r2
 800b8ba:	e7bb      	b.n	800b834 <_printf_i+0x130>
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	6826      	ldr	r6, [r4, #0]
 800b8c0:	6961      	ldr	r1, [r4, #20]
 800b8c2:	1d18      	adds	r0, r3, #4
 800b8c4:	6028      	str	r0, [r5, #0]
 800b8c6:	0635      	lsls	r5, r6, #24
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	d501      	bpl.n	800b8d0 <_printf_i+0x1cc>
 800b8cc:	6019      	str	r1, [r3, #0]
 800b8ce:	e002      	b.n	800b8d6 <_printf_i+0x1d2>
 800b8d0:	0670      	lsls	r0, r6, #25
 800b8d2:	d5fb      	bpl.n	800b8cc <_printf_i+0x1c8>
 800b8d4:	8019      	strh	r1, [r3, #0]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	4615      	mov	r5, r2
 800b8dc:	e7ba      	b.n	800b854 <_printf_i+0x150>
 800b8de:	682b      	ldr	r3, [r5, #0]
 800b8e0:	1d1a      	adds	r2, r3, #4
 800b8e2:	602a      	str	r2, [r5, #0]
 800b8e4:	681d      	ldr	r5, [r3, #0]
 800b8e6:	6862      	ldr	r2, [r4, #4]
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f7f4 fc88 	bl	8000200 <memchr>
 800b8f0:	b108      	cbz	r0, 800b8f6 <_printf_i+0x1f2>
 800b8f2:	1b40      	subs	r0, r0, r5
 800b8f4:	6060      	str	r0, [r4, #4]
 800b8f6:	6863      	ldr	r3, [r4, #4]
 800b8f8:	6123      	str	r3, [r4, #16]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b900:	e7a8      	b.n	800b854 <_printf_i+0x150>
 800b902:	6923      	ldr	r3, [r4, #16]
 800b904:	462a      	mov	r2, r5
 800b906:	4649      	mov	r1, r9
 800b908:	4640      	mov	r0, r8
 800b90a:	47d0      	blx	sl
 800b90c:	3001      	adds	r0, #1
 800b90e:	d0ab      	beq.n	800b868 <_printf_i+0x164>
 800b910:	6823      	ldr	r3, [r4, #0]
 800b912:	079b      	lsls	r3, r3, #30
 800b914:	d413      	bmi.n	800b93e <_printf_i+0x23a>
 800b916:	68e0      	ldr	r0, [r4, #12]
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	4298      	cmp	r0, r3
 800b91c:	bfb8      	it	lt
 800b91e:	4618      	movlt	r0, r3
 800b920:	e7a4      	b.n	800b86c <_printf_i+0x168>
 800b922:	2301      	movs	r3, #1
 800b924:	4632      	mov	r2, r6
 800b926:	4649      	mov	r1, r9
 800b928:	4640      	mov	r0, r8
 800b92a:	47d0      	blx	sl
 800b92c:	3001      	adds	r0, #1
 800b92e:	d09b      	beq.n	800b868 <_printf_i+0x164>
 800b930:	3501      	adds	r5, #1
 800b932:	68e3      	ldr	r3, [r4, #12]
 800b934:	9903      	ldr	r1, [sp, #12]
 800b936:	1a5b      	subs	r3, r3, r1
 800b938:	42ab      	cmp	r3, r5
 800b93a:	dcf2      	bgt.n	800b922 <_printf_i+0x21e>
 800b93c:	e7eb      	b.n	800b916 <_printf_i+0x212>
 800b93e:	2500      	movs	r5, #0
 800b940:	f104 0619 	add.w	r6, r4, #25
 800b944:	e7f5      	b.n	800b932 <_printf_i+0x22e>
 800b946:	bf00      	nop
 800b948:	0800bcbd 	.word	0x0800bcbd
 800b94c:	0800bcce 	.word	0x0800bcce

0800b950 <memmove>:
 800b950:	4288      	cmp	r0, r1
 800b952:	b510      	push	{r4, lr}
 800b954:	eb01 0402 	add.w	r4, r1, r2
 800b958:	d902      	bls.n	800b960 <memmove+0x10>
 800b95a:	4284      	cmp	r4, r0
 800b95c:	4623      	mov	r3, r4
 800b95e:	d807      	bhi.n	800b970 <memmove+0x20>
 800b960:	1e43      	subs	r3, r0, #1
 800b962:	42a1      	cmp	r1, r4
 800b964:	d008      	beq.n	800b978 <memmove+0x28>
 800b966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b96a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b96e:	e7f8      	b.n	800b962 <memmove+0x12>
 800b970:	4402      	add	r2, r0
 800b972:	4601      	mov	r1, r0
 800b974:	428a      	cmp	r2, r1
 800b976:	d100      	bne.n	800b97a <memmove+0x2a>
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b97e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b982:	e7f7      	b.n	800b974 <memmove+0x24>

0800b984 <_free_r>:
 800b984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b986:	2900      	cmp	r1, #0
 800b988:	d044      	beq.n	800ba14 <_free_r+0x90>
 800b98a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98e:	9001      	str	r0, [sp, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f1a1 0404 	sub.w	r4, r1, #4
 800b996:	bfb8      	it	lt
 800b998:	18e4      	addlt	r4, r4, r3
 800b99a:	f000 f913 	bl	800bbc4 <__malloc_lock>
 800b99e:	4a1e      	ldr	r2, [pc, #120]	; (800ba18 <_free_r+0x94>)
 800b9a0:	9801      	ldr	r0, [sp, #4]
 800b9a2:	6813      	ldr	r3, [r2, #0]
 800b9a4:	b933      	cbnz	r3, 800b9b4 <_free_r+0x30>
 800b9a6:	6063      	str	r3, [r4, #4]
 800b9a8:	6014      	str	r4, [r2, #0]
 800b9aa:	b003      	add	sp, #12
 800b9ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9b0:	f000 b90e 	b.w	800bbd0 <__malloc_unlock>
 800b9b4:	42a3      	cmp	r3, r4
 800b9b6:	d908      	bls.n	800b9ca <_free_r+0x46>
 800b9b8:	6825      	ldr	r5, [r4, #0]
 800b9ba:	1961      	adds	r1, r4, r5
 800b9bc:	428b      	cmp	r3, r1
 800b9be:	bf01      	itttt	eq
 800b9c0:	6819      	ldreq	r1, [r3, #0]
 800b9c2:	685b      	ldreq	r3, [r3, #4]
 800b9c4:	1949      	addeq	r1, r1, r5
 800b9c6:	6021      	streq	r1, [r4, #0]
 800b9c8:	e7ed      	b.n	800b9a6 <_free_r+0x22>
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	b10b      	cbz	r3, 800b9d4 <_free_r+0x50>
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d9fa      	bls.n	800b9ca <_free_r+0x46>
 800b9d4:	6811      	ldr	r1, [r2, #0]
 800b9d6:	1855      	adds	r5, r2, r1
 800b9d8:	42a5      	cmp	r5, r4
 800b9da:	d10b      	bne.n	800b9f4 <_free_r+0x70>
 800b9dc:	6824      	ldr	r4, [r4, #0]
 800b9de:	4421      	add	r1, r4
 800b9e0:	1854      	adds	r4, r2, r1
 800b9e2:	42a3      	cmp	r3, r4
 800b9e4:	6011      	str	r1, [r2, #0]
 800b9e6:	d1e0      	bne.n	800b9aa <_free_r+0x26>
 800b9e8:	681c      	ldr	r4, [r3, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	6053      	str	r3, [r2, #4]
 800b9ee:	4421      	add	r1, r4
 800b9f0:	6011      	str	r1, [r2, #0]
 800b9f2:	e7da      	b.n	800b9aa <_free_r+0x26>
 800b9f4:	d902      	bls.n	800b9fc <_free_r+0x78>
 800b9f6:	230c      	movs	r3, #12
 800b9f8:	6003      	str	r3, [r0, #0]
 800b9fa:	e7d6      	b.n	800b9aa <_free_r+0x26>
 800b9fc:	6825      	ldr	r5, [r4, #0]
 800b9fe:	1961      	adds	r1, r4, r5
 800ba00:	428b      	cmp	r3, r1
 800ba02:	bf04      	itt	eq
 800ba04:	6819      	ldreq	r1, [r3, #0]
 800ba06:	685b      	ldreq	r3, [r3, #4]
 800ba08:	6063      	str	r3, [r4, #4]
 800ba0a:	bf04      	itt	eq
 800ba0c:	1949      	addeq	r1, r1, r5
 800ba0e:	6021      	streq	r1, [r4, #0]
 800ba10:	6054      	str	r4, [r2, #4]
 800ba12:	e7ca      	b.n	800b9aa <_free_r+0x26>
 800ba14:	b003      	add	sp, #12
 800ba16:	bd30      	pop	{r4, r5, pc}
 800ba18:	20000828 	.word	0x20000828

0800ba1c <sbrk_aligned>:
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	4e0e      	ldr	r6, [pc, #56]	; (800ba58 <sbrk_aligned+0x3c>)
 800ba20:	460c      	mov	r4, r1
 800ba22:	6831      	ldr	r1, [r6, #0]
 800ba24:	4605      	mov	r5, r0
 800ba26:	b911      	cbnz	r1, 800ba2e <sbrk_aligned+0x12>
 800ba28:	f000 f8bc 	bl	800bba4 <_sbrk_r>
 800ba2c:	6030      	str	r0, [r6, #0]
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4628      	mov	r0, r5
 800ba32:	f000 f8b7 	bl	800bba4 <_sbrk_r>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d00a      	beq.n	800ba50 <sbrk_aligned+0x34>
 800ba3a:	1cc4      	adds	r4, r0, #3
 800ba3c:	f024 0403 	bic.w	r4, r4, #3
 800ba40:	42a0      	cmp	r0, r4
 800ba42:	d007      	beq.n	800ba54 <sbrk_aligned+0x38>
 800ba44:	1a21      	subs	r1, r4, r0
 800ba46:	4628      	mov	r0, r5
 800ba48:	f000 f8ac 	bl	800bba4 <_sbrk_r>
 800ba4c:	3001      	adds	r0, #1
 800ba4e:	d101      	bne.n	800ba54 <sbrk_aligned+0x38>
 800ba50:	f04f 34ff 	mov.w	r4, #4294967295
 800ba54:	4620      	mov	r0, r4
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	2000082c 	.word	0x2000082c

0800ba5c <_malloc_r>:
 800ba5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba60:	1ccd      	adds	r5, r1, #3
 800ba62:	f025 0503 	bic.w	r5, r5, #3
 800ba66:	3508      	adds	r5, #8
 800ba68:	2d0c      	cmp	r5, #12
 800ba6a:	bf38      	it	cc
 800ba6c:	250c      	movcc	r5, #12
 800ba6e:	2d00      	cmp	r5, #0
 800ba70:	4607      	mov	r7, r0
 800ba72:	db01      	blt.n	800ba78 <_malloc_r+0x1c>
 800ba74:	42a9      	cmp	r1, r5
 800ba76:	d905      	bls.n	800ba84 <_malloc_r+0x28>
 800ba78:	230c      	movs	r3, #12
 800ba7a:	603b      	str	r3, [r7, #0]
 800ba7c:	2600      	movs	r6, #0
 800ba7e:	4630      	mov	r0, r6
 800ba80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba84:	4e2e      	ldr	r6, [pc, #184]	; (800bb40 <_malloc_r+0xe4>)
 800ba86:	f000 f89d 	bl	800bbc4 <__malloc_lock>
 800ba8a:	6833      	ldr	r3, [r6, #0]
 800ba8c:	461c      	mov	r4, r3
 800ba8e:	bb34      	cbnz	r4, 800bade <_malloc_r+0x82>
 800ba90:	4629      	mov	r1, r5
 800ba92:	4638      	mov	r0, r7
 800ba94:	f7ff ffc2 	bl	800ba1c <sbrk_aligned>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	d14d      	bne.n	800bb3a <_malloc_r+0xde>
 800ba9e:	6834      	ldr	r4, [r6, #0]
 800baa0:	4626      	mov	r6, r4
 800baa2:	2e00      	cmp	r6, #0
 800baa4:	d140      	bne.n	800bb28 <_malloc_r+0xcc>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	4631      	mov	r1, r6
 800baaa:	4638      	mov	r0, r7
 800baac:	eb04 0803 	add.w	r8, r4, r3
 800bab0:	f000 f878 	bl	800bba4 <_sbrk_r>
 800bab4:	4580      	cmp	r8, r0
 800bab6:	d13a      	bne.n	800bb2e <_malloc_r+0xd2>
 800bab8:	6821      	ldr	r1, [r4, #0]
 800baba:	3503      	adds	r5, #3
 800babc:	1a6d      	subs	r5, r5, r1
 800babe:	f025 0503 	bic.w	r5, r5, #3
 800bac2:	3508      	adds	r5, #8
 800bac4:	2d0c      	cmp	r5, #12
 800bac6:	bf38      	it	cc
 800bac8:	250c      	movcc	r5, #12
 800baca:	4629      	mov	r1, r5
 800bacc:	4638      	mov	r0, r7
 800bace:	f7ff ffa5 	bl	800ba1c <sbrk_aligned>
 800bad2:	3001      	adds	r0, #1
 800bad4:	d02b      	beq.n	800bb2e <_malloc_r+0xd2>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	442b      	add	r3, r5
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	e00e      	b.n	800bafc <_malloc_r+0xa0>
 800bade:	6822      	ldr	r2, [r4, #0]
 800bae0:	1b52      	subs	r2, r2, r5
 800bae2:	d41e      	bmi.n	800bb22 <_malloc_r+0xc6>
 800bae4:	2a0b      	cmp	r2, #11
 800bae6:	d916      	bls.n	800bb16 <_malloc_r+0xba>
 800bae8:	1961      	adds	r1, r4, r5
 800baea:	42a3      	cmp	r3, r4
 800baec:	6025      	str	r5, [r4, #0]
 800baee:	bf18      	it	ne
 800baf0:	6059      	strne	r1, [r3, #4]
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	bf08      	it	eq
 800baf6:	6031      	streq	r1, [r6, #0]
 800baf8:	5162      	str	r2, [r4, r5]
 800bafa:	604b      	str	r3, [r1, #4]
 800bafc:	4638      	mov	r0, r7
 800bafe:	f104 060b 	add.w	r6, r4, #11
 800bb02:	f000 f865 	bl	800bbd0 <__malloc_unlock>
 800bb06:	f026 0607 	bic.w	r6, r6, #7
 800bb0a:	1d23      	adds	r3, r4, #4
 800bb0c:	1af2      	subs	r2, r6, r3
 800bb0e:	d0b6      	beq.n	800ba7e <_malloc_r+0x22>
 800bb10:	1b9b      	subs	r3, r3, r6
 800bb12:	50a3      	str	r3, [r4, r2]
 800bb14:	e7b3      	b.n	800ba7e <_malloc_r+0x22>
 800bb16:	6862      	ldr	r2, [r4, #4]
 800bb18:	42a3      	cmp	r3, r4
 800bb1a:	bf0c      	ite	eq
 800bb1c:	6032      	streq	r2, [r6, #0]
 800bb1e:	605a      	strne	r2, [r3, #4]
 800bb20:	e7ec      	b.n	800bafc <_malloc_r+0xa0>
 800bb22:	4623      	mov	r3, r4
 800bb24:	6864      	ldr	r4, [r4, #4]
 800bb26:	e7b2      	b.n	800ba8e <_malloc_r+0x32>
 800bb28:	4634      	mov	r4, r6
 800bb2a:	6876      	ldr	r6, [r6, #4]
 800bb2c:	e7b9      	b.n	800baa2 <_malloc_r+0x46>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	603b      	str	r3, [r7, #0]
 800bb32:	4638      	mov	r0, r7
 800bb34:	f000 f84c 	bl	800bbd0 <__malloc_unlock>
 800bb38:	e7a1      	b.n	800ba7e <_malloc_r+0x22>
 800bb3a:	6025      	str	r5, [r4, #0]
 800bb3c:	e7de      	b.n	800bafc <_malloc_r+0xa0>
 800bb3e:	bf00      	nop
 800bb40:	20000828 	.word	0x20000828

0800bb44 <_realloc_r>:
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	4680      	mov	r8, r0
 800bb4a:	4614      	mov	r4, r2
 800bb4c:	460e      	mov	r6, r1
 800bb4e:	b921      	cbnz	r1, 800bb5a <_realloc_r+0x16>
 800bb50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb54:	4611      	mov	r1, r2
 800bb56:	f7ff bf81 	b.w	800ba5c <_malloc_r>
 800bb5a:	b92a      	cbnz	r2, 800bb68 <_realloc_r+0x24>
 800bb5c:	f7ff ff12 	bl	800b984 <_free_r>
 800bb60:	4625      	mov	r5, r4
 800bb62:	4628      	mov	r0, r5
 800bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb68:	f000 f838 	bl	800bbdc <_malloc_usable_size_r>
 800bb6c:	4284      	cmp	r4, r0
 800bb6e:	4607      	mov	r7, r0
 800bb70:	d802      	bhi.n	800bb78 <_realloc_r+0x34>
 800bb72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb76:	d812      	bhi.n	800bb9e <_realloc_r+0x5a>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	f7ff ff6e 	bl	800ba5c <_malloc_r>
 800bb80:	4605      	mov	r5, r0
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d0ed      	beq.n	800bb62 <_realloc_r+0x1e>
 800bb86:	42bc      	cmp	r4, r7
 800bb88:	4622      	mov	r2, r4
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	bf28      	it	cs
 800bb8e:	463a      	movcs	r2, r7
 800bb90:	f7ff fbb0 	bl	800b2f4 <memcpy>
 800bb94:	4631      	mov	r1, r6
 800bb96:	4640      	mov	r0, r8
 800bb98:	f7ff fef4 	bl	800b984 <_free_r>
 800bb9c:	e7e1      	b.n	800bb62 <_realloc_r+0x1e>
 800bb9e:	4635      	mov	r5, r6
 800bba0:	e7df      	b.n	800bb62 <_realloc_r+0x1e>
	...

0800bba4 <_sbrk_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4d06      	ldr	r5, [pc, #24]	; (800bbc0 <_sbrk_r+0x1c>)
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	f7f5 fc52 	bl	8001458 <_sbrk>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d102      	bne.n	800bbbe <_sbrk_r+0x1a>
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b103      	cbz	r3, 800bbbe <_sbrk_r+0x1a>
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	20000830 	.word	0x20000830

0800bbc4 <__malloc_lock>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__malloc_lock+0x8>)
 800bbc6:	f000 b811 	b.w	800bbec <__retarget_lock_acquire_recursive>
 800bbca:	bf00      	nop
 800bbcc:	20000834 	.word	0x20000834

0800bbd0 <__malloc_unlock>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__malloc_unlock+0x8>)
 800bbd2:	f000 b80c 	b.w	800bbee <__retarget_lock_release_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	20000834 	.word	0x20000834

0800bbdc <_malloc_usable_size_r>:
 800bbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbe0:	1f18      	subs	r0, r3, #4
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	bfbc      	itt	lt
 800bbe6:	580b      	ldrlt	r3, [r1, r0]
 800bbe8:	18c0      	addlt	r0, r0, r3
 800bbea:	4770      	bx	lr

0800bbec <__retarget_lock_acquire_recursive>:
 800bbec:	4770      	bx	lr

0800bbee <__retarget_lock_release_recursive>:
 800bbee:	4770      	bx	lr

0800bbf0 <_init>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr

0800bbfc <_fini>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	bf00      	nop
 800bc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc02:	bc08      	pop	{r3}
 800bc04:	469e      	mov	lr, r3
 800bc06:	4770      	bx	lr
