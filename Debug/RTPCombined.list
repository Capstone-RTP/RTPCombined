
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee4  0800bee4  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beec  0800beec  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beec  0800beec  0001beec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800bef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200002d0  0800c1c0  000202d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800c1c0  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021eb5  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003506  00000000  00000000  000421b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  000456b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  00046fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004eec  00000000  00000000  00048780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de83  00000000  00000000  0004d66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a540  00000000  00000000  0006b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185a2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b94  00000000  00000000  00185a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200002d0 	.word	0x200002d0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800be5c 	.word	0x0800be5c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200002d4 	.word	0x200002d4
 80001f8:	0800be5c 	.word	0x0800be5c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000506:	f001 f88c 	bl	8001622 <HAL_Init>
	InitSerialFromPC(&hlpuart1, rxBuffer);
 800050a:	4969      	ldr	r1, [pc, #420]	; (80006b0 <main+0x1b0>)
 800050c:	4869      	ldr	r0, [pc, #420]	; (80006b4 <main+0x1b4>)
 800050e:	f000 fd27 	bl	8000f60 <InitSerialFromPC>
	/* USER CODE BEGIN Init */

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 400);
 8000512:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2320      	movs	r3, #32
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000520:	2200      	movs	r2, #0
 8000522:	4965      	ldr	r1, [pc, #404]	; (80006b8 <main+0x1b8>)
 8000524:	4865      	ldr	r0, [pc, #404]	; (80006bc <main+0x1bc>)
 8000526:	f000 fd31 	bl	8000f8c <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 200);
 800052a:	23c8      	movs	r3, #200	; 0xc8
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2340      	movs	r3, #64	; 0x40
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000536:	2200      	movs	r2, #0
 8000538:	4961      	ldr	r1, [pc, #388]	; (80006c0 <main+0x1c0>)
 800053a:	4862      	ldr	r0, [pc, #392]	; (80006c4 <main+0x1c4>)
 800053c:	f000 fd26 	bl	8000f8c <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 200);
 8000540:	23c8      	movs	r3, #200	; 0xc8
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054c:	2208      	movs	r2, #8
 800054e:	495e      	ldr	r1, [pc, #376]	; (80006c8 <main+0x1c8>)
 8000550:	485e      	ldr	r0, [pc, #376]	; (80006cc <main+0x1cc>)
 8000552:	f000 fd1b 	bl	8000f8c <initStepper>

	//I2C assignment to TOF API
	Dev->I2cHandle = &hi2c2;
 8000556:	4b5e      	ldr	r3, [pc, #376]	; (80006d0 <main+0x1d0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a5e      	ldr	r2, [pc, #376]	; (80006d4 <main+0x1d4>)
 800055c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8000560:	4b5b      	ldr	r3, [pc, #364]	; (80006d0 <main+0x1d0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2252      	movs	r2, #82	; 0x52
 8000566:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	// VL53L0X init for Single Measurement
	VL53L0X_WaitDeviceBooted( Dev );
 800056a:	4b59      	ldr	r3, [pc, #356]	; (80006d0 <main+0x1d0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f006 ff2e 	bl	80073d0 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000574:	4b56      	ldr	r3, [pc, #344]	; (80006d0 <main+0x1d0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f006 fc43 	bl	8006e04 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 800057e:	4b54      	ldr	r3, [pc, #336]	; (80006d0 <main+0x1d0>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f006 fda2 	bl	80070cc <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000588:	4b51      	ldr	r3, [pc, #324]	; (80006d0 <main+0x1d0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	1c7a      	adds	r2, r7, #1
 800058e:	1cb9      	adds	r1, r7, #2
 8000590:	4618      	mov	r0, r3
 8000592:	f007 fc3d 	bl	8007e10 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000596:	4b4e      	ldr	r3, [pc, #312]	; (80006d0 <main+0x1d0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	1cfa      	adds	r2, r7, #3
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	4618      	mov	r0, r3
 80005a0:	f008 f8c4 	bl	800872c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80005a4:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <main+0x1d0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 ffae 	bl	800750c <VL53L0X_SetDeviceMode>
	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80005b0:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <main+0x1d0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2201      	movs	r2, #1
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f007 fa23 	bl	8007a04 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80005be:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <main+0x1d0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2201      	movs	r2, #1
 80005c4:	2101      	movs	r1, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 fa1c 	bl	8007a04 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80005cc:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <main+0x1d0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f641 1299 	movw	r2, #6553	; 0x1999
 80005d4:	2101      	movs	r1, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f007 fac4 	bl	8007b64 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <main+0x1d0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fabc 	bl	8007b64 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 25000);
 80005ec:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <main+0x1d0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80005f4:	4618      	mov	r0, r3
 80005f6:	f006 ffe7 	bl	80075c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80005fa:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <main+0x1d0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2212      	movs	r2, #18
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 f806 	bl	8007614 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <main+0x1d0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	220e      	movs	r2, #14
 800060e:	2101      	movs	r1, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f006 ffff 	bl	8007614 <VL53L0X_SetVcselPulsePeriod>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000616:	f000 f861 	bl	80006dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061a:	f000 fb47 	bl	8000cac <MX_GPIO_Init>
	MX_TIM2_Init();
 800061e:	f000 f98f 	bl	8000940 <MX_TIM2_Init>
	MX_TIM4_Init();
 8000622:	f000 fa7d 	bl	8000b20 <MX_TIM4_Init>
	MX_LPUART1_UART_Init();
 8000626:	f000 f8eb 	bl	8000800 <MX_LPUART1_UART_Init>
	MX_I2C2_Init();
 800062a:	f000 f8a9 	bl	8000780 <MX_I2C2_Init>
	MX_TIM3_Init();
 800062e:	f000 f9ff 	bl	8000a30 <MX_TIM3_Init>
	MX_TIM5_Init();
 8000632:	f000 faed 	bl	8000c10 <MX_TIM5_Init>
	MX_TIM1_Init();
 8000636:	f000 f92f 	bl	8000898 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	//Enable Timer Interrupts
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <main+0x1b8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68da      	ldr	r2, [r3, #12]
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <main+0x1b8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f042 0201 	orr.w	r2, r2, #1
 8000648:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <main+0x1c0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <main+0x1c0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f042 0201 	orr.w	r2, r2, #1
 8000658:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <main+0x1c8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68da      	ldr	r2, [r3, #12]
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <main+0x1c8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f042 0201 	orr.w	r2, r2, #1
 8000668:	60da      	str	r2, [r3, #12]

	//Enable UART Enable IT
//	HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 6); //receive 6 bytes

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 800066a:	481b      	ldr	r0, [pc, #108]	; (80006d8 <main+0x1d8>)
 800066c:	f003 ff2c 	bl	80044c8 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000674:	f001 f84a 	bl	800170c <HAL_Delay>
	setTarget(&thetaMotor, 1000, 0);
 8000678:	2300      	movs	r3, #0
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <main+0x1bc>)
 8000686:	f000 fcb3 	bl	8000ff0 <setTarget>
	setTarget(&yMotor, 400, 1);
 800068a:	2301      	movs	r3, #1
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000692:	f04f 0300 	mov.w	r3, #0
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <main+0x1c4>)
 8000698:	f000 fcaa 	bl	8000ff0 <setTarget>
	setTarget(&rMotor,500,1);
 800069c:	2301      	movs	r3, #1
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a4:	f04f 0300 	mov.w	r3, #0
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <main+0x1cc>)
 80006aa:	f000 fca1 	bl	8000ff0 <setTarget>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//timer = HAL_GetTick();
	while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x1ae>
 80006b0:	20000770 	.word	0x20000770
 80006b4:	20000340 	.word	0x20000340
 80006b8:	20000468 	.word	0x20000468
 80006bc:	20000550 	.word	0x20000550
 80006c0:	2000041c 	.word	0x2000041c
 80006c4:	20000580 	.word	0x20000580
 80006c8:	200004b4 	.word	0x200004b4
 80006cc:	200005b0 	.word	0x200005b0
 80006d0:	20000000 	.word	0x20000000
 80006d4:	200002ec 	.word	0x200002ec
 80006d8:	20000500 	.word	0x20000500

080006dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b098      	sub	sp, #96	; 0x60
 80006e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	2248      	movs	r2, #72	; 0x48
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00b fba6 	bl	800be3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006fe:	2000      	movs	r0, #0
 8000700:	f002 f948 	bl	8002994 <HAL_PWREx_ControlVoltageScaling>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x32>
	{
		Error_Handler();
 800070a:	f000 fc23 	bl	8000f54 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800070e:	2310      	movs	r3, #16
 8000710:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000712:	2301      	movs	r3, #1
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800071a:	2360      	movs	r3, #96	; 0x60
 800071c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000722:	2301      	movs	r3, #1
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 50;
 800072a:	2332      	movs	r3, #50	; 0x32
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f9dc 	bl	8002afc <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x72>
	{
		Error_Handler();
 800074a:	f000 fc03 	bl	8000f54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2303      	movs	r3, #3
 8000754:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2104      	movs	r1, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fe44 	bl	80033f4 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000772:	f000 fbef 	bl	8000f54 <Error_Handler>
	}
}
 8000776:	bf00      	nop
 8000778:	3760      	adds	r7, #96	; 0x60
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C2_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10C0ECFF;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C2_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C2_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007bc:	f001 fb40 	bl	8001e40 <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80007c6:	f000 fbc5 	bl	8000f54 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007ce:	f002 f829 	bl	8002824 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80007d8:	f000 fbbc 	bl	8000f54 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007e0:	f002 f86b 	bl	80028ba <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80007ea:	f000 fbb3 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200002ec 	.word	0x200002ec
 80007f8:	40005800 	.word	0x40005800
 80007fc:	10c0ecff 	.word	0x10c0ecff

08000800 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <MX_LPUART1_UART_Init+0x94>)
 8000808:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800084a:	f005 f8c5 	bl	80059d8 <HAL_UART_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler();
 8000854:	f000 fb7e 	bl	8000f54 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800085c:	f006 f9f3 	bl	8006c46 <HAL_UARTEx_SetTxFifoThreshold>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_LPUART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000866:	f000 fb75 	bl	8000f54 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800086e:	f006 fa28 	bl	8006cc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_LPUART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000878:	f000 fb6c 	bl	8000f54 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_LPUART1_UART_Init+0x90>)
 800087e:	f006 f9a9 	bl	8006bd4 <HAL_UARTEx_DisableFifoMode>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_LPUART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000888:	f000 fb64 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000340 	.word	0x20000340
 8000894:	40008000 	.word	0x40008000

08000898 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008b8:	4a20      	ldr	r2, [pc, #128]	; (800093c <MX_TIM1_Init+0xa4>)
 80008ba:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ce:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e2:	4815      	ldr	r0, [pc, #84]	; (8000938 <MX_TIM1_Init+0xa0>)
 80008e4:	f003 fd98 	bl	8004418 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 80008ee:	f000 fb31 	bl	8000f54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_TIM1_Init+0xa0>)
 8000900:	f004 faa2 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 800090a:	f000 fb23 	bl	8000f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_TIM1_Init+0xa0>)
 8000920:	f004 ffb4 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800092a:	f000 fb13 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200003d0 	.word	0x200003d0
 800093c:	40012c00 	.word	0x40012c00

08000940 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	; 0x38
 8000944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000972:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MX_TIM2_Init+0xec>)
 8000974:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000978:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100-1;
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_TIM2_Init+0xec>)
 800097c:	2263      	movs	r2, #99	; 0x63
 800097e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_TIM2_Init+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1250-1;
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_TIM2_Init+0xec>)
 8000988:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800098c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <MX_TIM2_Init+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_TIM2_Init+0xec>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099a:	4824      	ldr	r0, [pc, #144]	; (8000a2c <MX_TIM2_Init+0xec>)
 800099c:	f003 fd3c 	bl	8004418 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 80009a6:	f000 fad5 	bl	8000f54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481d      	ldr	r0, [pc, #116]	; (8000a2c <MX_TIM2_Init+0xec>)
 80009b8:	f004 fa46 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 80009c2:	f000 fac7 	bl	8000f54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009c6:	4819      	ldr	r0, [pc, #100]	; (8000a2c <MX_TIM2_Init+0xec>)
 80009c8:	f003 fe0d 	bl	80045e6 <HAL_TIM_PWM_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 80009d2:	f000 fabf 	bl	8000f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_TIM2_Init+0xec>)
 80009e6:	f004 ff51 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80009f0:	f000 fab0 	bl	8000f54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f4:	2360      	movs	r3, #96	; 0x60
 80009f6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 80009f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009fc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <MX_TIM2_Init+0xec>)
 8000a0e:	f004 f907 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8000a18:	f000 fa9c 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <MX_TIM2_Init+0xec>)
 8000a1e:	f000 fce7 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000a22:	bf00      	nop
 8000a24:	3738      	adds	r7, #56	; 0x38
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000041c 	.word	0x2000041c

08000a30 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000a64:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <MX_TIM3_Init+0xec>)
 8000a66:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100-1;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000a6a:	2263      	movs	r2, #99	; 0x63
 8000a6c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1250-1;
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000a76:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000a7a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a88:	4823      	ldr	r0, [pc, #140]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000a8a:	f003 fcc5 	bl	8004418 <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8000a94:	f000 fa5e 	bl	8000f54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481c      	ldr	r0, [pc, #112]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000aa6:	f004 f9cf 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8000ab0:	f000 fa50 	bl	8000f54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ab4:	4818      	ldr	r0, [pc, #96]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000ab6:	f003 fd96 	bl	80045e6 <HAL_TIM_PWM_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8000ac0:	f000 fa48 	bl	8000f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4811      	ldr	r0, [pc, #68]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000ad4:	f004 feda 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8000ade:	f000 fa39 	bl	8000f54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae2:	2360      	movs	r3, #96	; 0x60
 8000ae4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000ae6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aea:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000afc:	f004 f890 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM3_Init+0xda>
	{
		Error_Handler();
 8000b06:	f000 fa25 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM3_Init+0xe8>)
 8000b0c:	f000 fc70 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000b10:	bf00      	nop
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000468 	.word	0x20000468
 8000b1c:	40000400 	.word	0x40000400

08000b20 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	; 0x38
 8000b24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b54:	4a2d      	ldr	r2, [pc, #180]	; (8000c0c <MX_TIM4_Init+0xec>)
 8000b56:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100-1;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b5a:	2263      	movs	r2, #99	; 0x63
 8000b5c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1250-1;
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b66:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b6a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b78:	4823      	ldr	r0, [pc, #140]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b7a:	f003 fc4d 	bl	8004418 <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM4_Init+0x68>
	{
		Error_Handler();
 8000b84:	f000 f9e6 	bl	8000f54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b92:	4619      	mov	r1, r3
 8000b94:	481c      	ldr	r0, [pc, #112]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000b96:	f004 f957 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM4_Init+0x84>
	{
		Error_Handler();
 8000ba0:	f000 f9d8 	bl	8000f54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ba4:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000ba6:	f003 fd1e 	bl	80045e6 <HAL_TIM_PWM_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM4_Init+0x94>
	{
		Error_Handler();
 8000bb0:	f000 f9d0 	bl	8000f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000bc4:	f004 fe62 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM4_Init+0xb2>
	{
		Error_Handler();
 8000bce:	f000 f9c1 	bl	8000f54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd2:	2360      	movs	r3, #96	; 0x60
 8000bd4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bda:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	2208      	movs	r2, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000bec:	f004 f818 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM4_Init+0xda>
	{
		Error_Handler();
 8000bf6:	f000 f9ad 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000bfa:	4803      	ldr	r0, [pc, #12]	; (8000c08 <MX_TIM4_Init+0xe8>)
 8000bfc:	f000 fbf8 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000c00:	bf00      	nop
 8000c02:	3738      	adds	r7, #56	; 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200004b4 	.word	0x200004b4
 8000c0c:	40000800 	.word	0x40000800

08000c10 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <MX_TIM5_Init+0x98>)
 8000c32:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 100-1;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c36:	2263      	movs	r2, #99	; 0x63
 8000c38:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c56:	f003 fbdf 	bl	8004418 <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM5_Init+0x54>
	{
		Error_Handler();
 8000c60:	f000 f978 	bl	8000f54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c72:	f004 f8e9 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM5_Init+0x70>
	{
		Error_Handler();
 8000c7c:	f000 f96a 	bl	8000f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM5_Init+0x94>)
 8000c8e:	f004 fdfd 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM5_Init+0x8c>
	{
		Error_Handler();
 8000c98:	f000 f95c 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000500 	.word	0x20000500
 8000ca8:	40000c00 	.word	0x40000c00

08000cac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a3b      	ldr	r2, [pc, #236]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000cc8:	f043 0310 	orr.w	r3, r3, #16
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a35      	ldr	r2, [pc, #212]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000ce0:	f043 0320 	orr.w	r3, r3, #32
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
	HAL_PWREx_EnableVddIO2();
 8000d3a:	f001 fecf 	bl	8002adc <HAL_PWREx_EnableVddIO2>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	21e0      	movs	r1, #224	; 0xe0
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d46:	f001 f863 	bl	8001e10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(loadCLK_GPIO_Port, loadCLK_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4819      	ldr	r0, [pc, #100]	; (8000db8 <MX_GPIO_Init+0x10c>)
 8000d52:	f001 f85d 	bl	8001e10 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
	GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000d56:	23e0      	movs	r3, #224	; 0xe0
 8000d58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f000 febc 	bl	8001aec <HAL_GPIO_Init>

	/*Configure GPIO pin : loadCLK_Pin */
	GPIO_InitStruct.Pin = loadCLK_Pin;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(loadCLK_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <MX_GPIO_Init+0x10c>)
 8000d8e:	f000 fead 	bl	8001aec <HAL_GPIO_Init>

	/*Configure GPIO pin : loadDATA_Pin */
	GPIO_InitStruct.Pin = loadDATA_Pin;
 8000d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_GPIO_Init+0x10c>)
 8000da8:	f000 fea0 	bl	8001aec <HAL_GPIO_Init>

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000c00 	.word	0x48000c00

08000dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dc0:	b088      	sub	sp, #32
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	4a5c      	ldr	r2, [pc, #368]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d13b      	bne.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 8000dce:	4b5c      	ldr	r3, [pc, #368]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10d      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ddc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000de0:	1c51      	adds	r1, r2, #1
 8000de2:	6139      	str	r1, [r7, #16]
 8000de4:	f143 0300 	adc.w	r3, r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	4b55      	ldr	r3, [pc, #340]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000dec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000df0:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000df4:	e012      	b.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000df6:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d10c      	bne.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 8000e02:	4b4f      	ldr	r3, [pc, #316]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e08:	1e51      	subs	r1, r2, #1
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e18:	e9c3 1206 	strd	r1, r2, [r3, #24]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000e1c:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e1e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e22:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	bf08      	it	eq
 8000e2c:	4290      	cmpeq	r0, r2
 8000e2e:	d10a      	bne.n	8000e46 <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000e30:	2100      	movs	r1, #0
 8000e32:	4842      	ldr	r0, [pc, #264]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e34:	f003 fd3e 	bl	80048b4 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000e38:	4840      	ldr	r0, [pc, #256]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e3a:	f003 fbad 	bl	8004598 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8000e3e:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e40:	2203      	movs	r2, #3
 8000e42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	4a3e      	ldr	r2, [pc, #248]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d138      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d10d      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e60:	1c51      	adds	r1, r2, #1
 8000e62:	6039      	str	r1, [r7, #0]
 8000e64:	f143 0300 	adc.w	r3, r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000e70:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000e74:	e00f      	b.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d109      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000e88:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000e8c:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000e90:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e92:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8000e96:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e98:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	bf08      	it	eq
 8000ea6:	4290      	cmpeq	r0, r2
 8000ea8:	d10a      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4825      	ldr	r0, [pc, #148]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000eae:	f003 fd01 	bl	80048b4 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000eb2:	4824      	ldr	r0, [pc, #144]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000eb4:	f003 fb70 	bl	8004598 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d134      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x176>
		if(rMotor.Status == RunningForward){
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d10a      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x12e>
			rMotor.CurrentPosition++;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ed6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000eda:	f112 0801 	adds.w	r8, r2, #1
 8000ede:	f143 0900 	adc.w	r9, r3, #0
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ee4:	e9c3 8906 	strd	r8, r9, [r3, #24]
 8000ee8:	e00e      	b.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if (rMotor.Status == RunningBackward){
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d108      	bne.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition--;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ef8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000efc:	1e54      	subs	r4, r2, #1
 8000efe:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f04:	e9c3 4506 	strd	r4, r5, [r3, #24]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f0a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f14:	4299      	cmp	r1, r3
 8000f16:	bf08      	it	eq
 8000f18:	4290      	cmpeq	r0, r2
 8000f1a:	d10a      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f20:	f003 fcc8 	bl	80048b4 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f26:	f003 fb37 	bl	8004598 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f3c:	20000468 	.word	0x20000468
 8000f40:	20000550 	.word	0x20000550
 8000f44:	2000041c 	.word	0x2000041c
 8000f48:	20000580 	.word	0x20000580
 8000f4c:	200004b4 	.word	0x200004b4
 8000f50:	200005b0 	.word	0x200005b0

08000f54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <InitSerialFromPC>:
uint8_t newLine = '\n';
uint8_t carriageReturn = '\r';

UART_HandleTypeDef* huart;

void InitSerialFromPC(UART_HandleTypeDef* huartHandler, uint8_t* rxBuffer){
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	huart = huartHandler;
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <InitSerialFromPC+0x24>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6013      	str	r3, [r2, #0]
	//allocate for buffer
	//usartInputBuffer = (uint8_t*)calloc(INPUT_BUFFER_SIZE,sizeof(uint8_t));
	usartOutputBuffer = rxBuffer;
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <InitSerialFromPC+0x28>)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000784 	.word	0x20000784
 8000f88:	20000780 	.word	0x20000780

08000f8c <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8b3a      	ldrh	r2, [r7, #24]
 8000fb0:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 8000fb8:	68f9      	ldr	r1, [r7, #12]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	stepper->TargetPosition =0;
 8000fc6:	68f9      	ldr	r1, [r7, #12]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Set status
	stepper->Status = Stopped;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f000 f840 	bl	8001068 <setSpeed>
	//return stepper structure pointer
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 8000ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 8000ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00c      	beq.n	8001020 <setTarget+0x30>
		stepper->TargetPosition+= increment;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800100c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001010:	eb10 0802 	adds.w	r8, r0, r2
 8001014:	eb41 0903 	adc.w	r9, r1, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	e9c3 8908 	strd	r8, r9, [r3, #32]
 800101e:	e00a      	b.n	8001036 <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800102a:	1a84      	subs	r4, r0, r2
 800102c:	eb61 0503 	sbc.w	r5, r1, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	e9c3 4508 	strd	r4, r5, [r3, #32]
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped){
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d107      	bne.n	8001058 <setTarget+0x68>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4619      	mov	r1, r3
 8001052:	4610      	mov	r0, r2
 8001054:	f003 fb28 	bl	80046a8 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 f827 	bl	80010ac <setDirection>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001068 <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	005a      	lsls	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4909      	ldr	r1, [pc, #36]	; (80010a8 <setSpeed+0x40>)
 8001084:	fbb1 f2f2 	udiv	r2, r1, r2
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <setSpeed+0x40>)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3a01      	subs	r2, #1
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	000f4240 	.word	0x000f4240

080010ac <setDirection>:

//set direction
void setDirection(stepper *stepper){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80010c0:	4290      	cmp	r0, r2
 80010c2:	eb71 0303 	sbcs.w	r3, r1, r3
 80010c6:	d20c      	bcs.n	80010e2 <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6898      	ldr	r0, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	899b      	ldrh	r3, [r3, #12]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	f000 fe9c 	bl	8001e10 <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	else{
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 80010e0:	e00b      	b.n	80010fa <setDirection+0x4e>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6898      	ldr	r0, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	899b      	ldrh	r3, [r3, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	f000 fe8f 	bl	8001e10 <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_MspInit+0x44>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_MspInit+0x44>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6613      	str	r3, [r2, #96]	; 0x60
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_MspInit+0x44>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_MspInit+0x44>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x44>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6593      	str	r3, [r2, #88]	; 0x58
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x44>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0b0      	sub	sp, #192	; 0xc0
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2298      	movs	r2, #152	; 0x98
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00a fe65 	bl	800be3c <memset>
  if(hi2c->Instance==I2C2)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <HAL_I2C_MspInit+0xb0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d13a      	bne.n	80011f2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fbf1 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001194:	f7ff fede 	bl	8000f54 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a18      	ldr	r2, [pc, #96]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 800119e:	f043 0320 	orr.w	r3, r3, #32
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b6:	2312      	movs	r3, #18
 80011b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c8:	2304      	movs	r3, #4
 80011ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011d2:	4619      	mov	r1, r3
 80011d4:	480b      	ldr	r0, [pc, #44]	; (8001204 <HAL_I2C_MspInit+0xb8>)
 80011d6:	f000 fc89 	bl	8001aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_I2C_MspInit+0xb4>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	37c0      	adds	r7, #192	; 0xc0
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40005800 	.word	0x40005800
 8001200:	40021000 	.word	0x40021000
 8001204:	48001400 	.word	0x48001400

08001208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b0      	sub	sp, #192	; 0xc0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2298      	movs	r2, #152	; 0x98
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00a fe07 	bl	800be3c <memset>
  if(huart->Instance==LPUART1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_UART_MspInit+0xc4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d145      	bne.n	80012c4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001238:	2320      	movs	r3, #32
 800123a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fb93 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001250:	f7ff fe80 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_UART_MspInit+0xc8>)
 8001256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_UART_MspInit+0xc8>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_UART_MspInit+0xc8>)
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_UART_MspInit+0xc8>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <HAL_UART_MspInit+0xc8>)
 8001272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0xc8>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001284:	f001 fc2a 	bl	8002adc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001288:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800128c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80012a2:	2308      	movs	r3, #8
 80012a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ac:	4619      	mov	r1, r3
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <HAL_UART_MspInit+0xcc>)
 80012b0:	f000 fc1c 	bl	8001aec <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f000 fb26 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80012be:	2046      	movs	r0, #70	; 0x46
 80012c0:	f000 fb3f 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	37c0      	adds	r7, #192	; 0xc0
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40008000 	.word	0x40008000
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48001800 	.word	0x48001800

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <HAL_TIM_Base_MspInit+0x104>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d114      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 80012f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f4:	6613      	str	r3, [r2, #96]	; 0x60
 80012f6:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2018      	movs	r0, #24
 8001308:	f000 faff 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800130c:	2018      	movs	r0, #24
 800130e:	f000 fb18 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001312:	e05e      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d114      	bne.n	8001348 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a2f      	ldr	r2, [pc, #188]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201c      	movs	r0, #28
 800133c:	f000 fae5 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001340:	201c      	movs	r0, #28
 8001342:	f000 fafe 	bl	8001942 <HAL_NVIC_EnableIRQ>
}
 8001346:	e044      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d114      	bne.n	800137c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6593      	str	r3, [r2, #88]	; 0x58
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	201d      	movs	r0, #29
 8001370:	f000 facb 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001374:	201d      	movs	r0, #29
 8001376:	f000 fae4 	bl	8001942 <HAL_NVIC_EnableIRQ>
}
 800137a:	e02a      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_TIM_Base_MspInit+0x110>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d114      	bne.n	80013b0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6593      	str	r3, [r2, #88]	; 0x58
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	201e      	movs	r0, #30
 80013a4:	f000 fab1 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013a8:	201e      	movs	r0, #30
 80013aa:	f000 faca 	bl	8001942 <HAL_NVIC_EnableIRQ>
}
 80013ae:	e010      	b.n	80013d2 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_TIM_Base_MspInit+0x114>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10b      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6593      	str	r3, [r2, #88]	; 0x58
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012c00 	.word	0x40012c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40000400 	.word	0x40000400
 80013e8:	40000800 	.word	0x40000800
 80013ec:	40000c00 	.word	0x40000c00

080013f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001410:	d11d      	bne.n	800144e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f000 fb50 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800144c:	e043      	b.n	80014d6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <HAL_TIM_MspPostInit+0xf4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d11c      	bne.n	8001492 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001470:	2308      	movs	r3, #8
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001480:	2302      	movs	r3, #2
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4817      	ldr	r0, [pc, #92]	; (80014e8 <HAL_TIM_MspPostInit+0xf8>)
 800148c:	f000 fb2e 	bl	8001aec <HAL_GPIO_Init>
}
 8001490:	e021      	b.n	80014d6 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <HAL_TIM_MspPostInit+0xfc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d11c      	bne.n	80014d6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_TIM_MspPostInit+0xf0>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014c6:	2302      	movs	r3, #2
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <HAL_TIM_MspPostInit+0x100>)
 80014d2:	f000 fb0b 	bl	8001aec <HAL_GPIO_Init>
}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40000400 	.word	0x40000400
 80014e8:	48001000 	.word	0x48001000
 80014ec:	40000800 	.word	0x40000800
 80014f0:	48000c00 	.word	0x48000c00

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 f8c4 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800154e:	f003 fa47 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200003d0 	.word	0x200003d0

0800155c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM2_IRQHandler+0x10>)
 8001562:	f003 fa3d 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000041c 	.word	0x2000041c

08001570 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <TIM3_IRQHandler+0x10>)
 8001576:	f003 fa33 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000468 	.word	0x20000468

08001584 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <TIM4_IRQHandler+0x10>)
 800158a:	f003 fa29 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200004b4 	.word	0x200004b4

08001598 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <LPUART1_IRQHandler+0x10>)
 800159e:	f004 fa6b 	bl	8005a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000340 	.word	0x20000340

080015ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d4:	f7ff ffea 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopForever+0x6>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopForever+0xe>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopForever+0x16>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f00a fbeb 	bl	800bdd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001602:	f7fe ff7d 	bl	8000500 <main>

08001606 <LoopForever>:

LoopForever:
    b LoopForever
 8001606:	e7fe      	b.n	8001606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001608:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001614:	0800bef4 	.word	0x0800bef4
  ldr r2, =_sbss
 8001618:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800161c:	200007cc 	.word	0x200007cc

08001620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>

08001622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f961 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f80e 	bl	8001654 <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e001      	b.n	8001648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001644:	f7ff fd5e 	bl	8001104 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001648:	79fb      	ldrb	r3, [r7, #7]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_InitTick+0x6c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d023      	beq.n	80016b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_InitTick+0x70>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_InitTick+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f96d 	bl	800195e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d809      	bhi.n	80016a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f937 	bl	800190a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_InitTick+0x74>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e007      	b.n	80016b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e004      	b.n	80016b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e001      	b.n	80016b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000000c 	.word	0x2000000c
 80016c4:	20000004 	.word	0x20000004
 80016c8:	20000008 	.word	0x20000008

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2000000c 	.word	0x2000000c
 80016f0:	20000788 	.word	0x20000788

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000788 	.word	0x20000788

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000000c 	.word	0x2000000c

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff29 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff3e 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff8e 	bl	8001848 <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5d 	bl	80017f4 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff31 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d008      	beq.n	80019a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2204      	movs	r2, #4
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e040      	b.n	8001a22 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 020e 	bic.w	r2, r2, #14
 80019ae:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019be:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f003 021c 	and.w	r2, r3, #28
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a0e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d005      	beq.n	8001a52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e047      	b.n	8001ae2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 020e 	bic.w	r2, r2, #14
 8001a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f003 021c 	and.w	r2, r3, #28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a9e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00c      	beq.n	8001ac2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ac0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
    }
  }
  return status;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e166      	b.n	8001dca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8158 	beq.w	8001dc4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x40>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 0201 	and.w	r2, r3, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d123      	bne.n	8001c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	6939      	ldr	r1, [r7, #16]
 8001c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0203 	and.w	r2, r3, #3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80b2 	beq.w	8001dc4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c60:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <HAL_GPIO_Init+0x2fc>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	4a60      	ldr	r2, [pc, #384]	; (8001de8 <HAL_GPIO_Init+0x2fc>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6c:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <HAL_GPIO_Init+0x2fc>)
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c78:	4a5c      	ldr	r2, [pc, #368]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca2:	d02b      	beq.n	8001cfc <HAL_GPIO_Init+0x210>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d025      	beq.n	8001cf8 <HAL_GPIO_Init+0x20c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <HAL_GPIO_Init+0x308>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d01f      	beq.n	8001cf4 <HAL_GPIO_Init+0x208>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_GPIO_Init+0x30c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d019      	beq.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a4f      	ldr	r2, [pc, #316]	; (8001dfc <HAL_GPIO_Init+0x310>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x200>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a4e      	ldr	r2, [pc, #312]	; (8001e00 <HAL_GPIO_Init+0x314>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1fc>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a4d      	ldr	r2, [pc, #308]	; (8001e04 <HAL_GPIO_Init+0x318>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1f8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_GPIO_Init+0x31c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1f4>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	e00e      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	e00c      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001ce4:	2306      	movs	r3, #6
 8001ce6:	e00a      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001ce8:	2305      	movs	r3, #5
 8001cea:	e008      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001cec:	2304      	movs	r3, #4
 8001cee:	e006      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e004      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e002      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_GPIO_Init+0x212>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	f002 0203 	and.w	r2, r2, #3
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	4093      	lsls	r3, r2
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d0e:	4937      	ldr	r1, [pc, #220]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	3302      	adds	r3, #2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d40:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d6a:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <HAL_GPIO_Init+0x320>)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f ae91 	bne.w	8001afc <HAL_GPIO_Init+0x10>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000
 8001df0:	48000400 	.word	0x48000400
 8001df4:	48000800 	.word	0x48000800
 8001df8:	48000c00 	.word	0x48000c00
 8001dfc:	48001000 	.word	0x48001000
 8001e00:	48001400 	.word	0x48001400
 8001e04:	48001800 	.word	0x48001800
 8001e08:	48001c00 	.word	0x48001c00
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e081      	b.n	8001f56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff f970 	bl	800114c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	e006      	b.n	8001ec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d104      	bne.n	8001eda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69d9      	ldr	r1, [r3, #28]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	817b      	strh	r3, [r7, #10]
 8001f70:	4613      	mov	r3, r2
 8001f72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	f040 80da 	bne.w	8002136 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_I2C_Master_Transmit+0x30>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e0d3      	b.n	8002138 <HAL_I2C_Master_Transmit+0x1d8>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f98:	f7ff fbac 	bl	80016f4 <HAL_GetTick>
 8001f9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2319      	movs	r3, #25
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f9e6 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0be      	b.n	8002138 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2221      	movs	r2, #33	; 0x21
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	893a      	ldrh	r2, [r7, #8]
 8001fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2bff      	cmp	r3, #255	; 0xff
 8001fea:	d90e      	bls.n	800200a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	22ff      	movs	r2, #255	; 0xff
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	8979      	ldrh	r1, [r7, #10]
 8001ffa:	4b51      	ldr	r3, [pc, #324]	; (8002140 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fbdc 	bl	80027c0 <I2C_TransferConfig>
 8002008:	e06c      	b.n	80020e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	b2da      	uxtb	r2, r3
 800201a:	8979      	ldrh	r1, [r7, #10]
 800201c:	4b48      	ldr	r3, [pc, #288]	; (8002140 <HAL_I2C_Master_Transmit+0x1e0>)
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fbcb 	bl	80027c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800202a:	e05b      	b.n	80020e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	6a39      	ldr	r1, [r7, #32]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f9e3 	bl	80023fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e07b      	b.n	8002138 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d034      	beq.n	80020e4 <HAL_I2C_Master_Transmit+0x184>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207e:	2b00      	cmp	r3, #0
 8002080:	d130      	bne.n	80020e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	2200      	movs	r2, #0
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f975 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e04d      	b.n	8002138 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d90e      	bls.n	80020c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	22ff      	movs	r2, #255	; 0xff
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fb7f 	bl	80027c0 <I2C_TransferConfig>
 80020c2:	e00f      	b.n	80020e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	8979      	ldrh	r1, [r7, #10]
 80020d6:	2300      	movs	r3, #0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fb6e 	bl	80027c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d19e      	bne.n	800202c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	6a39      	ldr	r1, [r7, #32]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f9c2 	bl	800247c <I2C_WaitOnSTOPFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e01a      	b.n	8002138 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_I2C_Master_Transmit+0x1e4>)
 8002116:	400b      	ands	r3, r1
 8002118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	80002000 	.word	0x80002000
 8002144:	fe00e800 	.word	0xfe00e800

08002148 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	460b      	mov	r3, r1
 8002156:	817b      	strh	r3, [r7, #10]
 8002158:	4613      	mov	r3, r2
 800215a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b20      	cmp	r3, #32
 8002166:	f040 80db 	bne.w	8002320 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2C_Master_Receive+0x30>
 8002174:	2302      	movs	r3, #2
 8002176:	e0d4      	b.n	8002322 <HAL_I2C_Master_Receive+0x1da>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002180:	f7ff fab8 	bl	80016f4 <HAL_GetTick>
 8002184:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2319      	movs	r3, #25
 800218c:	2201      	movs	r2, #1
 800218e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f8f2 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0bf      	b.n	8002322 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2222      	movs	r2, #34	; 0x22
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2210      	movs	r2, #16
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	893a      	ldrh	r2, [r7, #8]
 80021c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2bff      	cmp	r3, #255	; 0xff
 80021d2:	d90e      	bls.n	80021f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	22ff      	movs	r2, #255	; 0xff
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	4b52      	ldr	r3, [pc, #328]	; (800232c <HAL_I2C_Master_Receive+0x1e4>)
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fae8 	bl	80027c0 <I2C_TransferConfig>
 80021f0:	e06d      	b.n	80022ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	b2da      	uxtb	r2, r3
 8002202:	8979      	ldrh	r1, [r7, #10]
 8002204:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_I2C_Master_Receive+0x1e4>)
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fad7 	bl	80027c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002212:	e05c      	b.n	80022ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	6a39      	ldr	r1, [r7, #32]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f96b 	bl	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e07c      	b.n	8002322 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d034      	beq.n	80022ce <HAL_I2C_Master_Receive+0x186>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d130      	bne.n	80022ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2200      	movs	r2, #0
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f880 	bl	800237c <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e04d      	b.n	8002322 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	2bff      	cmp	r3, #255	; 0xff
 800228e:	d90e      	bls.n	80022ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	22ff      	movs	r2, #255	; 0xff
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	b2da      	uxtb	r2, r3
 800229c:	8979      	ldrh	r1, [r7, #10]
 800229e:	2300      	movs	r3, #0
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fa8a 	bl	80027c0 <I2C_TransferConfig>
 80022ac:	e00f      	b.n	80022ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	8979      	ldrh	r1, [r7, #10]
 80022c0:	2300      	movs	r3, #0
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fa79 	bl	80027c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d19d      	bne.n	8002214 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	6a39      	ldr	r1, [r7, #32]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f8cd 	bl	800247c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e01a      	b.n	8002322 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2220      	movs	r2, #32
 80022f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_I2C_Master_Receive+0x1e8>)
 8002300:	400b      	ands	r3, r1
 8002302:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	80002400 	.word	0x80002400
 8002330:	fe00e800 	.word	0xfe00e800

08002334 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d103      	bne.n	8002352 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d007      	beq.n	8002370 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	619a      	str	r2, [r3, #24]
  }
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238c:	e022      	b.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d01e      	beq.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff f9ad 	bl	80016f4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d113      	bne.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	f043 0220 	orr.w	r2, r3, #32
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00f      	b.n	80023f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4013      	ands	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d0cd      	beq.n	800238e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002408:	e02c      	b.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f8ea 	bl	80025e8 <I2C_IsErrorOccurred>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e02a      	b.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d01e      	beq.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7ff f965 	bl	80016f4 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d113      	bne.n	8002464 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e007      	b.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b02      	cmp	r3, #2
 8002470:	d1cb      	bne.n	800240a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002488:	e028      	b.n	80024dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f8aa 	bl	80025e8 <I2C_IsErrorOccurred>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e026      	b.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7ff f929 	bl	80016f4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d113      	bne.n	80024dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d1cf      	bne.n	800248a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002500:	e064      	b.n	80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f86e 	bl	80025e8 <I2C_IsErrorOccurred>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e062      	b.n	80025dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d138      	bne.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d105      	bne.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e04e      	b.n	80025dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b10      	cmp	r3, #16
 800254a:	d107      	bne.n	800255c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2204      	movs	r2, #4
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
 800255a:	e002      	b.n	8002562 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2220      	movs	r2, #32
 8002568:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002576:	400b      	ands	r3, r1
 8002578:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e022      	b.n	80025dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002596:	f7ff f8ad 	bl	80016f4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d302      	bcc.n	80025ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e007      	b.n	80025dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d193      	bne.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fe00e800 	.word	0xfe00e800

080025e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d075      	beq.n	8002700 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2210      	movs	r2, #16
 800261a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800261c:	e056      	b.n	80026cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d052      	beq.n	80026cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002626:	f7ff f865 	bl	80016f4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <I2C_IsErrorOccurred+0x54>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d147      	bne.n	80026cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002646:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800264e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800265a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265e:	d12e      	bne.n	80026be <I2C_IsErrorOccurred+0xd6>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002666:	d02a      	beq.n	80026be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b20      	cmp	r3, #32
 800266c:	d027      	beq.n	80026be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800267c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800267e:	f7ff f839 	bl	80016f4 <HAL_GetTick>
 8002682:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002684:	e01b      	b.n	80026be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002686:	f7ff f835 	bl	80016f4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b19      	cmp	r3, #25
 8002692:	d914      	bls.n	80026be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d1dc      	bne.n	8002686 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d003      	beq.n	80026e2 <I2C_IsErrorOccurred+0xfa>
 80026da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d09d      	beq.n	800261e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2220      	movs	r2, #32
 80026f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002722:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800276e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01c      	beq.n	80027b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fddc 	bl	8002334 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <I2C_IsErrorOccurred+0x1d4>)
 8002788:	400b      	ands	r3, r1
 800278a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	fe00e800 	.word	0xfe00e800

080027c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	817b      	strh	r3, [r7, #10]
 80027ce:	4613      	mov	r3, r2
 80027d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027d2:	897b      	ldrh	r3, [r7, #10]
 80027d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027d8:	7a7b      	ldrb	r3, [r7, #9]
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	0d5b      	lsrs	r3, r3, #21
 80027fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <I2C_TransferConfig+0x60>)
 8002800:	430b      	orrs	r3, r1
 8002802:	43db      	mvns	r3, r3
 8002804:	ea02 0103 	and.w	r1, r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	03ff63ff 	.word	0x03ff63ff

08002824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	d138      	bne.n	80028ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002844:	2302      	movs	r3, #2
 8002846:	e032      	b.n	80028ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d139      	bne.n	8002944 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028da:	2302      	movs	r3, #2
 80028dc:	e033      	b.n	8002946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2224      	movs	r2, #36	; 0x24
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800290c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <HAL_PWREx_GetVoltageRange+0x3c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002964:	d102      	bne.n	800296c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296a:	e00b      	b.n	8002984 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_PWREx_GetVoltageRange+0x3c>)
 800296e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297a:	d102      	bne.n	8002982 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800297c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002980:	e000      	b.n	8002984 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002982:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40007000 	.word	0x40007000

08002994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d141      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029a2:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	d131      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b0:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b6:	4a46      	ldr	r2, [pc, #280]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c0:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029c8:	4a41      	ldr	r2, [pc, #260]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80029d0:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2232      	movs	r2, #50	; 0x32
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	4a3f      	ldr	r2, [pc, #252]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e6:	e002      	b.n	80029ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d102      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f2      	bne.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d158      	bne.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e057      	b.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a14:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a24:	e04d      	b.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2c:	d141      	bne.n	8002ab2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3a:	d131      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a42:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2232      	movs	r2, #50	; 0x32
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	0c9b      	lsrs	r3, r3, #18
 8002a6e:	3301      	adds	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a72:	e002      	b.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d102      	bne.n	8002a8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f2      	bne.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d112      	bne.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e011      	b.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ab0:	e007      	b.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	431bde83 	.word	0x431bde83

08002adc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6053      	str	r3, [r2, #4]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f000 bc68 	b.w	80033e0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b10:	4b97      	ldr	r3, [pc, #604]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b1a:	4b95      	ldr	r3, [pc, #596]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80e6 	beq.w	8002cfe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4c>
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	f040 808d 	bne.w	8002c5a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 8089 	bne.w	8002c5a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b48:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_RCC_OscConfig+0x66>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f000 bc3f 	b.w	80033e0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b66:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_RCC_OscConfig+0x80>
 8002b72:	4b7f      	ldr	r3, [pc, #508]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b7a:	e005      	b.n	8002b88 <HAL_RCC_OscConfig+0x8c>
 8002b7c:	4b7c      	ldr	r3, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d224      	bcs.n	8002bd6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fe2d 	bl	80037f0 <RCC_SetFlashLatencyFromMSIRange>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f000 bc1f 	b.w	80033e0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a72      	ldr	r2, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b70      	ldr	r3, [pc, #448]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	496d      	ldr	r1, [pc, #436]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc0:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	4968      	ldr	r1, [pc, #416]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e025      	b.n	8002c22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd6:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a65      	ldr	r2, [pc, #404]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	4960      	ldr	r1, [pc, #384]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bf4:	4b5e      	ldr	r3, [pc, #376]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	495b      	ldr	r1, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fdec 	bl	80037f0 <RCC_SetFlashLatencyFromMSIRange>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e3de      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c22:	f000 fd21 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	4950      	ldr	r1, [pc, #320]	; (8002d74 <HAL_RCC_OscConfig+0x278>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	4a4e      	ldr	r2, [pc, #312]	; (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c42:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fd04 	bl	8001654 <HAL_InitTick>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d052      	beq.n	8002cfc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	e3c2      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d032      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a42      	ldr	r2, [pc, #264]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fd41 	bl	80016f4 <HAL_GetTick>
 8002c72:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c76:	f7fe fd3d 	bl	80016f4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e3ab      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a35      	ldr	r2, [pc, #212]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	4930      	ldr	r1, [pc, #192]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	492b      	ldr	r1, [pc, #172]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
 8002cc6:	e01a      	b.n	8002cfe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fd0e 	bl	80016f4 <HAL_GetTick>
 8002cd8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cdc:	f7fe fd0a 	bl	80016f4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e378      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x1e0>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d073      	beq.n	8002df2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_OscConfig+0x220>
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d10e      	bne.n	8002d34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d10b      	bne.n	8002d34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d063      	beq.n	8002df0 <HAL_RCC_OscConfig+0x2f4>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d15f      	bne.n	8002df0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e355      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x250>
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e025      	b.n	8002d98 <HAL_RCC_OscConfig+0x29c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d54:	d114      	bne.n	8002d80 <HAL_RCC_OscConfig+0x284>
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a02      	ldr	r2, [pc, #8]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e013      	b.n	8002d98 <HAL_RCC_OscConfig+0x29c>
 8002d70:	40021000 	.word	0x40021000
 8002d74:	0800be74 	.word	0x0800be74
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	20000008 	.word	0x20000008
 8002d80:	4b8f      	ldr	r3, [pc, #572]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a8e      	ldr	r2, [pc, #568]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b8c      	ldr	r3, [pc, #560]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a8b      	ldr	r2, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fca8 	bl	80016f4 <HAL_GetTick>
 8002da4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe fca4 	bl	80016f4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e312      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dba:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x2ac>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fc94 	bl	80016f4 <HAL_GetTick>
 8002dcc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fc90 	bl	80016f4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e2fe      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de2:	4b77      	ldr	r3, [pc, #476]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x2d4>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d060      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x314>
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d119      	bne.n	8002e3e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d116      	bne.n	8002e3e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e10:	4b6b      	ldr	r3, [pc, #428]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_OscConfig+0x32c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e2db      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	4962      	ldr	r1, [pc, #392]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3c:	e040      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d023      	beq.n	8002e8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a5d      	ldr	r2, [pc, #372]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe fc4f 	bl	80016f4 <HAL_GetTick>
 8002e56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5a:	f7fe fc4b 	bl	80016f4 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e2b9      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6c:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	494e      	ldr	r1, [pc, #312]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
 8002e8c:	e018      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a4b      	ldr	r2, [pc, #300]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9a:	f7fe fc2b 	bl	80016f4 <HAL_GetTick>
 8002e9e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea2:	f7fe fc27 	bl	80016f4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e295      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f0      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8082 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d05f      	beq.n	8002f96 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002edc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d037      	beq.n	8002f5c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e26d      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f14:	4a2a      	ldr	r2, [pc, #168]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f1e:	f7fe fbe9 	bl	80016f4 <HAL_GetTick>
 8002f22:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f26:	f7fe fbe5 	bl	80016f4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b11      	cmp	r3, #17
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e253      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1ef      	bne.n	8002f26 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4c:	f023 0210 	bic.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	491a      	ldr	r1, [pc, #104]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fbc2 	bl	80016f4 <HAL_GetTick>
 8002f70:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fe fbbe 	bl	80016f4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b11      	cmp	r3, #17
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e22c      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ef      	beq.n	8002f74 <HAL_RCC_OscConfig+0x478>
 8002f94:	e01d      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9c:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fe fba5 	bl	80016f4 <HAL_GetTick>
 8002faa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fae:	f7fe fba1 	bl	80016f4 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b11      	cmp	r3, #17
 8002fba:	d903      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e20f      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
 8002fc0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc4:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ed      	bne.n	8002fae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80bd 	beq.w	800315a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe6:	4b7b      	ldr	r3, [pc, #492]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10e      	bne.n	8003010 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b78      	ldr	r3, [pc, #480]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	4a77      	ldr	r2, [pc, #476]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffe:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	4b71      	ldr	r3, [pc, #452]	; (80031d8 <HAL_RCC_OscConfig+0x6dc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d118      	bne.n	800304e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b6e      	ldr	r3, [pc, #440]	; (80031d8 <HAL_RCC_OscConfig+0x6dc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6d      	ldr	r2, [pc, #436]	; (80031d8 <HAL_RCC_OscConfig+0x6dc>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003028:	f7fe fb64 	bl	80016f4 <HAL_GetTick>
 800302c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe fb60 	bl	80016f4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1ce      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003042:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_RCC_OscConfig+0x6dc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800305a:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	4959      	ldr	r1, [pc, #356]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003080:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a53      	ldr	r2, [pc, #332]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003090:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	4a4f      	ldr	r2, [pc, #316]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a0:	e018      	b.n	80030d4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030a2:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b2:	e00f      	b.n	80030d4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030b4:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	4a46      	ldr	r2, [pc, #280]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030c4:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d016      	beq.n	800310a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fb0a 	bl	80016f4 <HAL_GetTick>
 80030e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fb06 	bl	80016f4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e172      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ed      	beq.n	80030e4 <HAL_RCC_OscConfig+0x5e8>
 8003108:	e01d      	b.n	8003146 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe faf3 	bl	80016f4 <HAL_GetTick>
 800310e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe faef 	bl	80016f4 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e15b      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ed      	bne.n	8003112 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 800313e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800314a:	2b01      	cmp	r3, #1
 800314c:	d105      	bne.n	800315a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003158:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d041      	beq.n	80031ea <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800316e:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003174:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe fab9 	bl	80016f4 <HAL_GetTick>
 8003182:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003186:	f7fe fab5 	bl	80016f4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e123      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 800319a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ef      	beq.n	8003186 <HAL_RCC_OscConfig+0x68a>
 80031a6:	e020      	b.n	80031ea <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80031aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_RCC_OscConfig+0x6d8>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe fa9c 	bl	80016f4 <HAL_GetTick>
 80031bc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031be:	e00d      	b.n	80031dc <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031c0:	f7fe fa98 	bl	80016f4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d906      	bls.n	80031dc <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e106      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031dc:	4b82      	ldr	r3, [pc, #520]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 80031de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ea      	bne.n	80031c0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80f5 	beq.w	80033de <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	f040 80cb 	bne.w	8003394 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031fe:	4b7a      	ldr	r3, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0203 	and.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	429a      	cmp	r2, r3
 8003210:	d12c      	bne.n	800326c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	3b01      	subs	r3, #1
 800321e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d123      	bne.n	800326c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d11b      	bne.n	800326c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d113      	bne.n	800326c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d109      	bne.n	800326c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	3b01      	subs	r3, #1
 8003266:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d06d      	beq.n	8003348 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d068      	beq.n	8003344 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800327e:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0a8      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800328e:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a55      	ldr	r2, [pc, #340]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003298:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800329a:	f7fe fa2b 	bl	80016f4 <HAL_GetTick>
 800329e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe fa27 	bl	80016f4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e095      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c0:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4b49      	ldr	r3, [pc, #292]	; (80033ec <HAL_RCC_OscConfig+0x8f0>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032da:	0212      	lsls	r2, r2, #8
 80032dc:	4311      	orrs	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032e2:	0852      	lsrs	r2, r2, #1
 80032e4:	3a01      	subs	r2, #1
 80032e6:	0552      	lsls	r2, r2, #21
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032ee:	0852      	lsrs	r2, r2, #1
 80032f0:	3a01      	subs	r2, #1
 80032f2:	0652      	lsls	r2, r2, #25
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032fa:	06d2      	lsls	r2, r2, #27
 80032fc:	430a      	orrs	r2, r1
 80032fe:	493a      	ldr	r1, [pc, #232]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003300:	4313      	orrs	r3, r2
 8003302:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003304:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a37      	ldr	r2, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 800330a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a34      	ldr	r2, [pc, #208]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800331c:	f7fe f9ea 	bl	80016f4 <HAL_GetTick>
 8003320:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe f9e6 	bl	80016f4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e054      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003342:	e04c      	b.n	80033de <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e04b      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003348:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d144      	bne.n	80033de <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 800335a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800336c:	f7fe f9c2 	bl	80016f4 <HAL_GetTick>
 8003370:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe f9be 	bl	80016f4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e02c      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x878>
 8003392:	e024      	b.n	80033de <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d01f      	beq.n	80033da <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 80033a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe f9a5 	bl	80016f4 <HAL_GetTick>
 80033aa:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fe f9a1 	bl	80016f4 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e00f      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4905      	ldr	r1, [pc, #20]	; (80033e8 <HAL_RCC_OscConfig+0x8ec>)
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCC_OscConfig+0x8f4>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
 80033d8:	e001      	b.n	80033de <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	019d800c 	.word	0x019d800c
 80033f0:	feeefffc 	.word	0xfeeefffc

080033f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e11d      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b90      	ldr	r3, [pc, #576]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d910      	bls.n	800343c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b8d      	ldr	r3, [pc, #564]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 020f 	bic.w	r2, r3, #15
 8003422:	498b      	ldr	r1, [pc, #556]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b89      	ldr	r3, [pc, #548]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e105      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	4b81      	ldr	r3, [pc, #516]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003454:	429a      	cmp	r2, r3
 8003456:	d908      	bls.n	800346a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003458:	4b7e      	ldr	r3, [pc, #504]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	497b      	ldr	r1, [pc, #492]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d079      	beq.n	800356a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d11e      	bne.n	80034bc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347e:	4b75      	ldr	r3, [pc, #468]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0dc      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800348e:	f000 fa09 	bl	80038a4 <RCC_GetSysClockFreqFromPLLSource>
 8003492:	4603      	mov	r3, r0
 8003494:	4a70      	ldr	r2, [pc, #448]	; (8003658 <HAL_RCC_ClockConfig+0x264>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d946      	bls.n	8003528 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800349a:	4b6e      	ldr	r3, [pc, #440]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d140      	bne.n	8003528 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034a6:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ae:	4a69      	ldr	r2, [pc, #420]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80034b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e035      	b.n	8003528 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c4:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d115      	bne.n	80034fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0b9      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034dc:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0ad      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ec:	4b59      	ldr	r3, [pc, #356]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0a5      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034fc:	f000 f8b4 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003500:	4603      	mov	r3, r0
 8003502:	4a55      	ldr	r2, [pc, #340]	; (8003658 <HAL_RCC_ClockConfig+0x264>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d90f      	bls.n	8003528 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003508:	4b52      	ldr	r3, [pc, #328]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003514:	4b4f      	ldr	r3, [pc, #316]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351c:	4a4d      	ldr	r2, [pc, #308]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800351e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003522:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003528:	4b4a      	ldr	r3, [pc, #296]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 0203 	bic.w	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4947      	ldr	r1, [pc, #284]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353a:	f7fe f8db 	bl	80016f4 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003540:	e00a      	b.n	8003558 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003542:	f7fe f8d7 	bl	80016f4 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e077      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003558:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 020c 	and.w	r2, r3, #12
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	429a      	cmp	r2, r3
 8003568:	d1eb      	bne.n	8003542 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d105      	bne.n	800357c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a37      	ldr	r2, [pc, #220]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d010      	beq.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003594:	429a      	cmp	r2, r3
 8003596:	d208      	bcs.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	492b      	ldr	r1, [pc, #172]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035aa:	4b29      	ldr	r3, [pc, #164]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d210      	bcs.n	80035da <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b8:	4b25      	ldr	r3, [pc, #148]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 020f 	bic.w	r2, r3, #15
 80035c0:	4923      	ldr	r1, [pc, #140]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c8:	4b21      	ldr	r3, [pc, #132]	; (8003650 <HAL_RCC_ClockConfig+0x25c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e036      	b.n	8003648 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4918      	ldr	r1, [pc, #96]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4910      	ldr	r1, [pc, #64]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003618:	f000 f826 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_RCC_ClockConfig+0x260>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	490c      	ldr	r1, [pc, #48]	; (800365c <HAL_RCC_ClockConfig+0x268>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
 8003634:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <HAL_RCC_ClockConfig+0x26c>)
 8003636:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe f809 	bl	8001654 <HAL_InitTick>
 8003642:	4603      	mov	r3, r0
 8003644:	73fb      	strb	r3, [r7, #15]

  return status;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40022000 	.word	0x40022000
 8003654:	40021000 	.word	0x40021000
 8003658:	04c4b400 	.word	0x04c4b400
 800365c:	0800be74 	.word	0x0800be74
 8003660:	20000004 	.word	0x20000004
 8003664:	20000008 	.word	0x20000008

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d121      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d11e      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	e005      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036b8:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036c4:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_GetSysClockFreq+0x110>)
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e004      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <HAL_RCC_GetSysClockFreq+0x114>)
 80036ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d134      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0xa6>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d003      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0xac>
 800370c:	e005      	b.n	800371a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_GetSysClockFreq+0x110>)
 8003710:	617b      	str	r3, [r7, #20]
      break;
 8003712:	e005      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_GetSysClockFreq+0x114>)
 8003716:	617b      	str	r3, [r7, #20]
      break;
 8003718:	e002      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	617b      	str	r3, [r7, #20]
      break;
 800371e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3301      	adds	r3, #1
 800372c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800372e:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	fb03 f202 	mul.w	r2, r3, r2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_RCC_GetSysClockFreq+0x108>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	0e5b      	lsrs	r3, r3, #25
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	3301      	adds	r3, #1
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003760:	69bb      	ldr	r3, [r7, #24]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	0800be8c 	.word	0x0800be8c
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200

08003780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000004 	.word	0x20000004

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	0800be84 	.word	0x0800be84

080037c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037c8:	f7ff ffda 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0adb      	lsrs	r3, r3, #11
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4904      	ldr	r1, [pc, #16]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	0800be84 	.word	0x0800be84

080037f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037fc:	4b27      	ldr	r3, [pc, #156]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003808:	f7ff f8a4 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 800380c:	6178      	str	r0, [r7, #20]
 800380e:	e014      	b.n	800383a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a21      	ldr	r2, [pc, #132]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003828:	f7ff f894 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 800382c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	4a1a      	ldr	r2, [pc, #104]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003840:	d10b      	bne.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d913      	bls.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2ba0      	cmp	r3, #160	; 0xa0
 800384c:	d902      	bls.n	8003854 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800384e:	2302      	movs	r3, #2
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e00d      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003854:	2301      	movs	r3, #1
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e00a      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b7f      	cmp	r3, #127	; 0x7f
 800385e:	d902      	bls.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003860:	2302      	movs	r3, #2
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e004      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b70      	cmp	r3, #112	; 0x70
 800386a:	d101      	bne.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800386c:	2301      	movs	r3, #1
 800386e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 020f 	bic.w	r2, r3, #15
 8003878:	4909      	ldr	r1, [pc, #36]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	40022000 	.word	0x40022000

080038a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d00b      	beq.n	80038d2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d825      	bhi.n	800390c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d008      	beq.n	80038d8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11f      	bne.n	800390c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038ce:	613b      	str	r3, [r7, #16]
    break;
 80038d0:	e01f      	b.n	8003912 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80038d4:	613b      	str	r3, [r7, #16]
    break;
 80038d6:	e01c      	b.n	8003912 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038d8:	4b21      	ldr	r3, [pc, #132]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038e4:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e005      	b.n	8003900 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038f4:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003900:	4a1a      	ldr	r2, [pc, #104]	; (800396c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	613b      	str	r3, [r7, #16]
    break;
 800390a:	e002      	b.n	8003912 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
    break;
 8003910:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	3301      	adds	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	fb03 f202 	mul.w	r2, r3, r2
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0e5b      	lsrs	r3, r3, #25
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003952:	683b      	ldr	r3, [r7, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40021000 	.word	0x40021000
 8003964:	00f42400 	.word	0x00f42400
 8003968:	007a1200 	.word	0x007a1200
 800396c:	0800be8c 	.word	0x0800be8c

08003970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003978:	2300      	movs	r3, #0
 800397a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800397c:	2300      	movs	r3, #0
 800397e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003988:	2b00      	cmp	r3, #0
 800398a:	d040      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d02a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d825      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003998:	2b60      	cmp	r3, #96	; 0x60
 800399a:	d026      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800399c:	2b60      	cmp	r3, #96	; 0x60
 800399e:	d821      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d006      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d81d      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d010      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80039b0:	e018      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b2:	4b89      	ldr	r3, [pc, #548]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a88      	ldr	r2, [pc, #544]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039be:	e015      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb3e 	bl	8004048 <RCCEx_PLLSAI1_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d0:	e00c      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3320      	adds	r3, #32
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fc29 	bl	8004230 <RCCEx_PLLSAI2_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e2:	e003      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	74fb      	strb	r3, [r7, #19]
      break;
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80039ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f2:	4b79      	ldr	r3, [pc, #484]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a00:	4975      	ldr	r1, [pc, #468]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a08:	e001      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d047      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a22:	d030      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a28:	d82a      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2e:	d02a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a34:	d824      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a40:	d81e      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d010      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a4c:	e018      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a4e:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	4a61      	ldr	r2, [pc, #388]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a5a:	e015      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 faf0 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6c:	e00c      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3320      	adds	r3, #32
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fbdb 	bl	8004230 <RCCEx_PLLSAI2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	74fb      	strb	r3, [r7, #19]
      break;
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8e:	4b52      	ldr	r3, [pc, #328]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	494e      	ldr	r1, [pc, #312]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003aa4:	e001      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 809f 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003abc:	4b46      	ldr	r3, [pc, #280]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003acc:	2300      	movs	r3, #0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	4a40      	ldr	r2, [pc, #256]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ade:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003afa:	f7fd fdfb 	bl	80016f4 <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b00:	e009      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b02:	f7fd fdf7 	bl	80016f4 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d902      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	74fb      	strb	r3, [r7, #19]
        break;
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b16:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ef      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d15b      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01f      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d019      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b52:	4b21      	ldr	r3, [pc, #132]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b62:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b72:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d016      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd fdb6 	bl	80016f4 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fdb2 	bl	80016f4 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d902      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba2:	e006      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0ec      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	74bb      	strb	r3, [r7, #18]
 8003bd6:	e005      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be4:	7c7b      	ldrb	r3, [r7, #17]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4ba0      	ldr	r3, [pc, #640]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a9f      	ldr	r2, [pc, #636]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c02:	4b9a      	ldr	r3, [pc, #616]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f023 0203 	bic.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	4996      	ldr	r1, [pc, #600]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c24:	4b91      	ldr	r3, [pc, #580]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f023 020c 	bic.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	498e      	ldr	r1, [pc, #568]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c46:	4b89      	ldr	r3, [pc, #548]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	4985      	ldr	r1, [pc, #532]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c68:	4b80      	ldr	r3, [pc, #512]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	497d      	ldr	r1, [pc, #500]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c8a:	4b78      	ldr	r3, [pc, #480]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	4974      	ldr	r1, [pc, #464]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cac:	4b6f      	ldr	r3, [pc, #444]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cba:	496c      	ldr	r1, [pc, #432]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cce:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cdc:	4963      	ldr	r1, [pc, #396]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cf0:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cfe:	495b      	ldr	r1, [pc, #364]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d12:	4b56      	ldr	r3, [pc, #344]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	4952      	ldr	r1, [pc, #328]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d34:	4b4d      	ldr	r3, [pc, #308]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	494a      	ldr	r1, [pc, #296]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d56:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	4941      	ldr	r1, [pc, #260]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d78:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d86:	4939      	ldr	r1, [pc, #228]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d028      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da8:	4930      	ldr	r1, [pc, #192]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dba:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc4:	60d3      	str	r3, [r2, #12]
 8003dc6:	e011      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f935 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d04d      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e00:	d108      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003e12:	e012      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e1a:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e32:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e42:	d106      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a08      	ldr	r2, [pc, #32]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4e:	60d3      	str	r3, [r2, #12]
 8003e50:	e020      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a02      	ldr	r2, [pc, #8]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	60d3      	str	r3, [r2, #12]
 8003e68:	e014      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f8e1 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d028      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ea0:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	4965      	ldr	r1, [pc, #404]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ebe:	d106      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec0:	4b60      	ldr	r3, [pc, #384]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a5f      	ldr	r2, [pc, #380]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eca:	60d3      	str	r3, [r2, #12]
 8003ecc:	e011      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f8b2 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01e      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003efe:	4b51      	ldr	r3, [pc, #324]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0e:	494d      	ldr	r1, [pc, #308]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f88d 	bl	8004048 <RCCEx_PLLSAI1_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f48:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4e:	f023 0204 	bic.w	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f58:	493a      	ldr	r1, [pc, #232]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f6c:	4b35      	ldr	r3, [pc, #212]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f72:	f023 0218 	bic.w	r2, r3, #24
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	4931      	ldr	r1, [pc, #196]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d035      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fd fbaa 	bl	80016f4 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fa4:	f7fd fba6 	bl	80016f4 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d902      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	74fb      	strb	r3, [r7, #19]
        break;
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1ef      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fda:	491a      	ldr	r1, [pc, #104]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3320      	adds	r3, #32
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f921 	bl	8004230 <RCCEx_PLLSAI2_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800400a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800400e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	490a      	ldr	r1, [pc, #40]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004036:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004038:	7cbb      	ldrb	r3, [r7, #18]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000

08004048 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004056:	4b72      	ldr	r3, [pc, #456]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00e      	beq.n	8004080 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004062:	4b6f      	ldr	r3, [pc, #444]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0203 	and.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d103      	bne.n	800407a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
       ||
 8004076:	2b00      	cmp	r3, #0
 8004078:	d142      	bne.n	8004100 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	e03f      	b.n	8004100 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d018      	beq.n	80040ba <RCCEx_PLLSAI1_Config+0x72>
 8004088:	2b03      	cmp	r3, #3
 800408a:	d825      	bhi.n	80040d8 <RCCEx_PLLSAI1_Config+0x90>
 800408c:	2b01      	cmp	r3, #1
 800408e:	d002      	beq.n	8004096 <RCCEx_PLLSAI1_Config+0x4e>
 8004090:	2b02      	cmp	r3, #2
 8004092:	d009      	beq.n	80040a8 <RCCEx_PLLSAI1_Config+0x60>
 8004094:	e020      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004096:	4b62      	ldr	r3, [pc, #392]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d11d      	bne.n	80040de <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a6:	e01a      	b.n	80040de <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040a8:	4b5d      	ldr	r3, [pc, #372]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d116      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b8:	e013      	b.n	80040e2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ba:	4b59      	ldr	r3, [pc, #356]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040c6:	4b56      	ldr	r3, [pc, #344]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040d6:	e006      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e004      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040de:	bf00      	nop
 80040e0:	e002      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040e2:	bf00      	nop
 80040e4:	e000      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d108      	bne.n	8004100 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80040ee:	4b4c      	ldr	r3, [pc, #304]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4949      	ldr	r1, [pc, #292]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 8086 	bne.w	8004214 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004108:	4b45      	ldr	r3, [pc, #276]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a44      	ldr	r2, [pc, #272]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 800410e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004114:	f7fd faee 	bl	80016f4 <HAL_GetTick>
 8004118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800411a:	e009      	b.n	8004130 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800411c:	f7fd faea 	bl	80016f4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d902      	bls.n	8004130 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	73fb      	strb	r3, [r7, #15]
        break;
 800412e:	e005      	b.n	800413c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004130:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ef      	bne.n	800411c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d168      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d113      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004148:	4b35      	ldr	r3, [pc, #212]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <RCCEx_PLLSAI1_Config+0x1dc>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6892      	ldr	r2, [r2, #8]
 8004154:	0211      	lsls	r1, r2, #8
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	06d2      	lsls	r2, r2, #27
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6852      	ldr	r2, [r2, #4]
 8004162:	3a01      	subs	r2, #1
 8004164:	0112      	lsls	r2, r2, #4
 8004166:	430a      	orrs	r2, r1
 8004168:	492d      	ldr	r1, [pc, #180]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	610b      	str	r3, [r1, #16]
 800416e:	e02d      	b.n	80041cc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d115      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6892      	ldr	r2, [r2, #8]
 8004182:	0211      	lsls	r1, r2, #8
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6912      	ldr	r2, [r2, #16]
 8004188:	0852      	lsrs	r2, r2, #1
 800418a:	3a01      	subs	r2, #1
 800418c:	0552      	lsls	r2, r2, #21
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6852      	ldr	r2, [r2, #4]
 8004194:	3a01      	subs	r2, #1
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	430a      	orrs	r2, r1
 800419a:	4921      	ldr	r1, [pc, #132]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	610b      	str	r3, [r1, #16]
 80041a0:	e014      	b.n	80041cc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a2:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6892      	ldr	r2, [r2, #8]
 80041ae:	0211      	lsls	r1, r2, #8
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6952      	ldr	r2, [r2, #20]
 80041b4:	0852      	lsrs	r2, r2, #1
 80041b6:	3a01      	subs	r2, #1
 80041b8:	0652      	lsls	r2, r2, #25
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6852      	ldr	r2, [r2, #4]
 80041c0:	3a01      	subs	r2, #1
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	430a      	orrs	r2, r1
 80041c6:	4916      	ldr	r1, [pc, #88]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fd fa8c 	bl	80016f4 <HAL_GetTick>
 80041dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041de:	e009      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e0:	f7fd fa88 	bl	80016f4 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d902      	bls.n	80041f4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	73fb      	strb	r3, [r7, #15]
          break;
 80041f2:	e005      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ef      	beq.n	80041e0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	4904      	ldr	r1, [pc, #16]	; (8004220 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004210:	4313      	orrs	r3, r2
 8004212:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	07ff800f 	.word	0x07ff800f
 8004228:	ff9f800f 	.word	0xff9f800f
 800422c:	f9ff800f 	.word	0xf9ff800f

08004230 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800424a:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0203 	and.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d103      	bne.n	8004262 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
       ||
 800425e:	2b00      	cmp	r3, #0
 8004260:	d142      	bne.n	80042e8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	e03f      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d018      	beq.n	80042a2 <RCCEx_PLLSAI2_Config+0x72>
 8004270:	2b03      	cmp	r3, #3
 8004272:	d825      	bhi.n	80042c0 <RCCEx_PLLSAI2_Config+0x90>
 8004274:	2b01      	cmp	r3, #1
 8004276:	d002      	beq.n	800427e <RCCEx_PLLSAI2_Config+0x4e>
 8004278:	2b02      	cmp	r3, #2
 800427a:	d009      	beq.n	8004290 <RCCEx_PLLSAI2_Config+0x60>
 800427c:	e020      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800427e:	4b62      	ldr	r3, [pc, #392]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11d      	bne.n	80042c6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428e:	e01a      	b.n	80042c6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004290:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a0:	e013      	b.n	80042ca <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042a2:	4b59      	ldr	r3, [pc, #356]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ae:	4b56      	ldr	r3, [pc, #344]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042be:	e006      	b.n	80042ce <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      break;
 80042c4:	e004      	b.n	80042d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80042ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d108      	bne.n	80042e8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4949      	ldr	r1, [pc, #292]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 8086 	bne.w	80043fc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042f0:	4b45      	ldr	r3, [pc, #276]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a44      	ldr	r2, [pc, #272]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fc:	f7fd f9fa 	bl	80016f4 <HAL_GetTick>
 8004300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004302:	e009      	b.n	8004318 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004304:	f7fd f9f6 	bl	80016f4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d902      	bls.n	8004318 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	73fb      	strb	r3, [r7, #15]
        break;
 8004316:	e005      	b.n	8004324 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004318:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ef      	bne.n	8004304 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d168      	bne.n	80043fc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d113      	bne.n	8004358 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004330:	4b35      	ldr	r3, [pc, #212]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004332:	695a      	ldr	r2, [r3, #20]
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004336:	4013      	ands	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6892      	ldr	r2, [r2, #8]
 800433c:	0211      	lsls	r1, r2, #8
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68d2      	ldr	r2, [r2, #12]
 8004342:	06d2      	lsls	r2, r2, #27
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6852      	ldr	r2, [r2, #4]
 800434a:	3a01      	subs	r2, #1
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	430a      	orrs	r2, r1
 8004350:	492d      	ldr	r1, [pc, #180]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004352:	4313      	orrs	r3, r2
 8004354:	614b      	str	r3, [r1, #20]
 8004356:	e02d      	b.n	80043b4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d115      	bne.n	800438a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6892      	ldr	r2, [r2, #8]
 800436a:	0211      	lsls	r1, r2, #8
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6912      	ldr	r2, [r2, #16]
 8004370:	0852      	lsrs	r2, r2, #1
 8004372:	3a01      	subs	r2, #1
 8004374:	0552      	lsls	r2, r2, #21
 8004376:	4311      	orrs	r1, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6852      	ldr	r2, [r2, #4]
 800437c:	3a01      	subs	r2, #1
 800437e:	0112      	lsls	r2, r2, #4
 8004380:	430a      	orrs	r2, r1
 8004382:	4921      	ldr	r1, [pc, #132]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004384:	4313      	orrs	r3, r2
 8004386:	614b      	str	r3, [r1, #20]
 8004388:	e014      	b.n	80043b4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800438a:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	4b21      	ldr	r3, [pc, #132]	; (8004414 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	0211      	lsls	r1, r2, #8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6952      	ldr	r2, [r2, #20]
 800439c:	0852      	lsrs	r2, r2, #1
 800439e:	3a01      	subs	r2, #1
 80043a0:	0652      	lsls	r2, r2, #25
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6852      	ldr	r2, [r2, #4]
 80043a8:	3a01      	subs	r2, #1
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	430a      	orrs	r2, r1
 80043ae:	4916      	ldr	r1, [pc, #88]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a13      	ldr	r2, [pc, #76]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fd f998 	bl	80016f4 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043c6:	e009      	b.n	80043dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043c8:	f7fd f994 	bl	80016f4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d902      	bls.n	80043dc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	73fb      	strb	r3, [r7, #15]
          break;
 80043da:	e005      	b.n	80043e8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0ef      	beq.n	80043c8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	4904      	ldr	r1, [pc, #16]	; (8004408 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	07ff800f 	.word	0x07ff800f
 8004410:	ff9f800f 	.word	0xff9f800f
 8004414:	f9ff800f 	.word	0xf9ff800f

08004418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e049      	b.n	80044be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc ff4a 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f000 fde8 	bl	800502c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d001      	beq.n	80044e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e047      	b.n	8004570 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a23      	ldr	r2, [pc, #140]	; (800457c <HAL_TIM_Base_Start+0xb4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_TIM_Base_Start+0x66>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fa:	d018      	beq.n	800452e <HAL_TIM_Base_Start+0x66>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_TIM_Base_Start+0xb8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_TIM_Base_Start+0x66>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <HAL_TIM_Base_Start+0xbc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIM_Base_Start+0x66>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_TIM_Base_Start+0xc0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIM_Base_Start+0x66>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1b      	ldr	r2, [pc, #108]	; (800458c <HAL_TIM_Base_Start+0xc4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIM_Base_Start+0x66>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_TIM_Base_Start+0xc8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d115      	bne.n	800455a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_TIM_Base_Start+0xcc>)
 8004536:	4013      	ands	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b06      	cmp	r3, #6
 800453e:	d015      	beq.n	800456c <HAL_TIM_Base_Start+0xa4>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004546:	d011      	beq.n	800456c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	e008      	b.n	800456c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e000      	b.n	800456e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40013400 	.word	0x40013400
 8004590:	40014000 	.word	0x40014000
 8004594:	00010007 	.word	0x00010007

08004598 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10f      	bne.n	80045d0 <HAL_TIM_Base_Stop+0x38>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	f240 4344 	movw	r3, #1092	; 0x444
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_Base_Stop+0x38>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e049      	b.n	800468c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f841 	bl	8004694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fd01 	bl	800502c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_TIM_PWM_Start+0x24>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e03c      	b.n	8004746 <HAL_TIM_PWM_Start+0x9e>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d109      	bne.n	80046e6 <HAL_TIM_PWM_Start+0x3e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	bf14      	ite	ne
 80046de:	2301      	movne	r3, #1
 80046e0:	2300      	moveq	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	e02f      	b.n	8004746 <HAL_TIM_PWM_Start+0x9e>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d109      	bne.n	8004700 <HAL_TIM_PWM_Start+0x58>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e022      	b.n	8004746 <HAL_TIM_PWM_Start+0x9e>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d109      	bne.n	800471a <HAL_TIM_PWM_Start+0x72>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	bf14      	ite	ne
 8004712:	2301      	movne	r3, #1
 8004714:	2300      	moveq	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	e015      	b.n	8004746 <HAL_TIM_PWM_Start+0x9e>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b10      	cmp	r3, #16
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start+0x8c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e008      	b.n	8004746 <HAL_TIM_PWM_Start+0x9e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e09c      	b.n	8004888 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0xb6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800475c:	e023      	b.n	80047a6 <HAL_TIM_PWM_Start+0xfe>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xc6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476c:	e01b      	b.n	80047a6 <HAL_TIM_PWM_Start+0xfe>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Start+0xd6>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	e013      	b.n	80047a6 <HAL_TIM_PWM_Start+0xfe>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b0c      	cmp	r3, #12
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start+0xe6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800478c:	e00b      	b.n	80047a6 <HAL_TIM_PWM_Start+0xfe>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Start+0xf6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800479c:	e003      	b.n	80047a6 <HAL_TIM_PWM_Start+0xfe>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2201      	movs	r2, #1
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 f846 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a35      	ldr	r2, [pc, #212]	; (8004890 <HAL_TIM_PWM_Start+0x1e8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x13e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a34      	ldr	r2, [pc, #208]	; (8004894 <HAL_TIM_PWM_Start+0x1ec>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x13e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a32      	ldr	r2, [pc, #200]	; (8004898 <HAL_TIM_PWM_Start+0x1f0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x13e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a31      	ldr	r2, [pc, #196]	; (800489c <HAL_TIM_PWM_Start+0x1f4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x13e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2f      	ldr	r2, [pc, #188]	; (80048a0 <HAL_TIM_PWM_Start+0x1f8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_PWM_Start+0x142>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_TIM_PWM_Start+0x144>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_TIM_PWM_Start+0x1e8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01d      	beq.n	8004846 <HAL_TIM_PWM_Start+0x19e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004812:	d018      	beq.n	8004846 <HAL_TIM_PWM_Start+0x19e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <HAL_TIM_PWM_Start+0x1fc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_TIM_PWM_Start+0x19e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_TIM_PWM_Start+0x200>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIM_PWM_Start+0x19e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <HAL_TIM_PWM_Start+0x204>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIM_PWM_Start+0x19e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a17      	ldr	r2, [pc, #92]	; (8004894 <HAL_TIM_PWM_Start+0x1ec>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIM_PWM_Start+0x19e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_TIM_PWM_Start+0x1f0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d115      	bne.n	8004872 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <HAL_TIM_PWM_Start+0x208>)
 800484e:	4013      	ands	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b06      	cmp	r3, #6
 8004856:	d015      	beq.n	8004884 <HAL_TIM_PWM_Start+0x1dc>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485e:	d011      	beq.n	8004884 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004870:	e008      	b.n	8004884 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e000      	b.n	8004886 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40013400 	.word	0x40013400
 8004898:	40014000 	.word	0x40014000
 800489c:	40014400 	.word	0x40014400
 80048a0:	40014800 	.word	0x40014800
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	00010007 	.word	0x00010007

080048b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 ffba 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3e      	ldr	r2, [pc, #248]	; (80049cc <HAL_TIM_PWM_Stop+0x118>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_TIM_PWM_Stop+0x4a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3d      	ldr	r2, [pc, #244]	; (80049d0 <HAL_TIM_PWM_Stop+0x11c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIM_PWM_Stop+0x4a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3b      	ldr	r2, [pc, #236]	; (80049d4 <HAL_TIM_PWM_Stop+0x120>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_TIM_PWM_Stop+0x4a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a3a      	ldr	r2, [pc, #232]	; (80049d8 <HAL_TIM_PWM_Stop+0x124>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIM_PWM_Stop+0x4a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a38      	ldr	r2, [pc, #224]	; (80049dc <HAL_TIM_PWM_Stop+0x128>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d101      	bne.n	8004902 <HAL_TIM_PWM_Stop+0x4e>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_TIM_PWM_Stop+0x50>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <HAL_TIM_PWM_Stop+0x84>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	f240 4344 	movw	r3, #1092	; 0x444
 8004922:	4013      	ands	r3, r2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <HAL_TIM_PWM_Stop+0x84>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004936:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <HAL_TIM_PWM_Stop+0xb4>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f240 4344 	movw	r3, #1092	; 0x444
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_TIM_PWM_Stop+0xb4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_TIM_PWM_Stop+0xc4>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004976:	e023      	b.n	80049c0 <HAL_TIM_PWM_Stop+0x10c>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d104      	bne.n	8004988 <HAL_TIM_PWM_Stop+0xd4>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004986:	e01b      	b.n	80049c0 <HAL_TIM_PWM_Stop+0x10c>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b08      	cmp	r3, #8
 800498c:	d104      	bne.n	8004998 <HAL_TIM_PWM_Stop+0xe4>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004996:	e013      	b.n	80049c0 <HAL_TIM_PWM_Stop+0x10c>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d104      	bne.n	80049a8 <HAL_TIM_PWM_Stop+0xf4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049a6:	e00b      	b.n	80049c0 <HAL_TIM_PWM_Stop+0x10c>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_PWM_Stop+0x104>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b6:	e003      	b.n	80049c0 <HAL_TIM_PWM_Stop+0x10c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40013400 	.word	0x40013400
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800

080049e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0202 	mvn.w	r2, #2
 8004a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fae3 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fad5 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fae6 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0204 	mvn.w	r2, #4
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fab9 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 faab 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fabc 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d122      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0208 	mvn.w	r2, #8
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa8f 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa81 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fa92 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d122      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0210 	mvn.w	r2, #16
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa65 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa57 	bl	8004fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa68 	bl	8005002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10e      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0201 	mvn.w	r2, #1
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc f92c 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b80      	cmp	r3, #128	; 0x80
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 ff10 	bl	80059b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9e:	d10e      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d107      	bne.n	8004bbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 ff03 	bl	80059c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d10e      	bne.n	8004bea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d107      	bne.n	8004bea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fa16 	bl	8005016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d10e      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d107      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0220 	mvn.w	r2, #32
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fec3 	bl	800599c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0ff      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b14      	cmp	r3, #20
 8004c4a:	f200 80f0 	bhi.w	8004e2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004ca9 	.word	0x08004ca9
 8004c58:	08004e2f 	.word	0x08004e2f
 8004c5c:	08004e2f 	.word	0x08004e2f
 8004c60:	08004e2f 	.word	0x08004e2f
 8004c64:	08004ce9 	.word	0x08004ce9
 8004c68:	08004e2f 	.word	0x08004e2f
 8004c6c:	08004e2f 	.word	0x08004e2f
 8004c70:	08004e2f 	.word	0x08004e2f
 8004c74:	08004d2b 	.word	0x08004d2b
 8004c78:	08004e2f 	.word	0x08004e2f
 8004c7c:	08004e2f 	.word	0x08004e2f
 8004c80:	08004e2f 	.word	0x08004e2f
 8004c84:	08004d6b 	.word	0x08004d6b
 8004c88:	08004e2f 	.word	0x08004e2f
 8004c8c:	08004e2f 	.word	0x08004e2f
 8004c90:	08004e2f 	.word	0x08004e2f
 8004c94:	08004dad 	.word	0x08004dad
 8004c98:	08004e2f 	.word	0x08004e2f
 8004c9c:	08004e2f 	.word	0x08004e2f
 8004ca0:	08004e2f 	.word	0x08004e2f
 8004ca4:	08004ded 	.word	0x08004ded
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa56 	bl	8005160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
      break;
 8004ce6:	e0a5      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fac6 	bl	8005280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
      break;
 8004d28:	e084      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fb2f 	bl	8005394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0204 	bic.w	r2, r2, #4
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
      break;
 8004d68:	e064      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fb97 	bl	80054a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
      break;
 8004daa:	e043      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fbe0 	bl	8005578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0208 	orr.w	r2, r2, #8
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0204 	bic.w	r2, r2, #4
 8004dd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dea:	e023      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fc24 	bl	8005640 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	021a      	lsls	r2, r3, #8
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e2c:	e002      	b.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
      break;
 8004e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop

08004e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x1c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0b6      	b.n	8004fd2 <HAL_TIM_ConfigClockSource+0x18a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea0:	d03e      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0xd8>
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	f200 8087 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	f000 8086 	beq.w	8004fbe <HAL_TIM_ConfigClockSource+0x176>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d87f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d01a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0xaa>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d87b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ec0:	2b60      	cmp	r3, #96	; 0x60
 8004ec2:	d050      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x11e>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d877      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d03c      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0xfe>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d873      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d058      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x13e>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d86f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ed8:	2b30      	cmp	r3, #48	; 0x30
 8004eda:	d064      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15e>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d86b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d060      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15e>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d867      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05c      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15e>
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d05a      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x15e>
 8004ef0:	e062      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6899      	ldr	r1, [r3, #8]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f000 fc7d 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
      break;
 8004f1e:	e04f      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6899      	ldr	r1, [r3, #8]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f000 fc66 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f42:	609a      	str	r2, [r3, #8]
      break;
 8004f44:	e03c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f000 fbda 	bl	800570c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2150      	movs	r1, #80	; 0x50
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fc33 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004f64:	e02c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 fbf9 	bl	800576a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2160      	movs	r1, #96	; 0x60
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fc23 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004f84:	e01c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 fbba 	bl	800570c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fc13 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e00c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f000 fc0a 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 8004fb6:	e003      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e000      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a40      	ldr	r2, [pc, #256]	; (8005140 <TIM_Base_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d013      	beq.n	800506c <TIM_Base_SetConfig+0x40>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504a:	d00f      	beq.n	800506c <TIM_Base_SetConfig+0x40>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3d      	ldr	r2, [pc, #244]	; (8005144 <TIM_Base_SetConfig+0x118>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00b      	beq.n	800506c <TIM_Base_SetConfig+0x40>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <TIM_Base_SetConfig+0x11c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a3b      	ldr	r2, [pc, #236]	; (800514c <TIM_Base_SetConfig+0x120>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a3a      	ldr	r2, [pc, #232]	; (8005150 <TIM_Base_SetConfig+0x124>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d108      	bne.n	800507e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2f      	ldr	r2, [pc, #188]	; (8005140 <TIM_Base_SetConfig+0x114>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01f      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d01b      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2c      	ldr	r2, [pc, #176]	; (8005144 <TIM_Base_SetConfig+0x118>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d017      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2b      	ldr	r2, [pc, #172]	; (8005148 <TIM_Base_SetConfig+0x11c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a2a      	ldr	r2, [pc, #168]	; (800514c <TIM_Base_SetConfig+0x120>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00f      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a29      	ldr	r2, [pc, #164]	; (8005150 <TIM_Base_SetConfig+0x124>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a28      	ldr	r2, [pc, #160]	; (8005154 <TIM_Base_SetConfig+0x128>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a27      	ldr	r2, [pc, #156]	; (8005158 <TIM_Base_SetConfig+0x12c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_Base_SetConfig+0x9a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a26      	ldr	r2, [pc, #152]	; (800515c <TIM_Base_SetConfig+0x130>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a10      	ldr	r2, [pc, #64]	; (8005140 <TIM_Base_SetConfig+0x114>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00f      	beq.n	8005124 <TIM_Base_SetConfig+0xf8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a12      	ldr	r2, [pc, #72]	; (8005150 <TIM_Base_SetConfig+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0xf8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a11      	ldr	r2, [pc, #68]	; (8005154 <TIM_Base_SetConfig+0x128>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0xf8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a10      	ldr	r2, [pc, #64]	; (8005158 <TIM_Base_SetConfig+0x12c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0xf8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0f      	ldr	r2, [pc, #60]	; (800515c <TIM_Base_SetConfig+0x130>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d103      	bne.n	800512c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	615a      	str	r2, [r3, #20]
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40013400 	.word	0x40013400
 8005154:	40014000 	.word	0x40014000
 8005158:	40014400 	.word	0x40014400
 800515c:	40014800 	.word	0x40014800

08005160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 0302 	bic.w	r3, r3, #2
 80051ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <TIM_OC1_SetConfig+0x10c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_OC1_SetConfig+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a2b      	ldr	r2, [pc, #172]	; (8005270 <TIM_OC1_SetConfig+0x110>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <TIM_OC1_SetConfig+0x80>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a2a      	ldr	r2, [pc, #168]	; (8005274 <TIM_OC1_SetConfig+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_OC1_SetConfig+0x80>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a29      	ldr	r2, [pc, #164]	; (8005278 <TIM_OC1_SetConfig+0x118>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC1_SetConfig+0x80>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a28      	ldr	r2, [pc, #160]	; (800527c <TIM_OC1_SetConfig+0x11c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10c      	bne.n	80051fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0308 	bic.w	r3, r3, #8
 80051e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <TIM_OC1_SetConfig+0x10c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00f      	beq.n	8005222 <TIM_OC1_SetConfig+0xc2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <TIM_OC1_SetConfig+0x110>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_OC1_SetConfig+0xc2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a19      	ldr	r2, [pc, #100]	; (8005274 <TIM_OC1_SetConfig+0x114>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_OC1_SetConfig+0xc2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <TIM_OC1_SetConfig+0x118>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC1_SetConfig+0xc2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a17      	ldr	r2, [pc, #92]	; (800527c <TIM_OC1_SetConfig+0x11c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d111      	bne.n	8005246 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40013400 	.word	0x40013400
 8005274:	40014000 	.word	0x40014000
 8005278:	40014400 	.word	0x40014400
 800527c:	40014800 	.word	0x40014800

08005280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0210 	bic.w	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0320 	bic.w	r3, r3, #32
 80052ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a28      	ldr	r2, [pc, #160]	; (8005380 <TIM_OC2_SetConfig+0x100>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_OC2_SetConfig+0x6c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a27      	ldr	r2, [pc, #156]	; (8005384 <TIM_OC2_SetConfig+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d10d      	bne.n	8005308 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <TIM_OC2_SetConfig+0x100>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00f      	beq.n	8005330 <TIM_OC2_SetConfig+0xb0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <TIM_OC2_SetConfig+0x104>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00b      	beq.n	8005330 <TIM_OC2_SetConfig+0xb0>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <TIM_OC2_SetConfig+0x108>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d007      	beq.n	8005330 <TIM_OC2_SetConfig+0xb0>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a1a      	ldr	r2, [pc, #104]	; (800538c <TIM_OC2_SetConfig+0x10c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_OC2_SetConfig+0xb0>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a19      	ldr	r2, [pc, #100]	; (8005390 <TIM_OC2_SetConfig+0x110>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d113      	bne.n	8005358 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40013400 	.word	0x40013400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800

08005394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a27      	ldr	r2, [pc, #156]	; (8005490 <TIM_OC3_SetConfig+0xfc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC3_SetConfig+0x6a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a26      	ldr	r2, [pc, #152]	; (8005494 <TIM_OC3_SetConfig+0x100>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10d      	bne.n	800541a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <TIM_OC3_SetConfig+0xfc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00f      	beq.n	8005442 <TIM_OC3_SetConfig+0xae>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <TIM_OC3_SetConfig+0x100>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00b      	beq.n	8005442 <TIM_OC3_SetConfig+0xae>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a1a      	ldr	r2, [pc, #104]	; (8005498 <TIM_OC3_SetConfig+0x104>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d007      	beq.n	8005442 <TIM_OC3_SetConfig+0xae>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <TIM_OC3_SetConfig+0x108>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_OC3_SetConfig+0xae>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <TIM_OC3_SetConfig+0x10c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d113      	bne.n	800546a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40013400 	.word	0x40013400
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800

080054a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <TIM_OC4_SetConfig+0xc0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_OC4_SetConfig+0x84>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <TIM_OC4_SetConfig+0xc4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_OC4_SetConfig+0x84>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a16      	ldr	r2, [pc, #88]	; (800556c <TIM_OC4_SetConfig+0xc8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_OC4_SetConfig+0x84>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <TIM_OC4_SetConfig+0xcc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC4_SetConfig+0x84>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <TIM_OC4_SetConfig+0xd0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d109      	bne.n	800553c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	019b      	lsls	r3, r3, #6
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <TIM_OC5_SetConfig+0xb4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_OC5_SetConfig+0x7a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a16      	ldr	r2, [pc, #88]	; (8005630 <TIM_OC5_SetConfig+0xb8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_OC5_SetConfig+0x7a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <TIM_OC5_SetConfig+0xbc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_OC5_SetConfig+0x7a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <TIM_OC5_SetConfig+0xc0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC5_SetConfig+0x7a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <TIM_OC5_SetConfig+0xc4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d109      	bne.n	8005606 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40013400 	.word	0x40013400
 8005634:	40014000 	.word	0x40014000
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800

08005640 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	051b      	lsls	r3, r3, #20
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <TIM_OC6_SetConfig+0xb8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <TIM_OC6_SetConfig+0x7c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <TIM_OC6_SetConfig+0xbc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_OC6_SetConfig+0x7c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a16      	ldr	r2, [pc, #88]	; (8005700 <TIM_OC6_SetConfig+0xc0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_OC6_SetConfig+0x7c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <TIM_OC6_SetConfig+0xc4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC6_SetConfig+0x7c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a14      	ldr	r2, [pc, #80]	; (8005708 <TIM_OC6_SetConfig+0xc8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40013400 	.word	0x40013400
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800

0800570c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 030a 	bic.w	r3, r3, #10
 8005748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0210 	bic.w	r2, r3, #16
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f043 0307 	orr.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e068      	b.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2d      	ldr	r2, [pc, #180]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d108      	bne.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01d      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005916:	d018      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1b      	ldr	r2, [pc, #108]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a18      	ldr	r2, [pc, #96]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d10c      	bne.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40013400 	.word	0x40013400
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000

0800599c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e042      	b.n	8005a70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fb fc03 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2224      	movs	r2, #36	; 0x24
 8005a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb64 	bl	80060e8 <UART_SetConfig>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e022      	b.n	8005a70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fe54 	bl	80066e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fedb 	bl	8006824 <UART_CheckIdleState>
 8005a6e:	4603      	mov	r3, r0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b0ba      	sub	sp, #232	; 0xe8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005aa2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11b      	bne.n	8005aec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 82d6 	beq.w	800608e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
      }
      return;
 8005aea:	e2d0      	b.n	800608e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 811f 	beq.w	8005d34 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005af6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005afa:	4b8b      	ldr	r3, [pc, #556]	; (8005d28 <HAL_UART_IRQHandler+0x2b0>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b06:	4b89      	ldr	r3, [pc, #548]	; (8005d2c <HAL_UART_IRQHandler+0x2b4>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8112 	beq.w	8005d34 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d011      	beq.n	8005b40 <HAL_UART_IRQHandler+0xc8>
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b36:	f043 0201 	orr.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d011      	beq.n	8005b70 <HAL_UART_IRQHandler+0xf8>
 8005b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b66:	f043 0204 	orr.w	r2, r3, #4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d011      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x128>
 8005b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b96:	f043 0202 	orr.w	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005bbc:	4b5a      	ldr	r3, [pc, #360]	; (8005d28 <HAL_UART_IRQHandler+0x2b0>)
 8005bbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd2:	f043 0208 	orr.w	r2, r3, #8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <HAL_UART_IRQHandler+0x196>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00c      	beq.n	8005c0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 823c 	beq.w	8006092 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d013      	beq.n	8005c4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d105      	bne.n	8005c3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d005      	beq.n	8005c72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d04f      	beq.n	8005d12 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fee9 	bl	8006a4a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d141      	bne.n	8005d0a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1d9      	bne.n	8005c86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d013      	beq.n	8005d02 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <HAL_UART_IRQHandler+0x2b8>)
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fb fea1 	bl	8001a2e <HAL_DMA_Abort_IT>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d017      	beq.n	8005d22 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	e00f      	b.n	8005d22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f9da 	bl	80060bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	e00b      	b.n	8005d22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f9d6 	bl	80060bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	e007      	b.n	8005d22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9d2 	bl	80060bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005d20:	e1b7      	b.n	8006092 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d22:	bf00      	nop
    return;
 8005d24:	e1b5      	b.n	8006092 <HAL_UART_IRQHandler+0x61a>
 8005d26:	bf00      	nop
 8005d28:	10000001 	.word	0x10000001
 8005d2c:	04000120 	.word	0x04000120
 8005d30:	08006b17 	.word	0x08006b17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	f040 814a 	bne.w	8005fd2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8143 	beq.w	8005fd2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 813c 	beq.w	8005fd2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	f040 80b5 	bne.w	8005edc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8187 	beq.w	8006096 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d92:	429a      	cmp	r2, r3
 8005d94:	f080 817f 	bcs.w	8006096 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f040 8086 	bne.w	8005ec0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005de2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1da      	bne.n	8005db4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e1      	bne.n	8005dfe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e3      	bne.n	8005e3a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e90:	f023 0310 	bic.w	r3, r3, #16
 8005e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ea4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e4      	bne.n	8005e80 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fb fd5b 	bl	8001976 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f8fb 	bl	80060d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005eda:	e0dc      	b.n	8006096 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80ce 	beq.w	800609a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80c9 	beq.w	800609a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e4      	bne.n	8005f08 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3308      	adds	r3, #8
 8005f62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f66:	633a      	str	r2, [r7, #48]	; 0x30
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e1      	bne.n	8005f3e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0310 	bic.w	r3, r3, #16
 8005fa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	69b9      	ldr	r1, [r7, #24]
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e4      	bne.n	8005f8e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f880 	bl	80060d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fd0:	e063      	b.n	800609a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00e      	beq.n	8005ffc <HAL_UART_IRQHandler+0x584>
 8005fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fdcf 	bl	8006b98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ffa:	e051      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	d014      	beq.n	8006032 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006024:	2b00      	cmp	r3, #0
 8006026:	d03a      	beq.n	800609e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
    }
    return;
 8006030:	e035      	b.n	800609e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <HAL_UART_IRQHandler+0x5da>
 800603e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fd79 	bl	8006b42 <UART_EndTransmit_IT>
    return;
 8006050:	e026      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d009      	beq.n	8006072 <HAL_UART_IRQHandler+0x5fa>
 800605e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006062:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fda8 	bl	8006bc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006070:	e016      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d010      	beq.n	80060a0 <HAL_UART_IRQHandler+0x628>
 800607e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006082:	2b00      	cmp	r3, #0
 8006084:	da0c      	bge.n	80060a0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fd90 	bl	8006bac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800608c:	e008      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
      return;
 800608e:	bf00      	nop
 8006090:	e006      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
    return;
 8006092:	bf00      	nop
 8006094:	e004      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
      return;
 8006096:	bf00      	nop
 8006098:	e002      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
      return;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_UART_IRQHandler+0x628>
    return;
 800609e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80060a0:	37e8      	adds	r7, #232	; 0xe8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop

080060a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ec:	b08c      	sub	sp, #48	; 0x30
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	431a      	orrs	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	431a      	orrs	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	4313      	orrs	r3, r2
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4baa      	ldr	r3, [pc, #680]	; (80063c0 <UART_SetConfig+0x2d8>)
 8006118:	4013      	ands	r3, r2
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006120:	430b      	orrs	r3, r1
 8006122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a9f      	ldr	r2, [pc, #636]	; (80063c4 <UART_SetConfig+0x2dc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006150:	4313      	orrs	r3, r2
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800615e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006168:	430b      	orrs	r3, r1
 800616a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	f023 010f 	bic.w	r1, r3, #15
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a90      	ldr	r2, [pc, #576]	; (80063c8 <UART_SetConfig+0x2e0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d125      	bne.n	80061d8 <UART_SetConfig+0xf0>
 800618c:	4b8f      	ldr	r3, [pc, #572]	; (80063cc <UART_SetConfig+0x2e4>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b03      	cmp	r3, #3
 8006198:	d81a      	bhi.n	80061d0 <UART_SetConfig+0xe8>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0xb8>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061c1 	.word	0x080061c1
 80061a8:	080061b9 	.word	0x080061b9
 80061ac:	080061c9 	.word	0x080061c9
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b6:	e116      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80061b8:	2302      	movs	r3, #2
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061be:	e112      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80061c0:	2304      	movs	r3, #4
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c6:	e10e      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80061c8:	2308      	movs	r3, #8
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ce:	e10a      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80061d0:	2310      	movs	r3, #16
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d6:	e106      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a7c      	ldr	r2, [pc, #496]	; (80063d0 <UART_SetConfig+0x2e8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d138      	bne.n	8006254 <UART_SetConfig+0x16c>
 80061e2:	4b7a      	ldr	r3, [pc, #488]	; (80063cc <UART_SetConfig+0x2e4>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e8:	f003 030c 	and.w	r3, r3, #12
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d82d      	bhi.n	800624c <UART_SetConfig+0x164>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x110>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	0800624d 	.word	0x0800624d
 8006200:	0800624d 	.word	0x0800624d
 8006204:	0800624d 	.word	0x0800624d
 8006208:	0800623d 	.word	0x0800623d
 800620c:	0800624d 	.word	0x0800624d
 8006210:	0800624d 	.word	0x0800624d
 8006214:	0800624d 	.word	0x0800624d
 8006218:	08006235 	.word	0x08006235
 800621c:	0800624d 	.word	0x0800624d
 8006220:	0800624d 	.word	0x0800624d
 8006224:	0800624d 	.word	0x0800624d
 8006228:	08006245 	.word	0x08006245
 800622c:	2300      	movs	r3, #0
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006232:	e0d8      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006234:	2302      	movs	r3, #2
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e0d4      	b.n	80063e6 <UART_SetConfig+0x2fe>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e0d0      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624a:	e0cc      	b.n	80063e6 <UART_SetConfig+0x2fe>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006252:	e0c8      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5e      	ldr	r2, [pc, #376]	; (80063d4 <UART_SetConfig+0x2ec>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d125      	bne.n	80062aa <UART_SetConfig+0x1c2>
 800625e:	4b5b      	ldr	r3, [pc, #364]	; (80063cc <UART_SetConfig+0x2e4>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d016      	beq.n	800629a <UART_SetConfig+0x1b2>
 800626c:	2b30      	cmp	r3, #48	; 0x30
 800626e:	d818      	bhi.n	80062a2 <UART_SetConfig+0x1ba>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d00a      	beq.n	800628a <UART_SetConfig+0x1a2>
 8006274:	2b20      	cmp	r3, #32
 8006276:	d814      	bhi.n	80062a2 <UART_SetConfig+0x1ba>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <UART_SetConfig+0x19a>
 800627c:	2b10      	cmp	r3, #16
 800627e:	d008      	beq.n	8006292 <UART_SetConfig+0x1aa>
 8006280:	e00f      	b.n	80062a2 <UART_SetConfig+0x1ba>
 8006282:	2300      	movs	r3, #0
 8006284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006288:	e0ad      	b.n	80063e6 <UART_SetConfig+0x2fe>
 800628a:	2302      	movs	r3, #2
 800628c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006290:	e0a9      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006292:	2304      	movs	r3, #4
 8006294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006298:	e0a5      	b.n	80063e6 <UART_SetConfig+0x2fe>
 800629a:	2308      	movs	r3, #8
 800629c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062a0:	e0a1      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80062a2:	2310      	movs	r3, #16
 80062a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062a8:	e09d      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a4a      	ldr	r2, [pc, #296]	; (80063d8 <UART_SetConfig+0x2f0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d125      	bne.n	8006300 <UART_SetConfig+0x218>
 80062b4:	4b45      	ldr	r3, [pc, #276]	; (80063cc <UART_SetConfig+0x2e4>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062be:	2bc0      	cmp	r3, #192	; 0xc0
 80062c0:	d016      	beq.n	80062f0 <UART_SetConfig+0x208>
 80062c2:	2bc0      	cmp	r3, #192	; 0xc0
 80062c4:	d818      	bhi.n	80062f8 <UART_SetConfig+0x210>
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	d00a      	beq.n	80062e0 <UART_SetConfig+0x1f8>
 80062ca:	2b80      	cmp	r3, #128	; 0x80
 80062cc:	d814      	bhi.n	80062f8 <UART_SetConfig+0x210>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <UART_SetConfig+0x1f0>
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d008      	beq.n	80062e8 <UART_SetConfig+0x200>
 80062d6:	e00f      	b.n	80062f8 <UART_SetConfig+0x210>
 80062d8:	2300      	movs	r3, #0
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062de:	e082      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80062e0:	2302      	movs	r3, #2
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e6:	e07e      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80062e8:	2304      	movs	r3, #4
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ee:	e07a      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80062f0:	2308      	movs	r3, #8
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f6:	e076      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80062f8:	2310      	movs	r3, #16
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062fe:	e072      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a35      	ldr	r2, [pc, #212]	; (80063dc <UART_SetConfig+0x2f4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d12a      	bne.n	8006360 <UART_SetConfig+0x278>
 800630a:	4b30      	ldr	r3, [pc, #192]	; (80063cc <UART_SetConfig+0x2e4>)
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006318:	d01a      	beq.n	8006350 <UART_SetConfig+0x268>
 800631a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631e:	d81b      	bhi.n	8006358 <UART_SetConfig+0x270>
 8006320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006324:	d00c      	beq.n	8006340 <UART_SetConfig+0x258>
 8006326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632a:	d815      	bhi.n	8006358 <UART_SetConfig+0x270>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <UART_SetConfig+0x250>
 8006330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006334:	d008      	beq.n	8006348 <UART_SetConfig+0x260>
 8006336:	e00f      	b.n	8006358 <UART_SetConfig+0x270>
 8006338:	2300      	movs	r3, #0
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633e:	e052      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006340:	2302      	movs	r3, #2
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006346:	e04e      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006348:	2304      	movs	r3, #4
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800634e:	e04a      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006350:	2308      	movs	r3, #8
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006356:	e046      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006358:	2310      	movs	r3, #16
 800635a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800635e:	e042      	b.n	80063e6 <UART_SetConfig+0x2fe>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <UART_SetConfig+0x2dc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d13a      	bne.n	80063e0 <UART_SetConfig+0x2f8>
 800636a:	4b18      	ldr	r3, [pc, #96]	; (80063cc <UART_SetConfig+0x2e4>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006378:	d01a      	beq.n	80063b0 <UART_SetConfig+0x2c8>
 800637a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800637e:	d81b      	bhi.n	80063b8 <UART_SetConfig+0x2d0>
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006384:	d00c      	beq.n	80063a0 <UART_SetConfig+0x2b8>
 8006386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638a:	d815      	bhi.n	80063b8 <UART_SetConfig+0x2d0>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <UART_SetConfig+0x2b0>
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d008      	beq.n	80063a8 <UART_SetConfig+0x2c0>
 8006396:	e00f      	b.n	80063b8 <UART_SetConfig+0x2d0>
 8006398:	2300      	movs	r3, #0
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e022      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80063a0:	2302      	movs	r3, #2
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e01e      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80063a8:	2304      	movs	r3, #4
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ae:	e01a      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80063b0:	2308      	movs	r3, #8
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b6:	e016      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80063b8:	2310      	movs	r3, #16
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063be:	e012      	b.n	80063e6 <UART_SetConfig+0x2fe>
 80063c0:	cfff69f3 	.word	0xcfff69f3
 80063c4:	40008000 	.word	0x40008000
 80063c8:	40013800 	.word	0x40013800
 80063cc:	40021000 	.word	0x40021000
 80063d0:	40004400 	.word	0x40004400
 80063d4:	40004800 	.word	0x40004800
 80063d8:	40004c00 	.word	0x40004c00
 80063dc:	40005000 	.word	0x40005000
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4aae      	ldr	r2, [pc, #696]	; (80066a4 <UART_SetConfig+0x5bc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	f040 8097 	bne.w	8006520 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d823      	bhi.n	8006442 <UART_SetConfig+0x35a>
 80063fa:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <UART_SetConfig+0x318>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006425 	.word	0x08006425
 8006404:	08006443 	.word	0x08006443
 8006408:	0800642d 	.word	0x0800642d
 800640c:	08006443 	.word	0x08006443
 8006410:	08006433 	.word	0x08006433
 8006414:	08006443 	.word	0x08006443
 8006418:	08006443 	.word	0x08006443
 800641c:	08006443 	.word	0x08006443
 8006420:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006424:	f7fd f9b8 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8006428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800642a:	e010      	b.n	800644e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b9e      	ldr	r3, [pc, #632]	; (80066a8 <UART_SetConfig+0x5c0>)
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006430:	e00d      	b.n	800644e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fd f919 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8006436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006438:	e009      	b.n	800644e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006440:	e005      	b.n	800644e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800644c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8130 	beq.w	80066b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	4a94      	ldr	r2, [pc, #592]	; (80066ac <UART_SetConfig+0x5c4>)
 800645c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006460:	461a      	mov	r2, r3
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	fbb3 f3f2 	udiv	r3, r3, r2
 8006468:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	4413      	add	r3, r2
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d305      	bcc.n	8006486 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	429a      	cmp	r2, r3
 8006484:	d903      	bls.n	800648e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800648c:	e113      	b.n	80066b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	2200      	movs	r2, #0
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	60fa      	str	r2, [r7, #12]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	4a84      	ldr	r2, [pc, #528]	; (80066ac <UART_SetConfig+0x5c4>)
 800649c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2200      	movs	r2, #0
 80064a4:	603b      	str	r3, [r7, #0]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064b0:	f7f9 fea4 	bl	80001fc <__aeabi_uldivmod>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4610      	mov	r0, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	020b      	lsls	r3, r1, #8
 80064c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064ca:	0202      	lsls	r2, r0, #8
 80064cc:	6979      	ldr	r1, [r7, #20]
 80064ce:	6849      	ldr	r1, [r1, #4]
 80064d0:	0849      	lsrs	r1, r1, #1
 80064d2:	2000      	movs	r0, #0
 80064d4:	460c      	mov	r4, r1
 80064d6:	4605      	mov	r5, r0
 80064d8:	eb12 0804 	adds.w	r8, r2, r4
 80064dc:	eb43 0905 	adc.w	r9, r3, r5
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	469a      	mov	sl, r3
 80064e8:	4693      	mov	fp, r2
 80064ea:	4652      	mov	r2, sl
 80064ec:	465b      	mov	r3, fp
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7f9 fe83 	bl	80001fc <__aeabi_uldivmod>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4613      	mov	r3, r2
 80064fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006504:	d308      	bcc.n	8006518 <UART_SetConfig+0x430>
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650c:	d204      	bcs.n	8006518 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a3a      	ldr	r2, [r7, #32]
 8006514:	60da      	str	r2, [r3, #12]
 8006516:	e0ce      	b.n	80066b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800651e:	e0ca      	b.n	80066b6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006528:	d166      	bne.n	80065f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800652a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800652e:	2b08      	cmp	r3, #8
 8006530:	d827      	bhi.n	8006582 <UART_SetConfig+0x49a>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x450>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006565 	.word	0x08006565
 8006540:	0800656d 	.word	0x0800656d
 8006544:	08006583 	.word	0x08006583
 8006548:	08006573 	.word	0x08006573
 800654c:	08006583 	.word	0x08006583
 8006550:	08006583 	.word	0x08006583
 8006554:	08006583 	.word	0x08006583
 8006558:	0800657b 	.word	0x0800657b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800655c:	f7fd f91c 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8006560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006562:	e014      	b.n	800658e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006564:	f7fd f92e 	bl	80037c4 <HAL_RCC_GetPCLK2Freq>
 8006568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800656a:	e010      	b.n	800658e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656c:	4b4e      	ldr	r3, [pc, #312]	; (80066a8 <UART_SetConfig+0x5c0>)
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006570:	e00d      	b.n	800658e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006572:	f7fd f879 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8006576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006578:	e009      	b.n	800658e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006580:	e005      	b.n	800658e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800658c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 8090 	beq.w	80066b6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	4a44      	ldr	r2, [pc, #272]	; (80066ac <UART_SetConfig+0x5c4>)
 800659c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065a8:	005a      	lsls	r2, r3, #1
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	441a      	add	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	2b0f      	cmp	r3, #15
 80065c0:	d916      	bls.n	80065f0 <UART_SetConfig+0x508>
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c8:	d212      	bcs.n	80065f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f023 030f 	bic.w	r3, r3, #15
 80065d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	b29a      	uxth	r2, r3
 80065e0:	8bfb      	ldrh	r3, [r7, #30]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	8bfa      	ldrh	r2, [r7, #30]
 80065ec:	60da      	str	r2, [r3, #12]
 80065ee:	e062      	b.n	80066b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065f6:	e05e      	b.n	80066b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d828      	bhi.n	8006652 <UART_SetConfig+0x56a>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x520>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	0800662d 	.word	0x0800662d
 800660c:	08006635 	.word	0x08006635
 8006610:	0800663d 	.word	0x0800663d
 8006614:	08006653 	.word	0x08006653
 8006618:	08006643 	.word	0x08006643
 800661c:	08006653 	.word	0x08006653
 8006620:	08006653 	.word	0x08006653
 8006624:	08006653 	.word	0x08006653
 8006628:	0800664b 	.word	0x0800664b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800662c:	f7fd f8b4 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8006630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006632:	e014      	b.n	800665e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006634:	f7fd f8c6 	bl	80037c4 <HAL_RCC_GetPCLK2Freq>
 8006638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800663a:	e010      	b.n	800665e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800663c:	4b1a      	ldr	r3, [pc, #104]	; (80066a8 <UART_SetConfig+0x5c0>)
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006640:	e00d      	b.n	800665e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006642:	f7fd f811 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8006646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006648:	e009      	b.n	800665e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006650:	e005      	b.n	800665e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800665c:	bf00      	nop
    }

    if (pclk != 0U)
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	d028      	beq.n	80066b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	4a10      	ldr	r2, [pc, #64]	; (80066ac <UART_SetConfig+0x5c4>)
 800666a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800666e:	461a      	mov	r2, r3
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	fbb3 f2f2 	udiv	r2, r3, r2
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	441a      	add	r2, r3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	fbb2 f3f3 	udiv	r3, r2, r3
 8006686:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	2b0f      	cmp	r3, #15
 800668c:	d910      	bls.n	80066b0 <UART_SetConfig+0x5c8>
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006694:	d20c      	bcs.n	80066b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	b29a      	uxth	r2, r3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60da      	str	r2, [r3, #12]
 80066a0:	e009      	b.n	80066b6 <UART_SetConfig+0x5ce>
 80066a2:	bf00      	nop
 80066a4:	40008000 	.word	0x40008000
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	0800bebc 	.word	0x0800bebc
      }
      else
      {
        ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2200      	movs	r2, #0
 80066d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80066d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3730      	adds	r7, #48	; 0x30
 80066da:	46bd      	mov	sp, r7
 80066dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067de:	d10a      	bne.n	80067f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006834:	f7fa ff5e 	bl	80016f4 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10e      	bne.n	8006866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f82f 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e025      	b.n	80068b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d10e      	bne.n	8006892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f819 	bl	80068ba <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e00f      	b.n	80068b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b09c      	sub	sp, #112	; 0x70
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ca:	e0a9      	b.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	f000 80a5 	beq.w	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d6:	f7fa ff0d 	bl	80016f4 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d302      	bcc.n	80068ec <UART_WaitOnFlagUntilTimeout+0x32>
 80068e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d140      	bne.n	800696e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006900:	667b      	str	r3, [r7, #100]	; 0x64
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800690c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e6      	bne.n	80068ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	663b      	str	r3, [r7, #96]	; 0x60
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800693e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800694c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e5      	bne.n	800691e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e069      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d051      	beq.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d149      	bne.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006994:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
 80069b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	613b      	str	r3, [r7, #16]
   return(result);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069e8:	623a      	str	r2, [r7, #32]
 80069ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	69f9      	ldr	r1, [r7, #28]
 80069ee:	6a3a      	ldr	r2, [r7, #32]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e010      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f43f af46 	beq.w	80068cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3770      	adds	r7, #112	; 0x70
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b095      	sub	sp, #84	; 0x54
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a70:	643b      	str	r3, [r7, #64]	; 0x40
 8006a72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e3      	bne.n	8006a84 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d118      	bne.n	8006af6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0310 	bic.w	r3, r3, #16
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6979      	ldr	r1, [r7, #20]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	613b      	str	r3, [r7, #16]
   return(result);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e6      	bne.n	8006ac4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b0a:	bf00      	nop
 8006b0c:	3754      	adds	r7, #84	; 0x54
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fac1 	bl	80060bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b088      	sub	sp, #32
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6979      	ldr	r1, [r7, #20]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	613b      	str	r3, [r7, #16]
   return(result);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e6      	bne.n	8006b4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fa8c 	bl	80060a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b90:	bf00      	nop
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_UARTEx_DisableFifoMode+0x16>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e027      	b.n	8006c3a <HAL_UARTEx_DisableFifoMode+0x66>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2224      	movs	r2, #36	; 0x24
 8006bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0201 	bic.w	r2, r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e02d      	b.n	8006cba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2224      	movs	r2, #36	; 0x24
 8006c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f850 	bl	8006d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e02d      	b.n	8006d36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2224      	movs	r2, #36	; 0x24
 8006ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f812 	bl	8006d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d108      	bne.n	8006d62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d60:	e031      	b.n	8006dc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d62:	2308      	movs	r3, #8
 8006d64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d66:	2308      	movs	r3, #8
 8006d68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	0e5b      	lsrs	r3, r3, #25
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f003 0307 	and.w	r3, r3, #7
 8006d78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	0f5b      	lsrs	r3, r3, #29
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	7b3a      	ldrb	r2, [r7, #12]
 8006d8e:	4911      	ldr	r1, [pc, #68]	; (8006dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006d90:	5c8a      	ldrb	r2, [r1, r2]
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d96:	7b3a      	ldrb	r2, [r7, #12]
 8006d98:	490f      	ldr	r1, [pc, #60]	; (8006dd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006d9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	7b7a      	ldrb	r2, [r7, #13]
 8006dac:	4909      	ldr	r1, [pc, #36]	; (8006dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006dae:	5c8a      	ldrb	r2, [r1, r2]
 8006db0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006db4:	7b7a      	ldrb	r2, [r7, #13]
 8006db6:	4908      	ldr	r1, [pc, #32]	; (8006dd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006db8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	0800bed4 	.word	0x0800bed4
 8006dd8:	0800bedc 	.word	0x0800bedc

08006ddc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fcb2 	bl	8008756 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006e04:	b5b0      	push	{r4, r5, r7, lr}
 8006e06:	b096      	sub	sp, #88	; 0x58
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006e12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d107      	bne.n	8006e2a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2188      	movs	r1, #136	; 0x88
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f004 feaa 	bl	800bb78 <VL53L0X_WrByte>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e38:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006e42:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a9e      	ldr	r2, [pc, #632]	; (80070c4 <VL53L0X_DataInit+0x2c0>)
 8006e4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a9d      	ldr	r2, [pc, #628]	; (80070c8 <VL53L0X_DataInit+0x2c4>)
 8006e52:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fac2 	bl	80073ec <VL53L0X_GetDeviceParameters>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006e6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d112      	bne.n	8006e9c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006e76:	2300      	movs	r3, #0
 8006e78:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f103 0410 	add.w	r4, r3, #16
 8006e84:	f107 0510 	add.w	r5, r7, #16
 8006e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2264      	movs	r2, #100	; 0x64
 8006ea0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006eaa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006eb4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006ebe:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006eca:	2201      	movs	r2, #1
 8006ecc:	2180      	movs	r1, #128	; 0x80
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f004 fe52 	bl	800bb78 <VL53L0X_WrByte>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	21ff      	movs	r1, #255	; 0xff
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f004 fe46 	bl	800bb78 <VL53L0X_WrByte>
 8006eec:	4603      	mov	r3, r0
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006efa:	2200      	movs	r2, #0
 8006efc:	2100      	movs	r1, #0
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f004 fe3a 	bl	800bb78 <VL53L0X_WrByte>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006f12:	f107 030f 	add.w	r3, r7, #15
 8006f16:	461a      	mov	r2, r3
 8006f18:	2191      	movs	r1, #145	; 0x91
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f004 feae 	bl	800bc7c <VL53L0X_RdByte>
 8006f20:	4603      	mov	r3, r0
 8006f22:	461a      	mov	r2, r3
 8006f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006f2e:	7bfa      	ldrb	r2, [r7, #15]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006f36:	2201      	movs	r2, #1
 8006f38:	2100      	movs	r1, #0
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f004 fe1c 	bl	800bb78 <VL53L0X_WrByte>
 8006f40:	4603      	mov	r3, r0
 8006f42:	461a      	mov	r2, r3
 8006f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f4e:	2200      	movs	r2, #0
 8006f50:	21ff      	movs	r1, #255	; 0xff
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f004 fe10 	bl	800bb78 <VL53L0X_WrByte>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006f66:	2200      	movs	r2, #0
 8006f68:	2180      	movs	r1, #128	; 0x80
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f004 fe04 	bl	800bb78 <VL53L0X_WrByte>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006f7e:	2300      	movs	r3, #0
 8006f80:	653b      	str	r3, [r7, #80]	; 0x50
 8006f82:	e014      	b.n	8006fae <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006f84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d114      	bne.n	8006fb6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2201      	movs	r2, #1
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fd35 	bl	8007a04 <VL53L0X_SetLimitCheckEnable>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006faa:	3301      	adds	r3, #1
 8006fac:	653b      	str	r3, [r7, #80]	; 0x50
 8006fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb0:	2b05      	cmp	r3, #5
 8006fb2:	dde7      	ble.n	8006f84 <VL53L0X_DataInit+0x180>
 8006fb4:	e000      	b.n	8006fb8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006fb6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006fb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d107      	bne.n	8006fd0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fd1d 	bl	8007a04 <VL53L0X_SetLimitCheckEnable>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2103      	movs	r1, #3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fd11 	bl	8007a04 <VL53L0X_SetLimitCheckEnable>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006fe8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d107      	bne.n	8007000 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2104      	movs	r1, #4
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fd05 	bl	8007a04 <VL53L0X_SetLimitCheckEnable>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007000:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007008:	2200      	movs	r2, #0
 800700a:	2105      	movs	r1, #5
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fcf9 	bl	8007a04 <VL53L0X_SetLimitCheckEnable>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007018:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800701c:	2b00      	cmp	r3, #0
 800701e:	d108      	bne.n	8007032 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007020:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007024:	2100      	movs	r1, #0
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fd9c 	bl	8007b64 <VL53L0X_SetLimitCheckValue>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007032:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007036:	2b00      	cmp	r3, #0
 8007038:	d108      	bne.n	800704c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800703a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fd8f 	bl	8007b64 <VL53L0X_SetLimitCheckValue>
 8007046:	4603      	mov	r3, r0
 8007048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800704c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007050:	2b00      	cmp	r3, #0
 8007052:	d108      	bne.n	8007066 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007054:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007058:	2102      	movs	r1, #2
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fd82 	bl	8007b64 <VL53L0X_SetLimitCheckValue>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007066:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800706a:	2b00      	cmp	r3, #0
 800706c:	d107      	bne.n	800707e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800706e:	2200      	movs	r2, #0
 8007070:	2103      	movs	r1, #3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fd76 	bl	8007b64 <VL53L0X_SetLimitCheckValue>
 8007078:	4603      	mov	r3, r0
 800707a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800707e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	22ff      	movs	r2, #255	; 0xff
 800708a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800708e:	22ff      	movs	r2, #255	; 0xff
 8007090:	2101      	movs	r1, #1
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f004 fd70 	bl	800bb78 <VL53L0X_WrByte>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80070a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80070b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3758      	adds	r7, #88	; 0x58
 80070be:	46bd      	mov	sp, r7
 80070c0:	bdb0      	pop	{r4, r5, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	00016b85 	.word	0x00016b85
 80070c8:	000970a4 	.word	0x000970a4

080070cc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80070cc:	b5b0      	push	{r4, r5, r7, lr}
 80070ce:	b09e      	sub	sp, #120	; 0x78
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80070da:	f107 031c 	add.w	r3, r7, #28
 80070de:	2240      	movs	r2, #64	; 0x40
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f004 feaa 	bl	800be3c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8007108:	2101      	movs	r1, #1
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f002 fa79 	bl	8009602 <VL53L0X_get_info_from_device>
 8007110:	4603      	mov	r3, r0
 8007112:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800711c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8007128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800712c:	2b01      	cmp	r3, #1
 800712e:	d80d      	bhi.n	800714c <VL53L0X_StaticInit+0x80>
 8007130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007134:	2b01      	cmp	r3, #1
 8007136:	d102      	bne.n	800713e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8007138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800713a:	2b20      	cmp	r3, #32
 800713c:	d806      	bhi.n	800714c <VL53L0X_StaticInit+0x80>
 800713e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10e      	bne.n	8007164 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8007146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007148:	2b0c      	cmp	r3, #12
 800714a:	d90b      	bls.n	8007164 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800714c:	f107 0218 	add.w	r2, r7, #24
 8007150:	f107 0314 	add.w	r3, r7, #20
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fcf8 	bl	8008b4c <VL53L0X_perform_ref_spad_management>
 800715c:	4603      	mov	r3, r0
 800715e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007162:	e009      	b.n	8007178 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007168:	461a      	mov	r2, r3
 800716a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fef9 	bl	8008f64 <VL53L0X_set_reference_spads>
 8007172:	4603      	mov	r3, r0
 8007174:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007178:	4b94      	ldr	r3, [pc, #592]	; (80073cc <VL53L0X_StaticInit+0x300>)
 800717a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800717c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10f      	bne.n	80071a4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800718a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800718e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800719c:	66bb      	str	r3, [r7, #104]	; 0x68
 800719e:	e001      	b.n	80071a4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80071a0:	4b8a      	ldr	r3, [pc, #552]	; (80073cc <VL53L0X_StaticInit+0x300>)
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80071a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80071ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f003 fdcc 	bl	800ad4c <VL53L0X_load_tuning_settings>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80071ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80071c2:	2300      	movs	r3, #0
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	2304      	movs	r3, #4
 80071c8:	2200      	movs	r2, #0
 80071ca:	2100      	movs	r1, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 f8f1 	bl	80083b4 <VL53L0X_SetGpioConfig>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80071d8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d121      	bne.n	8007224 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071e0:	2201      	movs	r2, #1
 80071e2:	21ff      	movs	r1, #255	; 0xff
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f004 fcc7 	bl	800bb78 <VL53L0X_WrByte>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80071f0:	f107 031a 	add.w	r3, r7, #26
 80071f4:	461a      	mov	r2, r3
 80071f6:	2184      	movs	r1, #132	; 0x84
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f004 fd69 	bl	800bcd0 <VL53L0X_RdWord>
 80071fe:	4603      	mov	r3, r0
 8007200:	461a      	mov	r2, r3
 8007202:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007206:	4313      	orrs	r3, r2
 8007208:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800720c:	2200      	movs	r2, #0
 800720e:	21ff      	movs	r1, #255	; 0xff
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f004 fcb1 	bl	800bb78 <VL53L0X_WrByte>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
 800721a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800721e:	4313      	orrs	r3, r2
 8007220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007224:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800722c:	8b7b      	ldrh	r3, [r7, #26]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	461a      	mov	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8007238:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800723c:	2b00      	cmp	r3, #0
 800723e:	d108      	bne.n	8007252 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007240:	f107 031c 	add.w	r3, r7, #28
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8d0 	bl	80073ec <VL53L0X_GetDeviceParameters>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007252:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d110      	bne.n	800727c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800725a:	f107 0319 	add.w	r3, r7, #25
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f992 	bl	800758a <VL53L0X_GetFractionEnable>
 8007266:	4603      	mov	r3, r0
 8007268:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800726c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007274:	7e7a      	ldrb	r2, [r7, #25]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800727c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10e      	bne.n	80072a2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f103 0410 	add.w	r4, r3, #16
 800728a:	f107 051c 	add.w	r5, r7, #28
 800728e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800729a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800729e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80072a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d111      	bne.n	80072ce <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80072aa:	f107 0319 	add.w	r3, r7, #25
 80072ae:	461a      	mov	r2, r3
 80072b0:	2101      	movs	r1, #1
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f004 fce2 	bl	800bc7c <VL53L0X_RdByte>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80072be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80072c6:	7e7a      	ldrb	r2, [r7, #25]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80072ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d107      	bne.n	80072e6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9ca 	bl	8007674 <VL53L0X_SetSequenceStepEnable>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80072e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d107      	bne.n	80072fe <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80072ee:	2200      	movs	r2, #0
 80072f0:	2102      	movs	r1, #2
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9be 	bl	8007674 <VL53L0X_SetSequenceStepEnable>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80072fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2203      	movs	r2, #3
 800730a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800730e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007316:	f107 0313 	add.w	r3, r7, #19
 800731a:	461a      	mov	r2, r3
 800731c:	2100      	movs	r1, #0
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f990 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800732a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007332:	7cfa      	ldrb	r2, [r7, #19]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800733a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007342:	f107 0313 	add.w	r3, r7, #19
 8007346:	461a      	mov	r2, r3
 8007348:	2101      	movs	r1, #1
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f97a 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 8007350:	4603      	mov	r3, r0
 8007352:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007356:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800735e:	7cfa      	ldrb	r2, [r7, #19]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007366:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	461a      	mov	r2, r3
 8007374:	2103      	movs	r1, #3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f002 fec4 	bl	800a104 <get_sequence_step_timeout>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007382:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007392:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	461a      	mov	r2, r3
 80073a0:	2104      	movs	r1, #4
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f002 feae 	bl	800a104 <get_sequence_step_timeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3770      	adds	r7, #112	; 0x70
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000010 	.word	0x20000010

080073d0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80073d8:	239d      	movs	r3, #157	; 0x9d
 80073da:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80073dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8b0 	bl	8007564 <VL53L0X_GetDeviceMode>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d107      	bne.n	8007420 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa78 	bl	800790c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2200      	movs	r2, #0
 800742c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800742e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	3310      	adds	r3, #16
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 faae 	bl	800799e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8007446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d107      	bne.n	800745e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fcc1 	bl	8006ddc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800745e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d134      	bne.n	80074d0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007466:	2300      	movs	r3, #0
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	e02a      	b.n	80074c2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800746c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d12a      	bne.n	80074ca <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	b299      	uxth	r1, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	3308      	adds	r3, #8
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	4413      	add	r3, r2
 8007482:	3304      	adds	r3, #4
 8007484:	461a      	mov	r2, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fbce 	bl	8007c28 <VL53L0X_GetLimitCheckValue>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	4313      	orrs	r3, r2
 8007494:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d117      	bne.n	80074ce <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	b299      	uxth	r1, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3318      	adds	r3, #24
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4413      	add	r3, r2
 80074aa:	461a      	mov	r2, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fb35 	bl	8007b1c <VL53L0X_GetLimitCheckEnable>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	3301      	adds	r3, #1
 80074c0:	60bb      	str	r3, [r7, #8]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	ddd1      	ble.n	800746c <VL53L0X_GetDeviceParameters+0x80>
 80074c8:	e002      	b.n	80074d0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80074ce:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d107      	bne.n	80074e8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	333c      	adds	r3, #60	; 0x3c
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fc30 	bl	8007d44 <VL53L0X_GetWrapAroundCheckEnable>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80074e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d107      	bne.n	8007500 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f879 	bl	80075ee <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	2b15      	cmp	r3, #21
 8007520:	bf8c      	ite	hi
 8007522:	2201      	movhi	r2, #1
 8007524:	2200      	movls	r2, #0
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	2a00      	cmp	r2, #0
 800752a:	d10e      	bne.n	800754a <VL53L0X_SetDeviceMode+0x3e>
 800752c:	2201      	movs	r2, #1
 800752e:	409a      	lsls	r2, r3
 8007530:	4b0b      	ldr	r3, [pc, #44]	; (8007560 <VL53L0X_SetDeviceMode+0x54>)
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	bf14      	ite	ne
 8007538:	2301      	movne	r3, #1
 800753a:	2300      	moveq	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	741a      	strb	r2, [r3, #16]
		break;
 8007548:	e001      	b.n	800754e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800754a:	23f8      	movs	r3, #248	; 0xf8
 800754c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800754e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	0030000b 	.word	0x0030000b

08007564 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	7c1a      	ldrb	r2, [r3, #16]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800757a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	2109      	movs	r1, #9
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f004 fb6d 	bl	800bc7c <VL53L0X_RdByte>
 80075a2:	4603      	mov	r3, r0
 80075a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80075a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80075bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f003 fa26 	bl	800aa2a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80075e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f003 faf3 	bl	800abea <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
 8007620:	4613      	mov	r3, r2
 8007622:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8007628:	78ba      	ldrb	r2, [r7, #2]
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f002 ff3b 	bl	800a4aa <VL53L0X_set_vcsel_pulse_period>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	460b      	mov	r3, r1
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007652:	2300      	movs	r3, #0
 8007654:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4619      	mov	r1, r3
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f003 f9ad 	bl	800a9bc <VL53L0X_get_vcsel_pulse_period>
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
 8007680:	4613      	mov	r3, r2
 8007682:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007684:	2300      	movs	r3, #0
 8007686:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007690:	f107 030f 	add.w	r3, r7, #15
 8007694:	461a      	mov	r2, r3
 8007696:	2101      	movs	r1, #1
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f004 faef 	bl	800bc7c <VL53L0X_RdByte>
 800769e:	4603      	mov	r3, r0
 80076a0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80076a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d15a      	bne.n	8007764 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80076ae:	78bb      	ldrb	r3, [r7, #2]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d12b      	bne.n	800770c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d825      	bhi.n	8007706 <VL53L0X_SetSequenceStepEnable+0x92>
 80076ba:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80076bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c0:	080076d5 	.word	0x080076d5
 80076c4:	080076df 	.word	0x080076df
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080076f3 	.word	0x080076f3
 80076d0:	080076fd 	.word	0x080076fd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80076d4:	7dbb      	ldrb	r3, [r7, #22]
 80076d6:	f043 0310 	orr.w	r3, r3, #16
 80076da:	75bb      	strb	r3, [r7, #22]
				break;
 80076dc:	e043      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80076de:	7dbb      	ldrb	r3, [r7, #22]
 80076e0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80076e4:	75bb      	strb	r3, [r7, #22]
				break;
 80076e6:	e03e      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80076e8:	7dbb      	ldrb	r3, [r7, #22]
 80076ea:	f043 0304 	orr.w	r3, r3, #4
 80076ee:	75bb      	strb	r3, [r7, #22]
				break;
 80076f0:	e039      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80076f2:	7dbb      	ldrb	r3, [r7, #22]
 80076f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f8:	75bb      	strb	r3, [r7, #22]
				break;
 80076fa:	e034      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80076fc:	7dbb      	ldrb	r3, [r7, #22]
 80076fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007702:	75bb      	strb	r3, [r7, #22]
				break;
 8007704:	e02f      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007706:	23fc      	movs	r3, #252	; 0xfc
 8007708:	75fb      	strb	r3, [r7, #23]
 800770a:	e02c      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	2b04      	cmp	r3, #4
 8007710:	d825      	bhi.n	800775e <VL53L0X_SetSequenceStepEnable+0xea>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800772d 	.word	0x0800772d
 800771c:	08007737 	.word	0x08007737
 8007720:	08007741 	.word	0x08007741
 8007724:	0800774b 	.word	0x0800774b
 8007728:	08007755 	.word	0x08007755
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800772c:	7dbb      	ldrb	r3, [r7, #22]
 800772e:	f023 0310 	bic.w	r3, r3, #16
 8007732:	75bb      	strb	r3, [r7, #22]
				break;
 8007734:	e017      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007736:	7dbb      	ldrb	r3, [r7, #22]
 8007738:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800773c:	75bb      	strb	r3, [r7, #22]
				break;
 800773e:	e012      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007740:	7dbb      	ldrb	r3, [r7, #22]
 8007742:	f023 0304 	bic.w	r3, r3, #4
 8007746:	75bb      	strb	r3, [r7, #22]
				break;
 8007748:	e00d      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800774a:	7dbb      	ldrb	r3, [r7, #22]
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	75bb      	strb	r3, [r7, #22]
				break;
 8007752:	e008      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007754:	7dbb      	ldrb	r3, [r7, #22]
 8007756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775a:	75bb      	strb	r3, [r7, #22]
				break;
 800775c:	e003      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800775e:	23fc      	movs	r3, #252	; 0xfc
 8007760:	75fb      	strb	r3, [r7, #23]
 8007762:	e000      	b.n	8007766 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007764:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	7dba      	ldrb	r2, [r7, #22]
 800776a:	429a      	cmp	r2, r3
 800776c:	d01e      	beq.n	80077ac <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800776e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d107      	bne.n	8007786 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007776:	7dbb      	ldrb	r3, [r7, #22]
 8007778:	461a      	mov	r2, r3
 800777a:	2101      	movs	r1, #1
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f004 f9fb 	bl	800bb78 <VL53L0X_WrByte>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7dba      	ldrb	r2, [r7, #22]
 8007792:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80077a4:	6939      	ldr	r1, [r7, #16]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff ff0e 	bl	80075c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80077ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	72fb      	strb	r3, [r7, #11]
 80077c6:	4613      	mov	r3, r2
 80077c8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d836      	bhi.n	8007848 <sequence_step_enabled+0x90>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <sequence_step_enabled+0x28>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	080077f5 	.word	0x080077f5
 80077e4:	08007807 	.word	0x08007807
 80077e8:	08007819 	.word	0x08007819
 80077ec:	0800782b 	.word	0x0800782b
 80077f0:	0800783d 	.word	0x0800783d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80077f4:	7abb      	ldrb	r3, [r7, #10]
 80077f6:	111b      	asrs	r3, r3, #4
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	701a      	strb	r2, [r3, #0]
		break;
 8007804:	e022      	b.n	800784c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007806:	7abb      	ldrb	r3, [r7, #10]
 8007808:	10db      	asrs	r3, r3, #3
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	b2da      	uxtb	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	701a      	strb	r2, [r3, #0]
		break;
 8007816:	e019      	b.n	800784c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007818:	7abb      	ldrb	r3, [r7, #10]
 800781a:	109b      	asrs	r3, r3, #2
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	b2da      	uxtb	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	701a      	strb	r2, [r3, #0]
		break;
 8007828:	e010      	b.n	800784c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800782a:	7abb      	ldrb	r3, [r7, #10]
 800782c:	119b      	asrs	r3, r3, #6
 800782e:	b2db      	uxtb	r3, r3
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	701a      	strb	r2, [r3, #0]
		break;
 800783a:	e007      	b.n	800784c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800783c:	7abb      	ldrb	r3, [r7, #10]
 800783e:	09db      	lsrs	r3, r3, #7
 8007840:	b2da      	uxtb	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	701a      	strb	r2, [r3, #0]
		break;
 8007846:	e001      	b.n	800784c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007848:	23fc      	movs	r3, #252	; 0xfc
 800784a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800784c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007850:	4618      	mov	r0, r3
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800786e:	f107 030e 	add.w	r3, r7, #14
 8007872:	461a      	mov	r2, r3
 8007874:	2101      	movs	r1, #1
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f004 fa00 	bl	800bc7c <VL53L0X_RdByte>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d107      	bne.n	8007898 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007888:	7bba      	ldrb	r2, [r7, #14]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2100      	movs	r1, #0
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ff92 	bl	80077b8 <sequence_step_enabled>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d108      	bne.n	80078b2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80078a0:	7bba      	ldrb	r2, [r7, #14]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	3302      	adds	r3, #2
 80078a6:	2101      	movs	r1, #1
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ff85 	bl	80077b8 <sequence_step_enabled>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80078b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d108      	bne.n	80078cc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80078ba:	7bba      	ldrb	r2, [r7, #14]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	2102      	movs	r1, #2
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff ff78 	bl	80077b8 <sequence_step_enabled>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80078cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80078d4:	7bba      	ldrb	r2, [r7, #14]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	3303      	adds	r3, #3
 80078da:	2103      	movs	r1, #3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff6b 	bl	80077b8 <sequence_step_enabled>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80078e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d108      	bne.n	8007900 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80078ee:	7bba      	ldrb	r2, [r7, #14]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	3304      	adds	r3, #4
 80078f4:	2104      	movs	r1, #4
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff ff5e 	bl	80077b8 <sequence_step_enabled>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800791a:	f107 030c 	add.w	r3, r7, #12
 800791e:	461a      	mov	r2, r3
 8007920:	21f8      	movs	r1, #248	; 0xf8
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f004 f9d4 	bl	800bcd0 <VL53L0X_RdWord>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800792c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d108      	bne.n	8007946 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007934:	f107 0308 	add.w	r3, r7, #8
 8007938:	461a      	mov	r2, r3
 800793a:	2104      	movs	r1, #4
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f004 f9ff 	bl	800bd40 <VL53L0X_RdDWord>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800794e:	89bb      	ldrh	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d005      	beq.n	8007960 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	89ba      	ldrh	r2, [r7, #12]
 8007958:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7f1b      	ldrb	r3, [r3, #28]
 8007986:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	7bba      	ldrb	r2, [r7, #14]
 800798c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800798e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80079ac:	f107 030e 	add.w	r3, r7, #14
 80079b0:	461a      	mov	r2, r3
 80079b2:	2120      	movs	r1, #32
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f004 f98b 	bl	800bcd0 <VL53L0X_RdWord>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80079be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d118      	bne.n	80079f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80079c6:	89fb      	ldrh	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	771a      	strb	r2, [r3, #28]
 80079de:	e00b      	b.n	80079f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80079e0:	89fb      	ldrh	r3, [r7, #14]
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	807b      	strh	r3, [r7, #2]
 8007a10:	4613      	mov	r3, r2
 8007a12:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007a24:	887b      	ldrh	r3, [r7, #2]
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	d902      	bls.n	8007a30 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a2a:	23fc      	movs	r3, #252	; 0xfc
 8007a2c:	75fb      	strb	r3, [r7, #23]
 8007a2e:	e05b      	b.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007a30:	787b      	ldrb	r3, [r7, #1]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73bb      	strb	r3, [r7, #14]
 8007a42:	e00a      	b.n	8007a5a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a44:	887b      	ldrh	r3, [r7, #2]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007a5a:	887b      	ldrh	r3, [r7, #2]
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d841      	bhi.n	8007ae4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <VL53L0X_SetLimitCheckEnable+0x64>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007a8b 	.word	0x08007a8b
 8007a70:	08007aa1 	.word	0x08007aa1
 8007a74:	08007aab 	.word	0x08007aab
 8007a78:	08007ab5 	.word	0x08007ab5
 8007a7c:	08007acd 	.word	0x08007acd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	7bfa      	ldrb	r2, [r7, #15]
 8007a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007a88:	e02e      	b.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	2144      	movs	r1, #68	; 0x44
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f004 f893 	bl	800bbc0 <VL53L0X_WrWord>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]

			break;
 8007a9e:	e023      	b.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7bfa      	ldrb	r2, [r7, #15]
 8007aa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007aa8:	e01e      	b.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7bfa      	ldrb	r2, [r7, #15]
 8007aae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007ab2:	e019      	b.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007aba:	7b7b      	ldrb	r3, [r7, #13]
 8007abc:	22fe      	movs	r2, #254	; 0xfe
 8007abe:	2160      	movs	r1, #96	; 0x60
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f004 f8a7 	bl	800bc14 <VL53L0X_UpdateByte>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007aca:	e00d      	b.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007ad2:	7b7b      	ldrb	r3, [r7, #13]
 8007ad4:	22ef      	movs	r2, #239	; 0xef
 8007ad6:	2160      	movs	r1, #96	; 0x60
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f004 f89b 	bl	800bc14 <VL53L0X_UpdateByte>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007ae2:	e001      	b.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ae4:	23fc      	movs	r3, #252	; 0xfc
 8007ae6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10f      	bne.n	8007b10 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007af0:	787b      	ldrb	r3, [r7, #1]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007af6:	887b      	ldrh	r3, [r7, #2]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4413      	add	r3, r2
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007b02:	e005      	b.n	8007b10 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007b04:	887b      	ldrh	r3, [r7, #2]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	460b      	mov	r3, r1
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007b2e:	897b      	ldrh	r3, [r7, #10]
 8007b30:	2b05      	cmp	r3, #5
 8007b32:	d905      	bls.n	8007b40 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b34:	23fc      	movs	r3, #252	; 0xfc
 8007b36:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	e008      	b.n	8007b52 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007b40:	897b      	ldrh	r3, [r7, #10]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b4a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7dba      	ldrb	r2, [r7, #22]
 8007b50:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007b76:	897b      	ldrh	r3, [r7, #10]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b80:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007b82:	7dbb      	ldrb	r3, [r7, #22]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d107      	bne.n	8007b98 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007b88:	897b      	ldrh	r3, [r7, #10]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	e040      	b.n	8007c1a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007b98:	897b      	ldrh	r3, [r7, #10]
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d830      	bhi.n	8007c00 <VL53L0X_SetLimitCheckValue+0x9c>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <VL53L0X_SetLimitCheckValue+0x40>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	08007bdb 	.word	0x08007bdb
 8007bb0:	08007be3 	.word	0x08007be3
 8007bb4:	08007beb 	.word	0x08007beb
 8007bb8:	08007beb 	.word	0x08007beb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007bc2:	e01f      	b.n	8007c04 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	2144      	movs	r1, #68	; 0x44
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f003 fff6 	bl	800bbc0 <VL53L0X_WrWord>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007bd8:	e014      	b.n	8007c04 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007be0:	e010      	b.n	8007c04 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007be8:	e00c      	b.n	8007c04 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	2164      	movs	r1, #100	; 0x64
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f003 ffe3 	bl	800bbc0 <VL53L0X_WrWord>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007bfe:	e001      	b.n	8007c04 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c00:	23fc      	movs	r3, #252	; 0xfc
 8007c02:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007c0c:	897b      	ldrh	r3, [r7, #10]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	330c      	adds	r3, #12
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop

08007c28 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	460b      	mov	r3, r1
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c36:	2300      	movs	r3, #0
 8007c38:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007c3e:	897b      	ldrh	r3, [r7, #10]
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	d847      	bhi.n	8007cd4 <VL53L0X_GetLimitCheckValue+0xac>
 8007c44:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <VL53L0X_GetLimitCheckValue+0x24>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007c65 	.word	0x08007c65
 8007c50:	08007c71 	.word	0x08007c71
 8007c54:	08007c97 	.word	0x08007c97
 8007c58:	08007ca3 	.word	0x08007ca3
 8007c5c:	08007caf 	.word	0x08007caf
 8007c60:	08007caf 	.word	0x08007caf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c68:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	77bb      	strb	r3, [r7, #30]
		break;
 8007c6e:	e033      	b.n	8007cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007c70:	f107 0316 	add.w	r3, r7, #22
 8007c74:	461a      	mov	r2, r3
 8007c76:	2144      	movs	r1, #68	; 0x44
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f004 f829 	bl	800bcd0 <VL53L0X_RdWord>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007c82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d102      	bne.n	8007c90 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007c8a:	8afb      	ldrh	r3, [r7, #22]
 8007c8c:	025b      	lsls	r3, r3, #9
 8007c8e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007c90:	2301      	movs	r3, #1
 8007c92:	77bb      	strb	r3, [r7, #30]
		break;
 8007c94:	e020      	b.n	8007cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	77bb      	strb	r3, [r7, #30]
		break;
 8007ca0:	e01a      	b.n	8007cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	77bb      	strb	r3, [r7, #30]
		break;
 8007cac:	e014      	b.n	8007cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007cae:	f107 0316 	add.w	r3, r7, #22
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2164      	movs	r1, #100	; 0x64
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f004 f80a 	bl	800bcd0 <VL53L0X_RdWord>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007cc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007cc8:	8afb      	ldrh	r3, [r7, #22]
 8007cca:	025b      	lsls	r3, r3, #9
 8007ccc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	77bb      	strb	r3, [r7, #30]
		break;
 8007cd2:	e001      	b.n	8007cd8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cd4:	23fc      	movs	r3, #252	; 0xfc
 8007cd6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d12a      	bne.n	8007d36 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007ce0:	7fbb      	ldrb	r3, [r7, #30]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d124      	bne.n	8007d30 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d110      	bne.n	8007d0e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007cec:	897b      	ldrh	r3, [r7, #10]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007d00:	897b      	ldrh	r3, [r7, #10]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007d0c:	e013      	b.n	8007d36 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007d14:	897b      	ldrh	r3, [r7, #10]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007d22:	897b      	ldrh	r3, [r7, #10]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007d2e:	e002      	b.n	8007d36 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d36:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007d52:	f107 030e 	add.w	r3, r7, #14
 8007d56:	461a      	mov	r2, r3
 8007d58:	2101      	movs	r1, #1
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f003 ff8e 	bl	800bc7c <VL53L0X_RdByte>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10e      	bne.n	8007d8a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007d6c:	7bba      	ldrb	r2, [r7, #14]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	b25b      	sxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	da03      	bge.n	8007d84 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	e002      	b.n	8007d8a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781a      	ldrb	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007db4:	f107 030e 	add.w	r3, r7, #14
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff fbd2 	bl	8007564 <VL53L0X_GetDeviceMode>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d107      	bne.n	8007ddc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f898 	bl	8007f08 <VL53L0X_StartMeasurement>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 fb3f 	bl	8009468 <VL53L0X_measurement_poll_for_completion>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007e20:	2301      	movs	r3, #1
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f001 fae1 	bl	80093ee <VL53L0X_perform_ref_calibration>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007e52:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d005      	beq.n	8007e66 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007e5a:	7dbb      	ldrb	r3, [r7, #22]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d002      	beq.n	8007e66 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007e60:	7dbb      	ldrb	r3, [r7, #22]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d147      	bne.n	8007ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007e66:	f107 030c 	add.w	r3, r7, #12
 8007e6a:	f107 0210 	add.w	r2, r7, #16
 8007e6e:	2101      	movs	r1, #1
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fbc3 	bl	80085fc <VL53L0X_GetInterruptThresholds>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007e80:	d803      	bhi.n	8007e8a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007e82:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007e84:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007e88:	d935      	bls.n	8007ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d131      	bne.n	8007ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d006      	beq.n	8007ea6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007e98:	491a      	ldr	r1, [pc, #104]	; (8007f04 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f002 ff56 	bl	800ad4c <VL53L0X_load_tuning_settings>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]
 8007ea4:	e027      	b.n	8007ef6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007ea6:	2204      	movs	r2, #4
 8007ea8:	21ff      	movs	r1, #255	; 0xff
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f003 fe64 	bl	800bb78 <VL53L0X_WrByte>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2170      	movs	r1, #112	; 0x70
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f003 fe5a 	bl	800bb78 <VL53L0X_WrByte>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	21ff      	movs	r1, #255	; 0xff
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f003 fe50 	bl	800bb78 <VL53L0X_WrByte>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	461a      	mov	r2, r3
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2180      	movs	r1, #128	; 0x80
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f003 fe46 	bl	800bb78 <VL53L0X_WrByte>
 8007eec:	4603      	mov	r3, r0
 8007eee:	461a      	mov	r2, r3
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000104 	.word	0x20000104

08007f08 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f10:	2300      	movs	r3, #0
 8007f12:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007f14:	2301      	movs	r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007f18:	f107 030e 	add.w	r3, r7, #14
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fb20 	bl	8007564 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007f24:	2201      	movs	r2, #1
 8007f26:	2180      	movs	r1, #128	; 0x80
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f003 fe25 	bl	800bb78 <VL53L0X_WrByte>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f32:	2201      	movs	r2, #1
 8007f34:	21ff      	movs	r1, #255	; 0xff
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f003 fe1e 	bl	800bb78 <VL53L0X_WrByte>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007f40:	2200      	movs	r2, #0
 8007f42:	2100      	movs	r1, #0
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f003 fe17 	bl	800bb78 <VL53L0X_WrByte>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007f54:	461a      	mov	r2, r3
 8007f56:	2191      	movs	r1, #145	; 0x91
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f003 fe0d 	bl	800bb78 <VL53L0X_WrByte>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007f62:	2201      	movs	r2, #1
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f003 fe06 	bl	800bb78 <VL53L0X_WrByte>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f70:	2200      	movs	r2, #0
 8007f72:	21ff      	movs	r1, #255	; 0xff
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f003 fdff 	bl	800bb78 <VL53L0X_WrByte>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2180      	movs	r1, #128	; 0x80
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f003 fdf8 	bl	800bb78 <VL53L0X_WrByte>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d054      	beq.n	800803c <VL53L0X_StartMeasurement+0x134>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	dc6c      	bgt.n	8008070 <VL53L0X_StartMeasurement+0x168>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <VL53L0X_StartMeasurement+0x98>
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d034      	beq.n	8008008 <VL53L0X_StartMeasurement+0x100>
 8007f9e:	e067      	b.n	8008070 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f003 fde7 	bl	800bb78 <VL53L0X_WrByte>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d15d      	bne.n	8008076 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d008      	beq.n	8007fd6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007fc4:	f107 030d 	add.w	r3, r7, #13
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f003 fe55 	bl	800bc7c <VL53L0X_RdByte>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007fdc:	7b7a      	ldrb	r2, [r7, #13]
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007fe4:	7bfa      	ldrb	r2, [r7, #15]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d107      	bne.n	8007ffa <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007ff8:	d3e1      	bcc.n	8007fbe <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008000:	d339      	bcc.n	8008076 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008002:	23f9      	movs	r3, #249	; 0xf9
 8008004:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008006:	e036      	b.n	8008076 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff ff12 	bl	8007e3c <VL53L0X_CheckAndLoadInterruptSettings>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800801c:	2202      	movs	r2, #2
 800801e:	2100      	movs	r1, #0
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f003 fda9 	bl	800bb78 <VL53L0X_WrByte>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800802a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d123      	bne.n	800807a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2204      	movs	r2, #4
 8008036:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800803a:	e01e      	b.n	800807a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800803c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d105      	bne.n	8008050 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008044:	2101      	movs	r1, #1
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff fef8 	bl	8007e3c <VL53L0X_CheckAndLoadInterruptSettings>
 800804c:	4603      	mov	r3, r0
 800804e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008050:	2204      	movs	r2, #4
 8008052:	2100      	movs	r1, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f003 fd8f 	bl	800bb78 <VL53L0X_WrByte>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800805e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800806e:	e006      	b.n	800807e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008070:	23f8      	movs	r3, #248	; 0xf8
 8008072:	75fb      	strb	r3, [r7, #23]
 8008074:	e004      	b.n	8008080 <VL53L0X_StartMeasurement+0x178>
		break;
 8008076:	bf00      	nop
 8008078:	e002      	b.n	8008080 <VL53L0X_StartMeasurement+0x178>
		break;
 800807a:	bf00      	nop
 800807c:	e000      	b.n	8008080 <VL53L0X_StartMeasurement+0x178>
		break;
 800807e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80080a0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d112      	bne.n	80080ce <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fb1a 	bl	80086e8 <VL53L0X_GetInterruptMaskStatus>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d103      	bne.n	80080c6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e01c      	b.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	e018      	b.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80080ce:	f107 030d 	add.w	r3, r7, #13
 80080d2:	461a      	mov	r2, r3
 80080d4:	2114      	movs	r1, #20
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f003 fdd0 	bl	800bc7c <VL53L0X_RdByte>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80080e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10b      	bne.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80080e8:	7b7b      	ldrb	r3, [r7, #13]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	e002      	b.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800810c:	b5b0      	push	{r4, r5, r7, lr}
 800810e:	b096      	sub	sp, #88	; 0x58
 8008110:	af02      	add	r7, sp, #8
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008116:	2300      	movs	r3, #0
 8008118:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800811c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008120:	230c      	movs	r3, #12
 8008122:	2114      	movs	r1, #20
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f003 fcfb 	bl	800bb20 <VL53L0X_ReadMulti>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008130:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008134:	2b00      	cmp	r3, #0
 8008136:	f040 80d1 	bne.w	80082dc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2200      	movs	r2, #0
 800813e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8008146:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800814a:	b29b      	uxth	r3, r3
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	b29a      	uxth	r2, r3
 8008150:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008154:	b29b      	uxth	r3, r3
 8008156:	4413      	add	r3, r2
 8008158:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2200      	movs	r2, #0
 8008160:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008162:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008166:	b29b      	uxth	r3, r3
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	b29a      	uxth	r2, r3
 800816c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008170:	b29b      	uxth	r3, r3
 8008172:	4413      	add	r3, r2
 8008174:	b29b      	uxth	r3, r3
 8008176:	025b      	lsls	r3, r3, #9
 8008178:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800817e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008180:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008184:	b29b      	uxth	r3, r3
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b29a      	uxth	r2, r3
 800818a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800818e:	b29b      	uxth	r3, r3
 8008190:	4413      	add	r3, r2
 8008192:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008196:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800819a:	025b      	lsls	r3, r3, #9
 800819c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80081a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4413      	add	r3, r2
 80081b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80081be:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80081c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80081ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80081d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80081da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081e0:	d046      	beq.n	8008270 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80081e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081e4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80081e8:	fb02 f303 	mul.w	r3, r2, r3
 80081ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80081f0:	4a57      	ldr	r2, [pc, #348]	; (8008350 <VL53L0X_GetRangingMeasurementData+0x244>)
 80081f2:	fb82 1203 	smull	r1, r2, r2, r3
 80081f6:	1192      	asrs	r2, r2, #6
 80081f8:	17db      	asrs	r3, r3, #31
 80081fa:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80081fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7f1b      	ldrb	r3, [r3, #28]
 800820a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800820e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008212:	2b00      	cmp	r3, #0
 8008214:	d02c      	beq.n	8008270 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8008216:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008218:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800821c:	fb02 f303 	mul.w	r3, r2, r3
 8008220:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008224:	429a      	cmp	r2, r3
 8008226:	d10d      	bne.n	8008244 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008228:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008230:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008234:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008238:	e016      	b.n	8008268 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800823a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800823e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008242:	e011      	b.n	8008268 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008244:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800824a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800824e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008250:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008254:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008258:	121b      	asrs	r3, r3, #8
 800825a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008264:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008268:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800826c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008270:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00d      	beq.n	8008294 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008278:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008284:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008288:	b2db      	uxtb	r3, r3
 800828a:	019b      	lsls	r3, r3, #6
 800828c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	75da      	strb	r2, [r3, #23]
 8008292:	e006      	b.n	80082a2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800829a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80082a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80082a6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80082aa:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	4613      	mov	r3, r2
 80082b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f003 f9e5 	bl	800b688 <VL53L0X_get_pal_range_status>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80082cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d103      	bne.n	80082dc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80082d4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d12f      	bne.n	8008344 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f107 040c 	add.w	r4, r7, #12
 80082ea:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80082ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80082fe:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800830c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008312:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008318:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800831e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008324:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800832a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008334:	f107 050c 	add.w	r5, r7, #12
 8008338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800833a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800833c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008340:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008344:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008348:	4618      	mov	r0, r3
 800834a:	3750      	adds	r7, #80	; 0x50
 800834c:	46bd      	mov	sp, r7
 800834e:	bdb0      	pop	{r4, r5, r7, pc}
 8008350:	10624dd3 	.word	0x10624dd3

08008354 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff f8d1 	bl	800750c <VL53L0X_SetDeviceMode>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800836e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fd16 	bl	8007da8 <VL53L0X_PerformSingleMeasurement>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff febe 	bl	800810c <VL53L0X_GetRangingMeasurementData>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f962 	bl	8008668 <VL53L0X_ClearInterruptMask>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80083a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	4603      	mov	r3, r0
 80083c4:	70fb      	strb	r3, [r7, #3]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70bb      	strb	r3, [r7, #2]
 80083ca:	4613      	mov	r3, r2
 80083cc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80083d8:	23f6      	movs	r3, #246	; 0xf6
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e107      	b.n	80085ee <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80083de:	78bb      	ldrb	r3, [r7, #2]
 80083e0:	2b14      	cmp	r3, #20
 80083e2:	d110      	bne.n	8008406 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80083e4:	7e3b      	ldrb	r3, [r7, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80083ea:	2310      	movs	r3, #16
 80083ec:	73bb      	strb	r3, [r7, #14]
 80083ee:	e001      	b.n	80083f4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80083f0:	2301      	movs	r3, #1
 80083f2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	461a      	mov	r2, r3
 80083f8:	2184      	movs	r1, #132	; 0x84
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f003 fbbc 	bl	800bb78 <VL53L0X_WrByte>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	e0f3      	b.n	80085ee <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008406:	78bb      	ldrb	r3, [r7, #2]
 8008408:	2b15      	cmp	r3, #21
 800840a:	f040 8097 	bne.w	800853c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800840e:	2201      	movs	r2, #1
 8008410:	21ff      	movs	r1, #255	; 0xff
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f003 fbb0 	bl	800bb78 <VL53L0X_WrByte>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	4313      	orrs	r3, r2
 8008420:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008422:	2200      	movs	r2, #0
 8008424:	2100      	movs	r1, #0
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f003 fba6 	bl	800bb78 <VL53L0X_WrByte>
 800842c:	4603      	mov	r3, r0
 800842e:	461a      	mov	r2, r3
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4313      	orrs	r3, r2
 8008434:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008436:	2200      	movs	r2, #0
 8008438:	21ff      	movs	r1, #255	; 0xff
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f003 fb9c 	bl	800bb78 <VL53L0X_WrByte>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	4313      	orrs	r3, r2
 8008448:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800844a:	2201      	movs	r2, #1
 800844c:	2180      	movs	r1, #128	; 0x80
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f003 fb92 	bl	800bb78 <VL53L0X_WrByte>
 8008454:	4603      	mov	r3, r0
 8008456:	461a      	mov	r2, r3
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	4313      	orrs	r3, r2
 800845c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800845e:	2202      	movs	r2, #2
 8008460:	2185      	movs	r1, #133	; 0x85
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f003 fb88 	bl	800bb78 <VL53L0X_WrByte>
 8008468:	4603      	mov	r3, r0
 800846a:	461a      	mov	r2, r3
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4313      	orrs	r3, r2
 8008470:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008472:	2204      	movs	r2, #4
 8008474:	21ff      	movs	r1, #255	; 0xff
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f003 fb7e 	bl	800bb78 <VL53L0X_WrByte>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4313      	orrs	r3, r2
 8008484:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008486:	2200      	movs	r2, #0
 8008488:	21cd      	movs	r1, #205	; 0xcd
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f003 fb74 	bl	800bb78 <VL53L0X_WrByte>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4313      	orrs	r3, r2
 8008498:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800849a:	2211      	movs	r2, #17
 800849c:	21cc      	movs	r1, #204	; 0xcc
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f003 fb6a 	bl	800bb78 <VL53L0X_WrByte>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80084ae:	2207      	movs	r2, #7
 80084b0:	21ff      	movs	r1, #255	; 0xff
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f003 fb60 	bl	800bb78 <VL53L0X_WrByte>
 80084b8:	4603      	mov	r3, r0
 80084ba:	461a      	mov	r2, r3
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4313      	orrs	r3, r2
 80084c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80084c2:	2200      	movs	r2, #0
 80084c4:	21be      	movs	r1, #190	; 0xbe
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f003 fb56 	bl	800bb78 <VL53L0X_WrByte>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80084d6:	2206      	movs	r2, #6
 80084d8:	21ff      	movs	r1, #255	; 0xff
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f003 fb4c 	bl	800bb78 <VL53L0X_WrByte>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80084ea:	2209      	movs	r2, #9
 80084ec:	21cc      	movs	r1, #204	; 0xcc
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f003 fb42 	bl	800bb78 <VL53L0X_WrByte>
 80084f4:	4603      	mov	r3, r0
 80084f6:	461a      	mov	r2, r3
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084fe:	2200      	movs	r2, #0
 8008500:	21ff      	movs	r1, #255	; 0xff
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f003 fb38 	bl	800bb78 <VL53L0X_WrByte>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4313      	orrs	r3, r2
 8008510:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008512:	2201      	movs	r2, #1
 8008514:	21ff      	movs	r1, #255	; 0xff
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f003 fb2e 	bl	800bb78 <VL53L0X_WrByte>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4313      	orrs	r3, r2
 8008524:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f003 fb24 	bl	800bb78 <VL53L0X_WrByte>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4313      	orrs	r3, r2
 8008538:	73fb      	strb	r3, [r7, #15]
 800853a:	e058      	b.n	80085ee <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d121      	bne.n	8008588 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008544:	787b      	ldrb	r3, [r7, #1]
 8008546:	2b04      	cmp	r3, #4
 8008548:	d81b      	bhi.n	8008582 <VL53L0X_SetGpioConfig+0x1ce>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <VL53L0X_SetGpioConfig+0x19c>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	08008565 	.word	0x08008565
 8008554:	0800856b 	.word	0x0800856b
 8008558:	08008571 	.word	0x08008571
 800855c:	08008577 	.word	0x08008577
 8008560:	0800857d 	.word	0x0800857d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]
				break;
 8008568:	e00f      	b.n	800858a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800856a:	2301      	movs	r3, #1
 800856c:	73bb      	strb	r3, [r7, #14]
				break;
 800856e:	e00c      	b.n	800858a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008570:	2302      	movs	r3, #2
 8008572:	73bb      	strb	r3, [r7, #14]
				break;
 8008574:	e009      	b.n	800858a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008576:	2303      	movs	r3, #3
 8008578:	73bb      	strb	r3, [r7, #14]
				break;
 800857a:	e006      	b.n	800858a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800857c:	2304      	movs	r3, #4
 800857e:	73bb      	strb	r3, [r7, #14]
				break;
 8008580:	e003      	b.n	800858a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008582:	23f5      	movs	r3, #245	; 0xf5
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	e000      	b.n	800858a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008588:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d107      	bne.n	80085a2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	461a      	mov	r2, r3
 8008596:	210a      	movs	r1, #10
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f003 faed 	bl	800bb78 <VL53L0X_WrByte>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80085a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10f      	bne.n	80085ca <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80085aa:	7e3b      	ldrb	r3, [r7, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]
 80085b4:	e001      	b.n	80085ba <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80085b6:	2310      	movs	r3, #16
 80085b8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	22ef      	movs	r2, #239	; 0xef
 80085be:	2184      	movs	r1, #132	; 0x84
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f003 fb27 	bl	800bc14 <VL53L0X_UpdateByte>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80085ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d103      	bne.n	80085da <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	787a      	ldrb	r2, [r7, #1]
 80085d6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80085da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d105      	bne.n	80085ee <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80085e2:	2100      	movs	r1, #0
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f83f 	bl	8008668 <VL53L0X_ClearInterruptMask>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop

080085fc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	460b      	mov	r3, r1
 800860a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	461a      	mov	r2, r3
 8008616:	210e      	movs	r1, #14
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f003 fb59 	bl	800bcd0 <VL53L0X_RdWord>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008622:	8abb      	ldrh	r3, [r7, #20]
 8008624:	045b      	lsls	r3, r3, #17
 8008626:	461a      	mov	r2, r3
 8008628:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <VL53L0X_GetInterruptThresholds+0x68>)
 800862a:	4013      	ands	r3, r2
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10f      	bne.n	8008658 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008638:	f107 0314 	add.w	r3, r7, #20
 800863c:	461a      	mov	r2, r3
 800863e:	210c      	movs	r1, #12
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f003 fb45 	bl	800bcd0 <VL53L0X_RdWord>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800864a:	8abb      	ldrh	r3, [r7, #20]
 800864c:	045b      	lsls	r3, r3, #17
 800864e:	461a      	mov	r2, r3
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <VL53L0X_GetInterruptThresholds+0x68>)
 8008652:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008658:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	1ffe0000 	.word	0x1ffe0000

08008668 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800867a:	2201      	movs	r2, #1
 800867c:	210b      	movs	r1, #11
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f003 fa7a 	bl	800bb78 <VL53L0X_WrByte>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008688:	2200      	movs	r2, #0
 800868a:	210b      	movs	r1, #11
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f003 fa73 	bl	800bb78 <VL53L0X_WrByte>
 8008692:	4603      	mov	r3, r0
 8008694:	461a      	mov	r2, r3
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	4313      	orrs	r3, r2
 800869a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800869c:	f107 030d 	add.w	r3, r7, #13
 80086a0:	461a      	mov	r2, r3
 80086a2:	2113      	movs	r1, #19
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f003 fae9 	bl	800bc7c <VL53L0X_RdByte>
 80086aa:	4603      	mov	r3, r0
 80086ac:	461a      	mov	r2, r3
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	3301      	adds	r3, #1
 80086b8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80086ba:	7b7b      	ldrb	r3, [r7, #13]
 80086bc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d006      	beq.n	80086d2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d803      	bhi.n	80086d2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80086ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0d3      	beq.n	800867a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80086d8:	23f4      	movs	r3, #244	; 0xf4
 80086da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80086dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80086f6:	f107 030e 	add.w	r3, r7, #14
 80086fa:	461a      	mov	r2, r3
 80086fc:	2113      	movs	r1, #19
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f003 fabc 	bl	800bc7c <VL53L0X_RdByte>
 8008704:	4603      	mov	r3, r0
 8008706:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 0207 	and.w	r2, r3, #7
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	f003 0318 	and.w	r3, r3, #24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800871c:	23fa      	movs	r3, #250	; 0xfa
 800871e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008738:	2300      	movs	r3, #0
 800873a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fa03 	bl	8008b4c <VL53L0X_perform_ref_spad_management>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800874a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008764:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008768:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800876a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800876e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008770:	f107 0308 	add.w	r3, r7, #8
 8008774:	461a      	mov	r2, r3
 8008776:	2128      	movs	r1, #40	; 0x28
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f003 faa9 	bl	800bcd0 <VL53L0X_RdWord>
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d11e      	bne.n	80087c8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800878a:	893b      	ldrh	r3, [r7, #8]
 800878c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008790:	b29b      	uxth	r3, r3
 8008792:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008794:	893b      	ldrh	r3, [r7, #8]
 8008796:	461a      	mov	r2, r3
 8008798:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800879c:	429a      	cmp	r2, r3
 800879e:	dd0b      	ble.n	80087b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80087a0:	893a      	ldrh	r2, [r7, #8]
 80087a2:	897b      	ldrh	r3, [r7, #10]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	b21b      	sxth	r3, r3
 80087aa:	461a      	mov	r2, r3
					* 250;
 80087ac:	23fa      	movs	r3, #250	; 0xfa
 80087ae:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e007      	b.n	80087c8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80087b8:	893b      	ldrh	r3, [r7, #8]
 80087ba:	b21b      	sxth	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	23fa      	movs	r3, #250	; 0xfa
 80087c0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80087c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80087e2:	2308      	movs	r3, #8
 80087e4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295
 80087f0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fa:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	fbb3 f2f2 	udiv	r2, r3, r2
 8008804:	69b9      	ldr	r1, [r7, #24]
 8008806:	fb01 f202 	mul.w	r2, r1, r2
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
 8008812:	e030      	b.n	8008876 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	4413      	add	r3, r2
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	429a      	cmp	r2, r3
 8008828:	d11e      	bne.n	8008868 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800882a:	7ffa      	ldrb	r2, [r7, #31]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	fa42 f303 	asr.w	r3, r2, r3
 8008832:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008838:	e016      	b.n	8008868 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800883a:	7ffb      	ldrb	r3, [r7, #31]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <get_next_good_spad+0x88>
				success = 1;
 8008844:	2301      	movs	r3, #1
 8008846:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	fb03 f202 	mul.w	r2, r3, r2
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	4413      	add	r3, r2
 8008854:	461a      	mov	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	601a      	str	r2, [r3, #0]
				break;
 800885a:	e009      	b.n	8008870 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800885c:	7ffb      	ldrb	r3, [r7, #31]
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	3301      	adds	r3, #1
 8008866:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008868:	6a3a      	ldr	r2, [r7, #32]
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	429a      	cmp	r2, r3
 800886e:	d3e4      	bcc.n	800883a <get_next_good_spad+0x66>
				coarseIndex++) {
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	3301      	adds	r3, #1
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	429a      	cmp	r2, r3
 800887c:	d202      	bcs.n	8008884 <get_next_good_spad+0xb0>
 800887e:	7fbb      	ldrb	r3, [r7, #30]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0c7      	beq.n	8008814 <get_next_good_spad+0x40>
		}
	}
}
 8008884:	bf00      	nop
 8008886:	372c      	adds	r7, #44	; 0x2c
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008898:	2301      	movs	r3, #1
 800889a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	099b      	lsrs	r3, r3, #6
 80088a0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80088a2:	4a07      	ldr	r2, [pc, #28]	; (80088c0 <is_aperture+0x30>)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <is_aperture+0x22>
		isAperture = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	200002bc 	.word	0x200002bc

080088c4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b089      	sub	sp, #36	; 0x24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80088d4:	2308      	movs	r3, #8
 80088d6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088ea:	69b9      	ldr	r1, [r7, #24]
 80088ec:	fb01 f202 	mul.w	r2, r1, r2
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d302      	bcc.n	8008902 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80088fc:	23ce      	movs	r3, #206	; 0xce
 80088fe:	77fb      	strb	r3, [r7, #31]
 8008900:	e010      	b.n	8008924 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	4413      	add	r3, r2
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	b25a      	sxtb	r2, r3
 800890c:	2101      	movs	r1, #1
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	fa01 f303 	lsl.w	r3, r1, r3
 8008914:	b25b      	sxtb	r3, r3
 8008916:	4313      	orrs	r3, r2
 8008918:	b259      	sxtb	r1, r3
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4413      	add	r3, r2
 8008920:	b2ca      	uxtb	r2, r1
 8008922:	701a      	strb	r2, [r3, #0]

	return status;
 8008924:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3724      	adds	r7, #36	; 0x24
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800893e:	2306      	movs	r3, #6
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	21b0      	movs	r1, #176	; 0xb0
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f003 f8bb 	bl	800bac0 <VL53L0X_WriteMulti>
 800894a:	4603      	mov	r3, r0
 800894c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800894e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008964:	2306      	movs	r3, #6
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	21b0      	movs	r1, #176	; 0xb0
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f003 f8d8 	bl	800bb20 <VL53L0X_ReadMulti>
 8008970:	4603      	mov	r3, r0
 8008972:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08c      	sub	sp, #48	; 0x30
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	460b      	mov	r3, r1
 800898e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008990:	2300      	movs	r3, #0
 8008992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008998:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800899a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800899c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800899e:	2300      	movs	r3, #0
 80089a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a2:	e02b      	b.n	80089fc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80089a4:	f107 031c 	add.w	r3, r7, #28
 80089a8:	6a3a      	ldr	r2, [r7, #32]
 80089aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff ff11 	bl	80087d4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b8:	d103      	bne.n	80089c2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80089ba:	23ce      	movs	r3, #206	; 0xce
 80089bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80089c0:	e020      	b.n	8008a04 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c8:	4413      	add	r3, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff ff60 	bl	8008890 <is_aperture>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	7afb      	ldrb	r3, [r7, #11]
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d003      	beq.n	80089e2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80089da:	23ce      	movs	r3, #206	; 0xce
 80089dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80089e0:	e010      	b.n	8008a04 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ea:	6838      	ldr	r0, [r7, #0]
 80089ec:	f7ff ff6a 	bl	80088c4 <enable_spad_bit>
		currentSpad++;
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	3301      	adds	r3, #1
 80089f4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	3301      	adds	r3, #1
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80089fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d3cf      	bcc.n	80089a4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a06:	6a3a      	ldr	r2, [r7, #32]
 8008a08:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008a0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7ff ff8d 	bl	8008934 <set_ref_spad_map>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008a20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d121      	bne.n	8008a6c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008a28:	f107 0314 	add.w	r3, r7, #20
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7ff ff93 	bl	800895a <get_ref_spad_map>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008a3e:	e011      	b.n	8008a64 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	4413      	add	r3, r2
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	f107 0114 	add.w	r1, r7, #20
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	440b      	add	r3, r1
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d003      	beq.n	8008a5e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008a56:	23ce      	movs	r3, #206	; 0xce
 8008a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008a5c:	e006      	b.n	8008a6c <enable_ref_spads+0xec>
			}
			i++;
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	3301      	adds	r3, #1
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d3e9      	bcc.n	8008a40 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008a6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3730      	adds	r7, #48	; 0x30
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08a      	sub	sp, #40	; 0x28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d107      	bne.n	8008ab0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008aa0:	22c0      	movs	r2, #192	; 0xc0
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f003 f867 	bl	800bb78 <VL53L0X_WrByte>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d108      	bne.n	8008aca <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008ab8:	f107 0308 	add.w	r3, r7, #8
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff fc48 	bl	8008354 <VL53L0X_PerformSingleRangingMeasurement>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008aca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d107      	bne.n	8008ae2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	21ff      	movs	r1, #255	; 0xff
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f003 f84e 	bl	800bb78 <VL53L0X_WrByte>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008ae2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d107      	bne.n	8008afa <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	21b6      	movs	r1, #182	; 0xb6
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f003 f8ee 	bl	800bcd0 <VL53L0X_RdWord>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008afa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008b02:	2200      	movs	r2, #0
 8008b04:	21ff      	movs	r1, #255	; 0xff
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f003 f836 	bl	800bb78 <VL53L0X_WrByte>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008b12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d112      	bne.n	8008b40 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2101      	movs	r1, #1
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f003 f828 	bl	800bb78 <VL53L0X_WrByte>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b3c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008b40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3728      	adds	r7, #40	; 0x28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b09d      	sub	sp, #116	; 0x74
 8008b50:	af06      	add	r7, sp, #24
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008b5e:	23b4      	movs	r3, #180	; 0xb4
 8008b60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008b64:	2303      	movs	r3, #3
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008b68:	232c      	movs	r3, #44	; 0x2c
 8008b6a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008b78:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008b7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008b86:	2306      	movs	r3, #6
 8008b88:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008bb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb6:	e009      	b.n	8008bcc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc8:	3301      	adds	r3, #1
 8008bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d3f1      	bcc.n	8008bb8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	21ff      	movs	r1, #255	; 0xff
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f002 ffcd 	bl	800bb78 <VL53L0X_WrByte>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008be4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d107      	bne.n	8008bfc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008bec:	2200      	movs	r2, #0
 8008bee:	214f      	movs	r1, #79	; 0x4f
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f002 ffc1 	bl	800bb78 <VL53L0X_WrByte>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008bfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d107      	bne.n	8008c14 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008c04:	222c      	movs	r2, #44	; 0x2c
 8008c06:	214e      	movs	r1, #78	; 0x4e
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f002 ffb5 	bl	800bb78 <VL53L0X_WrByte>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008c14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d107      	bne.n	8008c2c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	21ff      	movs	r1, #255	; 0xff
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f002 ffa9 	bl	800bb78 <VL53L0X_WrByte>
 8008c26:	4603      	mov	r3, r0
 8008c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008c2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d109      	bne.n	8008c48 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008c34:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008c38:	461a      	mov	r2, r3
 8008c3a:	21b6      	movs	r1, #182	; 0xb6
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f002 ff9b 	bl	800bb78 <VL53L0X_WrByte>
 8008c42:	4603      	mov	r3, r0
 8008c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008c48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d107      	bne.n	8008c60 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008c50:	2200      	movs	r2, #0
 8008c52:	2180      	movs	r1, #128	; 0x80
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f002 ff8f 	bl	800bb78 <VL53L0X_WrByte>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008c60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008c68:	f107 0210 	add.w	r2, r7, #16
 8008c6c:	f107 0111 	add.w	r1, r7, #17
 8008c70:	2300      	movs	r3, #0
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 fbbb 	bl	80093ee <VL53L0X_perform_ref_calibration>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008c7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d121      	bne.n	8008cca <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c8c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c94:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008ca2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008ca6:	f107 0218 	add.w	r2, r7, #24
 8008caa:	9204      	str	r2, [sp, #16]
 8008cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cae:	9203      	str	r2, [sp, #12]
 8008cb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cb2:	9202      	str	r2, [sp, #8]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	4623      	mov	r3, r4
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff fe5e 	bl	8008980 <enable_ref_spads>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008cca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d174      	bne.n	8008dbc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008cd6:	f107 0312 	add.w	r3, r7, #18
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7ff fecb 	bl	8008a78 <perform_ref_signal_measurement>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008ce8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d161      	bne.n	8008db4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008cf0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008cf2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d25d      	bcs.n	8008db4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cfc:	e009      	b.n	8008d12 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0e:	3301      	adds	r3, #1
 8008d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d3f1      	bcc.n	8008cfe <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008d1a:	e002      	b.n	8008d22 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1e:	3301      	adds	r3, #1
 8008d20:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008d22:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d28:	4413      	add	r3, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7ff fdb0 	bl	8008890 <is_aperture>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d103      	bne.n	8008d3e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d3ee      	bcc.n	8008d1c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d44:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008d52:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008d56:	f107 0218 	add.w	r2, r7, #24
 8008d5a:	9204      	str	r2, [sp, #16]
 8008d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5e:	9203      	str	r2, [sp, #12]
 8008d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d62:	9202      	str	r2, [sp, #8]
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff fe06 	bl	8008980 <enable_ref_spads>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008d7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d11b      	bne.n	8008dba <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008d86:	f107 0312 	add.w	r3, r7, #18
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff fe73 	bl	8008a78 <perform_ref_signal_measurement>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008d98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10c      	bne.n	8008dba <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008da0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008da2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d208      	bcs.n	8008dba <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008db2:	e002      	b.n	8008dba <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008db8:	e000      	b.n	8008dbc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008dba:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008dbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 80af 	bne.w	8008f24 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008dc6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008dc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	f240 80aa 	bls.w	8008f24 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008de0:	f107 031c 	add.w	r3, r7, #28
 8008de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008de6:	4618      	mov	r0, r3
 8008de8:	f003 f81a 	bl	800be20 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008dec:	8a7b      	ldrh	r3, [r7, #18]
 8008dee:	461a      	mov	r2, r3
 8008df0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfb8      	it	lt
 8008df8:	425b      	neglt	r3, r3
 8008dfa:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008e02:	e086      	b.n	8008f12 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008e0a:	f107 0314 	add.w	r3, r7, #20
 8008e0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e12:	f7ff fcdf 	bl	80087d4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d103      	bne.n	8008e26 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e1e:	23ce      	movs	r3, #206	; 0xce
 8008e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008e24:	e07e      	b.n	8008f24 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008e26:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fd2e 	bl	8008890 <is_aperture>
 8008e34:	4603      	mov	r3, r0
 8008e36:	461a      	mov	r2, r3
 8008e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d003      	beq.n	8008e46 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008e44:	e06e      	b.n	8008f24 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e48:	3301      	adds	r3, #1
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008e56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fd32 	bl	80088c4 <enable_spad_bit>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008e66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10c      	bne.n	8008e88 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e70:	3301      	adds	r3, #1
 8008e72:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff fd59 	bl	8008934 <set_ref_spad_map>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008e88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d146      	bne.n	8008f1e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008e90:	f107 0312 	add.w	r3, r7, #18
 8008e94:	4619      	mov	r1, r3
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7ff fdee 	bl	8008a78 <perform_ref_signal_measurement>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008ea2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d13b      	bne.n	8008f22 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008eaa:	8a7b      	ldrh	r3, [r7, #18]
 8008eac:	461a      	mov	r2, r3
 8008eae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfb8      	it	lt
 8008eb6:	425b      	neglt	r3, r3
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008eba:	8a7b      	ldrh	r3, [r7, #18]
 8008ebc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d21c      	bcs.n	8008efc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d914      	bls.n	8008ef4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008eca:	f107 031c 	add.w	r3, r7, #28
 8008ece:	4619      	mov	r1, r3
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7ff fd2f 	bl	8008934 <set_ref_spad_map>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008ee2:	f107 011c 	add.w	r1, r7, #28
 8008ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f002 ff99 	bl	800be20 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e00a      	b.n	8008f12 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008f06:	f107 031c 	add.w	r3, r7, #28
 8008f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f002 ff87 	bl	800be20 <memcpy>
		while (!complete) {
 8008f12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f43f af74 	beq.w	8008e04 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008f1c:	e002      	b.n	8008f24 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008f1e:	bf00      	nop
 8008f20:	e000      	b.n	8008f24 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008f22:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d115      	bne.n	8008f58 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f30:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008f38:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008f58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	375c      	adds	r7, #92	; 0x5c
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}

08008f64 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008f64:	b590      	push	{r4, r7, lr}
 8008f66:	b093      	sub	sp, #76	; 0x4c
 8008f68:	af06      	add	r7, sp, #24
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f72:	2300      	movs	r3, #0
 8008f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008f7c:	23b4      	movs	r3, #180	; 0xb4
 8008f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008f82:	2306      	movs	r3, #6
 8008f84:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008f86:	232c      	movs	r3, #44	; 0x2c
 8008f88:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	21ff      	movs	r1, #255	; 0xff
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f002 fdf2 	bl	800bb78 <VL53L0X_WrByte>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008f9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d107      	bne.n	8008fb2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	214f      	movs	r1, #79	; 0x4f
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f002 fde6 	bl	800bb78 <VL53L0X_WrByte>
 8008fac:	4603      	mov	r3, r0
 8008fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008fb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d107      	bne.n	8008fca <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008fba:	222c      	movs	r2, #44	; 0x2c
 8008fbc:	214e      	movs	r1, #78	; 0x4e
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f002 fdda 	bl	800bb78 <VL53L0X_WrByte>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008fca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d107      	bne.n	8008fe2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	21ff      	movs	r1, #255	; 0xff
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f002 fdce 	bl	800bb78 <VL53L0X_WrByte>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008fe2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fee:	461a      	mov	r2, r3
 8008ff0:	21b6      	movs	r1, #182	; 0xb6
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f002 fdc0 	bl	800bb78 <VL53L0X_WrByte>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008ffe:	2300      	movs	r3, #0
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
 8009002:	e009      	b.n	8009018 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	4413      	add	r3, r2
 800900a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800900e:	2200      	movs	r2, #0
 8009010:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	3301      	adds	r3, #1
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
 8009018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	429a      	cmp	r2, r3
 800901e:	d3f1      	bcc.n	8009004 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d011      	beq.n	800904a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009026:	e002      	b.n	800902e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	3301      	adds	r3, #1
 800902c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800902e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	4413      	add	r3, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fc2a 	bl	8008890 <is_aperture>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d103      	bne.n	800904a <VL53L0X_set_reference_spads+0xe6>
 8009042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	429a      	cmp	r2, r3
 8009048:	d3ee      	bcc.n	8009028 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8009056:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800905a:	79f9      	ldrb	r1, [r7, #7]
 800905c:	f107 0214 	add.w	r2, r7, #20
 8009060:	9204      	str	r2, [sp, #16]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	9203      	str	r2, [sp, #12]
 8009066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009068:	9202      	str	r2, [sp, #8]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4623      	mov	r3, r4
 8009072:	4602      	mov	r2, r0
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7ff fc83 	bl	8008980 <enable_ref_spads>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10c      	bne.n	80090a2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	b2da      	uxtb	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	79fa      	ldrb	r2, [r7, #7]
 800909e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80090a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3734      	adds	r7, #52	; 0x34
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd90      	pop	{r4, r7, pc}

080090ae <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80090be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80090c6:	78fb      	ldrb	r3, [r7, #3]
 80090c8:	f043 0301 	orr.w	r3, r3, #1
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f002 fd50 	bl	800bb78 <VL53L0X_WrByte>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80090dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d104      	bne.n	80090ee <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f9bf 	bl	8009468 <VL53L0X_measurement_poll_for_completion>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80090ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d105      	bne.n	8009102 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80090f6:	2100      	movs	r1, #0
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff fab5 	bl	8008668 <VL53L0X_ClearInterruptMask>
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800910a:	2200      	movs	r2, #0
 800910c:	2100      	movs	r1, #0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f002 fd32 	bl	800bb78 <VL53L0X_WrByte>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009118:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	4608      	mov	r0, r1
 800912e:	4611      	mov	r1, r2
 8009130:	461a      	mov	r2, r3
 8009132:	4603      	mov	r3, r0
 8009134:	70fb      	strb	r3, [r7, #3]
 8009136:	460b      	mov	r3, r1
 8009138:	70bb      	strb	r3, [r7, #2]
 800913a:	4613      	mov	r3, r2
 800913c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009146:	2201      	movs	r2, #1
 8009148:	21ff      	movs	r1, #255	; 0xff
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f002 fd14 	bl	800bb78 <VL53L0X_WrByte>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4313      	orrs	r3, r2
 8009158:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800915a:	2200      	movs	r2, #0
 800915c:	2100      	movs	r1, #0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 fd0a 	bl	800bb78 <VL53L0X_WrByte>
 8009164:	4603      	mov	r3, r0
 8009166:	461a      	mov	r2, r3
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	4313      	orrs	r3, r2
 800916c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800916e:	2200      	movs	r2, #0
 8009170:	21ff      	movs	r1, #255	; 0xff
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f002 fd00 	bl	800bb78 <VL53L0X_WrByte>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	4313      	orrs	r3, r2
 8009180:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01e      	beq.n	80091c6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009188:	f897 3020 	ldrb.w	r3, [r7, #32]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d009      	beq.n	80091a4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	21cb      	movs	r1, #203	; 0xcb
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f002 fd71 	bl	800bc7c <VL53L0X_RdByte>
 800919a:	4603      	mov	r3, r0
 800919c:	461a      	mov	r2, r3
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80091a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d02a      	beq.n	8009202 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80091ac:	f107 030e 	add.w	r3, r7, #14
 80091b0:	461a      	mov	r2, r3
 80091b2:	21ee      	movs	r1, #238	; 0xee
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f002 fd61 	bl	800bc7c <VL53L0X_RdByte>
 80091ba:	4603      	mov	r3, r0
 80091bc:	461a      	mov	r2, r3
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e01d      	b.n	8009202 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80091c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80091ce:	78bb      	ldrb	r3, [r7, #2]
 80091d0:	461a      	mov	r2, r3
 80091d2:	21cb      	movs	r1, #203	; 0xcb
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f002 fccf 	bl	800bb78 <VL53L0X_WrByte>
 80091da:	4603      	mov	r3, r0
 80091dc:	461a      	mov	r2, r3
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80091e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80091ec:	787b      	ldrb	r3, [r7, #1]
 80091ee:	2280      	movs	r2, #128	; 0x80
 80091f0:	21ee      	movs	r1, #238	; 0xee
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f002 fd0e 	bl	800bc14 <VL53L0X_UpdateByte>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461a      	mov	r2, r3
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	4313      	orrs	r3, r2
 8009200:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009202:	2201      	movs	r2, #1
 8009204:	21ff      	movs	r1, #255	; 0xff
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f002 fcb6 	bl	800bb78 <VL53L0X_WrByte>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	4313      	orrs	r3, r2
 8009214:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009216:	2201      	movs	r2, #1
 8009218:	2100      	movs	r1, #0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f002 fcac 	bl	800bb78 <VL53L0X_WrByte>
 8009220:	4603      	mov	r3, r0
 8009222:	461a      	mov	r2, r3
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	4313      	orrs	r3, r2
 8009228:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800922a:	2200      	movs	r2, #0
 800922c:	21ff      	movs	r1, #255	; 0xff
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f002 fca2 	bl	800bb78 <VL53L0X_WrByte>
 8009234:	4603      	mov	r3, r0
 8009236:	461a      	mov	r2, r3
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	4313      	orrs	r3, r2
 800923c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	f023 0310 	bic.w	r3, r3, #16
 8009244:	b2da      	uxtb	r2, r3
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	701a      	strb	r2, [r3, #0]

	return Status;
 800924a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b08a      	sub	sp, #40	; 0x28
 800925a:	af04      	add	r7, sp, #16
 800925c:	60f8      	str	r0, [r7, #12]
 800925e:	60b9      	str	r1, [r7, #8]
 8009260:	4611      	mov	r1, r2
 8009262:	461a      	mov	r2, r3
 8009264:	460b      	mov	r3, r1
 8009266:	71fb      	strb	r3, [r7, #7]
 8009268:	4613      	mov	r3, r2
 800926a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800926c:	2300      	movs	r3, #0
 800926e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009280:	79bb      	ldrb	r3, [r7, #6]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800928c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800928e:	2201      	movs	r2, #1
 8009290:	2101      	movs	r1, #1
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f002 fc70 	bl	800bb78 <VL53L0X_WrByte>
 8009298:	4603      	mov	r3, r0
 800929a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800929c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80092a4:	2140      	movs	r1, #64	; 0x40
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff ff01 	bl	80090ae <VL53L0X_perform_single_ref_calibration>
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80092b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d115      	bne.n	80092e4 <VL53L0X_perform_vhv_calibration+0x8e>
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d112      	bne.n	80092e4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80092be:	7d39      	ldrb	r1, [r7, #20]
 80092c0:	7d7a      	ldrb	r2, [r7, #21]
 80092c2:	2300      	movs	r3, #0
 80092c4:	9303      	str	r3, [sp, #12]
 80092c6:	2301      	movs	r3, #1
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	f107 0313 	add.w	r3, r7, #19
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	460b      	mov	r3, r1
 80092d6:	2101      	movs	r1, #1
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7ff ff23 	bl	8009124 <VL53L0X_ref_calibration_io>
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]
 80092e2:	e002      	b.n	80092ea <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2200      	movs	r2, #0
 80092e8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80092ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d112      	bne.n	8009318 <VL53L0X_perform_vhv_calibration+0xc2>
 80092f2:	79bb      	ldrb	r3, [r7, #6]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00f      	beq.n	8009318 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80092f8:	7dbb      	ldrb	r3, [r7, #22]
 80092fa:	461a      	mov	r2, r3
 80092fc:	2101      	movs	r1, #1
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f002 fc3a 	bl	800bb78 <VL53L0X_WrByte>
 8009304:	4603      	mov	r3, r0
 8009306:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009308:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d103      	bne.n	8009318 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	7dba      	ldrb	r2, [r7, #22]
 8009314:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08a      	sub	sp, #40	; 0x28
 8009328:	af04      	add	r7, sp, #16
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4611      	mov	r1, r2
 8009330:	461a      	mov	r2, r3
 8009332:	460b      	mov	r3, r1
 8009334:	71fb      	strb	r3, [r7, #7]
 8009336:	4613      	mov	r3, r2
 8009338:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800934a:	79bb      	ldrb	r3, [r7, #6]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009356:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009358:	2202      	movs	r2, #2
 800935a:	2101      	movs	r1, #1
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f002 fc0b 	bl	800bb78 <VL53L0X_WrByte>
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800936e:	2100      	movs	r1, #0
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff fe9c 	bl	80090ae <VL53L0X_perform_single_ref_calibration>
 8009376:	4603      	mov	r3, r0
 8009378:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800937a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d115      	bne.n	80093ae <VL53L0X_perform_phase_calibration+0x8a>
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d112      	bne.n	80093ae <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009388:	7d39      	ldrb	r1, [r7, #20]
 800938a:	7d7a      	ldrb	r2, [r7, #21]
 800938c:	2301      	movs	r3, #1
 800938e:	9303      	str	r3, [sp, #12]
 8009390:	2300      	movs	r3, #0
 8009392:	9302      	str	r3, [sp, #8]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	f107 0313 	add.w	r3, r7, #19
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	460b      	mov	r3, r1
 80093a0:	2101      	movs	r1, #1
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff febe 	bl	8009124 <VL53L0X_ref_calibration_io>
 80093a8:	4603      	mov	r3, r0
 80093aa:	75fb      	strb	r3, [r7, #23]
 80093ac:	e002      	b.n	80093b4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2200      	movs	r2, #0
 80093b2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80093b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d112      	bne.n	80093e2 <VL53L0X_perform_phase_calibration+0xbe>
 80093bc:	79bb      	ldrb	r3, [r7, #6]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00f      	beq.n	80093e2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80093c2:	7dbb      	ldrb	r3, [r7, #22]
 80093c4:	461a      	mov	r2, r3
 80093c6:	2101      	movs	r1, #1
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f002 fbd5 	bl	800bb78 <VL53L0X_WrByte>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80093d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d103      	bne.n	80093e2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	7dba      	ldrb	r2, [r7, #22]
 80093de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80093e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b086      	sub	sp, #24
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093fc:	2300      	movs	r3, #0
 80093fe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800940a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800940c:	78fa      	ldrb	r2, [r7, #3]
 800940e:	2300      	movs	r3, #0
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f7ff ff1f 	bl	8009256 <VL53L0X_perform_vhv_calibration>
 8009418:	4603      	mov	r3, r0
 800941a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800941c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d107      	bne.n	8009434 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	2300      	movs	r3, #0
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7ff ff7a 	bl	8009324 <VL53L0X_perform_phase_calibration>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10f      	bne.n	800945c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800943c:	7dbb      	ldrb	r3, [r7, #22]
 800943e:	461a      	mov	r2, r3
 8009440:	2101      	movs	r1, #1
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f002 fb98 	bl	800bb78 <VL53L0X_WrByte>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800944c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800945c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009470:	2300      	movs	r3, #0
 8009472:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800947c:	f107 030f 	add.w	r3, r7, #15
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7fe fe02 	bl	800808c <VL53L0X_GetMeasurementDataReady>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800948c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d110      	bne.n	80094b6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d00f      	beq.n	80094ba <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	3301      	adds	r3, #1
 800949e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80094a6:	d302      	bcc.n	80094ae <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80094a8:	23f9      	movs	r3, #249	; 0xf9
 80094aa:	75fb      	strb	r3, [r7, #23]
			break;
 80094ac:	e006      	b.n	80094bc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f002 fc82 	bl	800bdb8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80094b4:	e7e2      	b.n	800947c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80094b6:	bf00      	nop
 80094b8:	e000      	b.n	80094bc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80094ba:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80094bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	3301      	adds	r3, #1
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	4603      	mov	r3, r0
 80094f6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80094fc:	79fb      	ldrb	r3, [r7, #7]
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	b2db      	uxtb	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009524:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009526:	e002      	b.n	800952e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	089b      	lsrs	r3, r3, #2
 800952c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d8f8      	bhi.n	8009528 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009536:	e017      	b.n	8009568 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	4413      	add	r3, r2
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d30b      	bcc.n	800955c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4413      	add	r3, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	085b      	lsrs	r3, r3, #1
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	4413      	add	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
 800955a:	e002      	b.n	8009562 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	085b      	lsrs	r3, r3, #1
 8009560:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	089b      	lsrs	r3, r3, #2
 8009566:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e4      	bne.n	8009538 <VL53L0X_isqrt+0x24>
	}

	return res;
 800956e:	68fb      	ldr	r3, [r7, #12]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009584:	2300      	movs	r3, #0
 8009586:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009588:	2200      	movs	r2, #0
 800958a:	2183      	movs	r1, #131	; 0x83
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f002 faf3 	bl	800bb78 <VL53L0X_WrByte>
 8009592:	4603      	mov	r3, r0
 8009594:	461a      	mov	r2, r3
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	4313      	orrs	r3, r2
 800959a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800959c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d11e      	bne.n	80095e2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80095a8:	f107 030f 	add.w	r3, r7, #15
 80095ac:	461a      	mov	r2, r3
 80095ae:	2183      	movs	r1, #131	; 0x83
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f002 fb63 	bl	800bc7c <VL53L0X_RdByte>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <VL53L0X_device_read_strobe+0x5a>
 80095c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	3301      	adds	r3, #1
 80095cc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80095d4:	d3e8      	bcc.n	80095a8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80095dc:	d301      	bcc.n	80095e2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80095de:	23f9      	movs	r3, #249	; 0xf9
 80095e0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80095e2:	2201      	movs	r2, #1
 80095e4:	2183      	movs	r1, #131	; 0x83
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f002 fac6 	bl	800bb78 <VL53L0X_WrByte>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80095f6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b098      	sub	sp, #96	; 0x60
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800960e:	2300      	movs	r3, #0
 8009610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009632:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009636:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800964a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800964e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009652:	2b07      	cmp	r3, #7
 8009654:	f000 8408 	beq.w	8009e68 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009658:	2201      	movs	r2, #1
 800965a:	2180      	movs	r1, #128	; 0x80
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f002 fa8b 	bl	800bb78 <VL53L0X_WrByte>
 8009662:	4603      	mov	r3, r0
 8009664:	461a      	mov	r2, r3
 8009666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800966a:	4313      	orrs	r3, r2
 800966c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009670:	2201      	movs	r2, #1
 8009672:	21ff      	movs	r1, #255	; 0xff
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f002 fa7f 	bl	800bb78 <VL53L0X_WrByte>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009682:	4313      	orrs	r3, r2
 8009684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009688:	2200      	movs	r2, #0
 800968a:	2100      	movs	r1, #0
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f002 fa73 	bl	800bb78 <VL53L0X_WrByte>
 8009692:	4603      	mov	r3, r0
 8009694:	461a      	mov	r2, r3
 8009696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800969a:	4313      	orrs	r3, r2
 800969c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80096a0:	2206      	movs	r2, #6
 80096a2:	21ff      	movs	r1, #255	; 0xff
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f002 fa67 	bl	800bb78 <VL53L0X_WrByte>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096b2:	4313      	orrs	r3, r2
 80096b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80096b8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80096bc:	461a      	mov	r2, r3
 80096be:	2183      	movs	r1, #131	; 0x83
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f002 fadb 	bl	800bc7c <VL53L0X_RdByte>
 80096c6:	4603      	mov	r3, r0
 80096c8:	461a      	mov	r2, r3
 80096ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096ce:	4313      	orrs	r3, r2
 80096d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80096d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096d8:	f043 0304 	orr.w	r3, r3, #4
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	461a      	mov	r2, r3
 80096e0:	2183      	movs	r1, #131	; 0x83
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f002 fa48 	bl	800bb78 <VL53L0X_WrByte>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096f0:	4313      	orrs	r3, r2
 80096f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80096f6:	2207      	movs	r2, #7
 80096f8:	21ff      	movs	r1, #255	; 0xff
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f002 fa3c 	bl	800bb78 <VL53L0X_WrByte>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009708:	4313      	orrs	r3, r2
 800970a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800970e:	2201      	movs	r2, #1
 8009710:	2181      	movs	r1, #129	; 0x81
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f002 fa30 	bl	800bb78 <VL53L0X_WrByte>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009720:	4313      	orrs	r3, r2
 8009722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f002 fb46 	bl	800bdb8 <VL53L0X_PollingDelay>
 800972c:	4603      	mov	r3, r0
 800972e:	461a      	mov	r2, r3
 8009730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009734:	4313      	orrs	r3, r2
 8009736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800973a:	2201      	movs	r2, #1
 800973c:	2180      	movs	r1, #128	; 0x80
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f002 fa1a 	bl	800bb78 <VL53L0X_WrByte>
 8009744:	4603      	mov	r3, r0
 8009746:	461a      	mov	r2, r3
 8009748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800974c:	4313      	orrs	r3, r2
 800974e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 8098 	beq.w	800988e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800975e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009762:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009766:	2b00      	cmp	r3, #0
 8009768:	f040 8091 	bne.w	800988e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800976c:	226b      	movs	r2, #107	; 0x6b
 800976e:	2194      	movs	r1, #148	; 0x94
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f002 fa01 	bl	800bb78 <VL53L0X_WrByte>
 8009776:	4603      	mov	r3, r0
 8009778:	461a      	mov	r2, r3
 800977a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800977e:	4313      	orrs	r3, r2
 8009780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fef9 	bl	800957c <VL53L0X_device_read_strobe>
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009792:	4313      	orrs	r3, r2
 8009794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800979c:	461a      	mov	r2, r3
 800979e:	2190      	movs	r1, #144	; 0x90
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f002 facd 	bl	800bd40 <VL53L0X_RdDWord>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	0bdb      	lsrs	r3, r3, #15
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80097d0:	2224      	movs	r2, #36	; 0x24
 80097d2:	2194      	movs	r1, #148	; 0x94
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 f9cf 	bl	800bb78 <VL53L0X_WrByte>
 80097da:	4603      	mov	r3, r0
 80097dc:	461a      	mov	r2, r3
 80097de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097e2:	4313      	orrs	r3, r2
 80097e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fec7 	bl	800957c <VL53L0X_device_read_strobe>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097f6:	4313      	orrs	r3, r2
 80097f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80097fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009800:	461a      	mov	r2, r3
 8009802:	2190      	movs	r1, #144	; 0x90
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f002 fa9b 	bl	800bd40 <VL53L0X_RdDWord>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009812:	4313      	orrs	r3, r2
 8009814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	0e1b      	lsrs	r3, r3, #24
 800981c:	b2db      	uxtb	r3, r3
 800981e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	0c1b      	lsrs	r3, r3, #16
 8009824:	b2db      	uxtb	r3, r3
 8009826:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982a:	0a1b      	lsrs	r3, r3, #8
 800982c:	b2db      	uxtb	r3, r3
 800982e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	b2db      	uxtb	r3, r3
 8009834:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009836:	2225      	movs	r2, #37	; 0x25
 8009838:	2194      	movs	r1, #148	; 0x94
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f002 f99c 	bl	800bb78 <VL53L0X_WrByte>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009848:	4313      	orrs	r3, r2
 800984a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff fe94 	bl	800957c <VL53L0X_device_read_strobe>
 8009854:	4603      	mov	r3, r0
 8009856:	461a      	mov	r2, r3
 8009858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800985c:	4313      	orrs	r3, r2
 800985e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009866:	461a      	mov	r2, r3
 8009868:	2190      	movs	r1, #144	; 0x90
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f002 fa68 	bl	800bd40 <VL53L0X_RdDWord>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009878:	4313      	orrs	r3, r2
 800987a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	0e1b      	lsrs	r3, r3, #24
 8009882:	b2db      	uxtb	r3, r3
 8009884:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	0c1b      	lsrs	r3, r3, #16
 800988a:	b2db      	uxtb	r3, r3
 800988c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 8189 	beq.w	8009bac <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800989a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800989e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 8182 	bne.w	8009bac <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80098a8:	2202      	movs	r2, #2
 80098aa:	2194      	movs	r1, #148	; 0x94
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f002 f963 	bl	800bb78 <VL53L0X_WrByte>
 80098b2:	4603      	mov	r3, r0
 80098b4:	461a      	mov	r2, r3
 80098b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ba:	4313      	orrs	r3, r2
 80098bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fe5b 	bl	800957c <VL53L0X_device_read_strobe>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ce:	4313      	orrs	r3, r2
 80098d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80098d4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80098d8:	461a      	mov	r2, r3
 80098da:	2190      	movs	r1, #144	; 0x90
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f002 f9cd 	bl	800bc7c <VL53L0X_RdByte>
 80098e2:	4603      	mov	r3, r0
 80098e4:	461a      	mov	r2, r3
 80098e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ea:	4313      	orrs	r3, r2
 80098ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80098f0:	227b      	movs	r2, #123	; 0x7b
 80098f2:	2194      	movs	r1, #148	; 0x94
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f002 f93f 	bl	800bb78 <VL53L0X_WrByte>
 80098fa:	4603      	mov	r3, r0
 80098fc:	461a      	mov	r2, r3
 80098fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009902:	4313      	orrs	r3, r2
 8009904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fe37 	bl	800957c <VL53L0X_device_read_strobe>
 800990e:	4603      	mov	r3, r0
 8009910:	461a      	mov	r2, r3
 8009912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009916:	4313      	orrs	r3, r2
 8009918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800991c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009920:	461a      	mov	r2, r3
 8009922:	2190      	movs	r1, #144	; 0x90
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f002 f9a9 	bl	800bc7c <VL53L0X_RdByte>
 800992a:	4603      	mov	r3, r0
 800992c:	461a      	mov	r2, r3
 800992e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009932:	4313      	orrs	r3, r2
 8009934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009938:	2277      	movs	r2, #119	; 0x77
 800993a:	2194      	movs	r1, #148	; 0x94
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f002 f91b 	bl	800bb78 <VL53L0X_WrByte>
 8009942:	4603      	mov	r3, r0
 8009944:	461a      	mov	r2, r3
 8009946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800994a:	4313      	orrs	r3, r2
 800994c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff fe13 	bl	800957c <VL53L0X_device_read_strobe>
 8009956:	4603      	mov	r3, r0
 8009958:	461a      	mov	r2, r3
 800995a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800995e:	4313      	orrs	r3, r2
 8009960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009964:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009968:	461a      	mov	r2, r3
 800996a:	2190      	movs	r1, #144	; 0x90
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f002 f9e7 	bl	800bd40 <VL53L0X_RdDWord>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800997a:	4313      	orrs	r3, r2
 800997c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	0e5b      	lsrs	r3, r3, #25
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998a:	b2db      	uxtb	r3, r3
 800998c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	0c9b      	lsrs	r3, r3, #18
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009998:	b2db      	uxtb	r3, r3
 800999a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999e:	0adb      	lsrs	r3, r3, #11
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	091b      	lsrs	r3, r3, #4
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80099ca:	2278      	movs	r2, #120	; 0x78
 80099cc:	2194      	movs	r1, #148	; 0x94
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f002 f8d2 	bl	800bb78 <VL53L0X_WrByte>
 80099d4:	4603      	mov	r3, r0
 80099d6:	461a      	mov	r2, r3
 80099d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099dc:	4313      	orrs	r3, r2
 80099de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fdca 	bl	800957c <VL53L0X_device_read_strobe>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80099f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099fa:	461a      	mov	r2, r3
 80099fc:	2190      	movs	r1, #144	; 0x90
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f002 f99e 	bl	800bd40 <VL53L0X_RdDWord>
 8009a04:	4603      	mov	r3, r0
 8009a06:	461a      	mov	r2, r3
 8009a08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	0f5b      	lsrs	r3, r3, #29
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a22:	4413      	add	r3, r2
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2a:	0d9b      	lsrs	r3, r3, #22
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	0bdb      	lsrs	r3, r3, #15
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	0a1b      	lsrs	r3, r3, #8
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	085b      	lsrs	r3, r3, #1
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	019b      	lsls	r3, r3, #6
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009a72:	2279      	movs	r2, #121	; 0x79
 8009a74:	2194      	movs	r1, #148	; 0x94
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f002 f87e 	bl	800bb78 <VL53L0X_WrByte>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a84:	4313      	orrs	r3, r2
 8009a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff fd76 	bl	800957c <VL53L0X_device_read_strobe>
 8009a90:	4603      	mov	r3, r0
 8009a92:	461a      	mov	r2, r3
 8009a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2190      	movs	r1, #144	; 0x90
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f002 f94a 	bl	800bd40 <VL53L0X_RdDWord>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	0e9b      	lsrs	r3, r3, #26
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aca:	4413      	add	r3, r2
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	0cdb      	lsrs	r3, r3, #19
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	0b1b      	lsrs	r3, r3, #12
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	095b      	lsrs	r3, r3, #5
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009b0c:	227a      	movs	r2, #122	; 0x7a
 8009b0e:	2194      	movs	r1, #148	; 0x94
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f002 f831 	bl	800bb78 <VL53L0X_WrByte>
 8009b16:	4603      	mov	r3, r0
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff fd29 	bl	800957c <VL53L0X_device_read_strobe>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b32:	4313      	orrs	r3, r2
 8009b34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	2190      	movs	r1, #144	; 0x90
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f002 f8fd 	bl	800bd40 <VL53L0X_RdDWord>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	0f9b      	lsrs	r3, r3, #30
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b64:	4413      	add	r3, r2
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	0ddb      	lsrs	r3, r3, #23
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	0c1b      	lsrs	r3, r3, #16
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	0a5b      	lsrs	r3, r3, #9
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	089b      	lsrs	r3, r3, #2
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	f003 0304 	and.w	r3, r3, #4
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 80f1 	beq.w	8009d9a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009bb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bbc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 80ea 	bne.w	8009d9a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009bc6:	227b      	movs	r2, #123	; 0x7b
 8009bc8:	2194      	movs	r1, #148	; 0x94
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 ffd4 	bl	800bb78 <VL53L0X_WrByte>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fccc 	bl	800957c <VL53L0X_device_read_strobe>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461a      	mov	r2, r3
 8009be8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bec:	4313      	orrs	r3, r2
 8009bee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	2190      	movs	r1, #144	; 0x90
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f002 f8a0 	bl	800bd40 <VL53L0X_RdDWord>
 8009c00:	4603      	mov	r3, r0
 8009c02:	461a      	mov	r2, r3
 8009c04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009c0e:	227c      	movs	r2, #124	; 0x7c
 8009c10:	2194      	movs	r1, #148	; 0x94
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 ffb0 	bl	800bb78 <VL53L0X_WrByte>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff fca8 	bl	800957c <VL53L0X_device_read_strobe>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c3e:	461a      	mov	r2, r3
 8009c40:	2190      	movs	r1, #144	; 0x90
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f002 f87c 	bl	800bd40 <VL53L0X_RdDWord>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c50:	4313      	orrs	r3, r2
 8009c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009c56:	2273      	movs	r2, #115	; 0x73
 8009c58:	2194      	movs	r1, #148	; 0x94
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 ff8c 	bl	800bb78 <VL53L0X_WrByte>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff fc84 	bl	800957c <VL53L0X_device_read_strobe>
 8009c74:	4603      	mov	r3, r0
 8009c76:	461a      	mov	r2, r3
 8009c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c86:	461a      	mov	r2, r3
 8009c88:	2190      	movs	r1, #144	; 0x90
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f002 f858 	bl	800bd40 <VL53L0X_RdDWord>
 8009c90:	4603      	mov	r3, r0
 8009c92:	461a      	mov	r2, r3
 8009c94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009ca6:	2274      	movs	r2, #116	; 0x74
 8009ca8:	2194      	movs	r1, #148	; 0x94
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f001 ff64 	bl	800bb78 <VL53L0X_WrByte>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff fc5c 	bl	800957c <VL53L0X_device_read_strobe>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	2190      	movs	r1, #144	; 0x90
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f002 f830 	bl	800bd40 <VL53L0X_RdDWord>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009cf8:	2275      	movs	r2, #117	; 0x75
 8009cfa:	2194      	movs	r1, #148	; 0x94
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 ff3b 	bl	800bb78 <VL53L0X_WrByte>
 8009d02:	4603      	mov	r3, r0
 8009d04:	461a      	mov	r2, r3
 8009d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7ff fc33 	bl	800957c <VL53L0X_device_read_strobe>
 8009d16:	4603      	mov	r3, r0
 8009d18:	461a      	mov	r2, r3
 8009d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d28:	461a      	mov	r2, r3
 8009d2a:	2190      	movs	r1, #144	; 0x90
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f002 f807 	bl	800bd40 <VL53L0X_RdDWord>
 8009d32:	4603      	mov	r3, r0
 8009d34:	461a      	mov	r2, r3
 8009d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009d48:	2276      	movs	r2, #118	; 0x76
 8009d4a:	2194      	movs	r1, #148	; 0x94
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 ff13 	bl	800bb78 <VL53L0X_WrByte>
 8009d52:	4603      	mov	r3, r0
 8009d54:	461a      	mov	r2, r3
 8009d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fc0b 	bl	800957c <VL53L0X_device_read_strobe>
 8009d66:	4603      	mov	r3, r0
 8009d68:	461a      	mov	r2, r3
 8009d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d78:	461a      	mov	r2, r3
 8009d7a:	2190      	movs	r1, #144	; 0x90
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 ffdf 	bl	800bd40 <VL53L0X_RdDWord>
 8009d82:	4603      	mov	r3, r0
 8009d84:	461a      	mov	r2, r3
 8009d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d96:	4313      	orrs	r3, r2
 8009d98:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2181      	movs	r1, #129	; 0x81
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f001 feea 	bl	800bb78 <VL53L0X_WrByte>
 8009da4:	4603      	mov	r3, r0
 8009da6:	461a      	mov	r2, r3
 8009da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009db2:	2206      	movs	r2, #6
 8009db4:	21ff      	movs	r1, #255	; 0xff
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f001 fede 	bl	800bb78 <VL53L0X_WrByte>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009dca:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009dce:	461a      	mov	r2, r3
 8009dd0:	2183      	movs	r1, #131	; 0x83
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 ff52 	bl	800bc7c <VL53L0X_RdByte>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009de0:	4313      	orrs	r3, r2
 8009de2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dea:	f023 0304 	bic.w	r3, r3, #4
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	461a      	mov	r2, r3
 8009df2:	2183      	movs	r1, #131	; 0x83
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 febf 	bl	800bb78 <VL53L0X_WrByte>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e02:	4313      	orrs	r3, r2
 8009e04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009e08:	2201      	movs	r2, #1
 8009e0a:	21ff      	movs	r1, #255	; 0xff
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 feb3 	bl	800bb78 <VL53L0X_WrByte>
 8009e12:	4603      	mov	r3, r0
 8009e14:	461a      	mov	r2, r3
 8009e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009e20:	2201      	movs	r2, #1
 8009e22:	2100      	movs	r1, #0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 fea7 	bl	800bb78 <VL53L0X_WrByte>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e32:	4313      	orrs	r3, r2
 8009e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e38:	2200      	movs	r2, #0
 8009e3a:	21ff      	movs	r1, #255	; 0xff
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fe9b 	bl	800bb78 <VL53L0X_WrByte>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461a      	mov	r2, r3
 8009e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009e50:	2200      	movs	r2, #0
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 fe8f 	bl	800bb78 <VL53L0X_WrByte>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e62:	4313      	orrs	r3, r2
 8009e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009e68:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f040 808f 	bne.w	8009f90 <VL53L0X_get_info_from_device+0x98e>
 8009e72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e76:	2b07      	cmp	r3, #7
 8009e78:	f000 808a 	beq.w	8009f90 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d024      	beq.n	8009ed0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009e86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e8a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d11e      	bne.n	8009ed0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009e98:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009ea2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eaa:	e00e      	b.n	8009eca <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009eac:	f107 0208 	add.w	r2, r7, #8
 8009eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb2:	4413      	add	r3, r2
 8009eb4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009ec0:	460a      	mov	r2, r1
 8009ec2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ecc:	2b05      	cmp	r3, #5
 8009ece:	dded      	ble.n	8009eac <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	f003 0302 	and.w	r3, r3, #2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d018      	beq.n	8009f0c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ede:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d112      	bne.n	8009f0c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ee6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009ef0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	33f3      	adds	r3, #243	; 0xf3
 8009efe:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009f00:	f107 0310 	add.w	r3, r7, #16
 8009f04:	4619      	mov	r1, r3
 8009f06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f08:	f001 ffa0 	bl	800be4c <strcpy>

		}

		if (((option & 4) == 4) &&
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d030      	beq.n	8009f78 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009f16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f1a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d12a      	bne.n	8009f78 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f34:	025b      	lsls	r3, r3, #9
 8009f36:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f3c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d011      	beq.n	8009f70 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f5a:	fb02 f303 	mul.w	r3, r2, r3
 8009f5e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009f60:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009f64:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009f68:	425b      	negs	r3, r3
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009f70:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009f78:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009f86:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f90:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3760      	adds	r7, #96	; 0x60
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009fa8:	f240 6277 	movw	r2, #1655	; 0x677
 8009fac:	f04f 0300 	mov.w	r3, #0
 8009fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009fb4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009fb8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	fb02 f303 	mul.w	r3, r2, r3
 8009fc8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009fca:	68bb      	ldr	r3, [r7, #8]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	371c      	adds	r7, #28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d017      	beq.n	800a022 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009ff8:	e005      	b.n	800a006 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	085b      	lsrs	r3, r3, #1
 8009ffe:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	3301      	adds	r3, #1
 800a004:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1f4      	bne.n	8009ffa <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a010:	89fb      	ldrh	r3, [r7, #14]
 800a012:	021b      	lsls	r3, r3, #8
 800a014:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	b29b      	uxth	r3, r3
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a01e:	4413      	add	r3, r2
 800a020:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a022:	8afb      	ldrh	r3, [r7, #22]

}
 800a024:	4618      	mov	r0, r3
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a042:	88fa      	ldrh	r2, [r7, #6]
 800a044:	0a12      	lsrs	r2, r2, #8
 800a046:	b292      	uxth	r2, r2
 800a048:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a04a:	3301      	adds	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a04e:	68fb      	ldr	r3, [r7, #12]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	4613      	mov	r3, r2
 800a068:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	4619      	mov	r1, r3
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f7ff ff92 	bl	8009f9c <VL53L0X_calc_macro_period_ps>
 800a078:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <VL53L0X_calc_timeout_mclks+0x50>)
 800a082:	fba2 2303 	umull	r2, r3, r2, r3
 800a086:	099b      	lsrs	r3, r3, #6
 800a088:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a090:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	085b      	lsrs	r3, r3, #1
 800a098:	441a      	add	r2, r3
	timeout_period_mclks =
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	10624dd3 	.word	0x10624dd3

0800a0b0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	807b      	strh	r3, [r7, #2]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a0c4:	787b      	ldrb	r3, [r7, #1]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff ff67 	bl	8009f9c <VL53L0X_calc_macro_period_ps>
 800a0ce:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0d6:	4a0a      	ldr	r2, [pc, #40]	; (800a100 <VL53L0X_calc_timeout_us+0x50>)
 800a0d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0dc:	099b      	lsrs	r3, r3, #6
 800a0de:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a0e0:	887b      	ldrh	r3, [r7, #2]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	fb02 f303 	mul.w	r3, r2, r3
 800a0e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a0ec:	4a04      	ldr	r2, [pc, #16]	; (800a100 <VL53L0X_calc_timeout_us+0x50>)
 800a0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f2:	099b      	lsrs	r3, r3, #6
 800a0f4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a0f6:	697b      	ldr	r3, [r7, #20]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3718      	adds	r7, #24
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	10624dd3 	.word	0x10624dd3

0800a104 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08c      	sub	sp, #48	; 0x30
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	460b      	mov	r3, r1
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a112:	2300      	movs	r3, #0
 800a114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a12a:	7afb      	ldrb	r3, [r7, #11]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d005      	beq.n	800a13c <get_sequence_step_timeout+0x38>
 800a130:	7afb      	ldrb	r3, [r7, #11]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d002      	beq.n	800a13c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a136:	7afb      	ldrb	r3, [r7, #11]
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d128      	bne.n	800a18e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a13c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a140:	461a      	mov	r2, r3
 800a142:	2100      	movs	r1, #0
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7fd fa7d 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a150:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a154:	2b00      	cmp	r3, #0
 800a156:	d109      	bne.n	800a16c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a158:	f107 0320 	add.w	r3, r7, #32
 800a15c:	461a      	mov	r2, r3
 800a15e:	2146      	movs	r1, #70	; 0x46
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f001 fd8b 	bl	800bc7c <VL53L0X_RdByte>
 800a166:	4603      	mov	r3, r0
 800a168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a16c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a170:	b29b      	uxth	r3, r3
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff ff5c 	bl	800a030 <VL53L0X_decode_timeout>
 800a178:	4603      	mov	r3, r0
 800a17a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a17c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a182:	4619      	mov	r1, r3
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7ff ff93 	bl	800a0b0 <VL53L0X_calc_timeout_us>
 800a18a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a18c:	e092      	b.n	800a2b4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	2b03      	cmp	r3, #3
 800a192:	d135      	bne.n	800a200 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a194:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a198:	461a      	mov	r2, r3
 800a19a:	2100      	movs	r1, #0
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7fd fa51 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a1a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f040 8081 	bne.w	800a2b4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a1b2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7fd fa42 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a1c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d109      	bne.n	800a1e2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a1ce:	f107 031e 	add.w	r3, r7, #30
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	2151      	movs	r1, #81	; 0x51
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f001 fd7a 	bl	800bcd0 <VL53L0X_RdWord>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a1e2:	8bfb      	ldrh	r3, [r7, #30]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7ff ff23 	bl	800a030 <VL53L0X_decode_timeout>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a1ee:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff ff5a 	bl	800a0b0 <VL53L0X_calc_timeout_us>
 800a1fc:	62b8      	str	r0, [r7, #40]	; 0x28
 800a1fe:	e059      	b.n	800a2b4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	2b04      	cmp	r3, #4
 800a204:	d156      	bne.n	800a2b4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a206:	f107 0314 	add.w	r3, r7, #20
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7fd fb25 	bl	800785c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a216:	7dfb      	ldrb	r3, [r7, #23]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01d      	beq.n	800a258 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a21c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a220:	461a      	mov	r2, r3
 800a222:	2100      	movs	r1, #0
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7fd fa0d 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a230:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10f      	bne.n	800a258 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a238:	f107 031e 	add.w	r3, r7, #30
 800a23c:	461a      	mov	r2, r3
 800a23e:	2151      	movs	r1, #81	; 0x51
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f001 fd45 	bl	800bcd0 <VL53L0X_RdWord>
 800a246:	4603      	mov	r3, r0
 800a248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a24c:	8bfb      	ldrh	r3, [r7, #30]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff feee 	bl	800a030 <VL53L0X_decode_timeout>
 800a254:	4603      	mov	r3, r0
 800a256:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a258:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d109      	bne.n	800a274 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a260:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a264:	461a      	mov	r2, r3
 800a266:	2101      	movs	r1, #1
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7fd f9eb 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a26e:	4603      	mov	r3, r0
 800a270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a274:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10f      	bne.n	800a29c <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a27c:	f107 031c 	add.w	r3, r7, #28
 800a280:	461a      	mov	r2, r3
 800a282:	2171      	movs	r1, #113	; 0x71
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f001 fd23 	bl	800bcd0 <VL53L0X_RdWord>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a290:	8bbb      	ldrh	r3, [r7, #28]
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff fecc 	bl	800a030 <VL53L0X_decode_timeout>
 800a298:	4603      	mov	r3, r0
 800a29a:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a29c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a29e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a2a4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f7ff feff 	bl	800a0b0 <VL53L0X_calc_timeout_us>
 800a2b2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b8:	601a      	str	r2, [r3, #0]

	return Status;
 800a2ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3730      	adds	r7, #48	; 0x30
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b08a      	sub	sp, #40	; 0x28
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a2da:	7afb      	ldrb	r3, [r7, #11]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <set_sequence_step_timeout+0x26>
 800a2e0:	7afb      	ldrb	r3, [r7, #11]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d002      	beq.n	800a2ec <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d138      	bne.n	800a35e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a2ec:	f107 031b 	add.w	r3, r7, #27
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7fd f9a5 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a300:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a304:	2b00      	cmp	r3, #0
 800a306:	d11a      	bne.n	800a33e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a308:	7efb      	ldrb	r3, [r7, #27]
 800a30a:	461a      	mov	r2, r3
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7ff fea4 	bl	800a05c <VL53L0X_calc_timeout_mclks>
 800a314:	4603      	mov	r3, r0
 800a316:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a318:	8bbb      	ldrh	r3, [r7, #28]
 800a31a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a31e:	d903      	bls.n	800a328 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a320:	23ff      	movs	r3, #255	; 0xff
 800a322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a326:	e004      	b.n	800a332 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a328:	8bbb      	ldrh	r3, [r7, #28]
 800a32a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a32c:	3b01      	subs	r3, #1
 800a32e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a33e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 80ab 	bne.w	800a49e <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a34c:	461a      	mov	r2, r3
 800a34e:	2146      	movs	r1, #70	; 0x46
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f001 fc11 	bl	800bb78 <VL53L0X_WrByte>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a35c:	e09f      	b.n	800a49e <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a35e:	7afb      	ldrb	r3, [r7, #11]
 800a360:	2b03      	cmp	r3, #3
 800a362:	d135      	bne.n	800a3d0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a364:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d11b      	bne.n	800a3a4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a36c:	f107 031b 	add.w	r3, r7, #27
 800a370:	461a      	mov	r2, r3
 800a372:	2100      	movs	r1, #0
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7fd f965 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a380:	7efb      	ldrb	r3, [r7, #27]
 800a382:	461a      	mov	r2, r3
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fe68 	bl	800a05c <VL53L0X_calc_timeout_mclks>
 800a38c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a38e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff fe20 	bl	8009fd8 <VL53L0X_encode_timeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a39c:	8b3a      	ldrh	r2, [r7, #24]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a3a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d108      	bne.n	800a3be <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a3ac:	8b3b      	ldrh	r3, [r7, #24]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2151      	movs	r1, #81	; 0x51
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f001 fc04 	bl	800bbc0 <VL53L0X_WrWord>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a3be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d16b      	bne.n	800a49e <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a3ce:	e066      	b.n	800a49e <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a3d0:	7afb      	ldrb	r3, [r7, #11]
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	d160      	bne.n	800a498 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a3d6:	f107 0310 	add.w	r3, r7, #16
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7fd fa3d 	bl	800785c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a3e6:	7cfb      	ldrb	r3, [r7, #19]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01d      	beq.n	800a428 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a3ec:	f107 031b 	add.w	r3, r7, #27
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f7fd f925 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a400:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10f      	bne.n	800a428 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a408:	f107 0318 	add.w	r3, r7, #24
 800a40c:	461a      	mov	r2, r3
 800a40e:	2151      	movs	r1, #81	; 0x51
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f001 fc5d 	bl	800bcd0 <VL53L0X_RdWord>
 800a416:	4603      	mov	r3, r0
 800a418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a41c:	8b3b      	ldrh	r3, [r7, #24]
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fe06 	bl	800a030 <VL53L0X_decode_timeout>
 800a424:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a426:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d109      	bne.n	800a444 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a430:	f107 031b 	add.w	r3, r7, #27
 800a434:	461a      	mov	r2, r3
 800a436:	2101      	movs	r1, #1
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7fd f903 	bl	8007644 <VL53L0X_GetVcselPulsePeriod>
 800a43e:	4603      	mov	r3, r0
 800a440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d128      	bne.n	800a49e <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a44c:	7efb      	ldrb	r3, [r7, #27]
 800a44e:	461a      	mov	r2, r3
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7ff fe02 	bl	800a05c <VL53L0X_calc_timeout_mclks>
 800a458:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a45c:	6a3a      	ldr	r2, [r7, #32]
 800a45e:	4413      	add	r3, r2
 800a460:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a462:	6a38      	ldr	r0, [r7, #32]
 800a464:	f7ff fdb8 	bl	8009fd8 <VL53L0X_encode_timeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a46c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a470:	2b00      	cmp	r3, #0
 800a472:	d108      	bne.n	800a486 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a474:	8bfb      	ldrh	r3, [r7, #30]
 800a476:	461a      	mov	r2, r3
 800a478:	2171      	movs	r1, #113	; 0x71
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f001 fba0 	bl	800bbc0 <VL53L0X_WrWord>
 800a480:	4603      	mov	r3, r0
 800a482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a486:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d107      	bne.n	800a49e <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a496:	e002      	b.n	800a49e <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a498:	23fc      	movs	r3, #252	; 0xfc
 800a49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3728      	adds	r7, #40	; 0x28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b08a      	sub	sp, #40	; 0x28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a4c0:	230c      	movs	r3, #12
 800a4c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a4c6:	2312      	movs	r3, #18
 800a4c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a4cc:	2308      	movs	r3, #8
 800a4ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a4d2:	230e      	movs	r3, #14
 800a4d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a4dc:	78bb      	ldrb	r3, [r7, #2]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4e8:	23fc      	movs	r3, #252	; 0xfc
 800a4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4ee:	e020      	b.n	800a532 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10d      	bne.n	800a512 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a4f6:	78ba      	ldrb	r2, [r7, #2]
 800a4f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d304      	bcc.n	800a50a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a500:	78ba      	ldrb	r2, [r7, #2]
 800a502:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a506:	429a      	cmp	r2, r3
 800a508:	d903      	bls.n	800a512 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a50a:	23fc      	movs	r3, #252	; 0xfc
 800a50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a510:	e00f      	b.n	800a532 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d10c      	bne.n	800a532 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a518:	78ba      	ldrb	r2, [r7, #2]
 800a51a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a51e:	429a      	cmp	r2, r3
 800a520:	d304      	bcc.n	800a52c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a522:	78ba      	ldrb	r2, [r7, #2]
 800a524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a528:	429a      	cmp	r2, r3
 800a52a:	d902      	bls.n	800a532 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a52c:	23fc      	movs	r3, #252	; 0xfc
 800a52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a532:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a53a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a53e:	e239      	b.n	800a9b4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d150      	bne.n	800a5e8 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a546:	78bb      	ldrb	r3, [r7, #2]
 800a548:	2b0c      	cmp	r3, #12
 800a54a:	d110      	bne.n	800a56e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a54c:	2218      	movs	r2, #24
 800a54e:	2157      	movs	r1, #87	; 0x57
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 fb11 	bl	800bb78 <VL53L0X_WrByte>
 800a556:	4603      	mov	r3, r0
 800a558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a55c:	2208      	movs	r2, #8
 800a55e:	2156      	movs	r1, #86	; 0x56
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 fb09 	bl	800bb78 <VL53L0X_WrByte>
 800a566:	4603      	mov	r3, r0
 800a568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a56c:	e17f      	b.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a56e:	78bb      	ldrb	r3, [r7, #2]
 800a570:	2b0e      	cmp	r3, #14
 800a572:	d110      	bne.n	800a596 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a574:	2230      	movs	r2, #48	; 0x30
 800a576:	2157      	movs	r1, #87	; 0x57
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 fafd 	bl	800bb78 <VL53L0X_WrByte>
 800a57e:	4603      	mov	r3, r0
 800a580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a584:	2208      	movs	r2, #8
 800a586:	2156      	movs	r1, #86	; 0x56
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f001 faf5 	bl	800bb78 <VL53L0X_WrByte>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a594:	e16b      	b.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a596:	78bb      	ldrb	r3, [r7, #2]
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d110      	bne.n	800a5be <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a59c:	2240      	movs	r2, #64	; 0x40
 800a59e:	2157      	movs	r1, #87	; 0x57
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 fae9 	bl	800bb78 <VL53L0X_WrByte>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a5ac:	2208      	movs	r2, #8
 800a5ae:	2156      	movs	r1, #86	; 0x56
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f001 fae1 	bl	800bb78 <VL53L0X_WrByte>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5bc:	e157      	b.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a5be:	78bb      	ldrb	r3, [r7, #2]
 800a5c0:	2b12      	cmp	r3, #18
 800a5c2:	f040 8154 	bne.w	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a5c6:	2250      	movs	r2, #80	; 0x50
 800a5c8:	2157      	movs	r1, #87	; 0x57
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 fad4 	bl	800bb78 <VL53L0X_WrByte>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a5d6:	2208      	movs	r2, #8
 800a5d8:	2156      	movs	r1, #86	; 0x56
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 facc 	bl	800bb78 <VL53L0X_WrByte>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a5e6:	e142      	b.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a5e8:	78fb      	ldrb	r3, [r7, #3]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	f040 813f 	bne.w	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a5f0:	78bb      	ldrb	r3, [r7, #2]
 800a5f2:	2b08      	cmp	r3, #8
 800a5f4:	d14c      	bne.n	800a690 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a5f6:	2210      	movs	r2, #16
 800a5f8:	2148      	movs	r1, #72	; 0x48
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f001 fabc 	bl	800bb78 <VL53L0X_WrByte>
 800a600:	4603      	mov	r3, r0
 800a602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a606:	2208      	movs	r2, #8
 800a608:	2147      	movs	r1, #71	; 0x47
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fab4 	bl	800bb78 <VL53L0X_WrByte>
 800a610:	4603      	mov	r3, r0
 800a612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a616:	2202      	movs	r2, #2
 800a618:	2132      	movs	r1, #50	; 0x32
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 faac 	bl	800bb78 <VL53L0X_WrByte>
 800a620:	4603      	mov	r3, r0
 800a622:	461a      	mov	r2, r3
 800a624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a628:	4313      	orrs	r3, r2
 800a62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a62e:	220c      	movs	r2, #12
 800a630:	2130      	movs	r1, #48	; 0x30
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 faa0 	bl	800bb78 <VL53L0X_WrByte>
 800a638:	4603      	mov	r3, r0
 800a63a:	461a      	mov	r2, r3
 800a63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a640:	4313      	orrs	r3, r2
 800a642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a646:	2201      	movs	r2, #1
 800a648:	21ff      	movs	r1, #255	; 0xff
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fa94 	bl	800bb78 <VL53L0X_WrByte>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a658:	4313      	orrs	r3, r2
 800a65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a65e:	2230      	movs	r2, #48	; 0x30
 800a660:	2130      	movs	r1, #48	; 0x30
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f001 fa88 	bl	800bb78 <VL53L0X_WrByte>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a670:	4313      	orrs	r3, r2
 800a672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a676:	2200      	movs	r2, #0
 800a678:	21ff      	movs	r1, #255	; 0xff
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f001 fa7c 	bl	800bb78 <VL53L0X_WrByte>
 800a680:	4603      	mov	r3, r0
 800a682:	461a      	mov	r2, r3
 800a684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a688:	4313      	orrs	r3, r2
 800a68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a68e:	e0ee      	b.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a690:	78bb      	ldrb	r3, [r7, #2]
 800a692:	2b0a      	cmp	r3, #10
 800a694:	d14c      	bne.n	800a730 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a696:	2228      	movs	r2, #40	; 0x28
 800a698:	2148      	movs	r1, #72	; 0x48
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f001 fa6c 	bl	800bb78 <VL53L0X_WrByte>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a6a6:	2208      	movs	r2, #8
 800a6a8:	2147      	movs	r1, #71	; 0x47
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f001 fa64 	bl	800bb78 <VL53L0X_WrByte>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a6b6:	2203      	movs	r2, #3
 800a6b8:	2132      	movs	r1, #50	; 0x32
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f001 fa5c 	bl	800bb78 <VL53L0X_WrByte>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a6ce:	2209      	movs	r2, #9
 800a6d0:	2130      	movs	r1, #48	; 0x30
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f001 fa50 	bl	800bb78 <VL53L0X_WrByte>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	21ff      	movs	r1, #255	; 0xff
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f001 fa44 	bl	800bb78 <VL53L0X_WrByte>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a6fe:	2220      	movs	r2, #32
 800a700:	2130      	movs	r1, #48	; 0x30
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f001 fa38 	bl	800bb78 <VL53L0X_WrByte>
 800a708:	4603      	mov	r3, r0
 800a70a:	461a      	mov	r2, r3
 800a70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a710:	4313      	orrs	r3, r2
 800a712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a716:	2200      	movs	r2, #0
 800a718:	21ff      	movs	r1, #255	; 0xff
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 fa2c 	bl	800bb78 <VL53L0X_WrByte>
 800a720:	4603      	mov	r3, r0
 800a722:	461a      	mov	r2, r3
 800a724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a728:	4313      	orrs	r3, r2
 800a72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a72e:	e09e      	b.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a730:	78bb      	ldrb	r3, [r7, #2]
 800a732:	2b0c      	cmp	r3, #12
 800a734:	d14c      	bne.n	800a7d0 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a736:	2238      	movs	r2, #56	; 0x38
 800a738:	2148      	movs	r1, #72	; 0x48
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f001 fa1c 	bl	800bb78 <VL53L0X_WrByte>
 800a740:	4603      	mov	r3, r0
 800a742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a746:	2208      	movs	r2, #8
 800a748:	2147      	movs	r1, #71	; 0x47
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 fa14 	bl	800bb78 <VL53L0X_WrByte>
 800a750:	4603      	mov	r3, r0
 800a752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a756:	2203      	movs	r2, #3
 800a758:	2132      	movs	r1, #50	; 0x32
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f001 fa0c 	bl	800bb78 <VL53L0X_WrByte>
 800a760:	4603      	mov	r3, r0
 800a762:	461a      	mov	r2, r3
 800a764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a768:	4313      	orrs	r3, r2
 800a76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a76e:	2208      	movs	r2, #8
 800a770:	2130      	movs	r1, #48	; 0x30
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 fa00 	bl	800bb78 <VL53L0X_WrByte>
 800a778:	4603      	mov	r3, r0
 800a77a:	461a      	mov	r2, r3
 800a77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a780:	4313      	orrs	r3, r2
 800a782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a786:	2201      	movs	r2, #1
 800a788:	21ff      	movs	r1, #255	; 0xff
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f001 f9f4 	bl	800bb78 <VL53L0X_WrByte>
 800a790:	4603      	mov	r3, r0
 800a792:	461a      	mov	r2, r3
 800a794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a798:	4313      	orrs	r3, r2
 800a79a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a79e:	2220      	movs	r2, #32
 800a7a0:	2130      	movs	r1, #48	; 0x30
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f9e8 	bl	800bb78 <VL53L0X_WrByte>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	21ff      	movs	r1, #255	; 0xff
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 f9dc 	bl	800bb78 <VL53L0X_WrByte>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7ce:	e04e      	b.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a7d0:	78bb      	ldrb	r3, [r7, #2]
 800a7d2:	2b0e      	cmp	r3, #14
 800a7d4:	d14b      	bne.n	800a86e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a7d6:	2248      	movs	r2, #72	; 0x48
 800a7d8:	2148      	movs	r1, #72	; 0x48
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 f9cc 	bl	800bb78 <VL53L0X_WrByte>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a7e6:	2208      	movs	r2, #8
 800a7e8:	2147      	movs	r1, #71	; 0x47
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 f9c4 	bl	800bb78 <VL53L0X_WrByte>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a7f6:	2203      	movs	r2, #3
 800a7f8:	2132      	movs	r1, #50	; 0x32
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f001 f9bc 	bl	800bb78 <VL53L0X_WrByte>
 800a800:	4603      	mov	r3, r0
 800a802:	461a      	mov	r2, r3
 800a804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a808:	4313      	orrs	r3, r2
 800a80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a80e:	2207      	movs	r2, #7
 800a810:	2130      	movs	r1, #48	; 0x30
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 f9b0 	bl	800bb78 <VL53L0X_WrByte>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a820:	4313      	orrs	r3, r2
 800a822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a826:	2201      	movs	r2, #1
 800a828:	21ff      	movs	r1, #255	; 0xff
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 f9a4 	bl	800bb78 <VL53L0X_WrByte>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a838:	4313      	orrs	r3, r2
 800a83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a83e:	2220      	movs	r2, #32
 800a840:	2130      	movs	r1, #48	; 0x30
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f001 f998 	bl	800bb78 <VL53L0X_WrByte>
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a850:	4313      	orrs	r3, r2
 800a852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a856:	2200      	movs	r2, #0
 800a858:	21ff      	movs	r1, #255	; 0xff
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 f98c 	bl	800bb78 <VL53L0X_WrByte>
 800a860:	4603      	mov	r3, r0
 800a862:	461a      	mov	r2, r3
 800a864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a868:	4313      	orrs	r3, r2
 800a86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a86e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a872:	2b00      	cmp	r3, #0
 800a874:	d17f      	bne.n	800a976 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a876:	78bb      	ldrb	r3, [r7, #2]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe fe38 	bl	80094ee <VL53L0X_encode_vcsel_period>
 800a87e:	4603      	mov	r3, r0
 800a880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a884:	78fb      	ldrb	r3, [r7, #3]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d045      	beq.n	800a91a <VL53L0X_set_vcsel_pulse_period+0x470>
 800a88e:	e06e      	b.n	800a96e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a890:	f107 0314 	add.w	r3, r7, #20
 800a894:	461a      	mov	r2, r3
 800a896:	2103      	movs	r1, #3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff fc33 	bl	800a104 <get_sequence_step_timeout>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a8a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a8ac:	f107 0310 	add.w	r3, r7, #16
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	2102      	movs	r1, #2
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff fc25 	bl	800a104 <get_sequence_step_timeout>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a8c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d109      	bne.n	800a8dc <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a8c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	2150      	movs	r1, #80	; 0x50
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 f951 	bl	800bb78 <VL53L0X_WrByte>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d108      	bne.n	800a8f6 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	2103      	movs	r1, #3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fceb 	bl	800a2c6 <set_sequence_step_timeout>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a8f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d108      	bne.n	800a910 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	461a      	mov	r2, r3
 800a902:	2102      	movs	r1, #2
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff fcde 	bl	800a2c6 <set_sequence_step_timeout>
 800a90a:	4603      	mov	r3, r0
 800a90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	78ba      	ldrb	r2, [r7, #2]
 800a914:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a918:	e02e      	b.n	800a978 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a91a:	f107 0318 	add.w	r3, r7, #24
 800a91e:	461a      	mov	r2, r3
 800a920:	2104      	movs	r1, #4
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fbee 	bl	800a104 <get_sequence_step_timeout>
 800a928:	4603      	mov	r3, r0
 800a92a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a92e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a932:	2b00      	cmp	r3, #0
 800a934:	d109      	bne.n	800a94a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a936:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a93a:	461a      	mov	r2, r3
 800a93c:	2170      	movs	r1, #112	; 0x70
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 f91a 	bl	800bb78 <VL53L0X_WrByte>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a94a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d108      	bne.n	800a964 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	461a      	mov	r2, r3
 800a956:	2104      	movs	r1, #4
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff fcb4 	bl	800a2c6 <set_sequence_step_timeout>
 800a95e:	4603      	mov	r3, r0
 800a960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	78ba      	ldrb	r2, [r7, #2]
 800a968:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a96c:	e004      	b.n	800a978 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a96e:	23fc      	movs	r3, #252	; 0xfc
 800a970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a974:	e000      	b.n	800a978 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a976:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d109      	bne.n	800a994 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a986:	69f9      	ldr	r1, [r7, #28]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7fc fe1d 	bl	80075c8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a994:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d109      	bne.n	800a9b0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a99c:	f107 010f 	add.w	r1, r7, #15
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7fe fcbd 	bl	8009324 <VL53L0X_perform_phase_calibration>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a9b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3728      	adds	r7, #40	; 0x28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a9ce:	7afb      	ldrb	r3, [r7, #11]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d00a      	beq.n	800a9ee <VL53L0X_get_vcsel_pulse_period+0x32>
 800a9d8:	e013      	b.n	800aa02 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a9da:	f107 0316 	add.w	r3, r7, #22
 800a9de:	461a      	mov	r2, r3
 800a9e0:	2150      	movs	r1, #80	; 0x50
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f001 f94a 	bl	800bc7c <VL53L0X_RdByte>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a9ec:	e00b      	b.n	800aa06 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a9ee:	f107 0316 	add.w	r3, r7, #22
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2170      	movs	r1, #112	; 0x70
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f001 f940 	bl	800bc7c <VL53L0X_RdByte>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800aa00:	e001      	b.n	800aa06 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa02:	23fc      	movs	r3, #252	; 0xfc
 800aa04:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800aa06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d107      	bne.n	800aa1e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800aa0e:	7dbb      	ldrb	r3, [r7, #22]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fd59 	bl	80094c8 <VL53L0X_decode_vcsel_period>
 800aa16:	4603      	mov	r3, r0
 800aa18:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	701a      	strb	r2, [r3, #0]

	return Status;
 800aa1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b092      	sub	sp, #72	; 0x48
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800aa3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800aa3e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800aa40:	f240 7376 	movw	r3, #1910	; 0x776
 800aa44:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800aa46:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800aa4a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800aa4c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa50:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800aa52:	f240 234e 	movw	r3, #590	; 0x24e
 800aa56:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800aa58:	f240 23b2 	movw	r3, #690	; 0x2b2
 800aa5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800aa5e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa62:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800aa64:	f240 2326 	movw	r3, #550	; 0x226
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800aa6e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800aa72:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d205      	bcs.n	800aa8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa80:	23fc      	movs	r3, #252	; 0xfc
 800aa82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800aa86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa8a:	e0aa      	b.n	800abe2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800aa8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aa98:	f107 0314 	add.w	r3, r7, #20
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7fc fedc 	bl	800785c <VL53L0X_GetSequenceStepEnables>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800aaaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d15b      	bne.n	800ab6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800aab2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d105      	bne.n	800aac4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800aab8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d102      	bne.n	800aac4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800aabe:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d052      	beq.n	800ab6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800aac4:	f107 0310 	add.w	r3, r7, #16
 800aac8:	461a      	mov	r2, r3
 800aaca:	2102      	movs	r1, #2
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fb19 	bl	800a104 <get_sequence_step_timeout>
 800aad2:	4603      	mov	r3, r0
 800aad4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800aad8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800aae0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aae4:	e07d      	b.n	800abe2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800aae6:	7d3b      	ldrb	r3, [r7, #20]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00f      	beq.n	800ab0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800aaec:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800aaee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf0:	4413      	add	r3, r2
 800aaf2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800aaf4:	69fa      	ldr	r2, [r7, #28]
 800aaf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d204      	bcs.n	800ab06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800aafc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	643b      	str	r3, [r7, #64]	; 0x40
 800ab04:	e002      	b.n	800ab0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab06:	23fc      	movs	r3, #252	; 0xfc
 800ab08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ab0c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ab14:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab18:	e063      	b.n	800abe2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ab1a:	7dbb      	ldrb	r3, [r7, #22]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d011      	beq.n	800ab44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	4413      	add	r3, r2
 800ab26:	005b      	lsls	r3, r3, #1
 800ab28:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d204      	bcs.n	800ab3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ab32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	643b      	str	r3, [r7, #64]	; 0x40
 800ab3a:	e016      	b.n	800ab6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab3c:	23fc      	movs	r3, #252	; 0xfc
 800ab3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ab42:	e012      	b.n	800ab6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ab44:	7d7b      	ldrb	r3, [r7, #21]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00f      	beq.n	800ab6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab4e:	4413      	add	r3, r2
 800ab50:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d204      	bcs.n	800ab64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ab5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	643b      	str	r3, [r7, #64]	; 0x40
 800ab62:	e002      	b.n	800ab6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab64:	23fc      	movs	r3, #252	; 0xfc
 800ab66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ab6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ab72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab76:	e034      	b.n	800abe2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d019      	beq.n	800abb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ab7e:	f107 030c 	add.w	r3, r7, #12
 800ab82:	461a      	mov	r2, r3
 800ab84:	2103      	movs	r1, #3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff fabc 	bl	800a104 <get_sequence_step_timeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab96:	4413      	add	r3, r2
 800ab98:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ab9a:	69fa      	ldr	r2, [r7, #28]
 800ab9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d204      	bcs.n	800abac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800aba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	643b      	str	r3, [r7, #64]	; 0x40
 800abaa:	e002      	b.n	800abb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abac:	23fc      	movs	r3, #252	; 0xfc
 800abae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800abb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d111      	bne.n	800abde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800abba:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00e      	beq.n	800abde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800abc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800abc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abca:	2104      	movs	r1, #4
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff fb7a 	bl	800a2c6 <set_sequence_step_timeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800abde:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3748      	adds	r7, #72	; 0x48
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b090      	sub	sp, #64	; 0x40
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800abfa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800abfe:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ac00:	f240 7376 	movw	r3, #1910	; 0x776
 800ac04:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ac06:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ac0a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ac0c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ac10:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ac12:	f240 234e 	movw	r3, #590	; 0x24e
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ac18:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ac1e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ac24:	f240 2326 	movw	r3, #550	; 0x226
 800ac28:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ac2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac32:	441a      	add	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ac38:	f107 0318 	add.w	r3, r7, #24
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7fc fe0c 	bl	800785c <VL53L0X_GetSequenceStepEnables>
 800ac44:	4603      	mov	r3, r0
 800ac46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ac4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ac52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac56:	e075      	b.n	800ad44 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ac58:	7e3b      	ldrb	r3, [r7, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d105      	bne.n	800ac6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ac5e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d102      	bne.n	800ac6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ac64:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d030      	beq.n	800accc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ac6a:	f107 0310 	add.w	r3, r7, #16
 800ac6e:	461a      	mov	r2, r3
 800ac70:	2102      	movs	r1, #2
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fa46 	bl	800a104 <get_sequence_step_timeout>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ac7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d122      	bne.n	800accc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ac86:	7e3b      	ldrb	r3, [r7, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d007      	beq.n	800ac9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ac90:	6939      	ldr	r1, [r7, #16]
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac96:	441a      	add	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ac9c:	7ebb      	ldrb	r3, [r7, #26]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800aca6:	6939      	ldr	r1, [r7, #16]
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	440b      	add	r3, r1
 800acac:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800acae:	441a      	add	r2, r3
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	e00a      	b.n	800accc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800acb6:	7e7b      	ldrb	r3, [r7, #25]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800acc0:	6939      	ldr	r1, [r7, #16]
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800acc6:	441a      	add	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800accc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d114      	bne.n	800acfe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800acd4:	7efb      	ldrb	r3, [r7, #27]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d011      	beq.n	800acfe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800acda:	f107 030c 	add.w	r3, r7, #12
 800acde:	461a      	mov	r2, r3
 800ace0:	2103      	movs	r1, #3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff fa0e 	bl	800a104 <get_sequence_step_timeout>
 800ace8:	4603      	mov	r3, r0
 800acea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800acf8:	441a      	add	r2, r3
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800acfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d114      	bne.n	800ad30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ad06:	7f3b      	ldrb	r3, [r7, #28]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d011      	beq.n	800ad30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ad0c:	f107 0314 	add.w	r3, r7, #20
 800ad10:	461a      	mov	r2, r3
 800ad12:	2104      	movs	r1, #4
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff f9f5 	bl	800a104 <get_sequence_step_timeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ad24:	6979      	ldr	r1, [r7, #20]
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ad2a:	441a      	add	r2, r3
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d103      	bne.n	800ad40 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3740      	adds	r7, #64	; 0x40
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad56:	2300      	movs	r3, #0
 800ad58:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ad5e:	e0c6      	b.n	800aeee <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	74fb      	strb	r3, [r7, #19]
		Index++;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800ad70:	7cfb      	ldrb	r3, [r7, #19]
 800ad72:	2bff      	cmp	r3, #255	; 0xff
 800ad74:	f040 808d 	bne.w	800ae92 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	747b      	strb	r3, [r7, #17]
			Index++;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	3301      	adds	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ad88:	7c7b      	ldrb	r3, [r7, #17]
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d87e      	bhi.n	800ae8c <VL53L0X_load_tuning_settings+0x140>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <VL53L0X_load_tuning_settings+0x48>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ada5 	.word	0x0800ada5
 800ad98:	0800addf 	.word	0x0800addf
 800ad9c:	0800ae19 	.word	0x0800ae19
 800ada0:	0800ae53 	.word	0x0800ae53
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	4413      	add	r3, r2
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	743b      	strb	r3, [r7, #16]
				Index++;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	3301      	adds	r3, #1
 800adb2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	4413      	add	r3, r2
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	3301      	adds	r3, #1
 800adc2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800adc4:	7c3b      	ldrb	r3, [r7, #16]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	021b      	lsls	r3, r3, #8
 800adca:	b29a      	uxth	r2, r3
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	b29b      	uxth	r3, r3
 800add0:	4413      	add	r3, r2
 800add2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	89ba      	ldrh	r2, [r7, #12]
 800add8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800addc:	e087      	b.n	800aeee <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	4413      	add	r3, r2
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	743b      	strb	r3, [r7, #16]
				Index++;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	3301      	adds	r3, #1
 800adec:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	4413      	add	r3, r2
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	73fb      	strb	r3, [r7, #15]
				Index++;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	3301      	adds	r3, #1
 800adfc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800adfe:	7c3b      	ldrb	r3, [r7, #16]
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	4413      	add	r3, r2
 800ae0c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	89ba      	ldrh	r2, [r7, #12]
 800ae12:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ae16:	e06a      	b.n	800aeee <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	743b      	strb	r3, [r7, #16]
				Index++;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	3301      	adds	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	3301      	adds	r3, #1
 800ae36:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ae38:	7c3b      	ldrb	r3, [r7, #16]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	4413      	add	r3, r2
 800ae46:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	89ba      	ldrh	r2, [r7, #12]
 800ae4c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ae50:	e04d      	b.n	800aeee <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	4413      	add	r3, r2
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	743b      	strb	r3, [r7, #16]
				Index++;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	4413      	add	r3, r2
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ae72:	7c3b      	ldrb	r3, [r7, #16]
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	4413      	add	r3, r2
 800ae80:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	89ba      	ldrh	r2, [r7, #12]
 800ae86:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ae8a:	e030      	b.n	800aeee <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae8c:	23fc      	movs	r3, #252	; 0xfc
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	e02d      	b.n	800aeee <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ae92:	7cfb      	ldrb	r3, [r7, #19]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d828      	bhi.n	800aeea <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	3301      	adds	r3, #1
 800aea6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800aea8:	2300      	movs	r3, #0
 800aeaa:	61bb      	str	r3, [r7, #24]
 800aeac:	e00f      	b.n	800aece <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	7819      	ldrb	r1, [r3, #0]
 800aeb6:	f107 0208 	add.w	r2, r7, #8
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	4413      	add	r3, r2
 800aebe:	460a      	mov	r2, r1
 800aec0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	3301      	adds	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	3301      	adds	r3, #1
 800aecc:	61bb      	str	r3, [r7, #24]
 800aece:	7cfb      	ldrb	r3, [r7, #19]
 800aed0:	69ba      	ldr	r2, [r7, #24]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	dbeb      	blt.n	800aeae <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800aed6:	7cfb      	ldrb	r3, [r7, #19]
 800aed8:	f107 0208 	add.w	r2, r7, #8
 800aedc:	7cb9      	ldrb	r1, [r7, #18]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fdee 	bl	800bac0 <VL53L0X_WriteMulti>
 800aee4:	4603      	mov	r3, r0
 800aee6:	77fb      	strb	r3, [r7, #31]
 800aee8:	e001      	b.n	800aeee <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aeea:	23fc      	movs	r3, #252	; 0xfc
 800aeec:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	4413      	add	r3, r2
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d004      	beq.n	800af04 <VL53L0X_load_tuning_settings+0x1b8>
 800aefa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f43f af2e 	beq.w	800ad60 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3720      	adds	r7, #32
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af1c:	2300      	movs	r3, #0
 800af1e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800af26:	f107 0313 	add.w	r3, r7, #19
 800af2a:	4619      	mov	r1, r3
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7fc fd21 	bl	8007974 <VL53L0X_GetXTalkCompensationEnable>
 800af32:	4603      	mov	r3, r0
 800af34:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800af36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d111      	bne.n	800af62 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800af3e:	7cfb      	ldrb	r3, [r7, #19]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00e      	beq.n	800af62 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	8a9b      	ldrh	r3, [r3, #20]
 800af4e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	fb02 f303 	mul.w	r3, r2, r3
 800af56:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	3380      	adds	r3, #128	; 0x80
 800af5c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800af62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3720      	adds	r7, #32
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b086      	sub	sp, #24
 800af72:	af00      	add	r7, sp, #0
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af7a:	2300      	movs	r3, #0
 800af7c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800af86:	f107 0310 	add.w	r3, r7, #16
 800af8a:	461a      	mov	r2, r3
 800af8c:	68b9      	ldr	r1, [r7, #8]
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff ffbe 	bl	800af10 <VL53L0X_get_total_xtalk_rate>
 800af94:	4603      	mov	r3, r0
 800af96:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800af98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d105      	bne.n	800afac <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	441a      	add	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]

	return Status;
 800afac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b09a      	sub	sp, #104	; 0x68
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800afc6:	2312      	movs	r3, #18
 800afc8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800afca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afce:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800afd0:	2342      	movs	r3, #66	; 0x42
 800afd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800afd4:	2306      	movs	r3, #6
 800afd6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800afd8:	2307      	movs	r3, #7
 800afda:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afdc:	2300      	movs	r3, #0
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800afe8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aff0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800aff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aff6:	fb02 f303 	mul.w	r3, r2, r3
 800affa:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affe:	3380      	adds	r3, #128	; 0x80
 800b000:	0a1b      	lsrs	r3, r3, #8
 800b002:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b008:	fb02 f303 	mul.w	r3, r2, r3
 800b00c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d01a      	beq.n	800b04e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	029b      	lsls	r3, r3, #10
 800b01c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b024:	4413      	add	r3, r2
 800b026:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b028:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b030:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b032:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b034:	4613      	mov	r3, r2
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	4413      	add	r3, r2
 800b03a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b03c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b03e:	fb03 f303 	mul.w	r3, r3, r3
 800b042:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b046:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b04a:	0c1b      	lsrs	r3, r3, #16
 800b04c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b052:	fb02 f303 	mul.w	r3, r2, r3
 800b056:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b05e:	0c1b      	lsrs	r3, r3, #16
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	fb03 f303 	mul.w	r3, r3, r3
 800b068:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b06a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b06c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b070:	0c1b      	lsrs	r3, r3, #16
 800b072:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b076:	085a      	lsrs	r2, r3, #1
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	441a      	add	r2, r3
 800b07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b082:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b088:	fb02 f303 	mul.w	r3, r2, r3
 800b08c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b094:	d302      	bcc.n	800b09c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b096:	4b54      	ldr	r3, [pc, #336]	; (800b1e8 <VL53L0X_calc_dmax+0x230>)
 800b098:	663b      	str	r3, [r7, #96]	; 0x60
 800b09a:	e015      	b.n	800b0c8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b09e:	085a      	lsrs	r2, r3, #1
 800b0a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0a2:	441a      	add	r2, r3
 800b0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0aa:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b0ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
 800b0b4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b0b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b0bc:	0c1b      	lsrs	r3, r3, #16
 800b0be:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b0c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0c2:	fb03 f303 	mul.w	r3, r3, r3
 800b0c6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b0c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ca:	039b      	lsls	r3, r3, #14
 800b0cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0d0:	4a46      	ldr	r2, [pc, #280]	; (800b1ec <VL53L0X_calc_dmax+0x234>)
 800b0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d6:	099b      	lsrs	r3, r3, #6
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	fb03 f303 	mul.w	r3, r3, r3
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0e4:	fb03 f303 	mul.w	r3, r3, r3
 800b0e8:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	091b      	lsrs	r3, r3, #4
 800b0f0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	4413      	add	r3, r2
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b10c:	0b9b      	lsrs	r3, r3, #14
 800b10e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b114:	4413      	add	r3, r2
 800b116:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b11a:	085b      	lsrs	r3, r3, #1
 800b11c:	69ba      	ldr	r2, [r7, #24]
 800b11e:	4413      	add	r3, r2
 800b120:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b126:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	039b      	lsls	r3, r3, #14
 800b130:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	085b      	lsrs	r3, r3, #1
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	4413      	add	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	fbb2 f3f3 	udiv	r3, r2, r3
 800b144:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b14a:	fb02 f303 	mul.w	r3, r2, r3
 800b14e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b156:	4a25      	ldr	r2, [pc, #148]	; (800b1ec <VL53L0X_calc_dmax+0x234>)
 800b158:	fba2 2303 	umull	r2, r3, r2, r3
 800b15c:	099b      	lsrs	r3, r3, #6
 800b15e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	011b      	lsls	r3, r3, #4
 800b164:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b16c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ec <VL53L0X_calc_dmax+0x234>)
 800b16e:	fba2 2303 	umull	r2, r3, r2, r3
 800b172:	099b      	lsrs	r3, r3, #6
 800b174:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b178:	3380      	adds	r3, #128	; 0x80
 800b17a:	0a1b      	lsrs	r3, r3, #8
 800b17c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d008      	beq.n	800b196 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	085a      	lsrs	r2, r3, #1
 800b188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18a:	441a      	add	r2, r3
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b192:	65bb      	str	r3, [r7, #88]	; 0x58
 800b194:	e001      	b.n	800b19a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b19a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b19c:	f7fe f9ba 	bl	8009514 <VL53L0X_isqrt>
 800b1a0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d008      	beq.n	800b1ba <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	085a      	lsrs	r2, r3, #1
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ae:	441a      	add	r2, r3
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1b8:	e001      	b.n	800b1be <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b1be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b1c0:	f7fe f9a8 	bl	8009514 <VL53L0X_isqrt>
 800b1c4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b1c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d902      	bls.n	800b1da <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b1d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1d8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b1da:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3768      	adds	r7, #104	; 0x68
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	fff00000 	.word	0xfff00000
 800b1ec:	10624dd3 	.word	0x10624dd3

0800b1f0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b0b4      	sub	sp, #208	; 0xd0
 800b1f4:	af04      	add	r7, sp, #16
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b1fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b206:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b20a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b20e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b216:	f241 235c 	movw	r3, #4700	; 0x125c
 800b21a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b21e:	4b9e      	ldr	r3, [pc, #632]	; (800b498 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b224:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b228:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b22a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b22e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b232:	fbb2 f3f3 	udiv	r3, r2, r3
 800b236:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b238:	4b98      	ldr	r3, [pc, #608]	; (800b49c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b23a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b23c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b240:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b242:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b246:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b248:	f240 6377 	movw	r3, #1655	; 0x677
 800b24c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b24e:	2300      	movs	r3, #0
 800b250:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6a1b      	ldr	r3, [r3, #32]
 800b258:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b262:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b266:	0c1b      	lsrs	r3, r3, #16
 800b268:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b270:	f107 0310 	add.w	r3, r7, #16
 800b274:	461a      	mov	r2, r3
 800b276:	68b9      	ldr	r1, [r7, #8]
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7ff fe78 	bl	800af6e <VL53L0X_get_total_signal_rate>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b284:	f107 0314 	add.w	r3, r7, #20
 800b288:	461a      	mov	r2, r3
 800b28a:	68b9      	ldr	r1, [r7, #8]
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f7ff fe3f 	bl	800af10 <VL53L0X_get_total_xtalk_rate>
 800b292:	4603      	mov	r3, r0
 800b294:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b29e:	fb02 f303 	mul.w	r3, r2, r3
 800b2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b2a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b2aa:	0c1b      	lsrs	r3, r3, #16
 800b2ac:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b2b4:	fb02 f303 	mul.w	r3, r2, r3
 800b2b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b2bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d902      	bls.n	800b2cc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b2cc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d168      	bne.n	800b3a6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b2da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b2e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b2e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7fe feb2 	bl	800a05c <VL53L0X_calc_timeout_mclks>
 800b2f8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b30a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b30e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b312:	461a      	mov	r2, r3
 800b314:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7fe fe9f 	bl	800a05c <VL53L0X_calc_timeout_mclks>
 800b31e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b320:	2303      	movs	r3, #3
 800b322:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b326:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b32a:	2b08      	cmp	r3, #8
 800b32c:	d102      	bne.n	800b334 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b32e:	2302      	movs	r3, #2
 800b330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b338:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b33a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b33e:	fb02 f303 	mul.w	r3, r2, r3
 800b342:	02db      	lsls	r3, r3, #11
 800b344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b348:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b34c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b350:	4a53      	ldr	r2, [pc, #332]	; (800b4a0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b352:	fba2 2303 	umull	r2, r3, r2, r3
 800b356:	099b      	lsrs	r3, r3, #6
 800b358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b35c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b362:	fb02 f303 	mul.w	r3, r2, r3
 800b366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b36a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b36e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b372:	4a4b      	ldr	r2, [pc, #300]	; (800b4a0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b374:	fba2 2303 	umull	r2, r3, r2, r3
 800b378:	099b      	lsrs	r3, r3, #6
 800b37a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	3380      	adds	r3, #128	; 0x80
 800b382:	0a1b      	lsrs	r3, r3, #8
 800b384:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b38c:	fb02 f303 	mul.w	r3, r2, r3
 800b390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b394:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b398:	3380      	adds	r3, #128	; 0x80
 800b39a:	0a1b      	lsrs	r3, r3, #8
 800b39c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	021b      	lsls	r3, r3, #8
 800b3a4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b3a6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b3ae:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b3b2:	e15e      	b.n	800b672 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10c      	bne.n	800b3d4 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3c0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b3c8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e14c      	b.n	800b66e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b3d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b3e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3e6:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ea:	041a      	lsls	r2, r3, #16
 800b3ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b3f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d902      	bls.n	800b406 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b406:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b40a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b40e:	fb02 f303 	mul.w	r3, r2, r3
 800b412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b416:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b41a:	4613      	mov	r3, r2
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	4413      	add	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe f876 	bl	8009514 <VL53L0X_isqrt>
 800b428:	4603      	mov	r3, r0
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	891b      	ldrh	r3, [r3, #8]
 800b432:	461a      	mov	r2, r3
 800b434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b436:	fb02 f303 	mul.w	r3, r2, r3
 800b43a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b43c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b43e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b444:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b446:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b448:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b44c:	4a14      	ldr	r2, [pc, #80]	; (800b4a0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b44e:	fba2 2303 	umull	r2, r3, r2, r3
 800b452:	099b      	lsrs	r3, r3, #6
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b458:	041b      	lsls	r3, r3, #16
 800b45a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b45e:	4a10      	ldr	r2, [pc, #64]	; (800b4a0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b460:	fba2 2303 	umull	r2, r3, r2, r3
 800b464:	099b      	lsrs	r3, r3, #6
 800b466:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b46e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b472:	fbb2 f3f3 	udiv	r3, r2, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfb8      	it	lt
 800b47a:	425b      	neglt	r3, r3
 800b47c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b480:	021b      	lsls	r3, r3, #8
 800b482:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	7e1b      	ldrb	r3, [r3, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b48c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b494:	e033      	b.n	800b4fe <VL53L0X_calc_sigma_estimate+0x30e>
 800b496:	bf00      	nop
 800b498:	028f87ae 	.word	0x028f87ae
 800b49c:	0006999a 	.word	0x0006999a
 800b4a0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b4a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b4b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4bc:	fb02 f303 	mul.w	r3, r2, r3
 800b4c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b4c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b4c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4ca:	4413      	add	r3, r2
 800b4cc:	0c1b      	lsrs	r3, r3, #16
 800b4ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b4d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b4da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b4de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4e2:	085b      	lsrs	r3, r3, #1
 800b4e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b4e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4ec:	fb03 f303 	mul.w	r3, r3, r3
 800b4f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b4f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4f8:	0b9b      	lsrs	r3, r3, #14
 800b4fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b4fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b504:	fb02 f303 	mul.w	r3, r2, r3
 800b508:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	fb03 f303 	mul.w	r3, r3, r3
 800b51a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b51c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b520:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b524:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b528:	0c1b      	lsrs	r3, r3, #16
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	fb03 f303 	mul.w	r3, r3, r3
 800b532:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	4413      	add	r3, r2
 800b53a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b53e:	f7fd ffe9 	bl	8009514 <VL53L0X_isqrt>
 800b542:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b546:	041b      	lsls	r3, r3, #16
 800b548:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	3332      	adds	r3, #50	; 0x32
 800b54e:	4a4b      	ldr	r2, [pc, #300]	; (800b67c <VL53L0X_calc_sigma_estimate+0x48c>)
 800b550:	fba2 2303 	umull	r2, r3, r2, r3
 800b554:	095a      	lsrs	r2, r3, #5
 800b556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b558:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b564:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b568:	fb02 f303 	mul.w	r3, r2, r3
 800b56c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b574:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b578:	3308      	adds	r3, #8
 800b57a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b57e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b582:	4a3f      	ldr	r2, [pc, #252]	; (800b680 <VL53L0X_calc_sigma_estimate+0x490>)
 800b584:	fba2 2303 	umull	r2, r3, r2, r3
 800b588:	0b5b      	lsrs	r3, r3, #13
 800b58a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b58e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b592:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b594:	429a      	cmp	r2, r3
 800b596:	d902      	bls.n	800b59e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b598:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b59a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b59e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b5a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5a6:	4413      	add	r3, r2
 800b5a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b5ac:	4a35      	ldr	r2, [pc, #212]	; (800b684 <VL53L0X_calc_sigma_estimate+0x494>)
 800b5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b2:	099b      	lsrs	r3, r3, #6
 800b5b4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b5ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5be:	441a      	add	r2, r3
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fd ffa4 	bl	8009514 <VL53L0X_isqrt>
 800b5cc:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	021b      	lsls	r3, r3, #8
 800b5d2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b5da:	4a2a      	ldr	r2, [pc, #168]	; (800b684 <VL53L0X_calc_sigma_estimate+0x494>)
 800b5dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e0:	099b      	lsrs	r3, r3, #6
 800b5e2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b5e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5e8:	fb03 f303 	mul.w	r3, r3, r3
 800b5ec:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	fb03 f303 	mul.w	r3, r3, r3
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b5f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fa:	4413      	add	r3, r2
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fd ff89 	bl	8009514 <VL53L0X_isqrt>
 800b602:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b60a:	fb02 f303 	mul.w	r3, r2, r3
 800b60e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b614:	2b00      	cmp	r3, #0
 800b616:	d009      	beq.n	800b62c <VL53L0X_calc_sigma_estimate+0x43c>
 800b618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <VL53L0X_calc_sigma_estimate+0x43c>
 800b620:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b628:	429a      	cmp	r2, r3
 800b62a:	d903      	bls.n	800b634 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b62c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b63a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b646:	6939      	ldr	r1, [r7, #16]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b650:	9302      	str	r3, [sp, #8]
 800b652:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff fca8 	bl	800afb8 <VL53L0X_calc_dmax>
 800b668:	4603      	mov	r3, r0
 800b66a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b66e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b672:	4618      	mov	r0, r3
 800b674:	37c0      	adds	r7, #192	; 0xc0
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	51eb851f 	.word	0x51eb851f
 800b680:	d1b71759 	.word	0xd1b71759
 800b684:	10624dd3 	.word	0x10624dd3

0800b688 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b090      	sub	sp, #64	; 0x40
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	607a      	str	r2, [r7, #4]
 800b692:	461a      	mov	r2, r3
 800b694:	460b      	mov	r3, r1
 800b696:	72fb      	strb	r3, [r7, #11]
 800b698:	4613      	mov	r3, r2
 800b69a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b6da:	7afb      	ldrb	r3, [r7, #11]
 800b6dc:	10db      	asrs	r3, r3, #3
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b6e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d017      	beq.n	800b720 <VL53L0X_get_pal_range_status+0x98>
 800b6f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6f4:	2b05      	cmp	r3, #5
 800b6f6:	d013      	beq.n	800b720 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b6f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b6fc:	2b07      	cmp	r3, #7
 800b6fe:	d00f      	beq.n	800b720 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b700:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b704:	2b0c      	cmp	r3, #12
 800b706:	d00b      	beq.n	800b720 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b708:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b70c:	2b0d      	cmp	r3, #13
 800b70e:	d007      	beq.n	800b720 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b710:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b714:	2b0e      	cmp	r3, #14
 800b716:	d003      	beq.n	800b720 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b718:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b71c:	2b0f      	cmp	r3, #15
 800b71e:	d103      	bne.n	800b728 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b720:	2301      	movs	r3, #1
 800b722:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b726:	e002      	b.n	800b72e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b728:	2300      	movs	r3, #0
 800b72a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b72e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b732:	2b00      	cmp	r3, #0
 800b734:	d109      	bne.n	800b74a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b736:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b73a:	461a      	mov	r2, r3
 800b73c:	2100      	movs	r1, #0
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7fc f9ec 	bl	8007b1c <VL53L0X_GetLimitCheckEnable>
 800b744:	4603      	mov	r3, r0
 800b746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b74a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d02e      	beq.n	800b7b0 <VL53L0X_get_pal_range_status+0x128>
 800b752:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b756:	2b00      	cmp	r3, #0
 800b758:	d12a      	bne.n	800b7b0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b75a:	f107 0310 	add.w	r3, r7, #16
 800b75e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b762:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff fd43 	bl	800b1f0 <VL53L0X_calc_sigma_estimate>
 800b76a:	4603      	mov	r3, r0
 800b76c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b770:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b774:	2b00      	cmp	r3, #0
 800b776:	d103      	bne.n	800b780 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b77e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b780:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b784:	2b00      	cmp	r3, #0
 800b786:	d113      	bne.n	800b7b0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b788:	f107 0320 	add.w	r3, r7, #32
 800b78c:	461a      	mov	r2, r3
 800b78e:	2100      	movs	r1, #0
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7fc fa49 	bl	8007c28 <VL53L0X_GetLimitCheckValue>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d006      	beq.n	800b7b0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d902      	bls.n	800b7b0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b7b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d109      	bne.n	800b7cc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b7b8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b7bc:	461a      	mov	r2, r3
 800b7be:	2102      	movs	r1, #2
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f7fc f9ab 	bl	8007b1c <VL53L0X_GetLimitCheckEnable>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b7cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d044      	beq.n	800b85e <VL53L0X_get_pal_range_status+0x1d6>
 800b7d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d140      	bne.n	800b85e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b7dc:	f107 031c 	add.w	r3, r7, #28
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	2102      	movs	r1, #2
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7fc fa1f 	bl	8007c28 <VL53L0X_GetLimitCheckValue>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b7f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d107      	bne.n	800b808 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	21ff      	movs	r1, #255	; 0xff
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 f9bb 	bl	800bb78 <VL53L0X_WrByte>
 800b802:	4603      	mov	r3, r0
 800b804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b808:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d109      	bne.n	800b824 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b810:	f107 0316 	add.w	r3, r7, #22
 800b814:	461a      	mov	r2, r3
 800b816:	21b6      	movs	r1, #182	; 0xb6
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 fa59 	bl	800bcd0 <VL53L0X_RdWord>
 800b81e:	4603      	mov	r3, r0
 800b820:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b824:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d107      	bne.n	800b83c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b82c:	2200      	movs	r2, #0
 800b82e:	21ff      	movs	r1, #255	; 0xff
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 f9a1 	bl	800bb78 <VL53L0X_WrByte>
 800b836:	4603      	mov	r3, r0
 800b838:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b83c:	8afb      	ldrh	r3, [r7, #22]
 800b83e:	025b      	lsls	r3, r3, #9
 800b840:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b846:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d006      	beq.n	800b85e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b850:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b854:	429a      	cmp	r2, r3
 800b856:	d902      	bls.n	800b85e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b858:	2301      	movs	r3, #1
 800b85a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b85e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b862:	2b00      	cmp	r3, #0
 800b864:	d109      	bne.n	800b87a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b86a:	461a      	mov	r2, r3
 800b86c:	2103      	movs	r1, #3
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7fc f954 	bl	8007b1c <VL53L0X_GetLimitCheckEnable>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b87a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d023      	beq.n	800b8ca <VL53L0X_get_pal_range_status+0x242>
 800b882:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b886:	2b00      	cmp	r3, #0
 800b888:	d11f      	bne.n	800b8ca <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b88a:	893b      	ldrh	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d102      	bne.n	800b896 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	637b      	str	r3, [r7, #52]	; 0x34
 800b894:	e005      	b.n	800b8a2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	021a      	lsls	r2, r3, #8
 800b89a:	893b      	ldrh	r3, [r7, #8]
 800b89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b8a2:	f107 0318 	add.w	r3, r7, #24
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	2103      	movs	r1, #3
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f7fc f9bc 	bl	8007c28 <VL53L0X_GetLimitCheckValue>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d006      	beq.n	800b8ca <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b8bc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b8be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d202      	bcs.n	800b8ca <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b8ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d14a      	bne.n	800b968 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b8d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d103      	bne.n	800b8e2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8dc:	22ff      	movs	r2, #255	; 0xff
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	e042      	b.n	800b968 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b8e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d007      	beq.n	800b8fa <VL53L0X_get_pal_range_status+0x272>
 800b8ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d003      	beq.n	800b8fa <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b8f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d103      	bne.n	800b902 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fc:	2205      	movs	r2, #5
 800b8fe:	701a      	strb	r2, [r3, #0]
 800b900:	e032      	b.n	800b968 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b902:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b906:	2b06      	cmp	r3, #6
 800b908:	d003      	beq.n	800b912 <VL53L0X_get_pal_range_status+0x28a>
 800b90a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b90e:	2b09      	cmp	r3, #9
 800b910:	d103      	bne.n	800b91a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b914:	2204      	movs	r2, #4
 800b916:	701a      	strb	r2, [r3, #0]
 800b918:	e026      	b.n	800b968 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b91a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b91e:	2b08      	cmp	r3, #8
 800b920:	d007      	beq.n	800b932 <VL53L0X_get_pal_range_status+0x2aa>
 800b922:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b926:	2b0a      	cmp	r3, #10
 800b928:	d003      	beq.n	800b932 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b92a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d103      	bne.n	800b93a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b934:	2203      	movs	r2, #3
 800b936:	701a      	strb	r2, [r3, #0]
 800b938:	e016      	b.n	800b968 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b93a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d003      	beq.n	800b94a <VL53L0X_get_pal_range_status+0x2c2>
 800b942:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b946:	2b01      	cmp	r3, #1
 800b948:	d103      	bne.n	800b952 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94c:	2202      	movs	r2, #2
 800b94e:	701a      	strb	r2, [r3, #0]
 800b950:	e00a      	b.n	800b968 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b952:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b956:	2b01      	cmp	r3, #1
 800b958:	d103      	bne.n	800b962 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95c:	2201      	movs	r2, #1
 800b95e:	701a      	strb	r2, [r3, #0]
 800b960:	e002      	b.n	800b968 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d102      	bne.n	800b976 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b972:	2200      	movs	r2, #0
 800b974:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b976:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b97a:	461a      	mov	r2, r3
 800b97c:	2101      	movs	r1, #1
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f7fc f8cc 	bl	8007b1c <VL53L0X_GetLimitCheckEnable>
 800b984:	4603      	mov	r3, r0
 800b986:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b98a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d14f      	bne.n	800ba32 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b992:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <VL53L0X_get_pal_range_status+0x31a>
 800b99a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d103      	bne.n	800b9aa <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9a8:	e002      	b.n	800b9b0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b9b6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b9ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d003      	beq.n	800b9ca <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b9c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d103      	bne.n	800b9d2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d0:	e002      	b.n	800b9d8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b9de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b9e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <VL53L0X_get_pal_range_status+0x36a>
 800b9ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d103      	bne.n	800b9fa <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f8:	e002      	b.n	800ba00 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ba06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800ba0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d003      	beq.n	800ba1a <VL53L0X_get_pal_range_status+0x392>
 800ba12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d103      	bne.n	800ba22 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba20:	e002      	b.n	800ba28 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ba2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3740      	adds	r7, #64	; 0x40
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b088      	sub	sp, #32
 800ba42:	af02      	add	r7, sp, #8
 800ba44:	60f8      	str	r0, [r7, #12]
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	330a      	adds	r3, #10
 800ba4e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ba5c:	b299      	uxth	r1, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	4613      	mov	r3, r2
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	f7f6 fa79 	bl	8001f60 <HAL_I2C_Master_Transmit>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ba72:	693b      	ldr	r3, [r7, #16]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b088      	sub	sp, #32
 800ba80:	af02      	add	r7, sp, #8
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	330a      	adds	r3, #10
 800ba8c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ba9a:	f043 0301 	orr.w	r3, r3, #1
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	b299      	uxth	r1, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	4613      	mov	r3, r2
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	f7f6 fb4b 	bl	8002148 <HAL_I2C_Master_Receive>
 800bab2:	4603      	mov	r3, r0
 800bab4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800bab6:	693b      	ldr	r3, [r7, #16]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	607a      	str	r2, [r7, #4]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	460b      	mov	r3, r1
 800bace:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bad0:	2300      	movs	r3, #0
 800bad2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2b3f      	cmp	r3, #63	; 0x3f
 800bad8:	d902      	bls.n	800bae0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800bada:	f06f 0303 	mvn.w	r3, #3
 800bade:	e016      	b.n	800bb0e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800bae0:	4a0d      	ldr	r2, [pc, #52]	; (800bb18 <VL53L0X_WriteMulti+0x58>)
 800bae2:	7afb      	ldrb	r3, [r7, #11]
 800bae4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800bae6:	683a      	ldr	r2, [r7, #0]
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	480c      	ldr	r0, [pc, #48]	; (800bb1c <VL53L0X_WriteMulti+0x5c>)
 800baec:	f000 f998 	bl	800be20 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	3301      	adds	r3, #1
 800baf4:	461a      	mov	r2, r3
 800baf6:	4908      	ldr	r1, [pc, #32]	; (800bb18 <VL53L0X_WriteMulti+0x58>)
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7ff ffa0 	bl	800ba3e <_I2CWrite>
 800bafe:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb06:	23ec      	movs	r3, #236	; 0xec
 800bb08:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bb0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	2000078c 	.word	0x2000078c
 800bb1c:	2000078d 	.word	0x2000078d

0800bb20 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	607a      	str	r2, [r7, #4]
 800bb2a:	603b      	str	r3, [r7, #0]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb30:	2300      	movs	r3, #0
 800bb32:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bb34:	f107 030b 	add.w	r3, r7, #11
 800bb38:	2201      	movs	r2, #1
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff ff7e 	bl	800ba3e <_I2CWrite>
 800bb42:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb4a:	23ec      	movs	r3, #236	; 0xec
 800bb4c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb4e:	e00c      	b.n	800bb6a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff ff91 	bl	800ba7c <_I2CRead>
 800bb5a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb62:	23ec      	movs	r3, #236	; 0xec
 800bb64:	75fb      	strb	r3, [r7, #23]
 800bb66:	e000      	b.n	800bb6a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800bb68:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bb6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
 800bb84:	4613      	mov	r3, r2
 800bb86:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bb8c:	4a0b      	ldr	r2, [pc, #44]	; (800bbbc <VL53L0X_WrByte+0x44>)
 800bb8e:	78fb      	ldrb	r3, [r7, #3]
 800bb90:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800bb92:	4a0a      	ldr	r2, [pc, #40]	; (800bbbc <VL53L0X_WrByte+0x44>)
 800bb94:	78bb      	ldrb	r3, [r7, #2]
 800bb96:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bb98:	2202      	movs	r2, #2
 800bb9a:	4908      	ldr	r1, [pc, #32]	; (800bbbc <VL53L0X_WrByte+0x44>)
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7ff ff4e 	bl	800ba3e <_I2CWrite>
 800bba2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bbaa:	23ec      	movs	r3, #236	; 0xec
 800bbac:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bbae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	2000078c 	.word	0x2000078c

0800bbc0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bbd4:	4a0e      	ldr	r2, [pc, #56]	; (800bc10 <VL53L0X_WrWord+0x50>)
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bbda:	883b      	ldrh	r3, [r7, #0]
 800bbdc:	0a1b      	lsrs	r3, r3, #8
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <VL53L0X_WrWord+0x50>)
 800bbe4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bbe6:	883b      	ldrh	r3, [r7, #0]
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <VL53L0X_WrWord+0x50>)
 800bbec:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bbee:	2203      	movs	r2, #3
 800bbf0:	4907      	ldr	r1, [pc, #28]	; (800bc10 <VL53L0X_WrWord+0x50>)
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff ff23 	bl	800ba3e <_I2CWrite>
 800bbf8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bc00:	23ec      	movs	r3, #236	; 0xec
 800bc02:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800bc04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	2000078c 	.word	0x2000078c

0800bc14 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	4611      	mov	r1, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	4603      	mov	r3, r0
 800bc24:	70fb      	strb	r3, [r7, #3]
 800bc26:	460b      	mov	r3, r1
 800bc28:	70bb      	strb	r3, [r7, #2]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bc32:	f107 020e 	add.w	r2, r7, #14
 800bc36:	78fb      	ldrb	r3, [r7, #3]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f81e 	bl	800bc7c <VL53L0X_RdByte>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800bc44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d110      	bne.n	800bc6e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bc4c:	7bba      	ldrb	r2, [r7, #14]
 800bc4e:	78bb      	ldrb	r3, [r7, #2]
 800bc50:	4013      	ands	r3, r2
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	787b      	ldrb	r3, [r7, #1]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bc5c:	7bba      	ldrb	r2, [r7, #14]
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7ff ff88 	bl	800bb78 <VL53L0X_WrByte>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]
 800bc6c:	e000      	b.n	800bc70 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bc6e:	bf00      	nop
done:
    return Status;
 800bc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	460b      	mov	r3, r1
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bc8e:	f107 030b 	add.w	r3, r7, #11
 800bc92:	2201      	movs	r2, #1
 800bc94:	4619      	mov	r1, r3
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7ff fed1 	bl	800ba3e <_I2CWrite>
 800bc9c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bca4:	23ec      	movs	r3, #236	; 0xec
 800bca6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bca8:	e00c      	b.n	800bcc4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bcaa:	2201      	movs	r2, #1
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff fee4 	bl	800ba7c <_I2CRead>
 800bcb4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bcbc:	23ec      	movs	r3, #236	; 0xec
 800bcbe:	75fb      	strb	r3, [r7, #23]
 800bcc0:	e000      	b.n	800bcc4 <VL53L0X_RdByte+0x48>
    }
done:
 800bcc2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bcc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bce2:	f107 030b 	add.w	r3, r7, #11
 800bce6:	2201      	movs	r2, #1
 800bce8:	4619      	mov	r1, r3
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f7ff fea7 	bl	800ba3e <_I2CWrite>
 800bcf0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bcf8:	23ec      	movs	r3, #236	; 0xec
 800bcfa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bcfc:	e017      	b.n	800bd2e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bcfe:	2202      	movs	r2, #2
 800bd00:	490e      	ldr	r1, [pc, #56]	; (800bd3c <VL53L0X_RdWord+0x6c>)
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff feba 	bl	800ba7c <_I2CRead>
 800bd08:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd10:	23ec      	movs	r3, #236	; 0xec
 800bd12:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bd14:	e00b      	b.n	800bd2e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bd16:	4b09      	ldr	r3, [pc, #36]	; (800bd3c <VL53L0X_RdWord+0x6c>)
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <VL53L0X_RdWord+0x6c>)
 800bd22:	785b      	ldrb	r3, [r3, #1]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4413      	add	r3, r2
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800bd2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	2000078c 	.word	0x2000078c

0800bd40 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bd52:	f107 030b 	add.w	r3, r7, #11
 800bd56:	2201      	movs	r2, #1
 800bd58:	4619      	mov	r1, r3
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7ff fe6f 	bl	800ba3e <_I2CWrite>
 800bd60:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd68:	23ec      	movs	r3, #236	; 0xec
 800bd6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bd6c:	e01b      	b.n	800bda6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800bd6e:	2204      	movs	r2, #4
 800bd70:	4910      	ldr	r1, [pc, #64]	; (800bdb4 <VL53L0X_RdDWord+0x74>)
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f7ff fe82 	bl	800ba7c <_I2CRead>
 800bd78:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d002      	beq.n	800bd86 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd80:	23ec      	movs	r3, #236	; 0xec
 800bd82:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bd84:	e00f      	b.n	800bda6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <VL53L0X_RdDWord+0x74>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	061a      	lsls	r2, r3, #24
 800bd8c:	4b09      	ldr	r3, [pc, #36]	; (800bdb4 <VL53L0X_RdDWord+0x74>)
 800bd8e:	785b      	ldrb	r3, [r3, #1]
 800bd90:	041b      	lsls	r3, r3, #16
 800bd92:	441a      	add	r2, r3
 800bd94:	4b07      	ldr	r3, [pc, #28]	; (800bdb4 <VL53L0X_RdDWord+0x74>)
 800bd96:	789b      	ldrb	r3, [r3, #2]
 800bd98:	021b      	lsls	r3, r3, #8
 800bd9a:	4413      	add	r3, r2
 800bd9c:	4a05      	ldr	r2, [pc, #20]	; (800bdb4 <VL53L0X_RdDWord+0x74>)
 800bd9e:	78d2      	ldrb	r2, [r2, #3]
 800bda0:	441a      	add	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bda6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	2000078c 	.word	0x2000078c

0800bdb8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bdc4:	2002      	movs	r0, #2
 800bdc6:	f7f5 fca1 	bl	800170c <HAL_Delay>
    return status;
 800bdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <__libc_init_array>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	4d0d      	ldr	r5, [pc, #52]	; (800be10 <__libc_init_array+0x38>)
 800bddc:	4c0d      	ldr	r4, [pc, #52]	; (800be14 <__libc_init_array+0x3c>)
 800bdde:	1b64      	subs	r4, r4, r5
 800bde0:	10a4      	asrs	r4, r4, #2
 800bde2:	2600      	movs	r6, #0
 800bde4:	42a6      	cmp	r6, r4
 800bde6:	d109      	bne.n	800bdfc <__libc_init_array+0x24>
 800bde8:	4d0b      	ldr	r5, [pc, #44]	; (800be18 <__libc_init_array+0x40>)
 800bdea:	4c0c      	ldr	r4, [pc, #48]	; (800be1c <__libc_init_array+0x44>)
 800bdec:	f000 f836 	bl	800be5c <_init>
 800bdf0:	1b64      	subs	r4, r4, r5
 800bdf2:	10a4      	asrs	r4, r4, #2
 800bdf4:	2600      	movs	r6, #0
 800bdf6:	42a6      	cmp	r6, r4
 800bdf8:	d105      	bne.n	800be06 <__libc_init_array+0x2e>
 800bdfa:	bd70      	pop	{r4, r5, r6, pc}
 800bdfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800be00:	4798      	blx	r3
 800be02:	3601      	adds	r6, #1
 800be04:	e7ee      	b.n	800bde4 <__libc_init_array+0xc>
 800be06:	f855 3b04 	ldr.w	r3, [r5], #4
 800be0a:	4798      	blx	r3
 800be0c:	3601      	adds	r6, #1
 800be0e:	e7f2      	b.n	800bdf6 <__libc_init_array+0x1e>
 800be10:	0800beec 	.word	0x0800beec
 800be14:	0800beec 	.word	0x0800beec
 800be18:	0800beec 	.word	0x0800beec
 800be1c:	0800bef0 	.word	0x0800bef0

0800be20 <memcpy>:
 800be20:	440a      	add	r2, r1
 800be22:	4291      	cmp	r1, r2
 800be24:	f100 33ff 	add.w	r3, r0, #4294967295
 800be28:	d100      	bne.n	800be2c <memcpy+0xc>
 800be2a:	4770      	bx	lr
 800be2c:	b510      	push	{r4, lr}
 800be2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be36:	4291      	cmp	r1, r2
 800be38:	d1f9      	bne.n	800be2e <memcpy+0xe>
 800be3a:	bd10      	pop	{r4, pc}

0800be3c <memset>:
 800be3c:	4402      	add	r2, r0
 800be3e:	4603      	mov	r3, r0
 800be40:	4293      	cmp	r3, r2
 800be42:	d100      	bne.n	800be46 <memset+0xa>
 800be44:	4770      	bx	lr
 800be46:	f803 1b01 	strb.w	r1, [r3], #1
 800be4a:	e7f9      	b.n	800be40 <memset+0x4>

0800be4c <strcpy>:
 800be4c:	4603      	mov	r3, r0
 800be4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be52:	f803 2b01 	strb.w	r2, [r3], #1
 800be56:	2a00      	cmp	r2, #0
 800be58:	d1f9      	bne.n	800be4e <strcpy+0x2>
 800be5a:	4770      	bx	lr

0800be5c <_init>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	bf00      	nop
 800be60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be62:	bc08      	pop	{r3}
 800be64:	469e      	mov	lr, r3
 800be66:	4770      	bx	lr

0800be68 <_fini>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr
