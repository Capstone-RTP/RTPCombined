
RTPCombined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be78  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0fc  0800c0fc  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0fc  0800c0fc  0001c0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c104  0800c104  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c104  0800c104  0001c104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c108  0800c108  0001c108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800c10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000330  0800c43c  00020330  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000870  0800c43c  00020870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209db  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ef  00000000  00000000  00040d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  00043f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  00045778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b28  00000000  00000000  00046e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb6a  00000000  00000000  0004b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a6a5  00000000  00000000  0006851a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182bbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c60  00000000  00000000  00182c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000330 	.word	0x20000330
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c020 	.word	0x0800c020

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000334 	.word	0x20000334
 80001fc:	0800c020 	.word	0x0800c020

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f001 f8d8 	bl	800175e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f925 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fc0b 	bl	8000dcc <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b6:	f000 fa53 	bl	8000a60 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005ba:	f000 fb41 	bl	8000c40 <MX_TIM4_Init>
  MX_LPUART1_UART_Init();
 80005be:	f000 f9af 	bl	8000920 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80005c2:	f000 f96d 	bl	80008a0 <MX_I2C2_Init>
  MX_TIM3_Init();
 80005c6:	f000 fac3 	bl	8000b50 <MX_TIM3_Init>
  MX_TIM5_Init();
 80005ca:	f000 fbb1 	bl	8000d30 <MX_TIM5_Init>
  MX_TIM1_Init();
 80005ce:	f000 f9f3 	bl	80009b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 80005d2:	4b7b      	ldr	r3, [pc, #492]	; (80007c0 <main+0x21c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	4b79      	ldr	r3, [pc, #484]	; (80007c0 <main+0x21c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f042 0201 	orr.w	r2, r2, #1
 80005e0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80005e2:	4b78      	ldr	r3, [pc, #480]	; (80007c4 <main+0x220>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	4b76      	ldr	r3, [pc, #472]	; (80007c4 <main+0x220>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f042 0201 	orr.w	r2, r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80005f2:	4b75      	ldr	r3, [pc, #468]	; (80007c8 <main+0x224>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68da      	ldr	r2, [r3, #12]
 80005f8:	4b73      	ldr	r3, [pc, #460]	; (80007c8 <main+0x224>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f042 0201 	orr.w	r2, r2, #1
 8000600:	60da      	str	r2, [r3, #12]

	//Initialize stepper structures
	initStepper(&thetaMotor, &htim3, TIM_CHANNEL_1, thetaDir_GPIO_Port, thetaDir_Pin, 400);
 8000602:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2320      	movs	r3, #32
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000610:	2200      	movs	r2, #0
 8000612:	496b      	ldr	r1, [pc, #428]	; (80007c0 <main+0x21c>)
 8000614:	486d      	ldr	r0, [pc, #436]	; (80007cc <main+0x228>)
 8000616:	f000 fd32 	bl	800107e <initStepper>
	initStepper(&yMotor,&htim2,TIM_CHANNEL_1,yDir_GPIO_Port,yDir_Pin, 800);
 800061a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000628:	2200      	movs	r2, #0
 800062a:	4966      	ldr	r1, [pc, #408]	; (80007c4 <main+0x220>)
 800062c:	4868      	ldr	r0, [pc, #416]	; (80007d0 <main+0x22c>)
 800062e:	f000 fd26 	bl	800107e <initStepper>
	initStepper(&rMotor, &htim4, TIM_CHANNEL_3, rDir_GPIO_Port, rDir_Pin, 200);
 8000632:	23c8      	movs	r3, #200	; 0xc8
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800063e:	2208      	movs	r2, #8
 8000640:	4961      	ldr	r1, [pc, #388]	; (80007c8 <main+0x224>)
 8000642:	4864      	ldr	r0, [pc, #400]	; (80007d4 <main+0x230>)
 8000644:	f000 fd1b 	bl	800107e <initStepper>

	//I2C assignment to TOF API
	Dev->I2cHandle = &hi2c2;
 8000648:	4b63      	ldr	r3, [pc, #396]	; (80007d8 <main+0x234>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a63      	ldr	r2, [pc, #396]	; (80007dc <main+0x238>)
 800064e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8000652:	4b61      	ldr	r3, [pc, #388]	; (80007d8 <main+0x234>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2252      	movs	r2, #82	; 0x52
 8000658:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	// VL53L0X init for Single Measurement
	VL53L0X_WaitDeviceBooted( Dev );
 800065c:	4b5e      	ldr	r3, [pc, #376]	; (80007d8 <main+0x234>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f006 fb31 	bl	8006cc8 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8000666:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <main+0x234>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f006 f846 	bl	80066fc <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8000670:	4b59      	ldr	r3, [pc, #356]	; (80007d8 <main+0x234>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f006 f9a5 	bl	80069c4 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800067a:	4b57      	ldr	r3, [pc, #348]	; (80007d8 <main+0x234>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	1d7a      	adds	r2, r7, #5
 8000680:	1db9      	adds	r1, r7, #6
 8000682:	4618      	mov	r0, r3
 8000684:	f007 f840 	bl	8007708 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000688:	4b53      	ldr	r3, [pc, #332]	; (80007d8 <main+0x234>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	1dfa      	adds	r2, r7, #7
 800068e:	f107 0108 	add.w	r1, r7, #8
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fcc6 	bl	8008024 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000698:	4b4f      	ldr	r3, [pc, #316]	; (80007d8 <main+0x234>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fbb0 	bl	8006e04 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80006a4:	4b4c      	ldr	r3, [pc, #304]	; (80007d8 <main+0x234>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2201      	movs	r2, #1
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f006 fe25 	bl	80072fc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80006b2:	4b49      	ldr	r3, [pc, #292]	; (80007d8 <main+0x234>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2201      	movs	r2, #1
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fe1e 	bl	80072fc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80006c0:	4b45      	ldr	r3, [pc, #276]	; (80007d8 <main+0x234>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f641 1299 	movw	r2, #6553	; 0x1999
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fec6 	bl	800745c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80006d0:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <main+0x234>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 febe 	bl	800745c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 25000);
 80006e0:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <main+0x234>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80006e8:	4618      	mov	r0, r3
 80006ea:	f006 fbe9 	bl	8006ec0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <main+0x234>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2212      	movs	r2, #18
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 fc08 	bl	8006f0c <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <main+0x234>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	220e      	movs	r2, #14
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f006 fc01 	bl	8006f0c <VL53L0X_SetVcselPulsePeriod>

	//Start timer for uSDelay for HX711
	HAL_TIM_Base_Start(&htim5);
 800070a:	4835      	ldr	r0, [pc, #212]	; (80007e0 <main+0x23c>)
 800070c:	f003 fec0 	bl	8004490 <HAL_TIM_Base_Start>

	HAL_Delay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000714:	f001 f898 	bl	8001848 <HAL_Delay>
	setTarget(&thetaMotor, 1000, 1);
 8000718:	2301      	movs	r3, #1
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	4829      	ldr	r0, [pc, #164]	; (80007cc <main+0x228>)
 8000726:	f000 fcdc 	bl	80010e2 <setTarget>
//	pressureZero = hx711_value_ave(&loadCell, 5);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	timer = HAL_GetTick();
 800072a:	f001 f881 	bl	8001830 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
//
//		MessageLen = sprintf((char*)Message, "Load: %i ",(int)(pressureVal-pressureZero));
//		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);


		if((HAL_GetTick()-timer)>5000 && !doOnceFlag){
 8000730:	f001 f87e 	bl	8001830 <HAL_GetTick>
 8000734:	4602      	mov	r2, r0
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	f241 3288 	movw	r2, #5000	; 0x1388
 800073e:	4293      	cmp	r3, r2
 8000740:	d90f      	bls.n	8000762 <main+0x1be>
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <main+0x240>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10b      	bne.n	8000762 <main+0x1be>
			setTarget(&thetaMotor, 1000, 0);
 800074a:	2300      	movs	r3, #0
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	481d      	ldr	r0, [pc, #116]	; (80007cc <main+0x228>)
 8000758:	f000 fcc3 	bl	80010e2 <setTarget>
			doOnceFlag = 1;
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <main+0x240>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		}

		MessageLen = sprintf((char*)Message, " Current: %d ",(int)(thetaMotor.CurrentPosition));
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <main+0x228>)
 8000764:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000768:	4613      	mov	r3, r2
 800076a:	461a      	mov	r2, r3
 800076c:	491e      	ldr	r1, [pc, #120]	; (80007e8 <main+0x244>)
 800076e:	481f      	ldr	r0, [pc, #124]	; (80007ec <main+0x248>)
 8000770:	f00a ffee 	bl	800b750 <siprintf>
 8000774:	4603      	mov	r3, r0
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <main+0x24c>)
 800077a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <main+0x24c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b29a      	uxth	r2, r3
 8000782:	2364      	movs	r3, #100	; 0x64
 8000784:	4919      	ldr	r1, [pc, #100]	; (80007ec <main+0x248>)
 8000786:	481b      	ldr	r0, [pc, #108]	; (80007f4 <main+0x250>)
 8000788:	f005 f95a 	bl	8005a40 <HAL_UART_Transmit>

		MessageLen = sprintf((char*)Message, "Target: %d\n\r ",(int)(thetaMotor.TargetPosition));
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <main+0x228>)
 800078e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000792:	4613      	mov	r3, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4918      	ldr	r1, [pc, #96]	; (80007f8 <main+0x254>)
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <main+0x248>)
 800079a:	f00a ffd9 	bl	800b750 <siprintf>
 800079e:	4603      	mov	r3, r0
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <main+0x24c>)
 80007a4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&hlpuart1, Message, MessageLen, 100);
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <main+0x24c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	490f      	ldr	r1, [pc, #60]	; (80007ec <main+0x248>)
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <main+0x250>)
 80007b2:	f005 f945 	bl	8005a40 <HAL_UART_Transmit>


		HAL_Delay(100);
 80007b6:	2064      	movs	r0, #100	; 0x64
 80007b8:	f001 f846 	bl	8001848 <HAL_Delay>
		if((HAL_GetTick()-timer)>5000 && !doOnceFlag){
 80007bc:	e7b8      	b.n	8000730 <main+0x18c>
 80007be:	bf00      	nop
 80007c0:	200004c8 	.word	0x200004c8
 80007c4:	2000047c 	.word	0x2000047c
 80007c8:	20000514 	.word	0x20000514
 80007cc:	200005b0 	.word	0x200005b0
 80007d0:	200005e0 	.word	0x200005e0
 80007d4:	20000610 	.word	0x20000610
 80007d8:	20000000 	.word	0x20000000
 80007dc:	2000034c 	.word	0x2000034c
 80007e0:	20000560 	.word	0x20000560
 80007e4:	20000640 	.word	0x20000640
 80007e8:	0800c038 	.word	0x0800c038
 80007ec:	20000644 	.word	0x20000644
 80007f0:	20000684 	.word	0x20000684
 80007f4:	200003a0 	.word	0x200003a0
 80007f8:	0800c048 	.word	0x0800c048

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b098      	sub	sp, #96	; 0x60
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	2248      	movs	r2, #72	; 0x48
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00a ff98 	bl	800b740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800081e:	2000      	movs	r0, #0
 8000820:	f002 f89c 	bl	800295c <HAL_PWREx_ControlVoltageScaling>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800082a:	f000 fc23 	bl	8001074 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800082e:	2310      	movs	r3, #16
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000832:	2301      	movs	r3, #1
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800083a:	2360      	movs	r3, #96	; 0x60
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000842:	2301      	movs	r3, #1
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800084a:	2332      	movs	r3, #50	; 0x32
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	4618      	mov	r0, r3
 8000860:	f002 f930 	bl	8002ac4 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800086a:	f000 fc03 	bl	8001074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	230f      	movs	r3, #15
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2104      	movs	r1, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fd98 	bl	80033bc <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000892:	f000 fbef 	bl	8001074 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3760      	adds	r7, #96	; 0x60
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_I2C2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_I2C2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C0ECFF;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <MX_I2C2_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_I2C2_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_I2C2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_I2C2_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_I2C2_Init+0x74>)
 80008dc:	f001 fa94 	bl	8001e08 <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 fbc5 	bl	8001074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_I2C2_Init+0x74>)
 80008ee:	f001 ff7d 	bl	80027ec <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 fbbc 	bl	8001074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2C2_Init+0x74>)
 8000900:	f001 ffbf 	bl	8002882 <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 fbb3 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000034c 	.word	0x2000034c
 8000918:	40005800 	.word	0x40005800
 800091c:	10c0ecff 	.word	0x10c0ecff

08000920 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_LPUART1_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800096a:	f005 f819 	bl	80059a0 <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 fb7e 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800097c:	f005 fde0 	bl	8006540 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 fb75 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800098e:	f005 fe15 	bl	80065bc <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 fb6c 	bl	8001074 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_LPUART1_UART_Init+0x90>)
 800099e:	f005 fd96 	bl	80064ce <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 fb64 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200003a0 	.word	0x200003a0
 80009b4:	40008000 	.word	0x40008000

080009b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <MX_TIM1_Init+0xa4>)
 80009da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a02:	4815      	ldr	r0, [pc, #84]	; (8000a58 <MX_TIM1_Init+0xa0>)
 8000a04:	f003 fcec 	bl	80043e0 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a0e:	f000 fb31 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_TIM1_Init+0xa0>)
 8000a20:	f004 f9f6 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a2a:	f000 fb23 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_TIM1_Init+0xa0>)
 8000a40:	f004 ff08 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a4a:	f000 fb13 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000430 	.word	0x20000430
 8000a5c:	40012c00 	.word	0x40012c00

08000a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000a9a:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000a9c:	2263      	movs	r2, #99	; 0x63
 8000a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000aa8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aba:	4824      	ldr	r0, [pc, #144]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000abc:	f003 fc90 	bl	80043e0 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 fad5 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481d      	ldr	r0, [pc, #116]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000ad8:	f004 f99a 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ae2:	f000 fac7 	bl	8001074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ae6:	4819      	ldr	r0, [pc, #100]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000ae8:	f003 fd61 	bl	80045ae <HAL_TIM_PWM_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000af2:	f000 fabf 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000b06:	f004 fea5 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b10:	f000 fab0 	bl	8001074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b14:	2360      	movs	r3, #96	; 0x60
 8000b16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000b18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000b2e:	f004 f85b 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b38:	f000 fa9c 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <MX_TIM2_Init+0xec>)
 8000b3e:	f000 fcc9 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 8000b42:	bf00      	nop
 8000b44:	3738      	adds	r7, #56	; 0x38
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000047c 	.word	0x2000047c

08000b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b82:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <MX_TIM3_Init+0xec>)
 8000b86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000b8a:	2263      	movs	r2, #99	; 0x63
 8000b8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000b96:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000b9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000baa:	f003 fc19 	bl	80043e0 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bb4:	f000 fa5e 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000bc6:	f004 f923 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bd0:	f000 fa50 	bl	8001074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000bd6:	f003 fcea 	bl	80045ae <HAL_TIM_PWM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000be0:	f000 fa48 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000bf4:	f004 fe2e 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bfe:	f000 fa39 	bl	8001074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c02:	2360      	movs	r3, #96	; 0x60
 8000c04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000c06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000c1c:	f003 ffe4 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c26:	f000 fa25 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <MX_TIM3_Init+0xe8>)
 8000c2c:	f000 fc52 	bl	80014d4 <HAL_TIM_MspPostInit>
}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200004c8 	.word	0x200004c8
 8000c3c:	40000400 	.word	0x40000400

08000c40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c74:	4a2d      	ldr	r2, [pc, #180]	; (8000d2c <MX_TIM4_Init+0xec>)
 8000c76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c7a:	2263      	movs	r2, #99	; 0x63
 8000c7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1250-1;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c86:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8000c8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c98:	4823      	ldr	r0, [pc, #140]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000c9a:	f003 fba1 	bl	80043e0 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ca4:	f000 f9e6 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000cb6:	f004 f8ab 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000cc0:	f000 f9d8 	bl	8001074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000cc6:	f003 fc72 	bl	80045ae <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f000 f9d0 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000ce4:	f004 fdb6 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000cee:	f000 f9c1 	bl	8001074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000cf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	2208      	movs	r2, #8
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000d0c:	f003 ff6c 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d16:	f000 f9ad 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM4_Init+0xe8>)
 8000d1c:	f000 fbda 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	; 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000514 	.word	0x20000514
 8000d2c:	40000800 	.word	0x40000800

08000d30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <MX_TIM5_Init+0x98>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d56:	2263      	movs	r2, #99	; 0x63
 8000d58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d76:	f003 fb33 	bl	80043e0 <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000d80:	f000 f978 	bl	8001074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000d92:	f004 f83d 	bl	8004e10 <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000d9c:	f000 f96a 	bl	8001074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_TIM5_Init+0x94>)
 8000dae:	f004 fd51 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f000 f95c 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000560 	.word	0x20000560
 8000dc8:	40000c00 	.word	0x40000c00

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a35      	ldr	r2, [pc, #212]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a2f      	ldr	r2, [pc, #188]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000e5a:	f001 fe23 	bl	8002aa4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, thetaDir_Pin|yDir_Pin|rDir_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	21e0      	movs	r1, #224	; 0xe0
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f000 ffb7 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(loadCLK_GPIO_Port, loadCLK_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <MX_GPIO_Init+0x10c>)
 8000e72:	f000 ffb1 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : thetaDir_Pin yDir_Pin rDir_Pin */
  GPIO_InitStruct.Pin = thetaDir_Pin|yDir_Pin|rDir_Pin;
 8000e76:	23e0      	movs	r3, #224	; 0xe0
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f000 fe10 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadCLK_Pin */
  GPIO_InitStruct.Pin = loadCLK_Pin;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(loadCLK_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <MX_GPIO_Init+0x10c>)
 8000eae:	f000 fe01 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : loadDATA_Pin */
  GPIO_InitStruct.Pin = loadDATA_Pin;
 8000eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(loadDATA_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_GPIO_Init+0x10c>)
 8000ec8:	f000 fdf4 	bl	8001ab4 <HAL_GPIO_Init>

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000c00 	.word	0x48000c00

08000edc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void  HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8000edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ee0:	b088      	sub	sp, #32
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	61f8      	str	r0, [r7, #28]
	//Theta Motor interrupts
	if(htim == &htim3){
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	4a5c      	ldr	r2, [pc, #368]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d13b      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(thetaMotor.Status == RunningForward){
 8000eee:	4b5c      	ldr	r3, [pc, #368]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d10d      	bne.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x3a>
			thetaMotor.CurrentPosition++;
 8000efa:	4b59      	ldr	r3, [pc, #356]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000efc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f00:	1c51      	adds	r1, r2, #1
 8000f02:	6139      	str	r1, [r7, #16]
 8000f04:	f143 0300 	adc.w	r3, r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000f10:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000f14:	e012      	b.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		else if (thetaMotor.Status == RunningBackward){
 8000f16:	4b52      	ldr	r3, [pc, #328]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d10c      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x60>
			thetaMotor.CurrentPosition--;
 8000f22:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f28:	1e51      	subs	r1, r2, #1
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000f38:	e9c3 1206 	strd	r1, r2, [r3, #24]
		}
		if(thetaMotor.CurrentPosition == thetaMotor.TargetPosition){
 8000f3c:	4b48      	ldr	r3, [pc, #288]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f3e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	bf08      	it	eq
 8000f4c:	4290      	cmpeq	r0, r2
 8000f4e:	d10a      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x8a>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f50:	2100      	movs	r1, #0
 8000f52:	4842      	ldr	r0, [pc, #264]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f54:	f003 fc92 	bl	800487c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim3);
 8000f58:	4840      	ldr	r0, [pc, #256]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f5a:	f003 fb01 	bl	8004560 <HAL_TIM_Base_Stop>
			thetaMotor.Status = Stopped;
 8000f5e:	4b40      	ldr	r3, [pc, #256]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f60:	2203      	movs	r2, #3
 8000f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//yMotor Interrupts
	if(htim == &htim2){
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	4a3e      	ldr	r2, [pc, #248]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d138      	bne.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x104>
		if(yMotor.Status == RunningForward){
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10d      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0xba>
			yMotor.CurrentPosition++;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f80:	1c51      	adds	r1, r2, #1
 8000f82:	6039      	str	r1, [r7, #0]
 8000f84:	f143 0300 	adc.w	r3, r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f90:	e9c3 1206 	strd	r1, r2, [r3, #24]
 8000f94:	e00f      	b.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (yMotor.Status == RunningBackward){
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d109      	bne.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0xda>
			yMotor.CurrentPosition--;
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fa4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fa8:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000fac:	f143 3bff 	adc.w	fp, r3, #4294967295
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fb2:	e9c3 ab06 	strd	sl, fp, [r3, #24]
		}
		if(yMotor.CurrentPosition == yMotor.TargetPosition){
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fb8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fc2:	4299      	cmp	r1, r3
 8000fc4:	bf08      	it	eq
 8000fc6:	4290      	cmpeq	r0, r2
 8000fc8:	d10a      	bne.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x104>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4825      	ldr	r0, [pc, #148]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fce:	f003 fc55 	bl	800487c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim2);
 8000fd2:	4824      	ldr	r0, [pc, #144]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fd4:	f003 fac4 	bl	8004560 <HAL_TIM_Base_Stop>
			yMotor.Status = Stopped;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fda:	2203      	movs	r2, #3
 8000fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	//rMotor Interrupts
	if(htim == &htim4){
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4a22      	ldr	r2, [pc, #136]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d134      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x176>
		if(rMotor.Status == RunningForward){
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d10a      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x12e>
			rMotor.CurrentPosition++;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ff6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ffa:	f112 0801 	adds.w	r8, r2, #1
 8000ffe:	f143 0900 	adc.w	r9, r3, #0
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001004:	e9c3 8906 	strd	r8, r9, [r3, #24]
 8001008:	e00e      	b.n	8001028 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if (rMotor.Status == RunningBackward){
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800100c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d108      	bne.n	8001028 <HAL_TIM_PeriodElapsedCallback+0x14c>
			rMotor.CurrentPosition--;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001018:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800101c:	1e54      	subs	r4, r2, #1
 800101e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001024:	e9c3 4506 	strd	r4, r5, [r3, #24]
		}
		if(rMotor.CurrentPosition == rMotor.TargetPosition){
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800102a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001030:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001034:	4299      	cmp	r1, r3
 8001036:	bf08      	it	eq
 8001038:	4290      	cmpeq	r0, r2
 800103a:	d10a      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800103c:	2108      	movs	r1, #8
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001040:	f003 fc1c 	bl	800487c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001046:	f003 fa8b 	bl	8004560 <HAL_TIM_Base_Stop>
			rMotor.Status = Stopped;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800104c:	2203      	movs	r2, #3
 800104e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800105c:	200004c8 	.word	0x200004c8
 8001060:	200005b0 	.word	0x200005b0
 8001064:	2000047c 	.word	0x2000047c
 8001068:	200005e0 	.word	0x200005e0
 800106c:	20000514 	.word	0x20000514
 8001070:	20000610 	.word	0x20000610

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800107c:	e7fe      	b.n	800107c <Error_Handler+0x8>

0800107e <initStepper>:
#include "stepperControl.h"

void initStepper(stepper * stepper, TIM_HandleTypeDef * tim, uint32_t  channel, GPIO_TypeDef * dirPort, uint16_t dirPin, uint32_t speed){
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	603b      	str	r3, [r7, #0]

	//Initialize values
	stepper->Timer = tim;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	601a      	str	r2, [r3, #0]
	stepper->Channel = channel;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	605a      	str	r2, [r3, #4]
	stepper->DIRPort = dirPort;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	609a      	str	r2, [r3, #8]
	stepper->DIRPin = dirPin;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8b3a      	ldrh	r2, [r7, #24]
 80010a2:	819a      	strh	r2, [r3, #12]
	stepper->PPS = speed;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	611a      	str	r2, [r3, #16]
	stepper->CurrentPosition = 0;
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	stepper->TargetPosition =0;
 80010b8:	68f9      	ldr	r1, [r7, #12]
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//Set status
	stepper->Status = Stopped;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2203      	movs	r2, #3
 80010ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//update timer to align with speed
	setSpeed(stepper, stepper->PPS);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	4619      	mov	r1, r3
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f841 	bl	800115c <setSpeed>
	//return stepper structure pointer
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <setTarget>:


void setTarget (stepper * stepper, uint64_t increment, char forward){
 80010e2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	e9c7 2300 	strd	r2, r3, [r7]
	//if positive move forward and add to current position
	if(forward){
 80010f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00c      	beq.n	8001112 <setTarget+0x30>
		stepper->TargetPosition+= increment;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001102:	eb10 0802 	adds.w	r8, r0, r2
 8001106:	eb41 0903 	adc.w	r9, r1, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	e9c3 8908 	strd	r8, r9, [r3, #32]
 8001110:	e00a      	b.n	8001128 <setTarget+0x46>
	}
	//if negative move backward and take away from current position
	else{
		stepper->TargetPosition-= increment;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800111c:	1a84      	subs	r4, r0, r2
 800111e:	eb61 0503 	sbc.w	r5, r1, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	e9c3 4508 	strd	r4, r5, [r3, #32]
	}
	//TargetPosition can't be negative
	if(stepper->TargetPosition<0){
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
		stepper->TargetPosition=0;
	}
	//Start timer if it needs to be started
	if (stepper->Status == Stopped){
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b03      	cmp	r3, #3
 8001138:	d107      	bne.n	800114a <setTarget+0x68>
		//start pulses on timer
		HAL_TIM_PWM_Start(stepper->Timer, stepper->Channel);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f003 fa93 	bl	8004670 <HAL_TIM_PWM_Start>
	}
	//Set Direction
	setDirection(stepper);
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f828 	bl	80011a0 <setDirection>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800115c <setSpeed>:

void setSpeed (stepper * stepper, uint32_t speed){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	//update pulse rate of stepper
	stepper->PPS = speed;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	611a      	str	r2, [r3, #16]
	//set duty cycle
	stepper->Timer->Instance->CCR1=1000000/(2*speed);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	005a      	lsls	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4909      	ldr	r1, [pc, #36]	; (800119c <setSpeed+0x40>)
 8001178:	fbb1 f2f2 	udiv	r2, r1, r2
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
	//set timer period
	stepper->Timer->Instance->ARR=(1000000/speed)-1;
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <setSpeed+0x40>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	fbb2 f2f3 	udiv	r2, r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3a01      	subs	r2, #1
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	000f4240 	.word	0x000f4240

080011a0 <setDirection>:

//set direction
void setDirection(stepper *stepper){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(stepper->CurrentPosition > stepper->TargetPosition){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80011b4:	4290      	cmp	r0, r2
 80011b6:	eb71 0303 	sbcs.w	r3, r1, r3
 80011ba:	d20c      	bcs.n	80011d6 <setDirection+0x36>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, SET);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	899b      	ldrh	r3, [r3, #12]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	f000 fe06 	bl	8001dd8 <HAL_GPIO_WritePin>
		stepper->Status = RunningBackward;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2202      	movs	r2, #2
 80011d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	else{
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
		stepper->Status = RunningForward;
	}
}
 80011d4:	e00b      	b.n	80011ee <setDirection+0x4e>
		HAL_GPIO_WritePin(stepper->DIRPort, stepper->DIRPin, RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6898      	ldr	r0, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	899b      	ldrh	r3, [r3, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f000 fdf9 	bl	8001dd8 <HAL_GPIO_WritePin>
		stepper->Status = RunningForward;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x44>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_MspInit+0x44>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_MspInit+0x44>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_MspInit+0x44>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x44>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6593      	str	r3, [r2, #88]	; 0x58
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x44>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b0      	sub	sp, #192	; 0xc0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2298      	movs	r2, #152	; 0x98
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00a fa6d 	bl	800b740 <memset>
  if(hi2c->Instance==I2C2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <HAL_I2C_MspInit+0xb0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d13a      	bne.n	80012e6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4618      	mov	r0, r3
 800127e:	f002 fb5b 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001288:	f7ff fef4 	bl	8001074 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 8001292:	f043 0320 	orr.w	r3, r3, #32
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a4:	2303      	movs	r3, #3
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012aa:	2312      	movs	r3, #18
 80012ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012bc:	2304      	movs	r3, #4
 80012be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012c6:	4619      	mov	r1, r3
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <HAL_I2C_MspInit+0xb8>)
 80012ca:	f000 fbf3 	bl	8001ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d8:	6593      	str	r3, [r2, #88]	; 0x58
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	37c0      	adds	r7, #192	; 0xc0
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005800 	.word	0x40005800
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48001400 	.word	0x48001400

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0b0      	sub	sp, #192	; 0xc0
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2298      	movs	r2, #152	; 0x98
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f00a fa0f 	bl	800b740 <memset>
  if(huart->Instance==LPUART1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_UART_MspInit+0xb4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d13d      	bne.n	80013a8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001330:	2300      	movs	r3, #0
 8001332:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fafd 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001344:	f7ff fe96 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_UART_MspInit+0xb8>)
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0xb8>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_UART_MspInit+0xb8>)
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_UART_MspInit+0xb8>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <HAL_UART_MspInit+0xb8>)
 8001366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0xb8>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8001378:	f001 fb94 	bl	8002aa4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800137c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001396:	2308      	movs	r3, #8
 8001398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_UART_MspInit+0xbc>)
 80013a4:	f000 fb86 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	37c0      	adds	r7, #192	; 0xc0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40008000 	.word	0x40008000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48001800 	.word	0x48001800

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a3d      	ldr	r2, [pc, #244]	; (80014c0 <HAL_TIM_Base_MspInit+0x104>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d114      	bne.n	80013f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	4a3c      	ldr	r2, [pc, #240]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 80013d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d8:	6613      	str	r3, [r2, #96]	; 0x60
 80013da:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2018      	movs	r0, #24
 80013ec:	f000 fb2b 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80013f0:	2018      	movs	r0, #24
 80013f2:	f000 fb44 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013f6:	e05e      	b.n	80014b6 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d114      	bne.n	800142c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	201c      	movs	r0, #28
 8001420:	f000 fb11 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001424:	201c      	movs	r0, #28
 8001426:	f000 fb2a 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 800142a:	e044      	b.n	80014b6 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <HAL_TIM_Base_MspInit+0x10c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d114      	bne.n	8001460 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	201d      	movs	r0, #29
 8001454:	f000 faf7 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001458:	201d      	movs	r0, #29
 800145a:	f000 fb10 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 800145e:	e02a      	b.n	80014b6 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <HAL_TIM_Base_MspInit+0x110>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d114      	bne.n	8001494 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6593      	str	r3, [r2, #88]	; 0x58
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	201e      	movs	r0, #30
 8001488:	f000 fadd 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800148c:	201e      	movs	r0, #30
 800148e:	f000 faf6 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 8001492:	e010      	b.n	80014b6 <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_TIM_Base_MspInit+0x114>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10b      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	6593      	str	r3, [r2, #88]	; 0x58
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_TIM_Base_MspInit+0x108>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
}
 80014b6:	bf00      	nop
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40000800 	.word	0x40000800
 80014d0:	40000c00 	.word	0x40000c00

080014d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f4:	d11d      	bne.n	8001532 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f000 fac2 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001530:	e043      	b.n	80015ba <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_TIM_MspPostInit+0xf4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d11c      	bne.n	8001576 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001554:	2308      	movs	r3, #8
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001564:	2302      	movs	r3, #2
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4817      	ldr	r0, [pc, #92]	; (80015cc <HAL_TIM_MspPostInit+0xf8>)
 8001570:	f000 faa0 	bl	8001ab4 <HAL_GPIO_Init>
}
 8001574:	e021      	b.n	80015ba <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_TIM_MspPostInit+0xfc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d11c      	bne.n	80015ba <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_TIM_MspPostInit+0xf0>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015aa:	2302      	movs	r3, #2
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <HAL_TIM_MspPostInit+0x100>)
 80015b6:	f000 fa7d 	bl	8001ab4 <HAL_GPIO_Init>
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40000400 	.word	0x40000400
 80015cc:	48001000 	.word	0x48001000
 80015d0:	40000800 	.word	0x40000800
 80015d4:	48000c00 	.word	0x48000c00

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f8f0 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001632:	f003 f9b9 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000430 	.word	0x20000430

08001640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM2_IRQHandler+0x10>)
 8001646:	f003 f9af 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000047c 	.word	0x2000047c

08001654 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <TIM3_IRQHandler+0x10>)
 800165a:	f003 f9a5 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200004c8 	.word	0x200004c8

08001668 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM4_IRQHandler+0x10>)
 800166e:	f003 f99b 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000514 	.word	0x20000514

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f00a f810 	bl	800b6d0 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20050000 	.word	0x20050000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	20000818 	.word	0x20000818
 80016e4:	20000870 	.word	0x20000870

080016e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001710:	f7ff ffea 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <LoopForever+0x6>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	; (800174c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <LoopForever+0xe>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	; (8001758 <LoopForever+0x16>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800173a:	f009 ffcf 	bl	800b6dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f7fe ff31 	bl	80005a4 <main>

08001742 <LoopForever>:

LoopForever:
    b LoopForever
 8001742:	e7fe      	b.n	8001742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8001750:	0800c10c 	.word	0x0800c10c
  ldr r2, =_sbss
 8001754:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8001758:	20000870 	.word	0x20000870

0800175c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_2_IRQHandler>

0800175e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f961 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	200f      	movs	r0, #15
 8001770:	f000 f80e 	bl	8001790 <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001780:	f7ff fd3a 	bl	80011f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_InitTick+0x6c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d023      	beq.n	80017ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_InitTick+0x70>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_InitTick+0x6c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f96d 	bl	8001a9a <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d809      	bhi.n	80017e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f937 	bl	8001a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_InitTick+0x74>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e007      	b.n	80017f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e004      	b.n	80017f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	e001      	b.n	80017f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	20000004 	.word	0x20000004
 8001804:	20000008 	.word	0x20000008

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2000000c 	.word	0x2000000c
 800182c:	2000081c 	.word	0x2000081c

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000081c 	.word	0x2000081c

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000000c 	.word	0x2000000c

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	db0b      	blt.n	800191e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 021f 	and.w	r2, r3, #31
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <__NVIC_EnableIRQ+0x38>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff8e 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff29 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff3e 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff8e 	bl	8001984 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5d 	bl	8001930 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff31 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e166      	b.n	8001d92 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8158 	beq.w	8001d8c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d005      	beq.n	8001af4 <HAL_GPIO_Init+0x40>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d130      	bne.n	8001b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0201 	and.w	r2, r3, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d017      	beq.n	8001b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	6939      	ldr	r1, [r7, #16]
 8001be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0203 	and.w	r2, r3, #3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80b2 	beq.w	8001d8c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_GPIO_Init+0x2fc>)
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	4a60      	ldr	r2, [pc, #384]	; (8001db0 <HAL_GPIO_Init+0x2fc>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6613      	str	r3, [r2, #96]	; 0x60
 8001c34:	4b5e      	ldr	r3, [pc, #376]	; (8001db0 <HAL_GPIO_Init+0x2fc>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c40:	4a5c      	ldr	r2, [pc, #368]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c6a:	d02b      	beq.n	8001cc4 <HAL_GPIO_Init+0x210>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_GPIO_Init+0x304>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d025      	beq.n	8001cc0 <HAL_GPIO_Init+0x20c>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a51      	ldr	r2, [pc, #324]	; (8001dbc <HAL_GPIO_Init+0x308>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d01f      	beq.n	8001cbc <HAL_GPIO_Init+0x208>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <HAL_GPIO_Init+0x30c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d019      	beq.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a4f      	ldr	r2, [pc, #316]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_GPIO_Init+0x200>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a4e      	ldr	r2, [pc, #312]	; (8001dc8 <HAL_GPIO_Init+0x314>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1fc>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a4d      	ldr	r2, [pc, #308]	; (8001dcc <HAL_GPIO_Init+0x318>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1f8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a4c      	ldr	r2, [pc, #304]	; (8001dd0 <HAL_GPIO_Init+0x31c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1f4>
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	e00e      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001ca8:	2308      	movs	r3, #8
 8001caa:	e00c      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001cac:	2306      	movs	r3, #6
 8001cae:	e00a      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	e008      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x212>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd6:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d08:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d32:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f ae91 	bne.w	8001ac4 <HAL_GPIO_Init+0x10>
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	48001000 	.word	0x48001000
 8001dc8:	48001400 	.word	0x48001400
 8001dcc:	48001800 	.word	0x48001800
 8001dd0:	48001c00 	.word	0x48001c00
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e081      	b.n	8001f1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff fa06 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	; 0x24
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	e006      	b.n	8001e90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d104      	bne.n	8001ea2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69d9      	ldr	r1, [r3, #28]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	461a      	mov	r2, r3
 8001f34:	460b      	mov	r3, r1
 8001f36:	817b      	strh	r3, [r7, #10]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	f040 80da 	bne.w	80020fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x30>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0d3      	b.n	8002100 <HAL_I2C_Master_Transmit+0x1d8>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f60:	f7ff fc66 	bl	8001830 <HAL_GetTick>
 8001f64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2319      	movs	r3, #25
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f9e6 	bl	8002344 <I2C_WaitOnFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0be      	b.n	8002100 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2bff      	cmp	r3, #255	; 0xff
 8001fb2:	d90e      	bls.n	8001fd2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	22ff      	movs	r2, #255	; 0xff
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	8979      	ldrh	r1, [r7, #10]
 8001fc2:	4b51      	ldr	r3, [pc, #324]	; (8002108 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fbdc 	bl	8002788 <I2C_TransferConfig>
 8001fd0:	e06c      	b.n	80020ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	8979      	ldrh	r1, [r7, #10]
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 fbcb 	bl	8002788 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ff2:	e05b      	b.n	80020ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	6a39      	ldr	r1, [r7, #32]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f9e3 	bl	80023c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e07b      	b.n	8002100 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d034      	beq.n	80020ac <HAL_I2C_Master_Transmit+0x184>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	d130      	bne.n	80020ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	2200      	movs	r2, #0
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f975 	bl	8002344 <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e04d      	b.n	8002100 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	2bff      	cmp	r3, #255	; 0xff
 800206c:	d90e      	bls.n	800208c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	22ff      	movs	r2, #255	; 0xff
 8002072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	b2da      	uxtb	r2, r3
 800207a:	8979      	ldrh	r1, [r7, #10]
 800207c:	2300      	movs	r3, #0
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fb7f 	bl	8002788 <I2C_TransferConfig>
 800208a:	e00f      	b.n	80020ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	b2da      	uxtb	r2, r3
 800209c:	8979      	ldrh	r1, [r7, #10]
 800209e:	2300      	movs	r3, #0
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fb6e 	bl	8002788 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d19e      	bne.n	8001ff4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f9c2 	bl	8002444 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e01a      	b.n	8002100 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2220      	movs	r2, #32
 80020d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_I2C_Master_Transmit+0x1e4>)
 80020de:	400b      	ands	r3, r1
 80020e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	80002000 	.word	0x80002000
 800210c:	fe00e800 	.word	0xfe00e800

08002110 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	461a      	mov	r2, r3
 800211c:	460b      	mov	r3, r1
 800211e:	817b      	strh	r3, [r7, #10]
 8002120:	4613      	mov	r3, r2
 8002122:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	f040 80db 	bne.w	80022e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_I2C_Master_Receive+0x30>
 800213c:	2302      	movs	r3, #2
 800213e:	e0d4      	b.n	80022ea <HAL_I2C_Master_Receive+0x1da>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002148:	f7ff fb72 	bl	8001830 <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2319      	movs	r3, #25
 8002154:	2201      	movs	r2, #1
 8002156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f8f2 	bl	8002344 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0bf      	b.n	80022ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2222      	movs	r2, #34	; 0x22
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2210      	movs	r2, #16
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	893a      	ldrh	r2, [r7, #8]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2bff      	cmp	r3, #255	; 0xff
 800219a:	d90e      	bls.n	80021ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	22ff      	movs	r2, #255	; 0xff
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	8979      	ldrh	r1, [r7, #10]
 80021aa:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_I2C_Master_Receive+0x1e4>)
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fae8 	bl	8002788 <I2C_TransferConfig>
 80021b8:	e06d      	b.n	8002296 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	8979      	ldrh	r1, [r7, #10]
 80021cc:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <HAL_I2C_Master_Receive+0x1e4>)
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fad7 	bl	8002788 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80021da:	e05c      	b.n	8002296 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	6a39      	ldr	r1, [r7, #32]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f96b 	bl	80024bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e07c      	b.n	80022ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d034      	beq.n	8002296 <HAL_I2C_Master_Receive+0x186>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	d130      	bne.n	8002296 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	2200      	movs	r2, #0
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f880 	bl	8002344 <I2C_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e04d      	b.n	80022ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2bff      	cmp	r3, #255	; 0xff
 8002256:	d90e      	bls.n	8002276 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	b2da      	uxtb	r2, r3
 8002264:	8979      	ldrh	r1, [r7, #10]
 8002266:	2300      	movs	r3, #0
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fa8a 	bl	8002788 <I2C_TransferConfig>
 8002274:	e00f      	b.n	8002296 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	b2da      	uxtb	r2, r3
 8002286:	8979      	ldrh	r1, [r7, #10]
 8002288:	2300      	movs	r3, #0
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fa79 	bl	8002788 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d19d      	bne.n	80021dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	6a39      	ldr	r1, [r7, #32]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f8cd 	bl	8002444 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_I2C_Master_Receive+0x1e8>)
 80022c8:	400b      	ands	r3, r1
 80022ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e000      	b.n	80022ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80022e8:	2302      	movs	r3, #2
  }
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	80002400 	.word	0x80002400
 80022f8:	fe00e800 	.word	0xfe00e800

080022fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d103      	bne.n	800231a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d007      	beq.n	8002338 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	619a      	str	r2, [r3, #24]
  }
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002354:	e022      	b.n	800239c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d01e      	beq.n	800239c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235e:	f7ff fa67 	bl	8001830 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d302      	bcc.n	8002374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d113      	bne.n	800239c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e00f      	b.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4013      	ands	r3, r2
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d0cd      	beq.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023d0:	e02c      	b.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f8ea 	bl	80025b0 <I2C_IsErrorOccurred>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e02a      	b.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d01e      	beq.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ee:	f7ff fa1f 	bl	8001830 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d302      	bcc.n	8002404 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d113      	bne.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d1cb      	bne.n	80023d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002450:	e028      	b.n	80024a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f8aa 	bl	80025b0 <I2C_IsErrorOccurred>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e026      	b.n	80024b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7ff f9e3 	bl	8001830 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d113      	bne.n	80024a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e007      	b.n	80024b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d1cf      	bne.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c8:	e064      	b.n	8002594 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f86e 	bl	80025b0 <I2C_IsErrorOccurred>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e062      	b.n	80025a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d138      	bne.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d105      	bne.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e04e      	b.n	80025a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b10      	cmp	r3, #16
 8002512:	d107      	bne.n	8002524 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2210      	movs	r2, #16
 800251a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2204      	movs	r2, #4
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
 8002522:	e002      	b.n	800252a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2220      	movs	r2, #32
 8002530:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800253e:	400b      	ands	r3, r1
 8002540:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e022      	b.n	80025a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255e:	f7ff f967 	bl	8001830 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	429a      	cmp	r2, r3
 800256c:	d302      	bcc.n	8002574 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e007      	b.n	80025a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d193      	bne.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	fe00e800 	.word	0xfe00e800

080025b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d075      	beq.n	80026c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025e4:	e056      	b.n	8002694 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d052      	beq.n	8002694 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7ff f91f 	bl	8001830 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_IsErrorOccurred+0x54>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d147      	bne.n	8002694 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002616:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002626:	d12e      	bne.n	8002686 <I2C_IsErrorOccurred+0xd6>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800262e:	d02a      	beq.n	8002686 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	2b20      	cmp	r3, #32
 8002634:	d027      	beq.n	8002686 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002644:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002646:	f7ff f8f3 	bl	8001830 <HAL_GetTick>
 800264a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800264c:	e01b      	b.n	8002686 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800264e:	f7ff f8ef 	bl	8001830 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b19      	cmp	r3, #25
 800265a:	d914      	bls.n	8002686 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b20      	cmp	r3, #32
 8002692:	d1dc      	bne.n	800264e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d003      	beq.n	80026aa <I2C_IsErrorOccurred+0xfa>
 80026a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d09d      	beq.n	80025e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2220      	movs	r2, #32
 80026b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800270c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01c      	beq.n	8002778 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff fddc 	bl	80022fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <I2C_IsErrorOccurred+0x1d4>)
 8002750:	400b      	ands	r3, r1
 8002752:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800277c:	4618      	mov	r0, r3
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	817b      	strh	r3, [r7, #10]
 8002796:	4613      	mov	r3, r2
 8002798:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800279a:	897b      	ldrh	r3, [r7, #10]
 800279c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027a0:	7a7b      	ldrb	r3, [r7, #9]
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	0d5b      	lsrs	r3, r3, #21
 80027c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <I2C_TransferConfig+0x60>)
 80027c8:	430b      	orrs	r3, r1
 80027ca:	43db      	mvns	r3, r3
 80027cc:	ea02 0103 	and.w	r1, r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	03ff63ff 	.word	0x03ff63ff

080027ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b20      	cmp	r3, #32
 8002800:	d138      	bne.n	8002874 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800280c:	2302      	movs	r3, #2
 800280e:	e032      	b.n	8002876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800283e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b20      	cmp	r3, #32
 8002896:	d139      	bne.n	800290c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e033      	b.n	800290e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2224      	movs	r2, #36	; 0x24
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292c:	d102      	bne.n	8002934 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800292e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002932:	e00b      	b.n	800294c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002942:	d102      	bne.n	800294a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002948:	e000      	b.n	800294c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800294a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40007000 	.word	0x40007000

0800295c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d141      	bne.n	80029ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d131      	bne.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002978:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800297e:	4a46      	ldr	r2, [pc, #280]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002990:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002998:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2232      	movs	r2, #50	; 0x32
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	4a3f      	ldr	r2, [pc, #252]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	0c9b      	lsrs	r3, r3, #18
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ae:	e002      	b.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d102      	bne.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f2      	bne.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ca:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d6:	d158      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e057      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029dc:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	4a2d      	ldr	r2, [pc, #180]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029ec:	e04d      	b.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d141      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d131      	bne.n	8002a68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a0a:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2232      	movs	r2, #50	; 0x32
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	0c9b      	lsrs	r3, r3, #18
 8002a36:	3301      	adds	r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3a:	e002      	b.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d102      	bne.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f2      	bne.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d112      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e011      	b.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a78:	e007      	b.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a88:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	20000004 	.word	0x20000004
 8002aa0:	431bde83 	.word	0x431bde83

08002aa4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6053      	str	r3, [r2, #4]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40007000 	.word	0x40007000

08002ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f000 bc68 	b.w	80033a8 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad8:	4b97      	ldr	r3, [pc, #604]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae2:	4b95      	ldr	r3, [pc, #596]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80e6 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4c>
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	f040 808d 	bne.w	8002c22 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	f040 8089 	bne.w	8002c22 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b10:	4b89      	ldr	r3, [pc, #548]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_RCC_OscConfig+0x66>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f000 bc3f 	b.w	80033a8 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_RCC_OscConfig+0x80>
 8002b3a:	4b7f      	ldr	r3, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b42:	e005      	b.n	8002b50 <HAL_RCC_OscConfig+0x8c>
 8002b44:	4b7c      	ldr	r3, [pc, #496]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d224      	bcs.n	8002b9e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fe2d 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f000 bc1f 	b.w	80033a8 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a72      	ldr	r2, [pc, #456]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	496d      	ldr	r1, [pc, #436]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4968      	ldr	r1, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
 8002b9c:	e025      	b.n	8002bea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b9e:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	f043 0308 	orr.w	r3, r3, #8
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	4960      	ldr	r1, [pc, #384]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bbc:	4b5e      	ldr	r3, [pc, #376]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	495b      	ldr	r1, [pc, #364]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fdec 	bl	80037b8 <RCC_SetFlashLatencyFromMSIRange>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e3de      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bea:	f000 fd21 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	4950      	ldr	r1, [pc, #320]	; (8002d3c <HAL_RCC_OscConfig+0x278>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a4e      	ldr	r2, [pc, #312]	; (8002d40 <HAL_RCC_OscConfig+0x27c>)
 8002c08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fdbe 	bl	8001790 <HAL_InitTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d052      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	e3c2      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d032      	beq.n	8002c90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c2a:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a42      	ldr	r2, [pc, #264]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c36:	f7fe fdfb 	bl	8001830 <HAL_GetTick>
 8002c3a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c3e:	f7fe fdf7 	bl	8001830 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e3ab      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a35      	ldr	r2, [pc, #212]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	4930      	ldr	r1, [pc, #192]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	492b      	ldr	r1, [pc, #172]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
 8002c8e:	e01a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c90:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fdc8 	bl	8001830 <HAL_GetTick>
 8002ca0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fdc4 	bl	8001830 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e378      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1e0>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d073      	beq.n	8002dba <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x220>
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d10e      	bne.n	8002cfc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d063      	beq.n	8002db8 <HAL_RCC_OscConfig+0x2f4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d15f      	bne.n	8002db8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e355      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x250>
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e025      	b.n	8002d60 <HAL_RCC_OscConfig+0x29c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d1c:	d114      	bne.n	8002d48 <HAL_RCC_OscConfig+0x284>
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a02      	ldr	r2, [pc, #8]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e013      	b.n	8002d60 <HAL_RCC_OscConfig+0x29c>
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	0800c058 	.word	0x0800c058
 8002d40:	20000004 	.word	0x20000004
 8002d44:	20000008 	.word	0x20000008
 8002d48:	4b8f      	ldr	r3, [pc, #572]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a8e      	ldr	r2, [pc, #568]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b8c      	ldr	r3, [pc, #560]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a8b      	ldr	r2, [pc, #556]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fd62 	bl	8001830 <HAL_GetTick>
 8002d6c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fe fd5e 	bl	8001830 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e312      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d82:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x2ac>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fd4e 	bl	8001830 <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7fe fd4a 	bl	8001830 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e2fe      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002daa:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x2d4>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d060      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x314>
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d119      	bne.n	8002e06 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d116      	bne.n	8002e06 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	4b6b      	ldr	r3, [pc, #428]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x32c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e2db      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	4962      	ldr	r1, [pc, #392]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	e040      	b.n	8002e88 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d023      	beq.n	8002e56 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0e:	4b5e      	ldr	r3, [pc, #376]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5d      	ldr	r2, [pc, #372]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fd09 	bl	8001830 <HAL_GetTick>
 8002e1e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe fd05 	bl	8001830 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e2b9      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e34:	4b54      	ldr	r3, [pc, #336]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	494e      	ldr	r1, [pc, #312]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
 8002e54:	e018      	b.n	8002e88 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a4b      	ldr	r2, [pc, #300]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fce5 	bl	8001830 <HAL_GetTick>
 8002e66:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fce1 	bl	8001830 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e295      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e7c:	4b42      	ldr	r3, [pc, #264]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8082 	beq.w	8002f9a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d05f      	beq.n	8002f5e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d037      	beq.n	8002f24 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e26d      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01b      	beq.n	8002f0e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002edc:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee6:	f7fe fca3 	bl	8001830 <HAL_GetTick>
 8002eea:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe fc9f 	bl	8001830 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b11      	cmp	r3, #17
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e253      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1ef      	bne.n	8002eee <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f14:	f023 0210 	bic.w	r2, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	491a      	ldr	r1, [pc, #104]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe fc7c 	bl	8001830 <HAL_GetTick>
 8002f38:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fc78 	bl	8001830 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b11      	cmp	r3, #17
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e22c      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ef      	beq.n	8002f3c <HAL_RCC_OscConfig+0x478>
 8002f5c:	e01d      	b.n	8002f9a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f64:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fc5f 	bl	8001830 <HAL_GetTick>
 8002f72:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f76:	f7fe fc5b 	bl	8001830 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b11      	cmp	r3, #17
 8002f82:	d903      	bls.n	8002f8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e20f      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
 8002f88:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f8c:	4b83      	ldr	r3, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ed      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80bd 	beq.w	8003122 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fae:	4b7b      	ldr	r3, [pc, #492]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b78      	ldr	r3, [pc, #480]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	4a77      	ldr	r2, [pc, #476]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc6:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd8:	4b71      	ldr	r3, [pc, #452]	; (80031a0 <HAL_RCC_OscConfig+0x6dc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d118      	bne.n	8003016 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe4:	4b6e      	ldr	r3, [pc, #440]	; (80031a0 <HAL_RCC_OscConfig+0x6dc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a6d      	ldr	r2, [pc, #436]	; (80031a0 <HAL_RCC_OscConfig+0x6dc>)
 8002fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fc1e 	bl	8001830 <HAL_GetTick>
 8002ff4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff8:	f7fe fc1a 	bl	8001830 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1ce      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_OscConfig+0x6dc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02c      	beq.n	800307c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003022:	4b5e      	ldr	r3, [pc, #376]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	4959      	ldr	r1, [pc, #356]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003048:	4b54      	ldr	r3, [pc, #336]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	4a53      	ldr	r2, [pc, #332]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	4a4f      	ldr	r2, [pc, #316]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003068:	e018      	b.n	800309c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800306a:	4b4c      	ldr	r3, [pc, #304]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	4a4a      	ldr	r2, [pc, #296]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307a:	e00f      	b.n	800309c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800307c:	4b47      	ldr	r3, [pc, #284]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a46      	ldr	r2, [pc, #280]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a42      	ldr	r2, [pc, #264]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d016      	beq.n	80030d2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fbc4 	bl	8001830 <HAL_GetTick>
 80030a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fbc0 	bl	8001830 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e172      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ed      	beq.n	80030ac <HAL_RCC_OscConfig+0x5e8>
 80030d0:	e01d      	b.n	800310e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe fbad 	bl	8001830 <HAL_GetTick>
 80030d6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fba9 	bl	8001830 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e15b      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ed      	bne.n	80030da <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b21      	ldr	r3, [pc, #132]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b00      	cmp	r3, #0
 800312c:	d041      	beq.n	80031b2 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01c      	beq.n	8003170 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003146:	f7fe fb73 	bl	8001830 <HAL_GetTick>
 800314a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800314e:	f7fe fb6f 	bl	8001830 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e123      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003160:	4b0e      	ldr	r3, [pc, #56]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ef      	beq.n	800314e <HAL_RCC_OscConfig+0x68a>
 800316e:	e020      	b.n	80031b2 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_RCC_OscConfig+0x6d8>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fb56 	bl	8001830 <HAL_GetTick>
 8003184:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003186:	e00d      	b.n	80031a4 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003188:	f7fe fb52 	bl	8001830 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d906      	bls.n	80031a4 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e106      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031a4:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 80031a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ea      	bne.n	8003188 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80f5 	beq.w	80033a6 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	f040 80cb 	bne.w	800335c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031c6:	4b7a      	ldr	r3, [pc, #488]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0203 	and.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d12c      	bne.n	8003234 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	3b01      	subs	r3, #1
 80031e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d123      	bne.n	8003234 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d11b      	bne.n	8003234 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d113      	bne.n	8003234 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d109      	bne.n	8003234 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d06d      	beq.n	8003310 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d068      	beq.n	800330c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800323a:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003246:	4b5a      	ldr	r3, [pc, #360]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0a8      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003256:	4b56      	ldr	r3, [pc, #344]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a55      	ldr	r2, [pc, #340]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800325c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003260:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003262:	f7fe fae5 	bl	8001830 <HAL_GetTick>
 8003266:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fae1 	bl	8001830 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e095      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327c:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003288:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_RCC_OscConfig+0x8f0>)
 800328e:	4013      	ands	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003298:	3a01      	subs	r2, #1
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a2:	0212      	lsls	r2, r2, #8
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032aa:	0852      	lsrs	r2, r2, #1
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0552      	lsls	r2, r2, #21
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032b6:	0852      	lsrs	r2, r2, #1
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0652      	lsls	r2, r2, #25
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c2:	06d2      	lsls	r2, r2, #27
 80032c4:	430a      	orrs	r2, r1
 80032c6:	493a      	ldr	r1, [pc, #232]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032cc:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 80032de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032e4:	f7fe faa4 	bl	8001830 <HAL_GetTick>
 80032e8:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe faa0 	bl	8001830 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e054      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330a:	e04c      	b.n	80033a6 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e04b      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d144      	bne.n	80033a6 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003328:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800332e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003332:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003334:	f7fe fa7c 	bl	8001830 <HAL_GetTick>
 8003338:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fa78 	bl	8001830 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e02c      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x878>
 800335a:	e024      	b.n	80033a6 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d01f      	beq.n	80033a2 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a12      	ldr	r2, [pc, #72]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fe fa5f 	bl	8001830 <HAL_GetTick>
 8003372:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe fa5b 	bl	8001830 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e00f      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4905      	ldr	r1, [pc, #20]	; (80033b0 <HAL_RCC_OscConfig+0x8ec>)
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <HAL_RCC_OscConfig+0x8f4>)
 800339c:	4013      	ands	r3, r2
 800339e:	60cb      	str	r3, [r1, #12]
 80033a0:	e001      	b.n	80033a6 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3728      	adds	r7, #40	; 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	019d800c 	.word	0x019d800c
 80033b8:	feeefffc 	.word	0xfeeefffc

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e11d      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b90      	ldr	r3, [pc, #576]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d910      	bls.n	8003404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b8d      	ldr	r3, [pc, #564]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 020f 	bic.w	r2, r3, #15
 80033ea:	498b      	ldr	r1, [pc, #556]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b89      	ldr	r3, [pc, #548]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e105      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4b81      	ldr	r3, [pc, #516]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341c:	429a      	cmp	r2, r3
 800341e:	d908      	bls.n	8003432 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b7e      	ldr	r3, [pc, #504]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	497b      	ldr	r1, [pc, #492]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d079      	beq.n	8003532 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d11e      	bne.n	8003484 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	4b75      	ldr	r3, [pc, #468]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0dc      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003456:	f000 fa09 	bl	800386c <RCC_GetSysClockFreqFromPLLSource>
 800345a:	4603      	mov	r3, r0
 800345c:	4a70      	ldr	r2, [pc, #448]	; (8003620 <HAL_RCC_ClockConfig+0x264>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d946      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003462:	4b6e      	ldr	r3, [pc, #440]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d140      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800346e:	4b6b      	ldr	r3, [pc, #428]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003476:	4a69      	ldr	r2, [pc, #420]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e035      	b.n	80034f0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d107      	bne.n	800349c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348c:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d115      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b9      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a4:	4b5d      	ldr	r3, [pc, #372]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0ad      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0a5      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034c4:	f000 f8b4 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4a55      	ldr	r2, [pc, #340]	; (8003620 <HAL_RCC_ClockConfig+0x264>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d90f      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80034d0:	4b52      	ldr	r3, [pc, #328]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034dc:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e4:	4a4d      	ldr	r2, [pc, #308]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f0:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 0203 	bic.w	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4947      	ldr	r1, [pc, #284]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003502:	f7fe f995 	bl	8001830 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003508:	e00a      	b.n	8003520 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350a:	f7fe f991 	bl	8001830 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e077      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 020c 	and.w	r2, r3, #12
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	429a      	cmp	r2, r3
 8003530:	d1eb      	bne.n	800350a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d105      	bne.n	8003544 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003538:	4b38      	ldr	r3, [pc, #224]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a37      	ldr	r2, [pc, #220]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 800353e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003542:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355c:	429a      	cmp	r2, r3
 800355e:	d208      	bcs.n	8003572 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003560:	4b2e      	ldr	r3, [pc, #184]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	492b      	ldr	r1, [pc, #172]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003572:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d210      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 020f 	bic.w	r2, r3, #15
 8003588:	4923      	ldr	r1, [pc, #140]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e036      	b.n	8003610 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	4918      	ldr	r1, [pc, #96]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4910      	ldr	r1, [pc, #64]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035e0:	f000 f826 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	490c      	ldr	r1, [pc, #48]	; (8003624 <HAL_RCC_ClockConfig+0x268>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <HAL_RCC_ClockConfig+0x26c>)
 80035fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_RCC_ClockConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe f8c3 	bl	8001790 <HAL_InitTick>
 800360a:	4603      	mov	r3, r0
 800360c:	73fb      	strb	r3, [r7, #15]

  return status;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40022000 	.word	0x40022000
 800361c:	40021000 	.word	0x40021000
 8003620:	04c4b400 	.word	0x04c4b400
 8003624:	0800c058 	.word	0x0800c058
 8003628:	20000004 	.word	0x20000004
 800362c:	20000008 	.word	0x20000008

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d121      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d11e      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d107      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	e005      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800368c:	4a2b      	ldr	r2, [pc, #172]	; (800373c <HAL_RCC_GetSysClockFreq+0x10c>)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e004      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_RCC_GetSysClockFreq+0x114>)
 80036b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d134      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0xac>
 80036d4:	e005      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <HAL_RCC_GetSysClockFreq+0x110>)
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	e005      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_GetSysClockFreq+0x114>)
 80036de:	617b      	str	r3, [r7, #20]
      break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	617b      	str	r3, [r7, #20]
      break;
 80036e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	3301      	adds	r3, #1
 80036f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	fb03 f202 	mul.w	r2, r3, r2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_RCC_GetSysClockFreq+0x108>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	0e5b      	lsrs	r3, r3, #25
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	3301      	adds	r3, #1
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003728:	69bb      	ldr	r3, [r7, #24]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	0800c070 	.word	0x0800c070
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003764:	f7ff fff0 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4904      	ldr	r1, [pc, #16]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	0800c068 	.word	0x0800c068

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003790:	f7ff ffda 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0adb      	lsrs	r3, r3, #11
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800c068 	.word	0x0800c068

080037b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037d0:	f7ff f8a4 	bl	800291c <HAL_PWREx_GetVoltageRange>
 80037d4:	6178      	str	r0, [r7, #20]
 80037d6:	e014      	b.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b22      	ldr	r3, [pc, #136]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	4a21      	ldr	r2, [pc, #132]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037f0:	f7ff f894 	bl	800291c <HAL_PWREx_GetVoltageRange>
 80037f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003808:	d10b      	bne.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d913      	bls.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2ba0      	cmp	r3, #160	; 0xa0
 8003814:	d902      	bls.n	800381c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003816:	2302      	movs	r3, #2
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e00d      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800381c:	2301      	movs	r3, #1
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e00a      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b7f      	cmp	r3, #127	; 0x7f
 8003826:	d902      	bls.n	800382e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003828:	2302      	movs	r3, #2
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e004      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d101      	bne.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003834:	2301      	movs	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 020f 	bic.w	r2, r3, #15
 8003840:	4909      	ldr	r1, [pc, #36]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	40022000 	.word	0x40022000

0800386c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003872:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d00b      	beq.n	800389a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d008      	beq.n	80038a0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d11f      	bne.n	80038d4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003896:	613b      	str	r3, [r7, #16]
    break;
 8003898:	e01f      	b.n	80038da <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800389a:	4b25      	ldr	r3, [pc, #148]	; (8003930 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800389c:	613b      	str	r3, [r7, #16]
    break;
 800389e:	e01c      	b.n	80038da <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038a0:	4b21      	ldr	r3, [pc, #132]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e005      	b.n	80038c8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80038c8:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d0:	613b      	str	r3, [r7, #16]
    break;
 80038d2:	e002      	b.n	80038da <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
    break;
 80038d8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	3301      	adds	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	fb03 f202 	mul.w	r2, r3, r2
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0e5b      	lsrs	r3, r3, #25
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	3301      	adds	r3, #1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800391a:	683b      	ldr	r3, [r7, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40021000 	.word	0x40021000
 800392c:	00f42400 	.word	0x00f42400
 8003930:	007a1200 	.word	0x007a1200
 8003934:	0800c070 	.word	0x0800c070

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003940:	2300      	movs	r3, #0
 8003942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003944:	2300      	movs	r3, #0
 8003946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	2b00      	cmp	r3, #0
 8003952:	d040      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d02a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d825      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003960:	2b60      	cmp	r3, #96	; 0x60
 8003962:	d026      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d821      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d006      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d81d      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d010      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003978:	e018      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800397a:	4b89      	ldr	r3, [pc, #548]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a88      	ldr	r2, [pc, #544]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003986:	e015      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fb3e 	bl	8004010 <RCCEx_PLLSAI1_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3320      	adds	r3, #32
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fc29 	bl	80041f8 <RCCEx_PLLSAI2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	74fb      	strb	r3, [r7, #19]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ba:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c8:	4975      	ldr	r1, [pc, #468]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039d0:	e001      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d047      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ea:	d030      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	d82a      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f6:	d02a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039fc:	d824      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d008      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d81e      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d010      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a14:	e018      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a16:	4b62      	ldr	r3, [pc, #392]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a61      	ldr	r2, [pc, #388]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a22:	e015      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 faf0 	bl	8004010 <RCCEx_PLLSAI1_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a34:	e00c      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3320      	adds	r3, #32
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fbdb 	bl	80041f8 <RCCEx_PLLSAI2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a46:	e003      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	74fb      	strb	r3, [r7, #19]
      break;
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a56:	4b52      	ldr	r3, [pc, #328]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	494e      	ldr	r1, [pc, #312]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a6c:	e001      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 809f 	beq.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a84:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a94:	2300      	movs	r3, #0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	4a40      	ldr	r2, [pc, #256]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3a      	ldr	r2, [pc, #232]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac2:	f7fd feb5 	bl	8001830 <HAL_GetTick>
 8003ac6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ac8:	e009      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fd feb1 	bl	8001830 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d902      	bls.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	74fb      	strb	r3, [r7, #19]
        break;
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ade:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ef      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d15b      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01f      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d019      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b18:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d016      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fd fe70 	bl	8001830 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b52:	e00b      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fd fe6c 	bl	8001830 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d902      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	74fb      	strb	r3, [r7, #19]
            break;
 8003b6a:	e006      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ec      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	74bb      	strb	r3, [r7, #18]
 8003b9e:	e005      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bac:	7c7b      	ldrb	r3, [r7, #17]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d105      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4ba0      	ldr	r3, [pc, #640]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	4a9f      	ldr	r2, [pc, #636]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bca:	4b9a      	ldr	r3, [pc, #616]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 0203 	bic.w	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	4996      	ldr	r1, [pc, #600]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bec:	4b91      	ldr	r3, [pc, #580]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 020c 	bic.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	498e      	ldr	r1, [pc, #568]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c0e:	4b89      	ldr	r3, [pc, #548]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	4985      	ldr	r1, [pc, #532]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c30:	4b80      	ldr	r3, [pc, #512]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	497d      	ldr	r1, [pc, #500]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c52:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c60:	4974      	ldr	r1, [pc, #464]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	496c      	ldr	r1, [pc, #432]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca4:	4963      	ldr	r1, [pc, #396]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cb8:	4b5e      	ldr	r3, [pc, #376]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	495b      	ldr	r1, [pc, #364]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cda:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	4952      	ldr	r1, [pc, #328]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfc:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	494a      	ldr	r1, [pc, #296]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d1e:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	4941      	ldr	r1, [pc, #260]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d40:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	4939      	ldr	r1, [pc, #228]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d028      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	4930      	ldr	r1, [pc, #192]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d82:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8c:	60d3      	str	r3, [r2, #12]
 8003d8e:	e011      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f935 	bl	8004010 <RCCEx_PLLSAI1_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc8:	d108      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dda:	e012      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de2:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dec:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfa:	490e      	ldr	r1, [pc, #56]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e16:	60d3      	str	r3, [r2, #12]
 8003e18:	e020      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e22:	d109      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a02      	ldr	r2, [pc, #8]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2e:	60d3      	str	r3, [r2, #12]
 8003e30:	e014      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f8e1 	bl	8004010 <RCCEx_PLLSAI1_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d028      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e68:	4b68      	ldr	r3, [pc, #416]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e76:	4965      	ldr	r1, [pc, #404]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e86:	d106      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b60      	ldr	r3, [pc, #384]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a5f      	ldr	r2, [pc, #380]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
 8003e94:	e011      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f8b2 	bl	8004010 <RCCEx_PLLSAI1_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec6:	4b51      	ldr	r3, [pc, #324]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f88d 	bl	8004010 <RCCEx_PLLSAI1_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f10:	4b3e      	ldr	r3, [pc, #248]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f16:	f023 0204 	bic.w	r2, r3, #4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f20:	493a      	ldr	r1, [pc, #232]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f34:	4b35      	ldr	r3, [pc, #212]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f3a:	f023 0218 	bic.w	r2, r3, #24
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	4931      	ldr	r1, [pc, #196]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d035      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7fd fc64 	bl	8001830 <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f6a:	e009      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f6c:	f7fd fc60 	bl	8001830 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003f7e:	e005      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f80:	4b22      	ldr	r3, [pc, #136]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ef      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa2:	491a      	ldr	r1, [pc, #104]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3320      	adds	r3, #32
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f921 	bl	80041f8 <RCCEx_PLLSAI2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003fc0:	7cfb      	ldrb	r3, [r7, #19]
 8003fc2:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d017      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	490a      	ldr	r1, [pc, #40]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004000:	7cbb      	ldrb	r3, [r7, #18]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000

08004010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00e      	beq.n	8004048 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800402a:	4b6f      	ldr	r3, [pc, #444]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0203 	and.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d103      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
       ||
 800403e:	2b00      	cmp	r3, #0
 8004040:	d142      	bne.n	80040c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e03f      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d018      	beq.n	8004082 <RCCEx_PLLSAI1_Config+0x72>
 8004050:	2b03      	cmp	r3, #3
 8004052:	d825      	bhi.n	80040a0 <RCCEx_PLLSAI1_Config+0x90>
 8004054:	2b01      	cmp	r3, #1
 8004056:	d002      	beq.n	800405e <RCCEx_PLLSAI1_Config+0x4e>
 8004058:	2b02      	cmp	r3, #2
 800405a:	d009      	beq.n	8004070 <RCCEx_PLLSAI1_Config+0x60>
 800405c:	e020      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800405e:	4b62      	ldr	r3, [pc, #392]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11d      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406e:	e01a      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004070:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d116      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004080:	e013      	b.n	80040aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004082:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800408e:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800409e:	e006      	b.n	80040ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      break;
 80040a4:	e004      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80040ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80040b6:	4b4c      	ldr	r3, [pc, #304]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4949      	ldr	r1, [pc, #292]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 8086 	bne.w	80041dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a44      	ldr	r2, [pc, #272]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040dc:	f7fd fba8 	bl	8001830 <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040e2:	e009      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e4:	f7fd fba4 	bl	8001830 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d902      	bls.n	80040f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	73fb      	strb	r3, [r7, #15]
        break;
 80040f6:	e005      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1ef      	bne.n	80040e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d168      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d113      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004110:	4b35      	ldr	r3, [pc, #212]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	4b35      	ldr	r3, [pc, #212]	; (80041ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6892      	ldr	r2, [r2, #8]
 800411c:	0211      	lsls	r1, r2, #8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68d2      	ldr	r2, [r2, #12]
 8004122:	06d2      	lsls	r2, r2, #27
 8004124:	4311      	orrs	r1, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6852      	ldr	r2, [r2, #4]
 800412a:	3a01      	subs	r2, #1
 800412c:	0112      	lsls	r2, r2, #4
 800412e:	430a      	orrs	r2, r1
 8004130:	492d      	ldr	r1, [pc, #180]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004132:	4313      	orrs	r3, r2
 8004134:	610b      	str	r3, [r1, #16]
 8004136:	e02d      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d115      	bne.n	800416a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6892      	ldr	r2, [r2, #8]
 800414a:	0211      	lsls	r1, r2, #8
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6912      	ldr	r2, [r2, #16]
 8004150:	0852      	lsrs	r2, r2, #1
 8004152:	3a01      	subs	r2, #1
 8004154:	0552      	lsls	r2, r2, #21
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6852      	ldr	r2, [r2, #4]
 800415c:	3a01      	subs	r2, #1
 800415e:	0112      	lsls	r2, r2, #4
 8004160:	430a      	orrs	r2, r1
 8004162:	4921      	ldr	r1, [pc, #132]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004164:	4313      	orrs	r3, r2
 8004166:	610b      	str	r3, [r1, #16]
 8004168:	e014      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	0211      	lsls	r1, r2, #8
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6952      	ldr	r2, [r2, #20]
 800417c:	0852      	lsrs	r2, r2, #1
 800417e:	3a01      	subs	r2, #1
 8004180:	0652      	lsls	r2, r2, #25
 8004182:	4311      	orrs	r1, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6852      	ldr	r2, [r2, #4]
 8004188:	3a01      	subs	r2, #1
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	430a      	orrs	r2, r1
 800418e:	4916      	ldr	r1, [pc, #88]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004190:	4313      	orrs	r3, r2
 8004192:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004194:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800419a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800419e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd fb46 	bl	8001830 <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041a6:	e009      	b.n	80041bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a8:	f7fd fb42 	bl	8001830 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	73fb      	strb	r3, [r7, #15]
          break;
 80041ba:	e005      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ef      	beq.n	80041a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	4904      	ldr	r1, [pc, #16]	; (80041e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	07ff800f 	.word	0x07ff800f
 80041f0:	ff9f800f 	.word	0xff9f800f
 80041f4:	f9ff800f 	.word	0xf9ff800f

080041f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004206:	4b72      	ldr	r3, [pc, #456]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00e      	beq.n	8004230 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004212:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0203 	and.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d103      	bne.n	800422a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
       ||
 8004226:	2b00      	cmp	r3, #0
 8004228:	d142      	bne.n	80042b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e03f      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d018      	beq.n	800426a <RCCEx_PLLSAI2_Config+0x72>
 8004238:	2b03      	cmp	r3, #3
 800423a:	d825      	bhi.n	8004288 <RCCEx_PLLSAI2_Config+0x90>
 800423c:	2b01      	cmp	r3, #1
 800423e:	d002      	beq.n	8004246 <RCCEx_PLLSAI2_Config+0x4e>
 8004240:	2b02      	cmp	r3, #2
 8004242:	d009      	beq.n	8004258 <RCCEx_PLLSAI2_Config+0x60>
 8004244:	e020      	b.n	8004288 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004246:	4b62      	ldr	r3, [pc, #392]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11d      	bne.n	800428e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004256:	e01a      	b.n	800428e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004258:	4b5d      	ldr	r3, [pc, #372]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e013      	b.n	8004292 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800426a:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004276:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004286:	e006      	b.n	8004296 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	e004      	b.n	8004298 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004296:	bf00      	nop
    }

    if(status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800429e:	4b4c      	ldr	r3, [pc, #304]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4949      	ldr	r1, [pc, #292]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 8086 	bne.w	80043c4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042b8:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a44      	ldr	r2, [pc, #272]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fd fab4 	bl	8001830 <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042ca:	e009      	b.n	80042e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042cc:	f7fd fab0 	bl	8001830 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d902      	bls.n	80042e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	73fb      	strb	r3, [r7, #15]
        break;
 80042de:	e005      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ef      	bne.n	80042cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d168      	bne.n	80043c4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d113      	bne.n	8004320 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80042fe:	4013      	ands	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6892      	ldr	r2, [r2, #8]
 8004304:	0211      	lsls	r1, r2, #8
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	06d2      	lsls	r2, r2, #27
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6852      	ldr	r2, [r2, #4]
 8004312:	3a01      	subs	r2, #1
 8004314:	0112      	lsls	r2, r2, #4
 8004316:	430a      	orrs	r2, r1
 8004318:	492d      	ldr	r1, [pc, #180]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	614b      	str	r3, [r1, #20]
 800431e:	e02d      	b.n	800437c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d115      	bne.n	8004352 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004326:	4b2a      	ldr	r3, [pc, #168]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6892      	ldr	r2, [r2, #8]
 8004332:	0211      	lsls	r1, r2, #8
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6912      	ldr	r2, [r2, #16]
 8004338:	0852      	lsrs	r2, r2, #1
 800433a:	3a01      	subs	r2, #1
 800433c:	0552      	lsls	r2, r2, #21
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6852      	ldr	r2, [r2, #4]
 8004344:	3a01      	subs	r2, #1
 8004346:	0112      	lsls	r2, r2, #4
 8004348:	430a      	orrs	r2, r1
 800434a:	4921      	ldr	r1, [pc, #132]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	614b      	str	r3, [r1, #20]
 8004350:	e014      	b.n	800437c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	4b21      	ldr	r3, [pc, #132]	; (80043dc <RCCEx_PLLSAI2_Config+0x1e4>)
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6892      	ldr	r2, [r2, #8]
 800435e:	0211      	lsls	r1, r2, #8
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6952      	ldr	r2, [r2, #20]
 8004364:	0852      	lsrs	r2, r2, #1
 8004366:	3a01      	subs	r2, #1
 8004368:	0652      	lsls	r2, r2, #25
 800436a:	4311      	orrs	r1, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6852      	ldr	r2, [r2, #4]
 8004370:	3a01      	subs	r2, #1
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	430a      	orrs	r2, r1
 8004376:	4916      	ldr	r1, [pc, #88]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7fd fa52 	bl	8001830 <HAL_GetTick>
 800438c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800438e:	e009      	b.n	80043a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004390:	f7fd fa4e 	bl	8001830 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	73fb      	strb	r3, [r7, #15]
          break;
 80043a2:	e005      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ef      	beq.n	8004390 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	4904      	ldr	r1, [pc, #16]	; (80043d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000
 80043d4:	07ff800f 	.word	0x07ff800f
 80043d8:	ff9f800f 	.word	0xff9f800f
 80043dc:	f9ff800f 	.word	0xf9ff800f

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e049      	b.n	8004486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc ffd8 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 fde8 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d001      	beq.n	80044a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e047      	b.n	8004538 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <HAL_TIM_Base_Start+0xb4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d018      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <HAL_TIM_Base_Start+0xb8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1e      	ldr	r2, [pc, #120]	; (800454c <HAL_TIM_Base_Start+0xbc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <HAL_TIM_Base_Start+0xc0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1b      	ldr	r2, [pc, #108]	; (8004554 <HAL_TIM_Base_Start+0xc4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <HAL_TIM_Base_Start+0xc8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d115      	bne.n	8004522 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_TIM_Base_Start+0xcc>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d015      	beq.n	8004534 <HAL_TIM_Base_Start+0xa4>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d011      	beq.n	8004534 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	e008      	b.n	8004534 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e000      	b.n	8004536 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004534:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40014000 	.word	0x40014000
 800455c:	00010007 	.word	0x00010007

08004560 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6a1a      	ldr	r2, [r3, #32]
 800456e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10f      	bne.n	8004598 <HAL_TIM_Base_Stop+0x38>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	f240 4344 	movw	r3, #1092	; 0x444
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <HAL_TIM_Base_Stop+0x38>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e049      	b.n	8004654 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f841 	bl	800465c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 fd01 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <HAL_TIM_PWM_Start+0x24>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e03c      	b.n	800470e <HAL_TIM_PWM_Start+0x9e>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b04      	cmp	r3, #4
 8004698:	d109      	bne.n	80046ae <HAL_TIM_PWM_Start+0x3e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	bf14      	ite	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	2300      	moveq	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	e02f      	b.n	800470e <HAL_TIM_PWM_Start+0x9e>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d109      	bne.n	80046c8 <HAL_TIM_PWM_Start+0x58>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e022      	b.n	800470e <HAL_TIM_PWM_Start+0x9e>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d109      	bne.n	80046e2 <HAL_TIM_PWM_Start+0x72>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	bf14      	ite	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	2300      	moveq	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	e015      	b.n	800470e <HAL_TIM_PWM_Start+0x9e>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x8c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e008      	b.n	800470e <HAL_TIM_PWM_Start+0x9e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e09c      	b.n	8004850 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_TIM_PWM_Start+0xb6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004724:	e023      	b.n	800476e <HAL_TIM_PWM_Start+0xfe>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start+0xc6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004734:	e01b      	b.n	800476e <HAL_TIM_PWM_Start+0xfe>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0xd6>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	e013      	b.n	800476e <HAL_TIM_PWM_Start+0xfe>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b0c      	cmp	r3, #12
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xe6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004754:	e00b      	b.n	800476e <HAL_TIM_PWM_Start+0xfe>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b10      	cmp	r3, #16
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0xf6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	e003      	b.n	800476e <HAL_TIM_PWM_Start+0xfe>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2201      	movs	r2, #1
 8004774:	6839      	ldr	r1, [r7, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f001 f846 	bl	8005808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a35      	ldr	r2, [pc, #212]	; (8004858 <HAL_TIM_PWM_Start+0x1e8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_TIM_PWM_Start+0x13e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a34      	ldr	r2, [pc, #208]	; (800485c <HAL_TIM_PWM_Start+0x1ec>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIM_PWM_Start+0x13e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a32      	ldr	r2, [pc, #200]	; (8004860 <HAL_TIM_PWM_Start+0x1f0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_TIM_PWM_Start+0x13e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a31      	ldr	r2, [pc, #196]	; (8004864 <HAL_TIM_PWM_Start+0x1f4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIM_PWM_Start+0x13e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <HAL_TIM_PWM_Start+0x1f8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d101      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x142>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_TIM_PWM_Start+0x144>
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a22      	ldr	r2, [pc, #136]	; (8004858 <HAL_TIM_PWM_Start+0x1e8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01d      	beq.n	800480e <HAL_TIM_PWM_Start+0x19e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047da:	d018      	beq.n	800480e <HAL_TIM_PWM_Start+0x19e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a22      	ldr	r2, [pc, #136]	; (800486c <HAL_TIM_PWM_Start+0x1fc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_TIM_PWM_Start+0x19e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_TIM_PWM_Start+0x200>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIM_PWM_Start+0x19e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <HAL_TIM_PWM_Start+0x204>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIM_PWM_Start+0x19e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <HAL_TIM_PWM_Start+0x1ec>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIM_PWM_Start+0x19e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_TIM_PWM_Start+0x1f0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d115      	bne.n	800483a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	4b18      	ldr	r3, [pc, #96]	; (8004878 <HAL_TIM_PWM_Start+0x208>)
 8004816:	4013      	ands	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b06      	cmp	r3, #6
 800481e:	d015      	beq.n	800484c <HAL_TIM_PWM_Start+0x1dc>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d011      	beq.n	800484c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004838:	e008      	b.n	800484c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e000      	b.n	800484e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	00010007 	.word	0x00010007

0800487c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2200      	movs	r2, #0
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 ffba 	bl	8005808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a3e      	ldr	r2, [pc, #248]	; (8004994 <HAL_TIM_PWM_Stop+0x118>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_TIM_PWM_Stop+0x4a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a3d      	ldr	r2, [pc, #244]	; (8004998 <HAL_TIM_PWM_Stop+0x11c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_PWM_Stop+0x4a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3b      	ldr	r2, [pc, #236]	; (800499c <HAL_TIM_PWM_Stop+0x120>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_PWM_Stop+0x4a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <HAL_TIM_PWM_Stop+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_PWM_Stop+0x4a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a38      	ldr	r2, [pc, #224]	; (80049a4 <HAL_TIM_PWM_Stop+0x128>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_TIM_PWM_Stop+0x4e>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_TIM_PWM_Stop+0x50>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d017      	beq.n	8004900 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10f      	bne.n	8004900 <HAL_TIM_PWM_Stop+0x84>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	f240 4344 	movw	r3, #1092	; 0x444
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_PWM_Stop+0x84>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	f241 1311 	movw	r3, #4369	; 0x1111
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10f      	bne.n	8004930 <HAL_TIM_PWM_Stop+0xb4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	f240 4344 	movw	r3, #1092	; 0x444
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <HAL_TIM_PWM_Stop+0xb4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <HAL_TIM_PWM_Stop+0xc4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800493e:	e023      	b.n	8004988 <HAL_TIM_PWM_Stop+0x10c>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b04      	cmp	r3, #4
 8004944:	d104      	bne.n	8004950 <HAL_TIM_PWM_Stop+0xd4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494e:	e01b      	b.n	8004988 <HAL_TIM_PWM_Stop+0x10c>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b08      	cmp	r3, #8
 8004954:	d104      	bne.n	8004960 <HAL_TIM_PWM_Stop+0xe4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495e:	e013      	b.n	8004988 <HAL_TIM_PWM_Stop+0x10c>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b0c      	cmp	r3, #12
 8004964:	d104      	bne.n	8004970 <HAL_TIM_PWM_Stop+0xf4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800496e:	e00b      	b.n	8004988 <HAL_TIM_PWM_Stop+0x10c>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b10      	cmp	r3, #16
 8004974:	d104      	bne.n	8004980 <HAL_TIM_PWM_Stop+0x104>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497e:	e003      	b.n	8004988 <HAL_TIM_PWM_Stop+0x10c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40012c00 	.word	0x40012c00
 8004998:	40013400 	.word	0x40013400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0202 	mvn.w	r2, #2
 80049d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fae3 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fad5 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fae6 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fab9 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 faab 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fabc 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0208 	mvn.w	r2, #8
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2204      	movs	r2, #4
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa8f 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa81 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fa92 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d122      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d11b      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0210 	mvn.w	r2, #16
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa65 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa57 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa68 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0201 	mvn.w	r2, #1
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc f9d8 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 ff10 	bl	8005978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 ff03 	bl	800598c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa16 	bl	8004fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d10e      	bne.n	8004bde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0220 	mvn.w	r2, #32
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fec3 	bl	8005964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0ff      	b.n	8004e06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b14      	cmp	r3, #20
 8004c12:	f200 80f0 	bhi.w	8004df6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c71 	.word	0x08004c71
 8004c20:	08004df7 	.word	0x08004df7
 8004c24:	08004df7 	.word	0x08004df7
 8004c28:	08004df7 	.word	0x08004df7
 8004c2c:	08004cb1 	.word	0x08004cb1
 8004c30:	08004df7 	.word	0x08004df7
 8004c34:	08004df7 	.word	0x08004df7
 8004c38:	08004df7 	.word	0x08004df7
 8004c3c:	08004cf3 	.word	0x08004cf3
 8004c40:	08004df7 	.word	0x08004df7
 8004c44:	08004df7 	.word	0x08004df7
 8004c48:	08004df7 	.word	0x08004df7
 8004c4c:	08004d33 	.word	0x08004d33
 8004c50:	08004df7 	.word	0x08004df7
 8004c54:	08004df7 	.word	0x08004df7
 8004c58:	08004df7 	.word	0x08004df7
 8004c5c:	08004d75 	.word	0x08004d75
 8004c60:	08004df7 	.word	0x08004df7
 8004c64:	08004df7 	.word	0x08004df7
 8004c68:	08004df7 	.word	0x08004df7
 8004c6c:	08004db5 	.word	0x08004db5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fa56 	bl	8005128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0208 	orr.w	r2, r2, #8
 8004c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0204 	bic.w	r2, r2, #4
 8004c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6999      	ldr	r1, [r3, #24]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	619a      	str	r2, [r3, #24]
      break;
 8004cae:	e0a5      	b.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fac6 	bl	8005248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6999      	ldr	r1, [r3, #24]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	619a      	str	r2, [r3, #24]
      break;
 8004cf0:	e084      	b.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fb2f 	bl	800535c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0208 	orr.w	r2, r2, #8
 8004d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0204 	bic.w	r2, r2, #4
 8004d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69d9      	ldr	r1, [r3, #28]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	61da      	str	r2, [r3, #28]
      break;
 8004d30:	e064      	b.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fb97 	bl	800546c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69d9      	ldr	r1, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	021a      	lsls	r2, r3, #8
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	61da      	str	r2, [r3, #28]
      break;
 8004d72:	e043      	b.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fbe0 	bl	8005540 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0204 	bic.w	r2, r2, #4
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004db2:	e023      	b.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fc24 	bl	8005608 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004df4:	e002      	b.n	8004dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop

08004e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_TIM_ConfigClockSource+0x1c>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e0b6      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x18a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e68:	d03e      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0xd8>
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	f200 8087 	bhi.w	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	f000 8086 	beq.w	8004f86 <HAL_TIM_ConfigClockSource+0x176>
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	d87f      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004e80:	2b70      	cmp	r3, #112	; 0x70
 8004e82:	d01a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0xaa>
 8004e84:	2b70      	cmp	r3, #112	; 0x70
 8004e86:	d87b      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d050      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x11e>
 8004e8c:	2b60      	cmp	r3, #96	; 0x60
 8004e8e:	d877      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004e90:	2b50      	cmp	r3, #80	; 0x50
 8004e92:	d03c      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xfe>
 8004e94:	2b50      	cmp	r3, #80	; 0x50
 8004e96:	d873      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d058      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x13e>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d86f      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004ea0:	2b30      	cmp	r3, #48	; 0x30
 8004ea2:	d064      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15e>
 8004ea4:	2b30      	cmp	r3, #48	; 0x30
 8004ea6:	d86b      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d060      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15e>
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d867      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d05c      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15e>
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d05a      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15e>
 8004eb8:	e062      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f000 fc7d 	bl	80057c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	609a      	str	r2, [r3, #8]
      break;
 8004ee6:	e04f      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6899      	ldr	r1, [r3, #8]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f000 fc66 	bl	80057c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0a:	609a      	str	r2, [r3, #8]
      break;
 8004f0c:	e03c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f000 fbda 	bl	80056d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2150      	movs	r1, #80	; 0x50
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fc33 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 8004f2c:	e02c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6859      	ldr	r1, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f000 fbf9 	bl	8005732 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2160      	movs	r1, #96	; 0x60
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fc23 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 8004f4c:	e01c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f000 fbba 	bl	80056d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2140      	movs	r1, #64	; 0x40
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fc13 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 8004f6c:	e00c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f000 fc0a 	bl	8005792 <TIM_ITRx_SetConfig>
      break;
 8004f7e:	e003      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      break;
 8004f84:	e000      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a40      	ldr	r2, [pc, #256]	; (8005108 <TIM_Base_SetConfig+0x114>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <TIM_Base_SetConfig+0x118>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3c      	ldr	r2, [pc, #240]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3b      	ldr	r2, [pc, #236]	; (8005114 <TIM_Base_SetConfig+0x120>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3a      	ldr	r2, [pc, #232]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <TIM_Base_SetConfig+0x114>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01f      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d01b      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2c      	ldr	r2, [pc, #176]	; (800510c <TIM_Base_SetConfig+0x118>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d017      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <TIM_Base_SetConfig+0x11c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d013      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_Base_SetConfig+0x120>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00f      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a29      	ldr	r2, [pc, #164]	; (8005118 <TIM_Base_SetConfig+0x124>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00b      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <TIM_Base_SetConfig+0x128>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a27      	ldr	r2, [pc, #156]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_Base_SetConfig+0x9a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a26      	ldr	r2, [pc, #152]	; (8005124 <TIM_Base_SetConfig+0x130>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d108      	bne.n	80050a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <TIM_Base_SetConfig+0x114>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0xf8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a12      	ldr	r2, [pc, #72]	; (8005118 <TIM_Base_SetConfig+0x124>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0xf8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a11      	ldr	r2, [pc, #68]	; (800511c <TIM_Base_SetConfig+0x128>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0xf8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a10      	ldr	r2, [pc, #64]	; (8005120 <TIM_Base_SetConfig+0x12c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0xf8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <TIM_Base_SetConfig+0x130>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d103      	bne.n	80050f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	615a      	str	r2, [r3, #20]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40013400 	.word	0x40013400
 800511c:	40014000 	.word	0x40014000
 8005120:	40014400 	.word	0x40014400
 8005124:	40014800 	.word	0x40014800

08005128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 0302 	bic.w	r3, r3, #2
 8005174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a2c      	ldr	r2, [pc, #176]	; (8005234 <TIM_OC1_SetConfig+0x10c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00f      	beq.n	80051a8 <TIM_OC1_SetConfig+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a2b      	ldr	r2, [pc, #172]	; (8005238 <TIM_OC1_SetConfig+0x110>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00b      	beq.n	80051a8 <TIM_OC1_SetConfig+0x80>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2a      	ldr	r2, [pc, #168]	; (800523c <TIM_OC1_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <TIM_OC1_SetConfig+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a29      	ldr	r2, [pc, #164]	; (8005240 <TIM_OC1_SetConfig+0x118>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC1_SetConfig+0x80>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a28      	ldr	r2, [pc, #160]	; (8005244 <TIM_OC1_SetConfig+0x11c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d10c      	bne.n	80051c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0308 	bic.w	r3, r3, #8
 80051ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 0304 	bic.w	r3, r3, #4
 80051c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a1b      	ldr	r2, [pc, #108]	; (8005234 <TIM_OC1_SetConfig+0x10c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_OC1_SetConfig+0xc2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1a      	ldr	r2, [pc, #104]	; (8005238 <TIM_OC1_SetConfig+0x110>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_OC1_SetConfig+0xc2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <TIM_OC1_SetConfig+0x114>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_OC1_SetConfig+0xc2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <TIM_OC1_SetConfig+0x118>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_OC1_SetConfig+0xc2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a17      	ldr	r2, [pc, #92]	; (8005244 <TIM_OC1_SetConfig+0x11c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d111      	bne.n	800520e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40014000 	.word	0x40014000
 8005240:	40014400 	.word	0x40014400
 8005244:	40014800 	.word	0x40014800

08005248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0210 	bic.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0320 	bic.w	r3, r3, #32
 8005296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a28      	ldr	r2, [pc, #160]	; (8005348 <TIM_OC2_SetConfig+0x100>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_OC2_SetConfig+0x6c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a27      	ldr	r2, [pc, #156]	; (800534c <TIM_OC2_SetConfig+0x104>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10d      	bne.n	80052d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <TIM_OC2_SetConfig+0x100>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <TIM_OC2_SetConfig+0xb0>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a1c      	ldr	r2, [pc, #112]	; (800534c <TIM_OC2_SetConfig+0x104>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00b      	beq.n	80052f8 <TIM_OC2_SetConfig+0xb0>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <TIM_OC2_SetConfig+0x108>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_OC2_SetConfig+0xb0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <TIM_OC2_SetConfig+0x10c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_OC2_SetConfig+0xb0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a19      	ldr	r2, [pc, #100]	; (8005358 <TIM_OC2_SetConfig+0x110>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d113      	bne.n	8005320 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40013400 	.word	0x40013400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a27      	ldr	r2, [pc, #156]	; (8005458 <TIM_OC3_SetConfig+0xfc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_OC3_SetConfig+0x6a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a26      	ldr	r2, [pc, #152]	; (800545c <TIM_OC3_SetConfig+0x100>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d10d      	bne.n	80053e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <TIM_OC3_SetConfig+0xfc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00f      	beq.n	800540a <TIM_OC3_SetConfig+0xae>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <TIM_OC3_SetConfig+0x100>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <TIM_OC3_SetConfig+0xae>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <TIM_OC3_SetConfig+0x104>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <TIM_OC3_SetConfig+0xae>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <TIM_OC3_SetConfig+0x108>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_OC3_SetConfig+0xae>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a18      	ldr	r2, [pc, #96]	; (8005468 <TIM_OC3_SetConfig+0x10c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d113      	bne.n	8005432 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40013400 	.word	0x40013400
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800

0800546c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a18      	ldr	r2, [pc, #96]	; (800552c <TIM_OC4_SetConfig+0xc0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00f      	beq.n	80054f0 <TIM_OC4_SetConfig+0x84>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a17      	ldr	r2, [pc, #92]	; (8005530 <TIM_OC4_SetConfig+0xc4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_OC4_SetConfig+0x84>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a16      	ldr	r2, [pc, #88]	; (8005534 <TIM_OC4_SetConfig+0xc8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_OC4_SetConfig+0x84>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a15      	ldr	r2, [pc, #84]	; (8005538 <TIM_OC4_SetConfig+0xcc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_OC4_SetConfig+0x84>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a14      	ldr	r2, [pc, #80]	; (800553c <TIM_OC4_SetConfig+0xd0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d109      	bne.n	8005504 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40013400 	.word	0x40013400
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800

08005540 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <TIM_OC5_SetConfig+0xb4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <TIM_OC5_SetConfig+0x7a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <TIM_OC5_SetConfig+0xb8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_OC5_SetConfig+0x7a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_OC5_SetConfig+0xbc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_OC5_SetConfig+0x7a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <TIM_OC5_SetConfig+0xc0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_OC5_SetConfig+0x7a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a13      	ldr	r2, [pc, #76]	; (8005604 <TIM_OC5_SetConfig+0xc4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d109      	bne.n	80055ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	621a      	str	r2, [r3, #32]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800564e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	051b      	lsls	r3, r3, #20
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <TIM_OC6_SetConfig+0xb8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00f      	beq.n	8005684 <TIM_OC6_SetConfig+0x7c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <TIM_OC6_SetConfig+0xbc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_OC6_SetConfig+0x7c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <TIM_OC6_SetConfig+0xc0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_OC6_SetConfig+0x7c>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a15      	ldr	r2, [pc, #84]	; (80056cc <TIM_OC6_SetConfig+0xc4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC6_SetConfig+0x7c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <TIM_OC6_SetConfig+0xc8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d109      	bne.n	8005698 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800568a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	029b      	lsls	r3, r3, #10
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f023 0201 	bic.w	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f023 030a 	bic.w	r3, r3, #10
 8005710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	621a      	str	r2, [r3, #32]
}
 8005726:	bf00      	nop
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005732:	b480      	push	{r7}
 8005734:	b087      	sub	sp, #28
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0210 	bic.w	r2, r3, #16
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800575c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	031b      	lsls	r3, r3, #12
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800576e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f043 0307 	orr.w	r3, r3, #7
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	609a      	str	r2, [r3, #8]
}
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	bf00      	nop
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2201      	movs	r2, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1a      	ldr	r2, [r3, #32]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	43db      	mvns	r3, r3
 800582a:	401a      	ands	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e068      	b.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1e      	ldr	r2, [pc, #120]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d018      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a18      	ldr	r2, [pc, #96]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a13      	ldr	r2, [pc, #76]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a14      	ldr	r2, [pc, #80]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10c      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4313      	orrs	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40013400 	.word	0x40013400
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40014000 	.word	0x40014000

08005964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e042      	b.n	8005a38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fc99 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2224      	movs	r2, #36	; 0x24
 80059ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0201 	bic.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8c2 	bl	8005b6c <UART_SetConfig>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e022      	b.n	8005a38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fbb2 	bl	8006164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fc39 	bl	80062a8 <UART_CheckIdleState>
 8005a36:	4603      	mov	r3, r0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	; 0x28
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	f040 8083 	bne.w	8005b62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <HAL_UART_Transmit+0x28>
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e07b      	b.n	8005b64 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Transmit+0x3a>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e074      	b.n	8005b64 <HAL_UART_Transmit+0x124>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2221      	movs	r2, #33	; 0x21
 8005a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a92:	f7fb fecd 	bl	8001830 <HAL_GetTick>
 8005a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab0:	d108      	bne.n	8005ac4 <HAL_UART_Transmit+0x84>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	e003      	b.n	8005acc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005ad4:	e02c      	b.n	8005b30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2180      	movs	r1, #128	; 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fc2c 	bl	800633e <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e039      	b.n	8005b64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	3302      	adds	r3, #2
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e007      	b.n	8005b1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1cc      	bne.n	8005ad6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2200      	movs	r2, #0
 8005b44:	2140      	movs	r1, #64	; 0x40
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fbf9 	bl	800633e <UART_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e006      	b.n	8005b64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e000      	b.n	8005b64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
  }
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b70:	b08c      	sub	sp, #48	; 0x30
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4baa      	ldr	r3, [pc, #680]	; (8005e44 <UART_SetConfig+0x2d8>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a9f      	ldr	r2, [pc, #636]	; (8005e48 <UART_SetConfig+0x2dc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005be2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bec:	430b      	orrs	r3, r1
 8005bee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f023 010f 	bic.w	r1, r3, #15
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a90      	ldr	r2, [pc, #576]	; (8005e4c <UART_SetConfig+0x2e0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d125      	bne.n	8005c5c <UART_SetConfig+0xf0>
 8005c10:	4b8f      	ldr	r3, [pc, #572]	; (8005e50 <UART_SetConfig+0x2e4>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d81a      	bhi.n	8005c54 <UART_SetConfig+0xe8>
 8005c1e:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <UART_SetConfig+0xb8>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c45 	.word	0x08005c45
 8005c2c:	08005c3d 	.word	0x08005c3d
 8005c30:	08005c4d 	.word	0x08005c4d
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	e116      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c42:	e112      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005c44:	2304      	movs	r3, #4
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4a:	e10e      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c52:	e10a      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c5a:	e106      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a7c      	ldr	r2, [pc, #496]	; (8005e54 <UART_SetConfig+0x2e8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d138      	bne.n	8005cd8 <UART_SetConfig+0x16c>
 8005c66:	4b7a      	ldr	r3, [pc, #488]	; (8005e50 <UART_SetConfig+0x2e4>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f003 030c 	and.w	r3, r3, #12
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d82d      	bhi.n	8005cd0 <UART_SetConfig+0x164>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x110>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005cb1 	.word	0x08005cb1
 8005c80:	08005cd1 	.word	0x08005cd1
 8005c84:	08005cd1 	.word	0x08005cd1
 8005c88:	08005cd1 	.word	0x08005cd1
 8005c8c:	08005cc1 	.word	0x08005cc1
 8005c90:	08005cd1 	.word	0x08005cd1
 8005c94:	08005cd1 	.word	0x08005cd1
 8005c98:	08005cd1 	.word	0x08005cd1
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005cd1 	.word	0x08005cd1
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb6:	e0d8      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cbe:	e0d4      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc6:	e0d0      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005cc8:	2308      	movs	r3, #8
 8005cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cce:	e0cc      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd6:	e0c8      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a5e      	ldr	r2, [pc, #376]	; (8005e58 <UART_SetConfig+0x2ec>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d125      	bne.n	8005d2e <UART_SetConfig+0x1c2>
 8005ce2:	4b5b      	ldr	r3, [pc, #364]	; (8005e50 <UART_SetConfig+0x2e4>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d016      	beq.n	8005d1e <UART_SetConfig+0x1b2>
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d818      	bhi.n	8005d26 <UART_SetConfig+0x1ba>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d00a      	beq.n	8005d0e <UART_SetConfig+0x1a2>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d814      	bhi.n	8005d26 <UART_SetConfig+0x1ba>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <UART_SetConfig+0x19a>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d008      	beq.n	8005d16 <UART_SetConfig+0x1aa>
 8005d04:	e00f      	b.n	8005d26 <UART_SetConfig+0x1ba>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0c:	e0ad      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d14:	e0a9      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d16:	2304      	movs	r3, #4
 8005d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1c:	e0a5      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d1e:	2308      	movs	r3, #8
 8005d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d24:	e0a1      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d26:	2310      	movs	r3, #16
 8005d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2c:	e09d      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a4a      	ldr	r2, [pc, #296]	; (8005e5c <UART_SetConfig+0x2f0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d125      	bne.n	8005d84 <UART_SetConfig+0x218>
 8005d38:	4b45      	ldr	r3, [pc, #276]	; (8005e50 <UART_SetConfig+0x2e4>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d42:	2bc0      	cmp	r3, #192	; 0xc0
 8005d44:	d016      	beq.n	8005d74 <UART_SetConfig+0x208>
 8005d46:	2bc0      	cmp	r3, #192	; 0xc0
 8005d48:	d818      	bhi.n	8005d7c <UART_SetConfig+0x210>
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d00a      	beq.n	8005d64 <UART_SetConfig+0x1f8>
 8005d4e:	2b80      	cmp	r3, #128	; 0x80
 8005d50:	d814      	bhi.n	8005d7c <UART_SetConfig+0x210>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <UART_SetConfig+0x1f0>
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	d008      	beq.n	8005d6c <UART_SetConfig+0x200>
 8005d5a:	e00f      	b.n	8005d7c <UART_SetConfig+0x210>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d62:	e082      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d64:	2302      	movs	r3, #2
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6a:	e07e      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d72:	e07a      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7a:	e076      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d82:	e072      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a35      	ldr	r2, [pc, #212]	; (8005e60 <UART_SetConfig+0x2f4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d12a      	bne.n	8005de4 <UART_SetConfig+0x278>
 8005d8e:	4b30      	ldr	r3, [pc, #192]	; (8005e50 <UART_SetConfig+0x2e4>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9c:	d01a      	beq.n	8005dd4 <UART_SetConfig+0x268>
 8005d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da2:	d81b      	bhi.n	8005ddc <UART_SetConfig+0x270>
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d00c      	beq.n	8005dc4 <UART_SetConfig+0x258>
 8005daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dae:	d815      	bhi.n	8005ddc <UART_SetConfig+0x270>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <UART_SetConfig+0x250>
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db8:	d008      	beq.n	8005dcc <UART_SetConfig+0x260>
 8005dba:	e00f      	b.n	8005ddc <UART_SetConfig+0x270>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc2:	e052      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dca:	e04e      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd2:	e04a      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dda:	e046      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de2:	e042      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <UART_SetConfig+0x2dc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d13a      	bne.n	8005e64 <UART_SetConfig+0x2f8>
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <UART_SetConfig+0x2e4>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dfc:	d01a      	beq.n	8005e34 <UART_SetConfig+0x2c8>
 8005dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e02:	d81b      	bhi.n	8005e3c <UART_SetConfig+0x2d0>
 8005e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e08:	d00c      	beq.n	8005e24 <UART_SetConfig+0x2b8>
 8005e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0e:	d815      	bhi.n	8005e3c <UART_SetConfig+0x2d0>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <UART_SetConfig+0x2b0>
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e18:	d008      	beq.n	8005e2c <UART_SetConfig+0x2c0>
 8005e1a:	e00f      	b.n	8005e3c <UART_SetConfig+0x2d0>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e22:	e022      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005e24:	2302      	movs	r3, #2
 8005e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2a:	e01e      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e32:	e01a      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005e34:	2308      	movs	r3, #8
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3a:	e016      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e42:	e012      	b.n	8005e6a <UART_SetConfig+0x2fe>
 8005e44:	cfff69f3 	.word	0xcfff69f3
 8005e48:	40008000 	.word	0x40008000
 8005e4c:	40013800 	.word	0x40013800
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40004400 	.word	0x40004400
 8005e58:	40004800 	.word	0x40004800
 8005e5c:	40004c00 	.word	0x40004c00
 8005e60:	40005000 	.word	0x40005000
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4aae      	ldr	r2, [pc, #696]	; (8006128 <UART_SetConfig+0x5bc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	f040 8097 	bne.w	8005fa4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e7a:	2b08      	cmp	r3, #8
 8005e7c:	d823      	bhi.n	8005ec6 <UART_SetConfig+0x35a>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0x318>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005ec7 	.word	0x08005ec7
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08005ec7 	.word	0x08005ec7
 8005e94:	08005eb7 	.word	0x08005eb7
 8005e98:	08005ec7 	.word	0x08005ec7
 8005e9c:	08005ec7 	.word	0x08005ec7
 8005ea0:	08005ec7 	.word	0x08005ec7
 8005ea4:	08005ebf 	.word	0x08005ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea8:	f7fd fc5a 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eae:	e010      	b.n	8005ed2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb0:	4b9e      	ldr	r3, [pc, #632]	; (800612c <UART_SetConfig+0x5c0>)
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eb4:	e00d      	b.n	8005ed2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eb6:	f7fd fbbb 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8005eba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ebc:	e009      	b.n	8005ed2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ec4:	e005      	b.n	8005ed2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8130 	beq.w	800613a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	4a94      	ldr	r2, [pc, #592]	; (8006130 <UART_SetConfig+0x5c4>)
 8005ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d305      	bcc.n	8005f0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f10:	e113      	b.n	800613a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2200      	movs	r2, #0
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	60fa      	str	r2, [r7, #12]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	4a84      	ldr	r2, [pc, #528]	; (8006130 <UART_SetConfig+0x5c4>)
 8005f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2200      	movs	r2, #0
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f34:	f7fa f9b4 	bl	80002a0 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	020b      	lsls	r3, r1, #8
 8005f4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f4e:	0202      	lsls	r2, r0, #8
 8005f50:	6979      	ldr	r1, [r7, #20]
 8005f52:	6849      	ldr	r1, [r1, #4]
 8005f54:	0849      	lsrs	r1, r1, #1
 8005f56:	2000      	movs	r0, #0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	eb12 0804 	adds.w	r8, r2, r4
 8005f60:	eb43 0905 	adc.w	r9, r3, r5
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	469a      	mov	sl, r3
 8005f6c:	4693      	mov	fp, r2
 8005f6e:	4652      	mov	r2, sl
 8005f70:	465b      	mov	r3, fp
 8005f72:	4640      	mov	r0, r8
 8005f74:	4649      	mov	r1, r9
 8005f76:	f7fa f993 	bl	80002a0 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4613      	mov	r3, r2
 8005f80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f88:	d308      	bcc.n	8005f9c <UART_SetConfig+0x430>
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f90:	d204      	bcs.n	8005f9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a3a      	ldr	r2, [r7, #32]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e0ce      	b.n	800613a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fa2:	e0ca      	b.n	800613a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fac:	d166      	bne.n	800607c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d827      	bhi.n	8006006 <UART_SetConfig+0x49a>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <UART_SetConfig+0x450>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08005fe9 	.word	0x08005fe9
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	08006007 	.word	0x08006007
 8005fcc:	08005ff7 	.word	0x08005ff7
 8005fd0:	08006007 	.word	0x08006007
 8005fd4:	08006007 	.word	0x08006007
 8005fd8:	08006007 	.word	0x08006007
 8005fdc:	08005fff 	.word	0x08005fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe0:	f7fd fbbe 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8005fe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fe6:	e014      	b.n	8006012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe8:	f7fd fbd0 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8005fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fee:	e010      	b.n	8006012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff0:	4b4e      	ldr	r3, [pc, #312]	; (800612c <UART_SetConfig+0x5c0>)
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ff4:	e00d      	b.n	8006012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff6:	f7fd fb1b 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ffc:	e009      	b.n	8006012 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006004:	e005      	b.n	8006012 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8090 	beq.w	800613a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	4a44      	ldr	r2, [pc, #272]	; (8006130 <UART_SetConfig+0x5c4>)
 8006020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006024:	461a      	mov	r2, r3
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	fbb3 f3f2 	udiv	r3, r3, r2
 800602c:	005a      	lsls	r2, r3, #1
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	441a      	add	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2b0f      	cmp	r3, #15
 8006044:	d916      	bls.n	8006074 <UART_SetConfig+0x508>
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604c:	d212      	bcs.n	8006074 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f023 030f 	bic.w	r3, r3, #15
 8006056:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	b29a      	uxth	r2, r3
 8006064:	8bfb      	ldrh	r3, [r7, #30]
 8006066:	4313      	orrs	r3, r2
 8006068:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	8bfa      	ldrh	r2, [r7, #30]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e062      	b.n	800613a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800607a:	e05e      	b.n	800613a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800607c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006080:	2b08      	cmp	r3, #8
 8006082:	d828      	bhi.n	80060d6 <UART_SetConfig+0x56a>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <UART_SetConfig+0x520>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060b1 	.word	0x080060b1
 8006090:	080060b9 	.word	0x080060b9
 8006094:	080060c1 	.word	0x080060c1
 8006098:	080060d7 	.word	0x080060d7
 800609c:	080060c7 	.word	0x080060c7
 80060a0:	080060d7 	.word	0x080060d7
 80060a4:	080060d7 	.word	0x080060d7
 80060a8:	080060d7 	.word	0x080060d7
 80060ac:	080060cf 	.word	0x080060cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b0:	f7fd fb56 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 80060b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060b6:	e014      	b.n	80060e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b8:	f7fd fb68 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 80060bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060be:	e010      	b.n	80060e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <UART_SetConfig+0x5c0>)
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060c4:	e00d      	b.n	80060e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060c6:	f7fd fab3 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80060ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060cc:	e009      	b.n	80060e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060d4:	e005      	b.n	80060e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060e0:	bf00      	nop
    }

    if (pclk != 0U)
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d028      	beq.n	800613a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	4a10      	ldr	r2, [pc, #64]	; (8006130 <UART_SetConfig+0x5c4>)
 80060ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	441a      	add	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	fbb2 f3f3 	udiv	r3, r2, r3
 800610a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b0f      	cmp	r3, #15
 8006110:	d910      	bls.n	8006134 <UART_SetConfig+0x5c8>
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d20c      	bcs.n	8006134 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	b29a      	uxth	r2, r3
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	e009      	b.n	800613a <UART_SetConfig+0x5ce>
 8006126:	bf00      	nop
 8006128:	40008000 	.word	0x40008000
 800612c:	00f42400 	.word	0x00f42400
 8006130:	0800c0a0 	.word	0x0800c0a0
      }
      else
      {
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2201      	movs	r2, #1
 800613e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2201      	movs	r2, #1
 8006146:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2200      	movs	r2, #0
 8006154:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006156:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800615a:	4618      	mov	r0, r3
 800615c:	3730      	adds	r7, #48	; 0x30
 800615e:	46bd      	mov	sp, r7
 8006160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006262:	d10a      	bne.n	800627a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062b8:	f7fb faba 	bl	8001830 <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f82f 	bl	800633e <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e025      	b.n	8006336 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d10e      	bne.n	8006316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f819 	bl	800633e <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00f      	b.n	8006336 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b09c      	sub	sp, #112	; 0x70
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	603b      	str	r3, [r7, #0]
 800634a:	4613      	mov	r3, r2
 800634c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634e:	e0a9      	b.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	f000 80a5 	beq.w	80064a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800635a:	f7fb fa69 	bl	8001830 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006366:	429a      	cmp	r2, r3
 8006368:	d302      	bcc.n	8006370 <UART_WaitOnFlagUntilTimeout+0x32>
 800636a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800636c:	2b00      	cmp	r3, #0
 800636e:	d140      	bne.n	80063f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800637e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006384:	667b      	str	r3, [r7, #100]	; 0x64
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800638e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006390:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800639c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e6      	bne.n	8006370 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3308      	adds	r3, #8
 80063a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	663b      	str	r3, [r7, #96]	; 0x60
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80063c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e5      	bne.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e069      	b.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d051      	beq.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640e:	d149      	bne.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006418:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800642e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	461a      	mov	r2, r3
 8006436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
 800643a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800643e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e6      	bne.n	800641a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	613b      	str	r3, [r7, #16]
   return(result);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f023 0301 	bic.w	r3, r3, #1
 8006462:	66bb      	str	r3, [r7, #104]	; 0x68
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3308      	adds	r3, #8
 800646a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800646c:	623a      	str	r2, [r7, #32]
 800646e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	69f9      	ldr	r1, [r7, #28]
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	61bb      	str	r3, [r7, #24]
   return(result);
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e5      	bne.n	800644c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e010      	b.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	69da      	ldr	r2, [r3, #28]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4013      	ands	r3, r2
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	bf0c      	ite	eq
 80064b4:	2301      	moveq	r3, #1
 80064b6:	2300      	movne	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	429a      	cmp	r2, r3
 80064c0:	f43f af46 	beq.w	8006350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3770      	adds	r7, #112	; 0x70
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e027      	b.n	8006534 <HAL_UARTEx_DisableFifoMode+0x66>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	; 0x24
 80064f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006512:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e02d      	b.n	80065b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f84f 	bl	8006638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e02d      	b.n	8006630 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2224      	movs	r2, #36	; 0x24
 80065e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f811 	bl	8006638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006644:	2b00      	cmp	r3, #0
 8006646:	d108      	bne.n	800665a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006658:	e031      	b.n	80066be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800665a:	2308      	movs	r3, #8
 800665c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800665e:	2308      	movs	r3, #8
 8006660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	0e5b      	lsrs	r3, r3, #25
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	0f5b      	lsrs	r3, r3, #29
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	7b3a      	ldrb	r2, [r7, #12]
 8006686:	4911      	ldr	r1, [pc, #68]	; (80066cc <UARTEx_SetNbDataToProcess+0x94>)
 8006688:	5c8a      	ldrb	r2, [r1, r2]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800668e:	7b3a      	ldrb	r2, [r7, #12]
 8006690:	490f      	ldr	r1, [pc, #60]	; (80066d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006694:	fb93 f3f2 	sdiv	r3, r3, r2
 8006698:	b29a      	uxth	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	7b7a      	ldrb	r2, [r7, #13]
 80066a4:	4909      	ldr	r1, [pc, #36]	; (80066cc <UARTEx_SetNbDataToProcess+0x94>)
 80066a6:	5c8a      	ldrb	r2, [r1, r2]
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066ac:	7b7a      	ldrb	r2, [r7, #13]
 80066ae:	4908      	ldr	r1, [pc, #32]	; (80066d0 <UARTEx_SetNbDataToProcess+0x98>)
 80066b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	0800c0b8 	.word	0x0800c0b8
 80066d0:	0800c0c0 	.word	0x0800c0c0

080066d4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fcb2 	bl	800804e <VL53L0X_get_offset_calibration_data_micro_meter>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80066ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80066fc:	b5b0      	push	{r4, r5, r7, lr}
 80066fe:	b096      	sub	sp, #88	; 0x58
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006704:	2300      	movs	r3, #0
 8006706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800670a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800670e:	2b00      	cmp	r3, #0
 8006710:	d107      	bne.n	8006722 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006712:	2200      	movs	r2, #0
 8006714:	2188      	movs	r1, #136	; 0x88
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f004 feaa 	bl	800b470 <VL53L0X_WrByte>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006730:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800673a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a9e      	ldr	r2, [pc, #632]	; (80069bc <VL53L0X_DataInit+0x2c0>)
 8006742:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a9d      	ldr	r2, [pc, #628]	; (80069c0 <VL53L0X_DataInit+0x2c4>)
 800674a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006754:	f107 0310 	add.w	r3, r7, #16
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fac2 	bl	8006ce4 <VL53L0X_GetDeviceParameters>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006766:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800676a:	2b00      	cmp	r3, #0
 800676c:	d112      	bne.n	8006794 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800676e:	2300      	movs	r3, #0
 8006770:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006772:	2300      	movs	r3, #0
 8006774:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f103 0410 	add.w	r4, r3, #16
 800677c:	f107 0510 	add.w	r5, r7, #16
 8006780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800678a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2264      	movs	r2, #100	; 0x64
 8006798:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f44f 7261 	mov.w	r2, #900	; 0x384
 80067a2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80067ac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80067b6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80067c2:	2201      	movs	r2, #1
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f004 fe52 	bl	800b470 <VL53L0X_WrByte>
 80067cc:	4603      	mov	r3, r0
 80067ce:	461a      	mov	r2, r3
 80067d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067da:	2201      	movs	r2, #1
 80067dc:	21ff      	movs	r1, #255	; 0xff
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f004 fe46 	bl	800b470 <VL53L0X_WrByte>
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2100      	movs	r1, #0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f004 fe3a 	bl	800b470 <VL53L0X_WrByte>
 80067fc:	4603      	mov	r3, r0
 80067fe:	461a      	mov	r2, r3
 8006800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006804:	4313      	orrs	r3, r2
 8006806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800680a:	f107 030f 	add.w	r3, r7, #15
 800680e:	461a      	mov	r2, r3
 8006810:	2191      	movs	r1, #145	; 0x91
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f004 feae 	bl	800b574 <VL53L0X_RdByte>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006820:	4313      	orrs	r3, r2
 8006822:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006826:	7bfa      	ldrb	r2, [r7, #15]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800682e:	2201      	movs	r2, #1
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f004 fe1c 	bl	800b470 <VL53L0X_WrByte>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006840:	4313      	orrs	r3, r2
 8006842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006846:	2200      	movs	r2, #0
 8006848:	21ff      	movs	r1, #255	; 0xff
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f004 fe10 	bl	800b470 <VL53L0X_WrByte>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006858:	4313      	orrs	r3, r2
 800685a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800685e:	2200      	movs	r2, #0
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f004 fe04 	bl	800b470 <VL53L0X_WrByte>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006870:	4313      	orrs	r3, r2
 8006872:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006876:	2300      	movs	r3, #0
 8006878:	653b      	str	r3, [r7, #80]	; 0x50
 800687a:	e014      	b.n	80068a6 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800687c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006880:	2b00      	cmp	r3, #0
 8006882:	d114      	bne.n	80068ae <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006886:	b29b      	uxth	r3, r3
 8006888:	2201      	movs	r2, #1
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fd35 	bl	80072fc <VL53L0X_SetLimitCheckEnable>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800689a:	4313      	orrs	r3, r2
 800689c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80068a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a2:	3301      	adds	r3, #1
 80068a4:	653b      	str	r3, [r7, #80]	; 0x50
 80068a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a8:	2b05      	cmp	r3, #5
 80068aa:	dde7      	ble.n	800687c <VL53L0X_DataInit+0x180>
 80068ac:	e000      	b.n	80068b0 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80068ae:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80068b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d107      	bne.n	80068c8 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80068b8:	2200      	movs	r2, #0
 80068ba:	2102      	movs	r1, #2
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fd1d 	bl	80072fc <VL53L0X_SetLimitCheckEnable>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80068c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d107      	bne.n	80068e0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80068d0:	2200      	movs	r2, #0
 80068d2:	2103      	movs	r1, #3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fd11 	bl	80072fc <VL53L0X_SetLimitCheckEnable>
 80068da:	4603      	mov	r3, r0
 80068dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80068e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d107      	bne.n	80068f8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80068e8:	2200      	movs	r2, #0
 80068ea:	2104      	movs	r1, #4
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fd05 	bl	80072fc <VL53L0X_SetLimitCheckEnable>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80068f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d107      	bne.n	8006910 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006900:	2200      	movs	r2, #0
 8006902:	2105      	movs	r1, #5
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fcf9 	bl	80072fc <VL53L0X_SetLimitCheckEnable>
 800690a:	4603      	mov	r3, r0
 800690c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006910:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006914:	2b00      	cmp	r3, #0
 8006916:	d108      	bne.n	800692a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006918:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800691c:	2100      	movs	r1, #0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fd9c 	bl	800745c <VL53L0X_SetLimitCheckValue>
 8006924:	4603      	mov	r3, r0
 8006926:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800692a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800692e:	2b00      	cmp	r3, #0
 8006930:	d108      	bne.n	8006944 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006936:	2101      	movs	r1, #1
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fd8f 	bl	800745c <VL53L0X_SetLimitCheckValue>
 800693e:	4603      	mov	r3, r0
 8006940:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006944:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800694c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006950:	2102      	movs	r1, #2
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fd82 	bl	800745c <VL53L0X_SetLimitCheckValue>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800695e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006966:	2200      	movs	r2, #0
 8006968:	2103      	movs	r1, #3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fd76 	bl	800745c <VL53L0X_SetLimitCheckValue>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006976:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	22ff      	movs	r2, #255	; 0xff
 8006982:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006986:	22ff      	movs	r2, #255	; 0xff
 8006988:	2101      	movs	r1, #1
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f004 fd70 	bl	800b470 <VL53L0X_WrByte>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800699e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80069ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3758      	adds	r7, #88	; 0x58
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bdb0      	pop	{r4, r5, r7, pc}
 80069ba:	bf00      	nop
 80069bc:	00016b85 	.word	0x00016b85
 80069c0:	000970a4 	.word	0x000970a4

080069c4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80069c4:	b5b0      	push	{r4, r5, r7, lr}
 80069c6:	b09e      	sub	sp, #120	; 0x78
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80069d2:	f107 031c 	add.w	r3, r7, #28
 80069d6:	2240      	movs	r2, #64	; 0x40
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f004 feb0 	bl	800b740 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006a00:	2101      	movs	r1, #1
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f002 fa79 	bl	8008efa <VL53L0X_get_info_from_device>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006a14:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d80d      	bhi.n	8006a44 <VL53L0X_StaticInit+0x80>
 8006a28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d102      	bne.n	8006a36 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	d806      	bhi.n	8006a44 <VL53L0X_StaticInit+0x80>
 8006a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10e      	bne.n	8006a5c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	2b0c      	cmp	r3, #12
 8006a42:	d90b      	bls.n	8006a5c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006a44:	f107 0218 	add.w	r2, r7, #24
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fcf8 	bl	8008444 <VL53L0X_perform_ref_spad_management>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006a5a:	e009      	b.n	8006a70 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a60:	461a      	mov	r2, r3
 8006a62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 fef9 	bl	800885c <VL53L0X_set_reference_spads>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006a70:	4b94      	ldr	r3, [pc, #592]	; (8006cc4 <VL53L0X_StaticInit+0x300>)
 8006a72:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006a74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10f      	bne.n	8006a9c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006a82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006a86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a96:	e001      	b.n	8006a9c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006a98:	4b8a      	ldr	r3, [pc, #552]	; (8006cc4 <VL53L0X_StaticInit+0x300>)
 8006a9a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006a9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006aa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f003 fdcc 	bl	800a644 <VL53L0X_load_tuning_settings>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006ab2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006aba:	2300      	movs	r3, #0
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	2304      	movs	r3, #4
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 f8f1 	bl	8007cac <VL53L0X_SetGpioConfig>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ad0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d121      	bne.n	8006b1c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ad8:	2201      	movs	r2, #1
 8006ada:	21ff      	movs	r1, #255	; 0xff
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f004 fcc7 	bl	800b470 <VL53L0X_WrByte>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006ae8:	f107 031a 	add.w	r3, r7, #26
 8006aec:	461a      	mov	r2, r3
 8006aee:	2184      	movs	r1, #132	; 0x84
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f004 fd69 	bl	800b5c8 <VL53L0X_RdWord>
 8006af6:	4603      	mov	r3, r0
 8006af8:	461a      	mov	r2, r3
 8006afa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006b04:	2200      	movs	r2, #0
 8006b06:	21ff      	movs	r1, #255	; 0xff
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f004 fcb1 	bl	800b470 <VL53L0X_WrByte>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b1c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006b30:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d108      	bne.n	8006b4a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006b38:	f107 031c 	add.w	r3, r7, #28
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f8d0 	bl	8006ce4 <VL53L0X_GetDeviceParameters>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006b4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d110      	bne.n	8006b74 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006b52:	f107 0319 	add.w	r3, r7, #25
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f992 	bl	8006e82 <VL53L0X_GetFractionEnable>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006b64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006b6c:	7e7a      	ldrb	r2, [r7, #25]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006b74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10e      	bne.n	8006b9a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f103 0410 	add.w	r4, r3, #16
 8006b82:	f107 051c 	add.w	r5, r7, #28
 8006b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d111      	bne.n	8006bc6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006ba2:	f107 0319 	add.w	r3, r7, #25
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2101      	movs	r1, #1
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f004 fce2 	bl	800b574 <VL53L0X_RdByte>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006bb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006bbe:	7e7a      	ldrb	r2, [r7, #25]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006bc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d107      	bne.n	8006bde <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9ca 	bl	8006f6c <VL53L0X_SetSequenceStepEnable>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006bde:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d107      	bne.n	8006bf6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006be6:	2200      	movs	r2, #0
 8006be8:	2102      	movs	r1, #2
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f9be 	bl	8006f6c <VL53L0X_SetSequenceStepEnable>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006bf6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2203      	movs	r2, #3
 8006c02:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006c0e:	f107 0313 	add.w	r3, r7, #19
 8006c12:	461a      	mov	r2, r3
 8006c14:	2100      	movs	r1, #0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f990 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d103      	bne.n	8006c32 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c2a:	7cfa      	ldrb	r2, [r7, #19]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006c3a:	f107 0313 	add.w	r3, r7, #19
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2101      	movs	r1, #1
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f97a 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c56:	7cfa      	ldrb	r2, [r7, #19]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2103      	movs	r1, #3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 fec4 	bl	80099fc <get_sequence_step_timeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006c92:	f107 030c 	add.w	r3, r7, #12
 8006c96:	461a      	mov	r2, r3
 8006c98:	2104      	movs	r1, #4
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f002 feae 	bl	80099fc <get_sequence_step_timeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ca6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3770      	adds	r7, #112	; 0x70
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000010 	.word	0x20000010

08006cc8 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006cd0:	239d      	movs	r3, #157	; 0x9d
 8006cd2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f8b0 	bl	8006e5c <VL53L0X_GetDeviceMode>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d107      	bne.n	8006d18 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa78 	bl	8007204 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d107      	bne.n	8006d3e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	3310      	adds	r3, #16
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 faae 	bl	8007296 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d107      	bne.n	8006d56 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	3314      	adds	r3, #20
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fcc1 	bl	80066d4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006d52:	4603      	mov	r3, r0
 8006d54:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d134      	bne.n	8006dc8 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]
 8006d62:	e02a      	b.n	8006dba <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d12a      	bne.n	8006dc2 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	b299      	uxth	r1, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	3308      	adds	r3, #8
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	4413      	add	r3, r2
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fbce 	bl	8007520 <VL53L0X_GetLimitCheckValue>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d117      	bne.n	8006dc6 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	b299      	uxth	r1, r3
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	3318      	adds	r3, #24
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	4413      	add	r3, r2
 8006da2:	461a      	mov	r2, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fb35 	bl	8007414 <VL53L0X_GetLimitCheckEnable>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60bb      	str	r3, [r7, #8]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	ddd1      	ble.n	8006d64 <VL53L0X_GetDeviceParameters+0x80>
 8006dc0:	e002      	b.n	8006dc8 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006dc6:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d107      	bne.n	8006de0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	333c      	adds	r3, #60	; 0x3c
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fc30 	bl	800763c <VL53L0X_GetWrapAroundCheckEnable>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d107      	bne.n	8006df8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f879 	bl	8006ee6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	2b15      	cmp	r3, #21
 8006e18:	bf8c      	ite	hi
 8006e1a:	2201      	movhi	r2, #1
 8006e1c:	2200      	movls	r2, #0
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	d10e      	bne.n	8006e42 <VL53L0X_SetDeviceMode+0x3e>
 8006e24:	2201      	movs	r2, #1
 8006e26:	409a      	lsls	r2, r3
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <VL53L0X_SetDeviceMode+0x54>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bf14      	ite	ne
 8006e30:	2301      	movne	r3, #1
 8006e32:	2300      	moveq	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	741a      	strb	r2, [r3, #16]
		break;
 8006e40:	e001      	b.n	8006e46 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006e42:	23f8      	movs	r3, #248	; 0xf8
 8006e44:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	0030000b 	.word	0x0030000b

08006e5c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	7c1a      	ldrb	r2, [r3, #16]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	2109      	movs	r1, #9
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f004 fb6d 	bl	800b574 <VL53L0X_RdByte>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f003 fa26 	bl	800a322 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f003 faf3 	bl	800a4e2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006f20:	78ba      	ldrb	r2, [r7, #2]
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f002 ff3b 	bl	8009da2 <VL53L0X_set_vcsel_pulse_period>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	460b      	mov	r3, r1
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4619      	mov	r1, r3
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f003 f9ad 	bl	800a2b4 <VL53L0X_get_vcsel_pulse_period>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f88:	f107 030f 	add.w	r3, r7, #15
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2101      	movs	r1, #1
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f004 faef 	bl	800b574 <VL53L0X_RdByte>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d15a      	bne.n	800705c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006fa6:	78bb      	ldrb	r3, [r7, #2]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d12b      	bne.n	8007004 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d825      	bhi.n	8006ffe <VL53L0X_SetSequenceStepEnable+0x92>
 8006fb2:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fcd 	.word	0x08006fcd
 8006fbc:	08006fd7 	.word	0x08006fd7
 8006fc0:	08006fe1 	.word	0x08006fe1
 8006fc4:	08006feb 	.word	0x08006feb
 8006fc8:	08006ff5 	.word	0x08006ff5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006fcc:	7dbb      	ldrb	r3, [r7, #22]
 8006fce:	f043 0310 	orr.w	r3, r3, #16
 8006fd2:	75bb      	strb	r3, [r7, #22]
				break;
 8006fd4:	e043      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006fd6:	7dbb      	ldrb	r3, [r7, #22]
 8006fd8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006fdc:	75bb      	strb	r3, [r7, #22]
				break;
 8006fde:	e03e      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006fe0:	7dbb      	ldrb	r3, [r7, #22]
 8006fe2:	f043 0304 	orr.w	r3, r3, #4
 8006fe6:	75bb      	strb	r3, [r7, #22]
				break;
 8006fe8:	e039      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006fea:	7dbb      	ldrb	r3, [r7, #22]
 8006fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff0:	75bb      	strb	r3, [r7, #22]
				break;
 8006ff2:	e034      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006ff4:	7dbb      	ldrb	r3, [r7, #22]
 8006ff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ffa:	75bb      	strb	r3, [r7, #22]
				break;
 8006ffc:	e02f      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ffe:	23fc      	movs	r3, #252	; 0xfc
 8007000:	75fb      	strb	r3, [r7, #23]
 8007002:	e02c      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	2b04      	cmp	r3, #4
 8007008:	d825      	bhi.n	8007056 <VL53L0X_SetSequenceStepEnable+0xea>
 800700a:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	08007025 	.word	0x08007025
 8007014:	0800702f 	.word	0x0800702f
 8007018:	08007039 	.word	0x08007039
 800701c:	08007043 	.word	0x08007043
 8007020:	0800704d 	.word	0x0800704d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007024:	7dbb      	ldrb	r3, [r7, #22]
 8007026:	f023 0310 	bic.w	r3, r3, #16
 800702a:	75bb      	strb	r3, [r7, #22]
				break;
 800702c:	e017      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800702e:	7dbb      	ldrb	r3, [r7, #22]
 8007030:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007034:	75bb      	strb	r3, [r7, #22]
				break;
 8007036:	e012      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007038:	7dbb      	ldrb	r3, [r7, #22]
 800703a:	f023 0304 	bic.w	r3, r3, #4
 800703e:	75bb      	strb	r3, [r7, #22]
				break;
 8007040:	e00d      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007042:	7dbb      	ldrb	r3, [r7, #22]
 8007044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007048:	75bb      	strb	r3, [r7, #22]
				break;
 800704a:	e008      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800704c:	7dbb      	ldrb	r3, [r7, #22]
 800704e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007052:	75bb      	strb	r3, [r7, #22]
				break;
 8007054:	e003      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007056:	23fc      	movs	r3, #252	; 0xfc
 8007058:	75fb      	strb	r3, [r7, #23]
 800705a:	e000      	b.n	800705e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800705c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	7dba      	ldrb	r2, [r7, #22]
 8007062:	429a      	cmp	r2, r3
 8007064:	d01e      	beq.n	80070a4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d107      	bne.n	800707e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800706e:	7dbb      	ldrb	r3, [r7, #22]
 8007070:	461a      	mov	r2, r3
 8007072:	2101      	movs	r1, #1
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f004 f9fb 	bl	800b470 <VL53L0X_WrByte>
 800707a:	4603      	mov	r3, r0
 800707c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800707e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	7dba      	ldrb	r2, [r7, #22]
 800708a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800708e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800709c:	6939      	ldr	r1, [r7, #16]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff ff0e 	bl	8006ec0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80070a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	607b      	str	r3, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	72fb      	strb	r3, [r7, #11]
 80070be:	4613      	mov	r3, r2
 80070c0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d836      	bhi.n	8007140 <sequence_step_enabled+0x90>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <sequence_step_enabled+0x28>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	080070ed 	.word	0x080070ed
 80070dc:	080070ff 	.word	0x080070ff
 80070e0:	08007111 	.word	0x08007111
 80070e4:	08007123 	.word	0x08007123
 80070e8:	08007135 	.word	0x08007135
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80070ec:	7abb      	ldrb	r3, [r7, #10]
 80070ee:	111b      	asrs	r3, r3, #4
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	701a      	strb	r2, [r3, #0]
		break;
 80070fc:	e022      	b.n	8007144 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80070fe:	7abb      	ldrb	r3, [r7, #10]
 8007100:	10db      	asrs	r3, r3, #3
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	701a      	strb	r2, [r3, #0]
		break;
 800710e:	e019      	b.n	8007144 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007110:	7abb      	ldrb	r3, [r7, #10]
 8007112:	109b      	asrs	r3, r3, #2
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	b2da      	uxtb	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	701a      	strb	r2, [r3, #0]
		break;
 8007120:	e010      	b.n	8007144 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007122:	7abb      	ldrb	r3, [r7, #10]
 8007124:	119b      	asrs	r3, r3, #6
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	701a      	strb	r2, [r3, #0]
		break;
 8007132:	e007      	b.n	8007144 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007134:	7abb      	ldrb	r3, [r7, #10]
 8007136:	09db      	lsrs	r3, r3, #7
 8007138:	b2da      	uxtb	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	701a      	strb	r2, [r3, #0]
		break;
 800713e:	e001      	b.n	8007144 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007140:	23fc      	movs	r3, #252	; 0xfc
 8007142:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007166:	f107 030e 	add.w	r3, r7, #14
 800716a:	461a      	mov	r2, r3
 800716c:	2101      	movs	r1, #1
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f004 fa00 	bl	800b574 <VL53L0X_RdByte>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d107      	bne.n	8007190 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007180:	7bba      	ldrb	r2, [r7, #14]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff ff92 	bl	80070b0 <sequence_step_enabled>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d108      	bne.n	80071aa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007198:	7bba      	ldrb	r2, [r7, #14]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	3302      	adds	r3, #2
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff ff85 	bl	80070b0 <sequence_step_enabled>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80071aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d108      	bne.n	80071c4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80071b2:	7bba      	ldrb	r2, [r7, #14]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	2102      	movs	r1, #2
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff ff78 	bl	80070b0 <sequence_step_enabled>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80071c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d108      	bne.n	80071de <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80071cc:	7bba      	ldrb	r2, [r7, #14]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	3303      	adds	r3, #3
 80071d2:	2103      	movs	r1, #3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ff6b 	bl	80070b0 <sequence_step_enabled>
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80071de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d108      	bne.n	80071f8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80071e6:	7bba      	ldrb	r2, [r7, #14]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	2104      	movs	r1, #4
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7ff ff5e 	bl	80070b0 <sequence_step_enabled>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007212:	f107 030c 	add.w	r3, r7, #12
 8007216:	461a      	mov	r2, r3
 8007218:	21f8      	movs	r1, #248	; 0xf8
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f004 f9d4 	bl	800b5c8 <VL53L0X_RdWord>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	461a      	mov	r2, r3
 8007232:	2104      	movs	r1, #4
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f004 f9ff 	bl	800b638 <VL53L0X_RdDWord>
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800723e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10c      	bne.n	8007260 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007246:	89bb      	ldrh	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	89ba      	ldrh	r2, [r7, #12]
 8007250:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7f1b      	ldrb	r3, [r3, #28]
 800727e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	7bba      	ldrb	r2, [r7, #14]
 8007284:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80072a4:	f107 030e 	add.w	r3, r7, #14
 80072a8:	461a      	mov	r2, r3
 80072aa:	2120      	movs	r1, #32
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f004 f98b 	bl	800b5c8 <VL53L0X_RdWord>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80072b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d118      	bne.n	80072f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80072be:	89fb      	ldrh	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	771a      	strb	r2, [r3, #28]
 80072d6:	e00b      	b.n	80072f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80072d8:	89fb      	ldrh	r3, [r7, #14]
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	807b      	strh	r3, [r7, #2]
 8007308:	4613      	mov	r3, r2
 800730a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800730c:	2300      	movs	r3, #0
 800730e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800731c:	887b      	ldrh	r3, [r7, #2]
 800731e:	2b05      	cmp	r3, #5
 8007320:	d902      	bls.n	8007328 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007322:	23fc      	movs	r3, #252	; 0xfc
 8007324:	75fb      	strb	r3, [r7, #23]
 8007326:	e05b      	b.n	80073e0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007328:	787b      	ldrb	r3, [r7, #1]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	73bb      	strb	r3, [r7, #14]
 800733a:	e00a      	b.n	8007352 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800733c:	887b      	ldrh	r3, [r7, #2]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	330c      	adds	r3, #12
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007352:	887b      	ldrh	r3, [r7, #2]
 8007354:	2b05      	cmp	r3, #5
 8007356:	d841      	bhi.n	80073dc <VL53L0X_SetLimitCheckEnable+0xe0>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <VL53L0X_SetLimitCheckEnable+0x64>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007379 	.word	0x08007379
 8007364:	08007383 	.word	0x08007383
 8007368:	08007399 	.word	0x08007399
 800736c:	080073a3 	.word	0x080073a3
 8007370:	080073ad 	.word	0x080073ad
 8007374:	080073c5 	.word	0x080073c5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7bfa      	ldrb	r2, [r7, #15]
 800737c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007380:	e02e      	b.n	80073e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	2144      	movs	r1, #68	; 0x44
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f004 f893 	bl	800b4b8 <VL53L0X_WrWord>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]

			break;
 8007396:	e023      	b.n	80073e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7bfa      	ldrb	r2, [r7, #15]
 800739c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80073a0:	e01e      	b.n	80073e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7bfa      	ldrb	r2, [r7, #15]
 80073a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80073aa:	e019      	b.n	80073e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80073b2:	7b7b      	ldrb	r3, [r7, #13]
 80073b4:	22fe      	movs	r2, #254	; 0xfe
 80073b6:	2160      	movs	r1, #96	; 0x60
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f004 f8a7 	bl	800b50c <VL53L0X_UpdateByte>
 80073be:	4603      	mov	r3, r0
 80073c0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80073c2:	e00d      	b.n	80073e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80073ca:	7b7b      	ldrb	r3, [r7, #13]
 80073cc:	22ef      	movs	r2, #239	; 0xef
 80073ce:	2160      	movs	r1, #96	; 0x60
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f004 f89b 	bl	800b50c <VL53L0X_UpdateByte>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80073da:	e001      	b.n	80073e0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073dc:	23fc      	movs	r3, #252	; 0xfc
 80073de:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10f      	bne.n	8007408 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80073e8:	787b      	ldrb	r3, [r7, #1]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80073ee:	887b      	ldrh	r3, [r7, #2]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80073fa:	e005      	b.n	8007408 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80073fc:	887b      	ldrh	r3, [r7, #2]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	4413      	add	r3, r2
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007408:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	460b      	mov	r3, r1
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007426:	897b      	ldrh	r3, [r7, #10]
 8007428:	2b05      	cmp	r3, #5
 800742a:	d905      	bls.n	8007438 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800742c:	23fc      	movs	r3, #252	; 0xfc
 800742e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e008      	b.n	800744a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007438:	897b      	ldrh	r3, [r7, #10]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007442:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	7dba      	ldrb	r2, [r7, #22]
 8007448:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800744a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	460b      	mov	r3, r1
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800746a:	2300      	movs	r3, #0
 800746c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800746e:	897b      	ldrh	r3, [r7, #10]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007478:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800747a:	7dbb      	ldrb	r3, [r7, #22]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d107      	bne.n	8007490 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007480:	897b      	ldrh	r3, [r7, #10]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	330c      	adds	r3, #12
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	e040      	b.n	8007512 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007490:	897b      	ldrh	r3, [r7, #10]
 8007492:	2b05      	cmp	r3, #5
 8007494:	d830      	bhi.n	80074f8 <VL53L0X_SetLimitCheckValue+0x9c>
 8007496:	a201      	add	r2, pc, #4	; (adr r2, 800749c <VL53L0X_SetLimitCheckValue+0x40>)
 8007498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749c:	080074b5 	.word	0x080074b5
 80074a0:	080074bd 	.word	0x080074bd
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	080074db 	.word	0x080074db
 80074ac:	080074e3 	.word	0x080074e3
 80074b0:	080074e3 	.word	0x080074e3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80074ba:	e01f      	b.n	80074fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	2144      	movs	r1, #68	; 0x44
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f003 fff6 	bl	800b4b8 <VL53L0X_WrWord>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80074d0:	e014      	b.n	80074fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80074d8:	e010      	b.n	80074fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80074e0:	e00c      	b.n	80074fc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	2164      	movs	r1, #100	; 0x64
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f003 ffe3 	bl	800b4b8 <VL53L0X_WrWord>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80074f6:	e001      	b.n	80074fc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074f8:	23fc      	movs	r3, #252	; 0xfc
 80074fa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80074fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007504:	897b      	ldrh	r3, [r7, #10]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	330c      	adds	r3, #12
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop

08007520 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	460b      	mov	r3, r1
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800752e:	2300      	movs	r3, #0
 8007530:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007536:	897b      	ldrh	r3, [r7, #10]
 8007538:	2b05      	cmp	r3, #5
 800753a:	d847      	bhi.n	80075cc <VL53L0X_GetLimitCheckValue+0xac>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <VL53L0X_GetLimitCheckValue+0x24>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	0800755d 	.word	0x0800755d
 8007548:	08007569 	.word	0x08007569
 800754c:	0800758f 	.word	0x0800758f
 8007550:	0800759b 	.word	0x0800759b
 8007554:	080075a7 	.word	0x080075a7
 8007558:	080075a7 	.word	0x080075a7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007562:	2300      	movs	r3, #0
 8007564:	77bb      	strb	r3, [r7, #30]
		break;
 8007566:	e033      	b.n	80075d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007568:	f107 0316 	add.w	r3, r7, #22
 800756c:	461a      	mov	r2, r3
 800756e:	2144      	movs	r1, #68	; 0x44
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f004 f829 	bl	800b5c8 <VL53L0X_RdWord>
 8007576:	4603      	mov	r3, r0
 8007578:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800757a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007582:	8afb      	ldrh	r3, [r7, #22]
 8007584:	025b      	lsls	r3, r3, #9
 8007586:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007588:	2301      	movs	r3, #1
 800758a:	77bb      	strb	r3, [r7, #30]
		break;
 800758c:	e020      	b.n	80075d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007592:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	77bb      	strb	r3, [r7, #30]
		break;
 8007598:	e01a      	b.n	80075d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	77bb      	strb	r3, [r7, #30]
		break;
 80075a4:	e014      	b.n	80075d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80075a6:	f107 0316 	add.w	r3, r7, #22
 80075aa:	461a      	mov	r2, r3
 80075ac:	2164      	movs	r1, #100	; 0x64
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f004 f80a 	bl	800b5c8 <VL53L0X_RdWord>
 80075b4:	4603      	mov	r3, r0
 80075b6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80075b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d102      	bne.n	80075c6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80075c0:	8afb      	ldrh	r3, [r7, #22]
 80075c2:	025b      	lsls	r3, r3, #9
 80075c4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	77bb      	strb	r3, [r7, #30]
		break;
 80075ca:	e001      	b.n	80075d0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80075cc:	23fc      	movs	r3, #252	; 0xfc
 80075ce:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d12a      	bne.n	800762e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80075d8:	7fbb      	ldrb	r3, [r7, #30]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d124      	bne.n	8007628 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d110      	bne.n	8007606 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80075e4:	897b      	ldrh	r3, [r7, #10]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	330c      	adds	r3, #12
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80075f8:	897b      	ldrh	r3, [r7, #10]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007604:	e013      	b.n	800762e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800760c:	897b      	ldrh	r3, [r7, #10]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	330c      	adds	r3, #12
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800761a:	897b      	ldrh	r3, [r7, #10]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007626:	e002      	b.n	800762e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800762e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007632:	4618      	mov	r0, r3
 8007634:	3720      	adds	r7, #32
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop

0800763c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800764a:	f107 030e 	add.w	r3, r7, #14
 800764e:	461a      	mov	r2, r3
 8007650:	2101      	movs	r1, #1
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f003 ff8e 	bl	800b574 <VL53L0X_RdByte>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800765c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10e      	bne.n	8007682 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007664:	7bba      	ldrb	r2, [r7, #14]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	b25b      	sxtb	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	da03      	bge.n	800767c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2201      	movs	r2, #1
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	e002      	b.n	8007682 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781a      	ldrb	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80076ac:	f107 030e 	add.w	r3, r7, #14
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff fbd2 	bl	8006e5c <VL53L0X_GetDeviceMode>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80076bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d107      	bne.n	80076d4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f898 	bl	8007800 <VL53L0X_StartMeasurement>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80076d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d104      	bne.n	80076e6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fb3f 	bl	8008d60 <VL53L0X_measurement_poll_for_completion>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80076e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2203      	movs	r2, #3
 80076f8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80076fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007718:	2301      	movs	r3, #1
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	68b9      	ldr	r1, [r7, #8]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f001 fae1 	bl	8008ce6 <VL53L0X_perform_ref_calibration>
 8007724:	4603      	mov	r3, r0
 8007726:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007740:	2300      	movs	r3, #0
 8007742:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800774a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800774c:	7dbb      	ldrb	r3, [r7, #22]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d005      	beq.n	800775e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007752:	7dbb      	ldrb	r3, [r7, #22]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d002      	beq.n	800775e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007758:	7dbb      	ldrb	r3, [r7, #22]
 800775a:	2b03      	cmp	r3, #3
 800775c:	d147      	bne.n	80077ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800775e:	f107 030c 	add.w	r3, r7, #12
 8007762:	f107 0210 	add.w	r2, r7, #16
 8007766:	2101      	movs	r1, #1
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fbc3 	bl	8007ef4 <VL53L0X_GetInterruptThresholds>
 800776e:	4603      	mov	r3, r0
 8007770:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007778:	d803      	bhi.n	8007782 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800777a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800777c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007780:	d935      	bls.n	80077ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d131      	bne.n	80077ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d006      	beq.n	800779e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007790:	491a      	ldr	r1, [pc, #104]	; (80077fc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f002 ff56 	bl	800a644 <VL53L0X_load_tuning_settings>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]
 800779c:	e027      	b.n	80077ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800779e:	2204      	movs	r2, #4
 80077a0:	21ff      	movs	r1, #255	; 0xff
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f003 fe64 	bl	800b470 <VL53L0X_WrByte>
 80077a8:	4603      	mov	r3, r0
 80077aa:	461a      	mov	r2, r3
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80077b2:	2200      	movs	r2, #0
 80077b4:	2170      	movs	r1, #112	; 0x70
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f003 fe5a 	bl	800b470 <VL53L0X_WrByte>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80077c6:	2200      	movs	r2, #0
 80077c8:	21ff      	movs	r1, #255	; 0xff
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f003 fe50 	bl	800b470 <VL53L0X_WrByte>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80077da:	2200      	movs	r2, #0
 80077dc:	2180      	movs	r1, #128	; 0x80
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f003 fe46 	bl	800b470 <VL53L0X_WrByte>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80077ee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000104 	.word	0x20000104

08007800 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007808:	2300      	movs	r3, #0
 800780a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007810:	f107 030e 	add.w	r3, r7, #14
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff fb20 	bl	8006e5c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800781c:	2201      	movs	r2, #1
 800781e:	2180      	movs	r1, #128	; 0x80
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f003 fe25 	bl	800b470 <VL53L0X_WrByte>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800782a:	2201      	movs	r2, #1
 800782c:	21ff      	movs	r1, #255	; 0xff
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f003 fe1e 	bl	800b470 <VL53L0X_WrByte>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f003 fe17 	bl	800b470 <VL53L0X_WrByte>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800784c:	461a      	mov	r2, r3
 800784e:	2191      	movs	r1, #145	; 0x91
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f003 fe0d 	bl	800b470 <VL53L0X_WrByte>
 8007856:	4603      	mov	r3, r0
 8007858:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800785a:	2201      	movs	r2, #1
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f003 fe06 	bl	800b470 <VL53L0X_WrByte>
 8007864:	4603      	mov	r3, r0
 8007866:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007868:	2200      	movs	r2, #0
 800786a:	21ff      	movs	r1, #255	; 0xff
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f003 fdff 	bl	800b470 <VL53L0X_WrByte>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007876:	2200      	movs	r2, #0
 8007878:	2180      	movs	r1, #128	; 0x80
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f003 fdf8 	bl	800b470 <VL53L0X_WrByte>
 8007880:	4603      	mov	r3, r0
 8007882:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b03      	cmp	r3, #3
 8007888:	d054      	beq.n	8007934 <VL53L0X_StartMeasurement+0x134>
 800788a:	2b03      	cmp	r3, #3
 800788c:	dc6c      	bgt.n	8007968 <VL53L0X_StartMeasurement+0x168>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <VL53L0X_StartMeasurement+0x98>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d034      	beq.n	8007900 <VL53L0X_StartMeasurement+0x100>
 8007896:	e067      	b.n	8007968 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007898:	2201      	movs	r2, #1
 800789a:	2100      	movs	r1, #0
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f003 fde7 	bl	800b470 <VL53L0X_WrByte>
 80078a2:	4603      	mov	r3, r0
 80078a4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80078aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d15d      	bne.n	800796e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80078bc:	f107 030d 	add.w	r3, r7, #13
 80078c0:	461a      	mov	r2, r3
 80078c2:	2100      	movs	r1, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f003 fe55 	bl	800b574 <VL53L0X_RdByte>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	3301      	adds	r3, #1
 80078d2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80078d4:	7b7a      	ldrb	r2, [r7, #13]
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	4013      	ands	r3, r2
 80078da:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80078dc:	7bfa      	ldrb	r2, [r7, #15]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d107      	bne.n	80078f2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80078e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80078f0:	d3e1      	bcc.n	80078b6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80078f8:	d339      	bcc.n	800796e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80078fa:	23f9      	movs	r3, #249	; 0xf9
 80078fc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80078fe:	e036      	b.n	800796e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007908:	2101      	movs	r1, #1
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff ff12 	bl	8007734 <VL53L0X_CheckAndLoadInterruptSettings>
 8007910:	4603      	mov	r3, r0
 8007912:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007914:	2202      	movs	r2, #2
 8007916:	2100      	movs	r1, #0
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f003 fda9 	bl	800b470 <VL53L0X_WrByte>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d123      	bne.n	8007972 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2204      	movs	r2, #4
 800792e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007932:	e01e      	b.n	8007972 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d105      	bne.n	8007948 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800793c:	2101      	movs	r1, #1
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fef8 	bl	8007734 <VL53L0X_CheckAndLoadInterruptSettings>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007948:	2204      	movs	r2, #4
 800794a:	2100      	movs	r1, #0
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f003 fd8f 	bl	800b470 <VL53L0X_WrByte>
 8007952:	4603      	mov	r3, r0
 8007954:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2204      	movs	r2, #4
 8007962:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007966:	e006      	b.n	8007976 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007968:	23f8      	movs	r3, #248	; 0xf8
 800796a:	75fb      	strb	r3, [r7, #23]
 800796c:	e004      	b.n	8007978 <VL53L0X_StartMeasurement+0x178>
		break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <VL53L0X_StartMeasurement+0x178>
		break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <VL53L0X_StartMeasurement+0x178>
		break;
 8007976:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007998:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b04      	cmp	r3, #4
 800799e:	d112      	bne.n	80079c6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80079a0:	f107 0308 	add.w	r3, r7, #8
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb1a 	bl	8007fe0 <VL53L0X_GetInterruptMaskStatus>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d103      	bne.n	80079be <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2201      	movs	r2, #1
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	e01c      	b.n	80079f8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
 80079c4:	e018      	b.n	80079f8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80079c6:	f107 030d 	add.w	r3, r7, #13
 80079ca:	461a      	mov	r2, r3
 80079cc:	2114      	movs	r1, #20
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f003 fdd0 	bl	800b574 <VL53L0X_RdByte>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80079d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10b      	bne.n	80079f8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80079e0:	7b7b      	ldrb	r3, [r7, #13]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e002      	b.n	80079f8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007a04:	b5b0      	push	{r4, r5, r7, lr}
 8007a06:	b096      	sub	sp, #88	; 0x58
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007a14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007a18:	230c      	movs	r3, #12
 8007a1a:	2114      	movs	r1, #20
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f003 fcfb 	bl	800b418 <VL53L0X_ReadMulti>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007a28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 80d1 	bne.w	8007bd4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2200      	movs	r2, #0
 8007a36:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007a3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4413      	add	r3, r2
 8007a50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007a5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	025b      	lsls	r3, r3, #9
 8007a70:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a76:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a92:	025b      	lsls	r3, r3, #9
 8007a94:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007a9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007ab6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007ab8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007ac6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007ace:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007ad2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ad8:	d046      	beq.n	8007b68 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007ada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007adc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007ae0:	fb02 f303 	mul.w	r3, r2, r3
 8007ae4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ae8:	4a57      	ldr	r2, [pc, #348]	; (8007c48 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007aea:	fb82 1203 	smull	r1, r2, r2, r3
 8007aee:	1192      	asrs	r2, r2, #6
 8007af0:	17db      	asrs	r3, r3, #31
 8007af2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007af4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	7f1b      	ldrb	r3, [r3, #28]
 8007b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007b06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d02c      	beq.n	8007b68 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007b0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b10:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d10d      	bne.n	8007b3c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007b20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d004      	beq.n	8007b32 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007b28:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007b2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b30:	e016      	b.n	8007b60 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007b32:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007b36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b3a:	e011      	b.n	8007b60 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007b3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b42:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007b46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b48:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007b4c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007b50:	121b      	asrs	r3, r3, #8
 8007b52:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b56:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007b58:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007b5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007b68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00d      	beq.n	8007b8c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007b70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b74:	089b      	lsrs	r3, r3, #2
 8007b76:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007b7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	019b      	lsls	r3, r3, #6
 8007b84:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	75da      	strb	r2, [r3, #23]
 8007b8a:	e006      	b.n	8007b9a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007b92:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2200      	movs	r2, #0
 8007b98:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007b9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007b9e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007ba2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f003 f9e5 	bl	800af80 <VL53L0X_get_pal_range_status>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007bc4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007bcc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007bd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d12f      	bne.n	8007c3c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f107 040c 	add.w	r4, r7, #12
 8007be2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007bf6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007c04:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007c0a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007c10:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007c16:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007c1c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007c22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007c2c:	f107 050c 	add.w	r5, r7, #12
 8007c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c3c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3750      	adds	r7, #80	; 0x50
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bdb0      	pop	{r4, r5, r7, pc}
 8007c48:	10624dd3 	.word	0x10624dd3

08007c4c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff f8d1 	bl	8006e04 <VL53L0X_SetDeviceMode>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff fd16 	bl	80076a0 <VL53L0X_PerformSingleMeasurement>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d105      	bne.n	8007c8c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff febe 	bl	8007a04 <VL53L0X_GetRangingMeasurementData>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007c94:	2100      	movs	r1, #0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f962 	bl	8007f60 <VL53L0X_ClearInterruptMask>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	70fb      	strb	r3, [r7, #3]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70bb      	strb	r3, [r7, #2]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007cd0:	23f6      	movs	r3, #246	; 0xf6
 8007cd2:	73fb      	strb	r3, [r7, #15]
 8007cd4:	e107      	b.n	8007ee6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007cd6:	78bb      	ldrb	r3, [r7, #2]
 8007cd8:	2b14      	cmp	r3, #20
 8007cda:	d110      	bne.n	8007cfe <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007cdc:	7e3b      	ldrb	r3, [r7, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007ce2:	2310      	movs	r3, #16
 8007ce4:	73bb      	strb	r3, [r7, #14]
 8007ce6:	e001      	b.n	8007cec <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2184      	movs	r1, #132	; 0x84
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f003 fbbc 	bl	800b470 <VL53L0X_WrByte>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
 8007cfc:	e0f3      	b.n	8007ee6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007cfe:	78bb      	ldrb	r3, [r7, #2]
 8007d00:	2b15      	cmp	r3, #21
 8007d02:	f040 8097 	bne.w	8007e34 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007d06:	2201      	movs	r2, #1
 8007d08:	21ff      	movs	r1, #255	; 0xff
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f003 fbb0 	bl	800b470 <VL53L0X_WrByte>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f003 fba6 	bl	800b470 <VL53L0X_WrByte>
 8007d24:	4603      	mov	r3, r0
 8007d26:	461a      	mov	r2, r3
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	21ff      	movs	r1, #255	; 0xff
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f003 fb9c 	bl	800b470 <VL53L0X_WrByte>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007d42:	2201      	movs	r2, #1
 8007d44:	2180      	movs	r1, #128	; 0x80
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f003 fb92 	bl	800b470 <VL53L0X_WrByte>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	461a      	mov	r2, r3
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007d56:	2202      	movs	r2, #2
 8007d58:	2185      	movs	r1, #133	; 0x85
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f003 fb88 	bl	800b470 <VL53L0X_WrByte>
 8007d60:	4603      	mov	r3, r0
 8007d62:	461a      	mov	r2, r3
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	21ff      	movs	r1, #255	; 0xff
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f003 fb7e 	bl	800b470 <VL53L0X_WrByte>
 8007d74:	4603      	mov	r3, r0
 8007d76:	461a      	mov	r2, r3
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007d7e:	2200      	movs	r2, #0
 8007d80:	21cd      	movs	r1, #205	; 0xcd
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f003 fb74 	bl	800b470 <VL53L0X_WrByte>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007d92:	2211      	movs	r2, #17
 8007d94:	21cc      	movs	r1, #204	; 0xcc
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f003 fb6a 	bl	800b470 <VL53L0X_WrByte>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007da6:	2207      	movs	r2, #7
 8007da8:	21ff      	movs	r1, #255	; 0xff
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f003 fb60 	bl	800b470 <VL53L0X_WrByte>
 8007db0:	4603      	mov	r3, r0
 8007db2:	461a      	mov	r2, r3
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	21be      	movs	r1, #190	; 0xbe
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f003 fb56 	bl	800b470 <VL53L0X_WrByte>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007dce:	2206      	movs	r2, #6
 8007dd0:	21ff      	movs	r1, #255	; 0xff
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f003 fb4c 	bl	800b470 <VL53L0X_WrByte>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007de2:	2209      	movs	r2, #9
 8007de4:	21cc      	movs	r1, #204	; 0xcc
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f003 fb42 	bl	800b470 <VL53L0X_WrByte>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007df6:	2200      	movs	r2, #0
 8007df8:	21ff      	movs	r1, #255	; 0xff
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f003 fb38 	bl	800b470 <VL53L0X_WrByte>
 8007e00:	4603      	mov	r3, r0
 8007e02:	461a      	mov	r2, r3
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	21ff      	movs	r1, #255	; 0xff
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f003 fb2e 	bl	800b470 <VL53L0X_WrByte>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f003 fb24 	bl	800b470 <VL53L0X_WrByte>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e058      	b.n	8007ee6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d121      	bne.n	8007e80 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007e3c:	787b      	ldrb	r3, [r7, #1]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d81b      	bhi.n	8007e7a <VL53L0X_SetGpioConfig+0x1ce>
 8007e42:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <VL53L0X_SetGpioConfig+0x19c>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e5d 	.word	0x08007e5d
 8007e4c:	08007e63 	.word	0x08007e63
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e6f 	.word	0x08007e6f
 8007e58:	08007e75 	.word	0x08007e75
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73bb      	strb	r3, [r7, #14]
				break;
 8007e60:	e00f      	b.n	8007e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007e62:	2301      	movs	r3, #1
 8007e64:	73bb      	strb	r3, [r7, #14]
				break;
 8007e66:	e00c      	b.n	8007e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	73bb      	strb	r3, [r7, #14]
				break;
 8007e6c:	e009      	b.n	8007e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	73bb      	strb	r3, [r7, #14]
				break;
 8007e72:	e006      	b.n	8007e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007e74:	2304      	movs	r3, #4
 8007e76:	73bb      	strb	r3, [r7, #14]
				break;
 8007e78:	e003      	b.n	8007e82 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007e7a:	23f5      	movs	r3, #245	; 0xf5
 8007e7c:	73fb      	strb	r3, [r7, #15]
 8007e7e:	e000      	b.n	8007e82 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007e80:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	210a      	movs	r1, #10
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f003 faed 	bl	800b470 <VL53L0X_WrByte>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10f      	bne.n	8007ec2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007ea2:	7e3b      	ldrb	r3, [r7, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73bb      	strb	r3, [r7, #14]
 8007eac:	e001      	b.n	8007eb2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007eae:	2310      	movs	r3, #16
 8007eb0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	22ef      	movs	r2, #239	; 0xef
 8007eb6:	2184      	movs	r1, #132	; 0x84
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f003 fb27 	bl	800b50c <VL53L0X_UpdateByte>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	787a      	ldrb	r2, [r7, #1]
 8007ece:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d105      	bne.n	8007ee6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007eda:	2100      	movs	r1, #0
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f83f 	bl	8007f60 <VL53L0X_ClearInterruptMask>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop

08007ef4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	603b      	str	r3, [r7, #0]
 8007f00:	460b      	mov	r3, r1
 8007f02:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	210e      	movs	r1, #14
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f003 fb59 	bl	800b5c8 <VL53L0X_RdWord>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007f1a:	8abb      	ldrh	r3, [r7, #20]
 8007f1c:	045b      	lsls	r3, r3, #17
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <VL53L0X_GetInterruptThresholds+0x68>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10f      	bne.n	8007f50 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	461a      	mov	r2, r3
 8007f36:	210c      	movs	r1, #12
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f003 fb45 	bl	800b5c8 <VL53L0X_RdWord>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007f42:	8abb      	ldrh	r3, [r7, #20]
 8007f44:	045b      	lsls	r3, r3, #17
 8007f46:	461a      	mov	r2, r3
 8007f48:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <VL53L0X_GetInterruptThresholds+0x68>)
 8007f4a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	1ffe0000 	.word	0x1ffe0000

08007f60 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007f72:	2201      	movs	r2, #1
 8007f74:	210b      	movs	r1, #11
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f003 fa7a 	bl	800b470 <VL53L0X_WrByte>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007f80:	2200      	movs	r2, #0
 8007f82:	210b      	movs	r1, #11
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f003 fa73 	bl	800b470 <VL53L0X_WrByte>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007f94:	f107 030d 	add.w	r3, r7, #13
 8007f98:	461a      	mov	r2, r3
 8007f9a:	2113      	movs	r1, #19
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f003 fae9 	bl	800b574 <VL53L0X_RdByte>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007fb2:	7b7b      	ldrb	r3, [r7, #13]
 8007fb4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d006      	beq.n	8007fca <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d803      	bhi.n	8007fca <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0d3      	beq.n	8007f72 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007fd0:	23f4      	movs	r3, #244	; 0xf4
 8007fd2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007fee:	f107 030e 	add.w	r3, r7, #14
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	2113      	movs	r1, #19
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f003 fabc 	bl	800b574 <VL53L0X_RdByte>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	f003 0207 	and.w	r2, r3, #7
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	f003 0318 	and.w	r3, r3, #24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008014:	23fa      	movs	r3, #250	; 0xfa
 8008016:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008030:	2300      	movs	r3, #0
 8008032:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 fa03 	bl	8008444 <VL53L0X_perform_ref_spad_management>
 800803e:	4603      	mov	r3, r0
 8008040:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800805c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008060:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008066:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008068:	f107 0308 	add.w	r3, r7, #8
 800806c:	461a      	mov	r2, r3
 800806e:	2128      	movs	r1, #40	; 0x28
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f003 faa9 	bl	800b5c8 <VL53L0X_RdWord>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800807a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d11e      	bne.n	80080c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008082:	893b      	ldrh	r3, [r7, #8]
 8008084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008088:	b29b      	uxth	r3, r3
 800808a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800808c:	893b      	ldrh	r3, [r7, #8]
 800808e:	461a      	mov	r2, r3
 8008090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008094:	429a      	cmp	r2, r3
 8008096:	dd0b      	ble.n	80080b0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008098:	893a      	ldrh	r2, [r7, #8]
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	b29b      	uxth	r3, r3
 80080a0:	b21b      	sxth	r3, r3
 80080a2:	461a      	mov	r2, r3
					* 250;
 80080a4:	23fa      	movs	r3, #250	; 0xfa
 80080a6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e007      	b.n	80080c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80080b0:	893b      	ldrh	r3, [r7, #8]
 80080b2:	b21b      	sxth	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	23fa      	movs	r3, #250	; 0xfa
 80080b8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80080c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b08b      	sub	sp, #44	; 0x2c
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80080da:	2308      	movs	r3, #8
 80080dc:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f04f 32ff 	mov.w	r2, #4294967295
 80080e8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80080fc:	69b9      	ldr	r1, [r7, #24]
 80080fe:	fb01 f202 	mul.w	r2, r1, r2
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
 800810a:	e030      	b.n	800816e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	4413      	add	r3, r2
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800811a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	429a      	cmp	r2, r3
 8008120:	d11e      	bne.n	8008160 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008122:	7ffa      	ldrb	r2, [r7, #31]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	fa42 f303 	asr.w	r3, r2, r3
 800812a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008130:	e016      	b.n	8008160 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008132:	7ffb      	ldrb	r3, [r7, #31]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <get_next_good_spad+0x88>
				success = 1;
 800813c:	2301      	movs	r3, #1
 800813e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	fb03 f202 	mul.w	r2, r3, r2
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	4413      	add	r3, r2
 800814c:	461a      	mov	r2, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	601a      	str	r2, [r3, #0]
				break;
 8008152:	e009      	b.n	8008168 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008154:	7ffb      	ldrb	r3, [r7, #31]
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	3301      	adds	r3, #1
 800815e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008160:	6a3a      	ldr	r2, [r7, #32]
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	429a      	cmp	r2, r3
 8008166:	d3e4      	bcc.n	8008132 <get_next_good_spad+0x66>
				coarseIndex++) {
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	3301      	adds	r3, #1
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800816e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	d202      	bcs.n	800817c <get_next_good_spad+0xb0>
 8008176:	7fbb      	ldrb	r3, [r7, #30]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d0c7      	beq.n	800810c <get_next_good_spad+0x40>
		}
	}
}
 800817c:	bf00      	nop
 800817e:	372c      	adds	r7, #44	; 0x2c
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008190:	2301      	movs	r3, #1
 8008192:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	099b      	lsrs	r3, r3, #6
 8008198:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800819a:	4a07      	ldr	r2, [pc, #28]	; (80081b8 <is_aperture+0x30>)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <is_aperture+0x22>
		isAperture = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	200002bc 	.word	0x200002bc

080081bc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80081bc:	b480      	push	{r7}
 80081be:	b089      	sub	sp, #36	; 0x24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80081cc:	2308      	movs	r3, #8
 80081ce:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	fbb3 f2f2 	udiv	r2, r3, r2
 80081e2:	69b9      	ldr	r1, [r7, #24]
 80081e4:	fb01 f202 	mul.w	r2, r1, r2
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d302      	bcc.n	80081fa <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80081f4:	23ce      	movs	r3, #206	; 0xce
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e010      	b.n	800821c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	4413      	add	r3, r2
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b25a      	sxtb	r2, r3
 8008204:	2101      	movs	r1, #1
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	fa01 f303 	lsl.w	r3, r1, r3
 800820c:	b25b      	sxtb	r3, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	b259      	sxtb	r1, r3
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	4413      	add	r3, r2
 8008218:	b2ca      	uxtb	r2, r1
 800821a:	701a      	strb	r2, [r3, #0]

	return status;
 800821c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3724      	adds	r7, #36	; 0x24
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008236:	2306      	movs	r3, #6
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	21b0      	movs	r1, #176	; 0xb0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f003 f8bb 	bl	800b3b8 <VL53L0X_WriteMulti>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800825c:	2306      	movs	r3, #6
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	21b0      	movs	r1, #176	; 0xb0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f003 f8d8 	bl	800b418 <VL53L0X_ReadMulti>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800826c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08c      	sub	sp, #48	; 0x30
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	607a      	str	r2, [r7, #4]
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	460b      	mov	r3, r1
 8008286:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008288:	2300      	movs	r3, #0
 800828a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800828e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008290:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008294:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008296:	2300      	movs	r3, #0
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
 800829a:	e02b      	b.n	80082f4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800829c:	f107 031c 	add.w	r3, r7, #28
 80082a0:	6a3a      	ldr	r2, [r7, #32]
 80082a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff ff11 	bl	80080cc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d103      	bne.n	80082ba <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80082b2:	23ce      	movs	r3, #206	; 0xce
 80082b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80082b8:	e020      	b.n	80082fc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	461a      	mov	r2, r3
 80082be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c0:	4413      	add	r3, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff ff60 	bl	8008188 <is_aperture>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	7afb      	ldrb	r3, [r7, #11]
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d003      	beq.n	80082da <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80082d2:	23ce      	movs	r3, #206	; 0xce
 80082d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80082d8:	e010      	b.n	80082fc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082e2:	6838      	ldr	r0, [r7, #0]
 80082e4:	f7ff ff6a 	bl	80081bc <enable_spad_bit>
		currentSpad++;
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	3301      	adds	r3, #1
 80082ec:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	3301      	adds	r3, #1
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d3cf      	bcc.n	800829c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80082fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082fe:	6a3a      	ldr	r2, [r7, #32]
 8008300:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008302:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff ff8d 	bl	800822c <set_ref_spad_map>
 8008312:	4603      	mov	r3, r0
 8008314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008318:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800831c:	2b00      	cmp	r3, #0
 800831e:	d121      	bne.n	8008364 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008320:	f107 0314 	add.w	r3, r7, #20
 8008324:	4619      	mov	r1, r3
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff ff93 	bl	8008252 <get_ref_spad_map>
 800832c:	4603      	mov	r3, r0
 800832e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008336:	e011      	b.n	800835c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	4413      	add	r3, r2
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	f107 0114 	add.w	r1, r7, #20
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	440b      	add	r3, r1
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d003      	beq.n	8008356 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800834e:	23ce      	movs	r3, #206	; 0xce
 8008350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008354:	e006      	b.n	8008364 <enable_ref_spads+0xec>
			}
			i++;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	3301      	adds	r3, #1
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800835c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	429a      	cmp	r2, r3
 8008362:	d3e9      	bcc.n	8008338 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008364:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008368:	4618      	mov	r0, r3
 800836a:	3730      	adds	r7, #48	; 0x30
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800837a:	2300      	movs	r3, #0
 800837c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800838c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008390:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008394:	2b00      	cmp	r3, #0
 8008396:	d107      	bne.n	80083a8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008398:	22c0      	movs	r2, #192	; 0xc0
 800839a:	2101      	movs	r1, #1
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 f867 	bl	800b470 <VL53L0X_WrByte>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80083a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d108      	bne.n	80083c2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff fc48 	bl	8007c4c <VL53L0X_PerformSingleRangingMeasurement>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80083c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d107      	bne.n	80083da <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80083ca:	2201      	movs	r2, #1
 80083cc:	21ff      	movs	r1, #255	; 0xff
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f003 f84e 	bl	800b470 <VL53L0X_WrByte>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80083da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d107      	bne.n	80083f2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	21b6      	movs	r1, #182	; 0xb6
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f003 f8ee 	bl	800b5c8 <VL53L0X_RdWord>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80083f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d107      	bne.n	800840a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80083fa:	2200      	movs	r2, #0
 80083fc:	21ff      	movs	r1, #255	; 0xff
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f003 f836 	bl	800b470 <VL53L0X_WrByte>
 8008404:	4603      	mov	r3, r0
 8008406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800840a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800840e:	2b00      	cmp	r3, #0
 8008410:	d112      	bne.n	8008438 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008416:	461a      	mov	r2, r3
 8008418:	2101      	movs	r1, #1
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f003 f828 	bl	800b470 <VL53L0X_WrByte>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008426:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008434:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800843c:	4618      	mov	r0, r3
 800843e:	3728      	adds	r7, #40	; 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b09d      	sub	sp, #116	; 0x74
 8008448:	af06      	add	r7, sp, #24
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008450:	2300      	movs	r3, #0
 8008452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008456:	23b4      	movs	r3, #180	; 0xb4
 8008458:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800845c:	2303      	movs	r3, #3
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008460:	232c      	movs	r3, #44	; 0x2c
 8008462:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008468:	2300      	movs	r3, #0
 800846a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800846c:	2300      	movs	r3, #0
 800846e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008470:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008474:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800847e:	2306      	movs	r3, #6
 8008480:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80084a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80084aa:	2300      	movs	r3, #0
 80084ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ae:	e009      	b.n	80084c4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80084be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c0:	3301      	adds	r3, #1
 80084c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d3f1      	bcc.n	80084b0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80084cc:	2201      	movs	r2, #1
 80084ce:	21ff      	movs	r1, #255	; 0xff
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f002 ffcd 	bl	800b470 <VL53L0X_WrByte>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80084dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d107      	bne.n	80084f4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80084e4:	2200      	movs	r2, #0
 80084e6:	214f      	movs	r1, #79	; 0x4f
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f002 ffc1 	bl	800b470 <VL53L0X_WrByte>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80084f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d107      	bne.n	800850c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80084fc:	222c      	movs	r2, #44	; 0x2c
 80084fe:	214e      	movs	r1, #78	; 0x4e
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f002 ffb5 	bl	800b470 <VL53L0X_WrByte>
 8008506:	4603      	mov	r3, r0
 8008508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800850c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008510:	2b00      	cmp	r3, #0
 8008512:	d107      	bne.n	8008524 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008514:	2200      	movs	r2, #0
 8008516:	21ff      	movs	r1, #255	; 0xff
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f002 ffa9 	bl	800b470 <VL53L0X_WrByte>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008524:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008528:	2b00      	cmp	r3, #0
 800852a:	d109      	bne.n	8008540 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800852c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008530:	461a      	mov	r2, r3
 8008532:	21b6      	movs	r1, #182	; 0xb6
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f002 ff9b 	bl	800b470 <VL53L0X_WrByte>
 800853a:	4603      	mov	r3, r0
 800853c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008540:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008544:	2b00      	cmp	r3, #0
 8008546:	d107      	bne.n	8008558 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008548:	2200      	movs	r2, #0
 800854a:	2180      	movs	r1, #128	; 0x80
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f002 ff8f 	bl	800b470 <VL53L0X_WrByte>
 8008552:	4603      	mov	r3, r0
 8008554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10a      	bne.n	8008576 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008560:	f107 0210 	add.w	r2, r7, #16
 8008564:	f107 0111 	add.w	r1, r7, #17
 8008568:	2300      	movs	r3, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fbbb 	bl	8008ce6 <VL53L0X_perform_ref_calibration>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008576:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800857a:	2b00      	cmp	r3, #0
 800857c:	d121      	bne.n	80085c2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800858a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800858c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800859a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800859e:	f107 0218 	add.w	r2, r7, #24
 80085a2:	9204      	str	r2, [sp, #16]
 80085a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085a6:	9203      	str	r2, [sp, #12]
 80085a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085aa:	9202      	str	r2, [sp, #8]
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	4623      	mov	r3, r4
 80085b4:	4602      	mov	r2, r0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff fe5e 	bl	8008278 <enable_ref_spads>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80085c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d174      	bne.n	80086b4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80085ce:	f107 0312 	add.w	r3, r7, #18
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fecb 	bl	8008370 <perform_ref_signal_measurement>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80085e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d161      	bne.n	80086ac <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80085e8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80085ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d25d      	bcs.n	80086ac <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80085f0:	2300      	movs	r3, #0
 80085f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085f4:	e009      	b.n	800860a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008606:	3301      	adds	r3, #1
 8008608:	64bb      	str	r3, [r7, #72]	; 0x48
 800860a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	429a      	cmp	r2, r3
 8008610:	d3f1      	bcc.n	80085f6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008612:	e002      	b.n	800861a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008616:	3301      	adds	r3, #1
 8008618:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800861a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800861e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008620:	4413      	add	r3, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fdb0 	bl	8008188 <is_aperture>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d103      	bne.n	8008636 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800862e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	429a      	cmp	r2, r3
 8008634:	d3ee      	bcc.n	8008614 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008636:	2301      	movs	r3, #1
 8008638:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800863a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800864a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800864e:	f107 0218 	add.w	r2, r7, #24
 8008652:	9204      	str	r2, [sp, #16]
 8008654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008656:	9203      	str	r2, [sp, #12]
 8008658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800865a:	9202      	str	r2, [sp, #8]
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	4623      	mov	r3, r4
 8008664:	4602      	mov	r2, r0
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff fe06 	bl	8008278 <enable_ref_spads>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008672:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008676:	2b00      	cmp	r3, #0
 8008678:	d11b      	bne.n	80086b2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800867e:	f107 0312 	add.w	r3, r7, #18
 8008682:	4619      	mov	r1, r3
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff fe73 	bl	8008370 <perform_ref_signal_measurement>
 800868a:	4603      	mov	r3, r0
 800868c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008690:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10c      	bne.n	80086b2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008698:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800869a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800869c:	429a      	cmp	r2, r3
 800869e:	d208      	bcs.n	80086b2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80086aa:	e002      	b.n	80086b2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b0:	e000      	b.n	80086b4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80086b2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80086b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f040 80af 	bne.w	800881c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80086be:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80086c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80086c2:	429a      	cmp	r2, r3
 80086c4:	f240 80aa 	bls.w	800881c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80086c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80086d8:	f107 031c 	add.w	r3, r7, #28
 80086dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086de:	4618      	mov	r0, r3
 80086e0:	f003 f820 	bl	800b724 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80086e4:	8a7b      	ldrh	r3, [r7, #18]
 80086e6:	461a      	mov	r2, r3
 80086e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfb8      	it	lt
 80086f0:	425b      	neglt	r3, r3
 80086f2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80086fa:	e086      	b.n	800880a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008702:	f107 0314 	add.w	r3, r7, #20
 8008706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800870a:	f7ff fcdf 	bl	80080cc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d103      	bne.n	800871e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008716:	23ce      	movs	r3, #206	; 0xce
 8008718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800871c:	e07e      	b.n	800881c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800871e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4413      	add	r3, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fd2e 	bl	8008188 <is_aperture>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008732:	4293      	cmp	r3, r2
 8008734:	d003      	beq.n	800873e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008736:	2301      	movs	r3, #1
 8008738:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800873c:	e06e      	b.n	800881c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800873e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008740:	3301      	adds	r3, #1
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800874e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fd32 	bl	80081bc <enable_spad_bit>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800875e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10c      	bne.n	8008780 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008768:	3301      	adds	r3, #1
 800876a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008772:	4619      	mov	r1, r3
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff fd59 	bl	800822c <set_ref_spad_map>
 800877a:	4603      	mov	r3, r0
 800877c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008780:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008784:	2b00      	cmp	r3, #0
 8008786:	d146      	bne.n	8008816 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008788:	f107 0312 	add.w	r3, r7, #18
 800878c:	4619      	mov	r1, r3
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff fdee 	bl	8008370 <perform_ref_signal_measurement>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800879a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d13b      	bne.n	800881a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80087a2:	8a7b      	ldrh	r3, [r7, #18]
 80087a4:	461a      	mov	r2, r3
 80087a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bfb8      	it	lt
 80087ae:	425b      	neglt	r3, r3
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80087b2:	8a7b      	ldrh	r3, [r7, #18]
 80087b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d21c      	bcs.n	80087f4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80087ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087be:	429a      	cmp	r2, r3
 80087c0:	d914      	bls.n	80087ec <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80087c2:	f107 031c 	add.w	r3, r7, #28
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fd2f 	bl	800822c <set_ref_spad_map>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80087da:	f107 011c 	add.w	r1, r7, #28
 80087de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 ff9f 	bl	800b724 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	3b01      	subs	r3, #1
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80087ec:	2301      	movs	r3, #1
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e00a      	b.n	800880a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80087fe:	f107 031c 	add.w	r3, r7, #28
 8008802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008804:	4618      	mov	r0, r3
 8008806:	f002 ff8d 	bl	800b724 <memcpy>
		while (!complete) {
 800880a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800880e:	2b00      	cmp	r3, #0
 8008810:	f43f af74 	beq.w	80086fc <VL53L0X_perform_ref_spad_management+0x2b8>
 8008814:	e002      	b.n	800881c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008816:	bf00      	nop
 8008818:	e000      	b.n	800881c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800881a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800881c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008820:	2b00      	cmp	r3, #0
 8008822:	d115      	bne.n	8008850 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008828:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008830:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	b2da      	uxtb	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008850:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008854:	4618      	mov	r0, r3
 8008856:	375c      	adds	r7, #92	; 0x5c
 8008858:	46bd      	mov	sp, r7
 800885a:	bd90      	pop	{r4, r7, pc}

0800885c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b093      	sub	sp, #76	; 0x4c
 8008860:	af06      	add	r7, sp, #24
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800886a:	2300      	movs	r3, #0
 800886c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008874:	23b4      	movs	r3, #180	; 0xb4
 8008876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800887a:	2306      	movs	r3, #6
 800887c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800887e:	232c      	movs	r3, #44	; 0x2c
 8008880:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008882:	2201      	movs	r2, #1
 8008884:	21ff      	movs	r1, #255	; 0xff
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f002 fdf2 	bl	800b470 <VL53L0X_WrByte>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008892:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008896:	2b00      	cmp	r3, #0
 8008898:	d107      	bne.n	80088aa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800889a:	2200      	movs	r2, #0
 800889c:	214f      	movs	r1, #79	; 0x4f
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f002 fde6 	bl	800b470 <VL53L0X_WrByte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80088aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d107      	bne.n	80088c2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80088b2:	222c      	movs	r2, #44	; 0x2c
 80088b4:	214e      	movs	r1, #78	; 0x4e
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f002 fdda 	bl	800b470 <VL53L0X_WrByte>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80088c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d107      	bne.n	80088da <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80088ca:	2200      	movs	r2, #0
 80088cc:	21ff      	movs	r1, #255	; 0xff
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f002 fdce 	bl	800b470 <VL53L0X_WrByte>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80088da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80088e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088e6:	461a      	mov	r2, r3
 80088e8:	21b6      	movs	r1, #182	; 0xb6
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f002 fdc0 	bl	800b470 <VL53L0X_WrByte>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80088f6:	2300      	movs	r3, #0
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
 80088fa:	e009      	b.n	8008910 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	4413      	add	r3, r2
 8008902:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	3301      	adds	r3, #1
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
 8008910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	429a      	cmp	r2, r3
 8008916:	d3f1      	bcc.n	80088fc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008918:	79fb      	ldrb	r3, [r7, #7]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d011      	beq.n	8008942 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800891e:	e002      	b.n	8008926 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	3301      	adds	r3, #1
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008926:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	4413      	add	r3, r2
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff fc2a 	bl	8008188 <is_aperture>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <VL53L0X_set_reference_spads+0xe6>
 800893a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	429a      	cmp	r2, r3
 8008940:	d3ee      	bcc.n	8008920 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800894e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008952:	79f9      	ldrb	r1, [r7, #7]
 8008954:	f107 0214 	add.w	r2, r7, #20
 8008958:	9204      	str	r2, [sp, #16]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	9203      	str	r2, [sp, #12]
 800895e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008960:	9202      	str	r2, [sp, #8]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4623      	mov	r3, r4
 800896a:	4602      	mov	r2, r0
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff fc83 	bl	8008278 <enable_ref_spads>
 8008972:	4603      	mov	r3, r0
 8008974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10c      	bne.n	800899a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	b2da      	uxtb	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	79fa      	ldrb	r2, [r7, #7]
 8008996:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800899a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3734      	adds	r7, #52	; 0x34
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd90      	pop	{r4, r7, pc}

080089a6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80089b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	461a      	mov	r2, r3
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f002 fd50 	bl	800b470 <VL53L0X_WrByte>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80089d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f9bf 	bl	8008d60 <VL53L0X_measurement_poll_for_completion>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80089e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d105      	bne.n	80089fa <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80089ee:	2100      	movs	r1, #0
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fab5 	bl	8007f60 <VL53L0X_ClearInterruptMask>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80089fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f002 fd32 	bl	800b470 <VL53L0X_WrByte>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	4608      	mov	r0, r1
 8008a26:	4611      	mov	r1, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	70fb      	strb	r3, [r7, #3]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70bb      	strb	r3, [r7, #2]
 8008a32:	4613      	mov	r3, r2
 8008a34:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a3e:	2201      	movs	r2, #1
 8008a40:	21ff      	movs	r1, #255	; 0xff
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f002 fd14 	bl	800b470 <VL53L0X_WrByte>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f002 fd0a 	bl	800b470 <VL53L0X_WrByte>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a66:	2200      	movs	r2, #0
 8008a68:	21ff      	movs	r1, #255	; 0xff
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f002 fd00 	bl	800b470 <VL53L0X_WrByte>
 8008a70:	4603      	mov	r3, r0
 8008a72:	461a      	mov	r2, r3
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01e      	beq.n	8008abe <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	21cb      	movs	r1, #203	; 0xcb
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f002 fd71 	bl	800b574 <VL53L0X_RdByte>
 8008a92:	4603      	mov	r3, r0
 8008a94:	461a      	mov	r2, r3
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d02a      	beq.n	8008afa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008aa4:	f107 030e 	add.w	r3, r7, #14
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	21ee      	movs	r1, #238	; 0xee
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 fd61 	bl	800b574 <VL53L0X_RdByte>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	73fb      	strb	r3, [r7, #15]
 8008abc:	e01d      	b.n	8008afa <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008ac6:	78bb      	ldrb	r3, [r7, #2]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	21cb      	movs	r1, #203	; 0xcb
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f002 fccf 	bl	800b470 <VL53L0X_WrByte>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008adc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008ae4:	787b      	ldrb	r3, [r7, #1]
 8008ae6:	2280      	movs	r2, #128	; 0x80
 8008ae8:	21ee      	movs	r1, #238	; 0xee
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f002 fd0e 	bl	800b50c <VL53L0X_UpdateByte>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008afa:	2201      	movs	r2, #1
 8008afc:	21ff      	movs	r1, #255	; 0xff
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f002 fcb6 	bl	800b470 <VL53L0X_WrByte>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008b0e:	2201      	movs	r2, #1
 8008b10:	2100      	movs	r1, #0
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f002 fcac 	bl	800b470 <VL53L0X_WrByte>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008b22:	2200      	movs	r2, #0
 8008b24:	21ff      	movs	r1, #255	; 0xff
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f002 fca2 	bl	800b470 <VL53L0X_WrByte>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	f023 0310 	bic.w	r3, r3, #16
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	701a      	strb	r2, [r3, #0]

	return Status;
 8008b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b08a      	sub	sp, #40	; 0x28
 8008b52:	af04      	add	r7, sp, #16
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	71fb      	strb	r3, [r7, #7]
 8008b60:	4613      	mov	r3, r2
 8008b62:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008b78:	79bb      	ldrb	r3, [r7, #6]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008b84:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008b86:	2201      	movs	r2, #1
 8008b88:	2101      	movs	r1, #1
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f002 fc70 	bl	800b470 <VL53L0X_WrByte>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008b9c:	2140      	movs	r1, #64	; 0x40
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff ff01 	bl	80089a6 <VL53L0X_perform_single_ref_calibration>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d115      	bne.n	8008bdc <VL53L0X_perform_vhv_calibration+0x8e>
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d112      	bne.n	8008bdc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008bb6:	7d39      	ldrb	r1, [r7, #20]
 8008bb8:	7d7a      	ldrb	r2, [r7, #21]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	9302      	str	r3, [sp, #8]
 8008bc2:	f107 0313 	add.w	r3, r7, #19
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	2101      	movs	r1, #1
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff ff23 	bl	8008a1c <VL53L0X_ref_calibration_io>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	75fb      	strb	r3, [r7, #23]
 8008bda:	e002      	b.n	8008be2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d112      	bne.n	8008c10 <VL53L0X_perform_vhv_calibration+0xc2>
 8008bea:	79bb      	ldrb	r3, [r7, #6]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00f      	beq.n	8008c10 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008bf0:	7dbb      	ldrb	r3, [r7, #22]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f002 fc3a 	bl	800b470 <VL53L0X_WrByte>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	7dba      	ldrb	r2, [r7, #22]
 8008c0c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08a      	sub	sp, #40	; 0x28
 8008c20:	af04      	add	r7, sp, #16
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4611      	mov	r1, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	71fb      	strb	r3, [r7, #7]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008c42:	79bb      	ldrb	r3, [r7, #6]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008c4e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008c50:	2202      	movs	r2, #2
 8008c52:	2101      	movs	r1, #1
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f002 fc0b 	bl	800b470 <VL53L0X_WrByte>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d105      	bne.n	8008c72 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008c66:	2100      	movs	r1, #0
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff fe9c 	bl	80089a6 <VL53L0X_perform_single_ref_calibration>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d115      	bne.n	8008ca6 <VL53L0X_perform_phase_calibration+0x8a>
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d112      	bne.n	8008ca6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008c80:	7d39      	ldrb	r1, [r7, #20]
 8008c82:	7d7a      	ldrb	r2, [r7, #21]
 8008c84:	2301      	movs	r3, #1
 8008c86:	9303      	str	r3, [sp, #12]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9302      	str	r3, [sp, #8]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	f107 0313 	add.w	r3, r7, #19
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	460b      	mov	r3, r1
 8008c98:	2101      	movs	r1, #1
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff febe 	bl	8008a1c <VL53L0X_ref_calibration_io>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75fb      	strb	r3, [r7, #23]
 8008ca4:	e002      	b.n	8008cac <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d112      	bne.n	8008cda <VL53L0X_perform_phase_calibration+0xbe>
 8008cb4:	79bb      	ldrb	r3, [r7, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00f      	beq.n	8008cda <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008cba:	7dbb      	ldrb	r3, [r7, #22]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f002 fbd5 	bl	800b470 <VL53L0X_WrByte>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d103      	bne.n	8008cda <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	7dba      	ldrb	r2, [r7, #22]
 8008cd6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
 8008cf2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008d02:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	2300      	movs	r3, #0
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff ff1f 	bl	8008b4e <VL53L0X_perform_vhv_calibration>
 8008d10:	4603      	mov	r3, r0
 8008d12:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d107      	bne.n	8008d2c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008d1c:	78fa      	ldrb	r2, [r7, #3]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff ff7a 	bl	8008c1c <VL53L0X_perform_phase_calibration>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10f      	bne.n	8008d54 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008d34:	7dbb      	ldrb	r3, [r7, #22]
 8008d36:	461a      	mov	r2, r3
 8008d38:	2101      	movs	r1, #1
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f002 fb98 	bl	800b470 <VL53L0X_WrByte>
 8008d40:	4603      	mov	r3, r0
 8008d42:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d103      	bne.n	8008d54 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	7dba      	ldrb	r2, [r7, #22]
 8008d50:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008d74:	f107 030f 	add.w	r3, r7, #15
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7fe fe02 	bl	8007984 <VL53L0X_GetMeasurementDataReady>
 8008d80:	4603      	mov	r3, r0
 8008d82:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d110      	bne.n	8008dae <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d00f      	beq.n	8008db2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3301      	adds	r3, #1
 8008d96:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d9e:	d302      	bcc.n	8008da6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008da0:	23f9      	movs	r3, #249	; 0xf9
 8008da2:	75fb      	strb	r3, [r7, #23]
			break;
 8008da4:	e006      	b.n	8008db4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f002 fc82 	bl	800b6b0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008dac:	e7e2      	b.n	8008d74 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008dae:	bf00      	nop
 8008db0:	e000      	b.n	8008db4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008db2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b085      	sub	sp, #20
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	4603      	mov	r3, r0
 8008dee:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	085b      	lsrs	r3, r3, #1
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e1c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008e1e:	e002      	b.n	8008e26 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	089b      	lsrs	r3, r3, #2
 8008e24:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d8f8      	bhi.n	8008e20 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008e2e:	e017      	b.n	8008e60 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4413      	add	r3, r2
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d30b      	bcc.n	8008e54 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4413      	add	r3, r2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	085b      	lsrs	r3, r3, #1
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	4413      	add	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e002      	b.n	8008e5a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	089b      	lsrs	r3, r3, #2
 8008e5e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e4      	bne.n	8008e30 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008e80:	2200      	movs	r2, #0
 8008e82:	2183      	movs	r1, #131	; 0x83
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f002 faf3 	bl	800b470 <VL53L0X_WrByte>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d11e      	bne.n	8008eda <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008ea0:	f107 030f 	add.w	r3, r7, #15
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	2183      	movs	r1, #131	; 0x83
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f002 fb63 	bl	800b574 <VL53L0X_RdByte>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <VL53L0X_device_read_strobe+0x5a>
 8008eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d106      	bne.n	8008ece <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008ecc:	d3e8      	bcc.n	8008ea0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008ed4:	d301      	bcc.n	8008eda <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008ed6:	23f9      	movs	r3, #249	; 0xf9
 8008ed8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008eda:	2201      	movs	r2, #1
 8008edc:	2183      	movs	r1, #131	; 0x83
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f002 fac6 	bl	800b470 <VL53L0X_WrByte>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008eee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b098      	sub	sp, #96	; 0x60
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008f2a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008f2e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008f42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008f46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f4a:	2b07      	cmp	r3, #7
 8008f4c:	f000 8408 	beq.w	8009760 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008f50:	2201      	movs	r2, #1
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f002 fa8b 	bl	800b470 <VL53L0X_WrByte>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f68:	2201      	movs	r2, #1
 8008f6a:	21ff      	movs	r1, #255	; 0xff
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f002 fa7f 	bl	800b470 <VL53L0X_WrByte>
 8008f72:	4603      	mov	r3, r0
 8008f74:	461a      	mov	r2, r3
 8008f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008f80:	2200      	movs	r2, #0
 8008f82:	2100      	movs	r1, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f002 fa73 	bl	800b470 <VL53L0X_WrByte>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008f98:	2206      	movs	r2, #6
 8008f9a:	21ff      	movs	r1, #255	; 0xff
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f002 fa67 	bl	800b470 <VL53L0X_WrByte>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008fb0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2183      	movs	r1, #131	; 0x83
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f002 fadb 	bl	800b574 <VL53L0X_RdByte>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008fd0:	f043 0304 	orr.w	r3, r3, #4
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2183      	movs	r1, #131	; 0x83
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f002 fa48 	bl	800b470 <VL53L0X_WrByte>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008fee:	2207      	movs	r2, #7
 8008ff0:	21ff      	movs	r1, #255	; 0xff
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f002 fa3c 	bl	800b470 <VL53L0X_WrByte>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009000:	4313      	orrs	r3, r2
 8009002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009006:	2201      	movs	r2, #1
 8009008:	2181      	movs	r1, #129	; 0x81
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f002 fa30 	bl	800b470 <VL53L0X_WrByte>
 8009010:	4603      	mov	r3, r0
 8009012:	461a      	mov	r2, r3
 8009014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009018:	4313      	orrs	r3, r2
 800901a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f002 fb46 	bl	800b6b0 <VL53L0X_PollingDelay>
 8009024:	4603      	mov	r3, r0
 8009026:	461a      	mov	r2, r3
 8009028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800902c:	4313      	orrs	r3, r2
 800902e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009032:	2201      	movs	r2, #1
 8009034:	2180      	movs	r1, #128	; 0x80
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f002 fa1a 	bl	800b470 <VL53L0X_WrByte>
 800903c:	4603      	mov	r3, r0
 800903e:	461a      	mov	r2, r3
 8009040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009044:	4313      	orrs	r3, r2
 8009046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8098 	beq.w	8009186 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009056:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800905a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 8091 	bne.w	8009186 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009064:	226b      	movs	r2, #107	; 0x6b
 8009066:	2194      	movs	r1, #148	; 0x94
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f002 fa01 	bl	800b470 <VL53L0X_WrByte>
 800906e:	4603      	mov	r3, r0
 8009070:	461a      	mov	r2, r3
 8009072:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009076:	4313      	orrs	r3, r2
 8009078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff fef9 	bl	8008e74 <VL53L0X_device_read_strobe>
 8009082:	4603      	mov	r3, r0
 8009084:	461a      	mov	r2, r3
 8009086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800908a:	4313      	orrs	r3, r2
 800908c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009094:	461a      	mov	r2, r3
 8009096:	2190      	movs	r1, #144	; 0x90
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f002 facd 	bl	800b638 <VL53L0X_RdDWord>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a6:	4313      	orrs	r3, r2
 80090a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	0a1b      	lsrs	r3, r3, #8
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	0bdb      	lsrs	r3, r3, #15
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80090c8:	2224      	movs	r2, #36	; 0x24
 80090ca:	2194      	movs	r1, #148	; 0x94
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f002 f9cf 	bl	800b470 <VL53L0X_WrByte>
 80090d2:	4603      	mov	r3, r0
 80090d4:	461a      	mov	r2, r3
 80090d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090da:	4313      	orrs	r3, r2
 80090dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff fec7 	bl	8008e74 <VL53L0X_device_read_strobe>
 80090e6:	4603      	mov	r3, r0
 80090e8:	461a      	mov	r2, r3
 80090ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ee:	4313      	orrs	r3, r2
 80090f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80090f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090f8:	461a      	mov	r2, r3
 80090fa:	2190      	movs	r1, #144	; 0x90
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f002 fa9b 	bl	800b638 <VL53L0X_RdDWord>
 8009102:	4603      	mov	r3, r0
 8009104:	461a      	mov	r2, r3
 8009106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800910a:	4313      	orrs	r3, r2
 800910c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	0e1b      	lsrs	r3, r3, #24
 8009114:	b2db      	uxtb	r3, r3
 8009116:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911a:	0c1b      	lsrs	r3, r3, #16
 800911c:	b2db      	uxtb	r3, r3
 800911e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	b2db      	uxtb	r3, r3
 8009126:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912a:	b2db      	uxtb	r3, r3
 800912c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800912e:	2225      	movs	r2, #37	; 0x25
 8009130:	2194      	movs	r1, #148	; 0x94
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f002 f99c 	bl	800b470 <VL53L0X_WrByte>
 8009138:	4603      	mov	r3, r0
 800913a:	461a      	mov	r2, r3
 800913c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009140:	4313      	orrs	r3, r2
 8009142:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff fe94 	bl	8008e74 <VL53L0X_device_read_strobe>
 800914c:	4603      	mov	r3, r0
 800914e:	461a      	mov	r2, r3
 8009150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009154:	4313      	orrs	r3, r2
 8009156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800915a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800915e:	461a      	mov	r2, r3
 8009160:	2190      	movs	r1, #144	; 0x90
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f002 fa68 	bl	800b638 <VL53L0X_RdDWord>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009170:	4313      	orrs	r3, r2
 8009172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	0e1b      	lsrs	r3, r3, #24
 800917a:	b2db      	uxtb	r3, r3
 800917c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	0c1b      	lsrs	r3, r3, #16
 8009182:	b2db      	uxtb	r3, r3
 8009184:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8189 	beq.w	80094a4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009192:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009196:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800919a:	2b00      	cmp	r3, #0
 800919c:	f040 8182 	bne.w	80094a4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80091a0:	2202      	movs	r2, #2
 80091a2:	2194      	movs	r1, #148	; 0x94
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f002 f963 	bl	800b470 <VL53L0X_WrByte>
 80091aa:	4603      	mov	r3, r0
 80091ac:	461a      	mov	r2, r3
 80091ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b2:	4313      	orrs	r3, r2
 80091b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fe5b 	bl	8008e74 <VL53L0X_device_read_strobe>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c6:	4313      	orrs	r3, r2
 80091c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80091cc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80091d0:	461a      	mov	r2, r3
 80091d2:	2190      	movs	r1, #144	; 0x90
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f002 f9cd 	bl	800b574 <VL53L0X_RdByte>
 80091da:	4603      	mov	r3, r0
 80091dc:	461a      	mov	r2, r3
 80091de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80091e8:	227b      	movs	r2, #123	; 0x7b
 80091ea:	2194      	movs	r1, #148	; 0x94
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f002 f93f 	bl	800b470 <VL53L0X_WrByte>
 80091f2:	4603      	mov	r3, r0
 80091f4:	461a      	mov	r2, r3
 80091f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff fe37 	bl	8008e74 <VL53L0X_device_read_strobe>
 8009206:	4603      	mov	r3, r0
 8009208:	461a      	mov	r2, r3
 800920a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800920e:	4313      	orrs	r3, r2
 8009210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009214:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009218:	461a      	mov	r2, r3
 800921a:	2190      	movs	r1, #144	; 0x90
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f002 f9a9 	bl	800b574 <VL53L0X_RdByte>
 8009222:	4603      	mov	r3, r0
 8009224:	461a      	mov	r2, r3
 8009226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800922a:	4313      	orrs	r3, r2
 800922c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009230:	2277      	movs	r2, #119	; 0x77
 8009232:	2194      	movs	r1, #148	; 0x94
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f002 f91b 	bl	800b470 <VL53L0X_WrByte>
 800923a:	4603      	mov	r3, r0
 800923c:	461a      	mov	r2, r3
 800923e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009242:	4313      	orrs	r3, r2
 8009244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff fe13 	bl	8008e74 <VL53L0X_device_read_strobe>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009256:	4313      	orrs	r3, r2
 8009258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800925c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009260:	461a      	mov	r2, r3
 8009262:	2190      	movs	r1, #144	; 0x90
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f002 f9e7 	bl	800b638 <VL53L0X_RdDWord>
 800926a:	4603      	mov	r3, r0
 800926c:	461a      	mov	r2, r3
 800926e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009272:	4313      	orrs	r3, r2
 8009274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	0e5b      	lsrs	r3, r3, #25
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009282:	b2db      	uxtb	r3, r3
 8009284:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	0c9b      	lsrs	r3, r3, #18
 800928a:	b2db      	uxtb	r3, r3
 800928c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009290:	b2db      	uxtb	r3, r3
 8009292:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	0adb      	lsrs	r3, r3, #11
 8009298:	b2db      	uxtb	r3, r3
 800929a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	091b      	lsrs	r3, r3, #4
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80092c2:	2278      	movs	r2, #120	; 0x78
 80092c4:	2194      	movs	r1, #148	; 0x94
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f002 f8d2 	bl	800b470 <VL53L0X_WrByte>
 80092cc:	4603      	mov	r3, r0
 80092ce:	461a      	mov	r2, r3
 80092d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff fdca 	bl	8008e74 <VL53L0X_device_read_strobe>
 80092e0:	4603      	mov	r3, r0
 80092e2:	461a      	mov	r2, r3
 80092e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80092ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092f2:	461a      	mov	r2, r3
 80092f4:	2190      	movs	r1, #144	; 0x90
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f002 f99e 	bl	800b638 <VL53L0X_RdDWord>
 80092fc:	4603      	mov	r3, r0
 80092fe:	461a      	mov	r2, r3
 8009300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009304:	4313      	orrs	r3, r2
 8009306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	0f5b      	lsrs	r3, r3, #29
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009314:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009316:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800931a:	4413      	add	r3, r2
 800931c:	b2db      	uxtb	r3, r3
 800931e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	0d9b      	lsrs	r3, r3, #22
 8009324:	b2db      	uxtb	r3, r3
 8009326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800932a:	b2db      	uxtb	r3, r3
 800932c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	0bdb      	lsrs	r3, r3, #15
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009338:	b2db      	uxtb	r3, r3
 800933a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009346:	b2db      	uxtb	r3, r3
 8009348:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	085b      	lsrs	r3, r3, #1
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009354:	b2db      	uxtb	r3, r3
 8009356:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	b2db      	uxtb	r3, r3
 800935c:	019b      	lsls	r3, r3, #6
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009364:	b2db      	uxtb	r3, r3
 8009366:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800936a:	2279      	movs	r2, #121	; 0x79
 800936c:	2194      	movs	r1, #148	; 0x94
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f002 f87e 	bl	800b470 <VL53L0X_WrByte>
 8009374:	4603      	mov	r3, r0
 8009376:	461a      	mov	r2, r3
 8009378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800937c:	4313      	orrs	r3, r2
 800937e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff fd76 	bl	8008e74 <VL53L0X_device_read_strobe>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009390:	4313      	orrs	r3, r2
 8009392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800939a:	461a      	mov	r2, r3
 800939c:	2190      	movs	r1, #144	; 0x90
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f002 f94a 	bl	800b638 <VL53L0X_RdDWord>
 80093a4:	4603      	mov	r3, r0
 80093a6:	461a      	mov	r2, r3
 80093a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093ac:	4313      	orrs	r3, r2
 80093ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	0e9b      	lsrs	r3, r3, #26
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093bc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80093be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093c2:	4413      	add	r3, r2
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	0cdb      	lsrs	r3, r3, #19
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	0b1b      	lsrs	r3, r3, #12
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	095b      	lsrs	r3, r3, #5
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009404:	227a      	movs	r2, #122	; 0x7a
 8009406:	2194      	movs	r1, #148	; 0x94
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f002 f831 	bl	800b470 <VL53L0X_WrByte>
 800940e:	4603      	mov	r3, r0
 8009410:	461a      	mov	r2, r3
 8009412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009416:	4313      	orrs	r3, r2
 8009418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fd29 	bl	8008e74 <VL53L0X_device_read_strobe>
 8009422:	4603      	mov	r3, r0
 8009424:	461a      	mov	r2, r3
 8009426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800942a:	4313      	orrs	r3, r2
 800942c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009434:	461a      	mov	r2, r3
 8009436:	2190      	movs	r1, #144	; 0x90
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f002 f8fd 	bl	800b638 <VL53L0X_RdDWord>
 800943e:	4603      	mov	r3, r0
 8009440:	461a      	mov	r2, r3
 8009442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009446:	4313      	orrs	r3, r2
 8009448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	0f9b      	lsrs	r3, r3, #30
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009458:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800945c:	4413      	add	r3, r2
 800945e:	b2db      	uxtb	r3, r3
 8009460:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	0ddb      	lsrs	r3, r3, #23
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946c:	b2db      	uxtb	r3, r3
 800946e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947a:	b2db      	uxtb	r3, r3
 800947c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	0a5b      	lsrs	r3, r3, #9
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	089b      	lsrs	r3, r3, #2
 8009492:	b2db      	uxtb	r3, r3
 8009494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800949e:	2300      	movs	r3, #0
 80094a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 80f1 	beq.w	8009692 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80094b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094b4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f040 80ea 	bne.w	8009692 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80094be:	227b      	movs	r2, #123	; 0x7b
 80094c0:	2194      	movs	r1, #148	; 0x94
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 ffd4 	bl	800b470 <VL53L0X_WrByte>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff fccc 	bl	8008e74 <VL53L0X_device_read_strobe>
 80094dc:	4603      	mov	r3, r0
 80094de:	461a      	mov	r2, r3
 80094e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80094ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094ee:	461a      	mov	r2, r3
 80094f0:	2190      	movs	r1, #144	; 0x90
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f002 f8a0 	bl	800b638 <VL53L0X_RdDWord>
 80094f8:	4603      	mov	r3, r0
 80094fa:	461a      	mov	r2, r3
 80094fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009500:	4313      	orrs	r3, r2
 8009502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009506:	227c      	movs	r2, #124	; 0x7c
 8009508:	2194      	movs	r1, #148	; 0x94
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 ffb0 	bl	800b470 <VL53L0X_WrByte>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009518:	4313      	orrs	r3, r2
 800951a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7ff fca8 	bl	8008e74 <VL53L0X_device_read_strobe>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800952c:	4313      	orrs	r3, r2
 800952e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009536:	461a      	mov	r2, r3
 8009538:	2190      	movs	r1, #144	; 0x90
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f002 f87c 	bl	800b638 <VL53L0X_RdDWord>
 8009540:	4603      	mov	r3, r0
 8009542:	461a      	mov	r2, r3
 8009544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009548:	4313      	orrs	r3, r2
 800954a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800954e:	2273      	movs	r2, #115	; 0x73
 8009550:	2194      	movs	r1, #148	; 0x94
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 ff8c 	bl	800b470 <VL53L0X_WrByte>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009560:	4313      	orrs	r3, r2
 8009562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fc84 	bl	8008e74 <VL53L0X_device_read_strobe>
 800956c:	4603      	mov	r3, r0
 800956e:	461a      	mov	r2, r3
 8009570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009574:	4313      	orrs	r3, r2
 8009576:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800957a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800957e:	461a      	mov	r2, r3
 8009580:	2190      	movs	r1, #144	; 0x90
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f002 f858 	bl	800b638 <VL53L0X_RdDWord>
 8009588:	4603      	mov	r3, r0
 800958a:	461a      	mov	r2, r3
 800958c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009590:	4313      	orrs	r3, r2
 8009592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800959a:	b29b      	uxth	r3, r3
 800959c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800959e:	2274      	movs	r2, #116	; 0x74
 80095a0:	2194      	movs	r1, #148	; 0x94
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 ff64 	bl	800b470 <VL53L0X_WrByte>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff fc5c 	bl	8008e74 <VL53L0X_device_read_strobe>
 80095bc:	4603      	mov	r3, r0
 80095be:	461a      	mov	r2, r3
 80095c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80095ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095ce:	461a      	mov	r2, r3
 80095d0:	2190      	movs	r1, #144	; 0x90
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f002 f830 	bl	800b638 <VL53L0X_RdDWord>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095e0:	4313      	orrs	r3, r2
 80095e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80095ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095ec:	4313      	orrs	r3, r2
 80095ee:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80095f0:	2275      	movs	r2, #117	; 0x75
 80095f2:	2194      	movs	r1, #148	; 0x94
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 ff3b 	bl	800b470 <VL53L0X_WrByte>
 80095fa:	4603      	mov	r3, r0
 80095fc:	461a      	mov	r2, r3
 80095fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009602:	4313      	orrs	r3, r2
 8009604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff fc33 	bl	8008e74 <VL53L0X_device_read_strobe>
 800960e:	4603      	mov	r3, r0
 8009610:	461a      	mov	r2, r3
 8009612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009616:	4313      	orrs	r3, r2
 8009618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800961c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009620:	461a      	mov	r2, r3
 8009622:	2190      	movs	r1, #144	; 0x90
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f002 f807 	bl	800b638 <VL53L0X_RdDWord>
 800962a:	4603      	mov	r3, r0
 800962c:	461a      	mov	r2, r3
 800962e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009632:	4313      	orrs	r3, r2
 8009634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800963c:	b29b      	uxth	r3, r3
 800963e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009640:	2276      	movs	r2, #118	; 0x76
 8009642:	2194      	movs	r1, #148	; 0x94
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 ff13 	bl	800b470 <VL53L0X_WrByte>
 800964a:	4603      	mov	r3, r0
 800964c:	461a      	mov	r2, r3
 800964e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009652:	4313      	orrs	r3, r2
 8009654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fc0b 	bl	8008e74 <VL53L0X_device_read_strobe>
 800965e:	4603      	mov	r3, r0
 8009660:	461a      	mov	r2, r3
 8009662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009666:	4313      	orrs	r3, r2
 8009668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800966c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009670:	461a      	mov	r2, r3
 8009672:	2190      	movs	r1, #144	; 0x90
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f001 ffdf 	bl	800b638 <VL53L0X_RdDWord>
 800967a:	4603      	mov	r3, r0
 800967c:	461a      	mov	r2, r3
 800967e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009682:	4313      	orrs	r3, r2
 8009684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800968c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800968e:	4313      	orrs	r3, r2
 8009690:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009692:	2200      	movs	r2, #0
 8009694:	2181      	movs	r1, #129	; 0x81
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 feea 	bl	800b470 <VL53L0X_WrByte>
 800969c:	4603      	mov	r3, r0
 800969e:	461a      	mov	r2, r3
 80096a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096a4:	4313      	orrs	r3, r2
 80096a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80096aa:	2206      	movs	r2, #6
 80096ac:	21ff      	movs	r1, #255	; 0xff
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fede 	bl	800b470 <VL53L0X_WrByte>
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096bc:	4313      	orrs	r3, r2
 80096be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80096c2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80096c6:	461a      	mov	r2, r3
 80096c8:	2183      	movs	r1, #131	; 0x83
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 ff52 	bl	800b574 <VL53L0X_RdByte>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096d8:	4313      	orrs	r3, r2
 80096da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80096de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096e2:	f023 0304 	bic.w	r3, r3, #4
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	2183      	movs	r1, #131	; 0x83
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 febf 	bl	800b470 <VL53L0X_WrByte>
 80096f2:	4603      	mov	r3, r0
 80096f4:	461a      	mov	r2, r3
 80096f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096fa:	4313      	orrs	r3, r2
 80096fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009700:	2201      	movs	r2, #1
 8009702:	21ff      	movs	r1, #255	; 0xff
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 feb3 	bl	800b470 <VL53L0X_WrByte>
 800970a:	4603      	mov	r3, r0
 800970c:	461a      	mov	r2, r3
 800970e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009712:	4313      	orrs	r3, r2
 8009714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009718:	2201      	movs	r2, #1
 800971a:	2100      	movs	r1, #0
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 fea7 	bl	800b470 <VL53L0X_WrByte>
 8009722:	4603      	mov	r3, r0
 8009724:	461a      	mov	r2, r3
 8009726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800972a:	4313      	orrs	r3, r2
 800972c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009730:	2200      	movs	r2, #0
 8009732:	21ff      	movs	r1, #255	; 0xff
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 fe9b 	bl	800b470 <VL53L0X_WrByte>
 800973a:	4603      	mov	r3, r0
 800973c:	461a      	mov	r2, r3
 800973e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009742:	4313      	orrs	r3, r2
 8009744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009748:	2200      	movs	r2, #0
 800974a:	2180      	movs	r1, #128	; 0x80
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 fe8f 	bl	800b470 <VL53L0X_WrByte>
 8009752:	4603      	mov	r3, r0
 8009754:	461a      	mov	r2, r3
 8009756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800975a:	4313      	orrs	r3, r2
 800975c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009760:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009764:	2b00      	cmp	r3, #0
 8009766:	f040 808f 	bne.w	8009888 <VL53L0X_get_info_from_device+0x98e>
 800976a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800976e:	2b07      	cmp	r3, #7
 8009770:	f000 808a 	beq.w	8009888 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d024      	beq.n	80097c8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800977e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009782:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009786:	2b00      	cmp	r3, #0
 8009788:	d11e      	bne.n	80097c8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009790:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800979a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800979e:	2300      	movs	r3, #0
 80097a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a2:	e00e      	b.n	80097c2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80097a4:	f107 0208 	add.w	r2, r7, #8
 80097a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097aa:	4413      	add	r3, r2
 80097ac:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80097b8:	460a      	mov	r2, r1
 80097ba:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80097bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097be:	3301      	adds	r3, #1
 80097c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c4:	2b05      	cmp	r3, #5
 80097c6:	dded      	ble.n	80097a4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d018      	beq.n	8009804 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80097d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80097d6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d112      	bne.n	8009804 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097e8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	33f3      	adds	r3, #243	; 0xf3
 80097f6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80097f8:	f107 0310 	add.w	r3, r7, #16
 80097fc:	4619      	mov	r1, r3
 80097fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009800:	f001 ffc6 	bl	800b790 <strcpy>

		}

		if (((option & 4) == 4) &&
 8009804:	78fb      	ldrb	r3, [r7, #3]
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	d030      	beq.n	8009870 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800980e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009812:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009816:	2b00      	cmp	r3, #0
 8009818:	d12a      	bne.n	8009870 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800981a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800982a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982c:	025b      	lsls	r3, r3, #9
 800982e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009834:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800983e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009840:	2b00      	cmp	r3, #0
 8009842:	d011      	beq.n	8009868 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009844:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800984c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009852:	fb02 f303 	mul.w	r3, r2, r3
 8009856:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009858:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800985c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009860:	425b      	negs	r3, r3
 8009862:	b29b      	uxth	r3, r3
 8009864:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009868:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009870:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	4313      	orrs	r3, r2
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800987e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009888:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800988c:	4618      	mov	r0, r3
 800988e:	3760      	adds	r7, #96	; 0x60
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80098a0:	f240 6277 	movw	r2, #1655	; 0x677
 80098a4:	f04f 0300 	mov.w	r3, #0
 80098a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80098ac:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80098b0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	fb02 f303 	mul.w	r3, r2, r3
 80098c0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80098c2:	68bb      	ldr	r3, [r7, #8]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d017      	beq.n	800991a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80098f0:	e005      	b.n	80098fe <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	085b      	lsrs	r3, r3, #1
 80098f6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	3301      	adds	r3, #1
 80098fc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f4      	bne.n	80098f2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009908:	89fb      	ldrh	r3, [r7, #14]
 800990a:	021b      	lsls	r3, r3, #8
 800990c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	b29b      	uxth	r3, r3
 8009912:	b2db      	uxtb	r3, r3
 8009914:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009916:	4413      	add	r3, r2
 8009918:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800991a:	8afb      	ldrh	r3, [r7, #22]

}
 800991c:	4618      	mov	r0, r3
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009936:	88fb      	ldrh	r3, [r7, #6]
 8009938:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	0a12      	lsrs	r2, r2, #8
 800993e:	b292      	uxth	r2, r2
 8009940:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009942:	3301      	adds	r3, #1
 8009944:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009946:	68fb      	ldr	r3, [r7, #12]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	4619      	mov	r1, r3
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7ff ff92 	bl	8009894 <VL53L0X_calc_macro_period_ps>
 8009970:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009978:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <VL53L0X_calc_timeout_mclks+0x50>)
 800997a:	fba2 2303 	umull	r2, r3, r2, r3
 800997e:	099b      	lsrs	r3, r3, #6
 8009980:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009988:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	085b      	lsrs	r3, r3, #1
 8009990:	441a      	add	r2, r3
	timeout_period_mclks =
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800999a:	69fb      	ldr	r3, [r7, #28]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3720      	adds	r7, #32
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	10624dd3 	.word	0x10624dd3

080099a8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	807b      	strh	r3, [r7, #2]
 80099b4:	4613      	mov	r3, r2
 80099b6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80099bc:	787b      	ldrb	r3, [r7, #1]
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff ff67 	bl	8009894 <VL53L0X_calc_macro_period_ps>
 80099c6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80099ce:	4a0a      	ldr	r2, [pc, #40]	; (80099f8 <VL53L0X_calc_timeout_us+0x50>)
 80099d0:	fba2 2303 	umull	r2, r3, r2, r3
 80099d4:	099b      	lsrs	r3, r3, #6
 80099d6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80099d8:	887b      	ldrh	r3, [r7, #2]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	fb02 f303 	mul.w	r3, r2, r3
 80099e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80099e4:	4a04      	ldr	r2, [pc, #16]	; (80099f8 <VL53L0X_calc_timeout_us+0x50>)
 80099e6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ea:	099b      	lsrs	r3, r3, #6
 80099ec:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80099ee:	697b      	ldr	r3, [r7, #20]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	10624dd3 	.word	0x10624dd3

080099fc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08c      	sub	sp, #48	; 0x30
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	460b      	mov	r3, r1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009a22:	7afb      	ldrb	r3, [r7, #11]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <get_sequence_step_timeout+0x38>
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d002      	beq.n	8009a34 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009a2e:	7afb      	ldrb	r3, [r7, #11]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d128      	bne.n	8009a86 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a38:	461a      	mov	r2, r3
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7fd fa7d 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009a48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d109      	bne.n	8009a64 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009a50:	f107 0320 	add.w	r3, r7, #32
 8009a54:	461a      	mov	r2, r3
 8009a56:	2146      	movs	r1, #70	; 0x46
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f001 fd8b 	bl	800b574 <VL53L0X_RdByte>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff ff5c 	bl	8009928 <VL53L0X_decode_timeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009a74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f7ff ff93 	bl	80099a8 <VL53L0X_calc_timeout_us>
 8009a82:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a84:	e092      	b.n	8009bac <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009a86:	7afb      	ldrb	r3, [r7, #11]
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d135      	bne.n	8009af8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a8c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a90:	461a      	mov	r2, r3
 8009a92:	2100      	movs	r1, #0
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7fd fa51 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009aa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f040 8081 	bne.w	8009bac <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009aaa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009aae:	461a      	mov	r2, r3
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f7fd fa42 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009abe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d109      	bne.n	8009ada <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009ac6:	f107 031e 	add.w	r3, r7, #30
 8009aca:	461a      	mov	r2, r3
 8009acc:	2151      	movs	r1, #81	; 0x51
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f001 fd7a 	bl	800b5c8 <VL53L0X_RdWord>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009ada:	8bfb      	ldrh	r3, [r7, #30]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7ff ff23 	bl	8009928 <VL53L0X_decode_timeout>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009ae6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009aea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009aec:	4619      	mov	r1, r3
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff ff5a 	bl	80099a8 <VL53L0X_calc_timeout_us>
 8009af4:	62b8      	str	r0, [r7, #40]	; 0x28
 8009af6:	e059      	b.n	8009bac <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d156      	bne.n	8009bac <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009afe:	f107 0314 	add.w	r3, r7, #20
 8009b02:	4619      	mov	r1, r3
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f7fd fb25 	bl	8007154 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01d      	beq.n	8009b50 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b14:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009b18:	461a      	mov	r2, r3
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7fd fa0d 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009b28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10f      	bne.n	8009b50 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009b30:	f107 031e 	add.w	r3, r7, #30
 8009b34:	461a      	mov	r2, r3
 8009b36:	2151      	movs	r1, #81	; 0x51
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f001 fd45 	bl	800b5c8 <VL53L0X_RdWord>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009b44:	8bfb      	ldrh	r3, [r7, #30]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff feee 	bl	8009928 <VL53L0X_decode_timeout>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009b50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d109      	bne.n	8009b6c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	2101      	movs	r1, #1
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7fd f9eb 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009b6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10f      	bne.n	8009b94 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009b74:	f107 031c 	add.w	r3, r7, #28
 8009b78:	461a      	mov	r2, r3
 8009b7a:	2171      	movs	r1, #113	; 0x71
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f001 fd23 	bl	800b5c8 <VL53L0X_RdWord>
 8009b82:	4603      	mov	r3, r0
 8009b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009b88:	8bbb      	ldrh	r3, [r7, #28]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff fecc 	bl	8009928 <VL53L0X_decode_timeout>
 8009b90:	4603      	mov	r3, r0
 8009b92:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009b94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009b9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff feff 	bl	80099a8 <VL53L0X_calc_timeout_us>
 8009baa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb0:	601a      	str	r2, [r3, #0]

	return Status;
 8009bb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3730      	adds	r7, #48	; 0x30
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b08a      	sub	sp, #40	; 0x28
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	60f8      	str	r0, [r7, #12]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	607a      	str	r2, [r7, #4]
 8009bca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <set_sequence_step_timeout+0x26>
 8009bd8:	7afb      	ldrb	r3, [r7, #11]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d002      	beq.n	8009be4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009bde:	7afb      	ldrb	r3, [r7, #11]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d138      	bne.n	8009c56 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009be4:	f107 031b 	add.w	r3, r7, #27
 8009be8:	461a      	mov	r2, r3
 8009bea:	2100      	movs	r1, #0
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7fd f9a5 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009bf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d11a      	bne.n	8009c36 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009c00:	7efb      	ldrb	r3, [r7, #27]
 8009c02:	461a      	mov	r2, r3
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f7ff fea4 	bl	8009954 <VL53L0X_calc_timeout_mclks>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009c10:	8bbb      	ldrh	r3, [r7, #28]
 8009c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c16:	d903      	bls.n	8009c20 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009c18:	23ff      	movs	r3, #255	; 0xff
 8009c1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c1e:	e004      	b.n	8009c2a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009c20:	8bbb      	ldrh	r3, [r7, #28]
 8009c22:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009c24:	3b01      	subs	r3, #1
 8009c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009c36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f040 80ab 	bne.w	8009d96 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009c40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c44:	461a      	mov	r2, r3
 8009c46:	2146      	movs	r1, #70	; 0x46
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f001 fc11 	bl	800b470 <VL53L0X_WrByte>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009c54:	e09f      	b.n	8009d96 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d135      	bne.n	8009cc8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009c5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11b      	bne.n	8009c9c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009c64:	f107 031b 	add.w	r3, r7, #27
 8009c68:	461a      	mov	r2, r3
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7fd f965 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009c78:	7efb      	ldrb	r3, [r7, #27]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff fe68 	bl	8009954 <VL53L0X_calc_timeout_mclks>
 8009c84:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009c86:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff fe20 	bl	80098d0 <VL53L0X_encode_timeout>
 8009c90:	4603      	mov	r3, r0
 8009c92:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009c94:	8b3a      	ldrh	r2, [r7, #24]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009c9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d108      	bne.n	8009cb6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009ca4:	8b3b      	ldrh	r3, [r7, #24]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	2151      	movs	r1, #81	; 0x51
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f001 fc04 	bl	800b4b8 <VL53L0X_WrWord>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009cb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d16b      	bne.n	8009d96 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009cc6:	e066      	b.n	8009d96 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d160      	bne.n	8009d90 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009cce:	f107 0310 	add.w	r3, r7, #16
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f7fd fa3d 	bl	8007154 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009cde:	7cfb      	ldrb	r3, [r7, #19]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d01d      	beq.n	8009d20 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ce4:	f107 031b 	add.w	r3, r7, #27
 8009ce8:	461a      	mov	r2, r3
 8009cea:	2100      	movs	r1, #0
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7fd f925 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10f      	bne.n	8009d20 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009d00:	f107 0318 	add.w	r3, r7, #24
 8009d04:	461a      	mov	r2, r3
 8009d06:	2151      	movs	r1, #81	; 0x51
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f001 fc5d 	bl	800b5c8 <VL53L0X_RdWord>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009d14:	8b3b      	ldrh	r3, [r7, #24]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff fe06 	bl	8009928 <VL53L0X_decode_timeout>
 8009d1c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009d20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d109      	bne.n	8009d3c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009d28:	f107 031b 	add.w	r3, r7, #27
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	2101      	movs	r1, #1
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f7fd f903 	bl	8006f3c <VL53L0X_GetVcselPulsePeriod>
 8009d36:	4603      	mov	r3, r0
 8009d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d128      	bne.n	8009d96 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009d44:	7efb      	ldrb	r3, [r7, #27]
 8009d46:	461a      	mov	r2, r3
 8009d48:	6879      	ldr	r1, [r7, #4]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f7ff fe02 	bl	8009954 <VL53L0X_calc_timeout_mclks>
 8009d50:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d54:	6a3a      	ldr	r2, [r7, #32]
 8009d56:	4413      	add	r3, r2
 8009d58:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009d5a:	6a38      	ldr	r0, [r7, #32]
 8009d5c:	f7ff fdb8 	bl	80098d0 <VL53L0X_encode_timeout>
 8009d60:	4603      	mov	r3, r0
 8009d62:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d108      	bne.n	8009d7e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009d6c:	8bfb      	ldrh	r3, [r7, #30]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	2171      	movs	r1, #113	; 0x71
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f001 fba0 	bl	800b4b8 <VL53L0X_WrWord>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009d7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d107      	bne.n	8009d96 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009d8e:	e002      	b.n	8009d96 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d90:	23fc      	movs	r3, #252	; 0xfc
 8009d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009d96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3728      	adds	r7, #40	; 0x28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b08a      	sub	sp, #40	; 0x28
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
 8009dae:	4613      	mov	r3, r2
 8009db0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009db8:	230c      	movs	r3, #12
 8009dba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009dbe:	2312      	movs	r3, #18
 8009dc0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009dca:	230e      	movs	r3, #14
 8009dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009dd4:	78bb      	ldrb	r3, [r7, #2]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009de0:	23fc      	movs	r3, #252	; 0xfc
 8009de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009de6:	e020      	b.n	8009e2a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10d      	bne.n	8009e0a <VL53L0X_set_vcsel_pulse_period+0x68>
 8009dee:	78ba      	ldrb	r2, [r7, #2]
 8009df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d304      	bcc.n	8009e02 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009df8:	78ba      	ldrb	r2, [r7, #2]
 8009dfa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d903      	bls.n	8009e0a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e02:	23fc      	movs	r3, #252	; 0xfc
 8009e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e08:	e00f      	b.n	8009e2a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009e0a:	78fb      	ldrb	r3, [r7, #3]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d10c      	bne.n	8009e2a <VL53L0X_set_vcsel_pulse_period+0x88>
 8009e10:	78ba      	ldrb	r2, [r7, #2]
 8009e12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d304      	bcc.n	8009e24 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009e1a:	78ba      	ldrb	r2, [r7, #2]
 8009e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d902      	bls.n	8009e2a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e24:	23fc      	movs	r3, #252	; 0xfc
 8009e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009e2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009e32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e36:	e239      	b.n	800a2ac <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d150      	bne.n	8009ee0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009e3e:	78bb      	ldrb	r3, [r7, #2]
 8009e40:	2b0c      	cmp	r3, #12
 8009e42:	d110      	bne.n	8009e66 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009e44:	2218      	movs	r2, #24
 8009e46:	2157      	movs	r1, #87	; 0x57
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fb11 	bl	800b470 <VL53L0X_WrByte>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009e54:	2208      	movs	r2, #8
 8009e56:	2156      	movs	r1, #86	; 0x56
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fb09 	bl	800b470 <VL53L0X_WrByte>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e64:	e17f      	b.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009e66:	78bb      	ldrb	r3, [r7, #2]
 8009e68:	2b0e      	cmp	r3, #14
 8009e6a:	d110      	bne.n	8009e8e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009e6c:	2230      	movs	r2, #48	; 0x30
 8009e6e:	2157      	movs	r1, #87	; 0x57
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 fafd 	bl	800b470 <VL53L0X_WrByte>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	2156      	movs	r1, #86	; 0x56
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 faf5 	bl	800b470 <VL53L0X_WrByte>
 8009e86:	4603      	mov	r3, r0
 8009e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e8c:	e16b      	b.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009e8e:	78bb      	ldrb	r3, [r7, #2]
 8009e90:	2b10      	cmp	r3, #16
 8009e92:	d110      	bne.n	8009eb6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009e94:	2240      	movs	r2, #64	; 0x40
 8009e96:	2157      	movs	r1, #87	; 0x57
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 fae9 	bl	800b470 <VL53L0X_WrByte>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009ea4:	2208      	movs	r2, #8
 8009ea6:	2156      	movs	r1, #86	; 0x56
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 fae1 	bl	800b470 <VL53L0X_WrByte>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009eb4:	e157      	b.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009eb6:	78bb      	ldrb	r3, [r7, #2]
 8009eb8:	2b12      	cmp	r3, #18
 8009eba:	f040 8154 	bne.w	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009ebe:	2250      	movs	r2, #80	; 0x50
 8009ec0:	2157      	movs	r1, #87	; 0x57
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 fad4 	bl	800b470 <VL53L0X_WrByte>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009ece:	2208      	movs	r2, #8
 8009ed0:	2156      	movs	r1, #86	; 0x56
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 facc 	bl	800b470 <VL53L0X_WrByte>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ede:	e142      	b.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	f040 813f 	bne.w	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009ee8:	78bb      	ldrb	r3, [r7, #2]
 8009eea:	2b08      	cmp	r3, #8
 8009eec:	d14c      	bne.n	8009f88 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009eee:	2210      	movs	r2, #16
 8009ef0:	2148      	movs	r1, #72	; 0x48
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f001 fabc 	bl	800b470 <VL53L0X_WrByte>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009efe:	2208      	movs	r2, #8
 8009f00:	2147      	movs	r1, #71	; 0x47
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fab4 	bl	800b470 <VL53L0X_WrByte>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009f0e:	2202      	movs	r2, #2
 8009f10:	2132      	movs	r1, #50	; 0x32
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 faac 	bl	800b470 <VL53L0X_WrByte>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f20:	4313      	orrs	r3, r2
 8009f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009f26:	220c      	movs	r2, #12
 8009f28:	2130      	movs	r1, #48	; 0x30
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 faa0 	bl	800b470 <VL53L0X_WrByte>
 8009f30:	4603      	mov	r3, r0
 8009f32:	461a      	mov	r2, r3
 8009f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009f3e:	2201      	movs	r2, #1
 8009f40:	21ff      	movs	r1, #255	; 0xff
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fa94 	bl	800b470 <VL53L0X_WrByte>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f50:	4313      	orrs	r3, r2
 8009f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009f56:	2230      	movs	r2, #48	; 0x30
 8009f58:	2130      	movs	r1, #48	; 0x30
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f001 fa88 	bl	800b470 <VL53L0X_WrByte>
 8009f60:	4603      	mov	r3, r0
 8009f62:	461a      	mov	r2, r3
 8009f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009f6e:	2200      	movs	r2, #0
 8009f70:	21ff      	movs	r1, #255	; 0xff
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fa7c 	bl	800b470 <VL53L0X_WrByte>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f80:	4313      	orrs	r3, r2
 8009f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f86:	e0ee      	b.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009f88:	78bb      	ldrb	r3, [r7, #2]
 8009f8a:	2b0a      	cmp	r3, #10
 8009f8c:	d14c      	bne.n	800a028 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009f8e:	2228      	movs	r2, #40	; 0x28
 8009f90:	2148      	movs	r1, #72	; 0x48
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f001 fa6c 	bl	800b470 <VL53L0X_WrByte>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	2147      	movs	r1, #71	; 0x47
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 fa64 	bl	800b470 <VL53L0X_WrByte>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009fae:	2203      	movs	r2, #3
 8009fb0:	2132      	movs	r1, #50	; 0x32
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 fa5c 	bl	800b470 <VL53L0X_WrByte>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009fc6:	2209      	movs	r2, #9
 8009fc8:	2130      	movs	r1, #48	; 0x30
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fa50 	bl	800b470 <VL53L0X_WrByte>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009fde:	2201      	movs	r2, #1
 8009fe0:	21ff      	movs	r1, #255	; 0xff
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 fa44 	bl	800b470 <VL53L0X_WrByte>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	461a      	mov	r2, r3
 8009fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	2130      	movs	r1, #48	; 0x30
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 fa38 	bl	800b470 <VL53L0X_WrByte>
 800a000:	4603      	mov	r3, r0
 800a002:	461a      	mov	r2, r3
 800a004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a008:	4313      	orrs	r3, r2
 800a00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a00e:	2200      	movs	r2, #0
 800a010:	21ff      	movs	r1, #255	; 0xff
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 fa2c 	bl	800b470 <VL53L0X_WrByte>
 800a018:	4603      	mov	r3, r0
 800a01a:	461a      	mov	r2, r3
 800a01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a020:	4313      	orrs	r3, r2
 800a022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a026:	e09e      	b.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a028:	78bb      	ldrb	r3, [r7, #2]
 800a02a:	2b0c      	cmp	r3, #12
 800a02c:	d14c      	bne.n	800a0c8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a02e:	2238      	movs	r2, #56	; 0x38
 800a030:	2148      	movs	r1, #72	; 0x48
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fa1c 	bl	800b470 <VL53L0X_WrByte>
 800a038:	4603      	mov	r3, r0
 800a03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a03e:	2208      	movs	r2, #8
 800a040:	2147      	movs	r1, #71	; 0x47
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fa14 	bl	800b470 <VL53L0X_WrByte>
 800a048:	4603      	mov	r3, r0
 800a04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a04e:	2203      	movs	r2, #3
 800a050:	2132      	movs	r1, #50	; 0x32
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f001 fa0c 	bl	800b470 <VL53L0X_WrByte>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a060:	4313      	orrs	r3, r2
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a066:	2208      	movs	r2, #8
 800a068:	2130      	movs	r1, #48	; 0x30
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f001 fa00 	bl	800b470 <VL53L0X_WrByte>
 800a070:	4603      	mov	r3, r0
 800a072:	461a      	mov	r2, r3
 800a074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a078:	4313      	orrs	r3, r2
 800a07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a07e:	2201      	movs	r2, #1
 800a080:	21ff      	movs	r1, #255	; 0xff
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 f9f4 	bl	800b470 <VL53L0X_WrByte>
 800a088:	4603      	mov	r3, r0
 800a08a:	461a      	mov	r2, r3
 800a08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a090:	4313      	orrs	r3, r2
 800a092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a096:	2220      	movs	r2, #32
 800a098:	2130      	movs	r1, #48	; 0x30
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 f9e8 	bl	800b470 <VL53L0X_WrByte>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	21ff      	movs	r1, #255	; 0xff
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f001 f9dc 	bl	800b470 <VL53L0X_WrByte>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0c6:	e04e      	b.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a0c8:	78bb      	ldrb	r3, [r7, #2]
 800a0ca:	2b0e      	cmp	r3, #14
 800a0cc:	d14b      	bne.n	800a166 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a0ce:	2248      	movs	r2, #72	; 0x48
 800a0d0:	2148      	movs	r1, #72	; 0x48
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 f9cc 	bl	800b470 <VL53L0X_WrByte>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a0de:	2208      	movs	r2, #8
 800a0e0:	2147      	movs	r1, #71	; 0x47
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 f9c4 	bl	800b470 <VL53L0X_WrByte>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	2132      	movs	r1, #50	; 0x32
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 f9bc 	bl	800b470 <VL53L0X_WrByte>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a100:	4313      	orrs	r3, r2
 800a102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a106:	2207      	movs	r2, #7
 800a108:	2130      	movs	r1, #48	; 0x30
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 f9b0 	bl	800b470 <VL53L0X_WrByte>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a118:	4313      	orrs	r3, r2
 800a11a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a11e:	2201      	movs	r2, #1
 800a120:	21ff      	movs	r1, #255	; 0xff
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 f9a4 	bl	800b470 <VL53L0X_WrByte>
 800a128:	4603      	mov	r3, r0
 800a12a:	461a      	mov	r2, r3
 800a12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a130:	4313      	orrs	r3, r2
 800a132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a136:	2220      	movs	r2, #32
 800a138:	2130      	movs	r1, #48	; 0x30
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f001 f998 	bl	800b470 <VL53L0X_WrByte>
 800a140:	4603      	mov	r3, r0
 800a142:	461a      	mov	r2, r3
 800a144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a148:	4313      	orrs	r3, r2
 800a14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a14e:	2200      	movs	r2, #0
 800a150:	21ff      	movs	r1, #255	; 0xff
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f001 f98c 	bl	800b470 <VL53L0X_WrByte>
 800a158:	4603      	mov	r3, r0
 800a15a:	461a      	mov	r2, r3
 800a15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a160:	4313      	orrs	r3, r2
 800a162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a166:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d17f      	bne.n	800a26e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a16e:	78bb      	ldrb	r3, [r7, #2]
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe fe38 	bl	8008de6 <VL53L0X_encode_vcsel_period>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a182:	2b01      	cmp	r3, #1
 800a184:	d045      	beq.n	800a212 <VL53L0X_set_vcsel_pulse_period+0x470>
 800a186:	e06e      	b.n	800a266 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a188:	f107 0314 	add.w	r3, r7, #20
 800a18c:	461a      	mov	r2, r3
 800a18e:	2103      	movs	r1, #3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fc33 	bl	80099fc <get_sequence_step_timeout>
 800a196:	4603      	mov	r3, r0
 800a198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a19c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d109      	bne.n	800a1b8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a1a4:	f107 0310 	add.w	r3, r7, #16
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff fc25 	bl	80099fc <get_sequence_step_timeout>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a1b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d109      	bne.n	800a1d4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a1c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	2150      	movs	r1, #80	; 0x50
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f001 f951 	bl	800b470 <VL53L0X_WrByte>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a1d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d108      	bne.n	800a1ee <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	2103      	movs	r1, #3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff fceb 	bl	8009bbe <set_sequence_step_timeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a1ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d108      	bne.n	800a208 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	2102      	movs	r1, #2
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff fcde 	bl	8009bbe <set_sequence_step_timeout>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	78ba      	ldrb	r2, [r7, #2]
 800a20c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a210:	e02e      	b.n	800a270 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a212:	f107 0318 	add.w	r3, r7, #24
 800a216:	461a      	mov	r2, r3
 800a218:	2104      	movs	r1, #4
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff fbee 	bl	80099fc <get_sequence_step_timeout>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a226:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d109      	bne.n	800a242 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a22e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a232:	461a      	mov	r2, r3
 800a234:	2170      	movs	r1, #112	; 0x70
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 f91a 	bl	800b470 <VL53L0X_WrByte>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a242:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a246:	2b00      	cmp	r3, #0
 800a248:	d108      	bne.n	800a25c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	461a      	mov	r2, r3
 800a24e:	2104      	movs	r1, #4
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fcb4 	bl	8009bbe <set_sequence_step_timeout>
 800a256:	4603      	mov	r3, r0
 800a258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	78ba      	ldrb	r2, [r7, #2]
 800a260:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a264:	e004      	b.n	800a270 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a266:	23fc      	movs	r3, #252	; 0xfc
 800a268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a26c:	e000      	b.n	800a270 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a26e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a270:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a27e:	69f9      	ldr	r1, [r7, #28]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7fc fe1d 	bl	8006ec0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a286:	4603      	mov	r3, r0
 800a288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a28c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a290:	2b00      	cmp	r3, #0
 800a292:	d109      	bne.n	800a2a8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a294:	f107 010f 	add.w	r1, r7, #15
 800a298:	2301      	movs	r3, #1
 800a29a:	2200      	movs	r2, #0
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7fe fcbd 	bl	8008c1c <VL53L0X_perform_phase_calibration>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a2a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3728      	adds	r7, #40	; 0x28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a2c6:	7afb      	ldrb	r3, [r7, #11]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d00a      	beq.n	800a2e6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a2d0:	e013      	b.n	800a2fa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a2d2:	f107 0316 	add.w	r3, r7, #22
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	2150      	movs	r1, #80	; 0x50
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f001 f94a 	bl	800b574 <VL53L0X_RdByte>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a2e4:	e00b      	b.n	800a2fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a2e6:	f107 0316 	add.w	r3, r7, #22
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	2170      	movs	r1, #112	; 0x70
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f001 f940 	bl	800b574 <VL53L0X_RdByte>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a2f8:	e001      	b.n	800a2fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2fa:	23fc      	movs	r3, #252	; 0xfc
 800a2fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d107      	bne.n	800a316 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a306:	7dbb      	ldrb	r3, [r7, #22]
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe fd59 	bl	8008dc0 <VL53L0X_decode_vcsel_period>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	701a      	strb	r2, [r3, #0]

	return Status;
 800a316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b092      	sub	sp, #72	; 0x48
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a332:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a336:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a338:	f240 7376 	movw	r3, #1910	; 0x776
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a33e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a342:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a344:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a348:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a34a:	f240 234e 	movw	r3, #590	; 0x24e
 800a34e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a350:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a356:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a35a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a35c:	f240 2326 	movw	r3, #550	; 0x226
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a366:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a36a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	429a      	cmp	r2, r3
 800a376:	d205      	bcs.n	800a384 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a378:	23fc      	movs	r3, #252	; 0xfc
 800a37a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a37e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a382:	e0aa      	b.n	800a4da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a390:	f107 0314 	add.w	r3, r7, #20
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7fc fedc 	bl	8007154 <VL53L0X_GetSequenceStepEnables>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a3a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d15b      	bne.n	800a462 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a3aa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d105      	bne.n	800a3bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a3b0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d052      	beq.n	800a462 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a3bc:	f107 0310 	add.w	r3, r7, #16
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	2102      	movs	r1, #2
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff fb19 	bl	80099fc <get_sequence_step_timeout>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a3d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a3d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a3dc:	e07d      	b.n	800a4da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a3de:	7d3b      	ldrb	r3, [r7, #20]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00f      	beq.n	800a404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a3e4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e8:	4413      	add	r3, r2
 800a3ea:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d204      	bcs.n	800a3fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a3f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	643b      	str	r3, [r7, #64]	; 0x40
 800a3fc:	e002      	b.n	800a404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3fe:	23fc      	movs	r3, #252	; 0xfc
 800a400:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a404:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a40c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a410:	e063      	b.n	800a4da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a412:	7dbb      	ldrb	r3, [r7, #22]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d011      	beq.n	800a43c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	4413      	add	r3, r2
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a426:	429a      	cmp	r2, r3
 800a428:	d204      	bcs.n	800a434 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a42a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	643b      	str	r3, [r7, #64]	; 0x40
 800a432:	e016      	b.n	800a462 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a434:	23fc      	movs	r3, #252	; 0xfc
 800a436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a43a:	e012      	b.n	800a462 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a43c:	7d7b      	ldrb	r3, [r7, #21]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a446:	4413      	add	r3, r2
 800a448:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a44a:	69fa      	ldr	r2, [r7, #28]
 800a44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a44e:	429a      	cmp	r2, r3
 800a450:	d204      	bcs.n	800a45c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	643b      	str	r3, [r7, #64]	; 0x40
 800a45a:	e002      	b.n	800a462 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a45c:	23fc      	movs	r3, #252	; 0xfc
 800a45e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a462:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a46a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a46e:	e034      	b.n	800a4da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d019      	beq.n	800a4aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a476:	f107 030c 	add.w	r3, r7, #12
 800a47a:	461a      	mov	r2, r3
 800a47c:	2103      	movs	r1, #3
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff fabc 	bl	80099fc <get_sequence_step_timeout>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a48e:	4413      	add	r3, r2
 800a490:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a496:	429a      	cmp	r2, r3
 800a498:	d204      	bcs.n	800a4a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a49a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a4a2:	e002      	b.n	800a4aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4a4:	23fc      	movs	r3, #252	; 0xfc
 800a4a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a4aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d111      	bne.n	800a4d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a4b2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00e      	beq.n	800a4d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a4b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a4c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4c2:	2104      	movs	r1, #4
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff fb7a 	bl	8009bbe <set_sequence_step_timeout>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a4d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3748      	adds	r7, #72	; 0x48
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b090      	sub	sp, #64	; 0x40
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a4f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a4f6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a4f8:	f240 7376 	movw	r3, #1910	; 0x776
 800a4fc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a4fe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a502:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a504:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a508:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a50a:	f240 234e 	movw	r3, #590	; 0x24e
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a510:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a516:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a51a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a51c:	f240 2326 	movw	r3, #550	; 0x226
 800a520:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a522:	2300      	movs	r3, #0
 800a524:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52a:	441a      	add	r2, r3
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a530:	f107 0318 	add.w	r3, r7, #24
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7fc fe0c 	bl	8007154 <VL53L0X_GetSequenceStepEnables>
 800a53c:	4603      	mov	r3, r0
 800a53e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a542:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a54a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a54e:	e075      	b.n	800a63c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a550:	7e3b      	ldrb	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d105      	bne.n	800a562 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a556:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a55c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d030      	beq.n	800a5c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a562:	f107 0310 	add.w	r3, r7, #16
 800a566:	461a      	mov	r2, r3
 800a568:	2102      	movs	r1, #2
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff fa46 	bl	80099fc <get_sequence_step_timeout>
 800a570:	4603      	mov	r3, r0
 800a572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a576:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d122      	bne.n	800a5c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a57e:	7e3b      	ldrb	r3, [r7, #24]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d007      	beq.n	800a594 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a588:	6939      	ldr	r1, [r7, #16]
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a58e:	441a      	add	r2, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a594:	7ebb      	ldrb	r3, [r7, #26]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a59e:	6939      	ldr	r1, [r7, #16]
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	440b      	add	r3, r1
 800a5a4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a5a6:	441a      	add	r2, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	e00a      	b.n	800a5c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a5ae:	7e7b      	ldrb	r3, [r7, #25]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d007      	beq.n	800a5c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a5b8:	6939      	ldr	r1, [r7, #16]
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a5be:	441a      	add	r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d114      	bne.n	800a5f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a5cc:	7efb      	ldrb	r3, [r7, #27]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d011      	beq.n	800a5f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a5d2:	f107 030c 	add.w	r3, r7, #12
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	2103      	movs	r1, #3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fa0e 	bl	80099fc <get_sequence_step_timeout>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a5ea:	68f9      	ldr	r1, [r7, #12]
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a5f0:	441a      	add	r2, r3
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d114      	bne.n	800a628 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a5fe:	7f3b      	ldrb	r3, [r7, #28]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d011      	beq.n	800a628 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a604:	f107 0314 	add.w	r3, r7, #20
 800a608:	461a      	mov	r2, r3
 800a60a:	2104      	movs	r1, #4
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7ff f9f5 	bl	80099fc <get_sequence_step_timeout>
 800a612:	4603      	mov	r3, r0
 800a614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a61c:	6979      	ldr	r1, [r7, #20]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a622:	441a      	add	r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a628:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d103      	bne.n	800a638 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a638:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3740      	adds	r7, #64	; 0x40
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b088      	sub	sp, #32
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a64e:	2300      	movs	r3, #0
 800a650:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a656:	e0c6      	b.n	800a7e6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	4413      	add	r3, r2
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	3301      	adds	r3, #1
 800a666:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a668:	7cfb      	ldrb	r3, [r7, #19]
 800a66a:	2bff      	cmp	r3, #255	; 0xff
 800a66c:	f040 808d 	bne.w	800a78a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	4413      	add	r3, r2
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	747b      	strb	r3, [r7, #17]
			Index++;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	3301      	adds	r3, #1
 800a67e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a680:	7c7b      	ldrb	r3, [r7, #17]
 800a682:	2b03      	cmp	r3, #3
 800a684:	d87e      	bhi.n	800a784 <VL53L0X_load_tuning_settings+0x140>
 800a686:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <VL53L0X_load_tuning_settings+0x48>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a69d 	.word	0x0800a69d
 800a690:	0800a6d7 	.word	0x0800a6d7
 800a694:	0800a711 	.word	0x0800a711
 800a698:	0800a74b 	.word	0x0800a74b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	743b      	strb	r3, [r7, #16]
				Index++;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a6bc:	7c3b      	ldrb	r3, [r7, #16]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	021b      	lsls	r3, r3, #8
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	89ba      	ldrh	r2, [r7, #12]
 800a6d0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a6d4:	e087      	b.n	800a7e6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	4413      	add	r3, r2
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	743b      	strb	r3, [r7, #16]
				Index++;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a6f6:	7c3b      	ldrb	r3, [r7, #16]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	021b      	lsls	r3, r3, #8
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	b29b      	uxth	r3, r3
 800a702:	4413      	add	r3, r2
 800a704:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	89ba      	ldrh	r2, [r7, #12]
 800a70a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a70e:	e06a      	b.n	800a7e6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	4413      	add	r3, r2
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	743b      	strb	r3, [r7, #16]
				Index++;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	3301      	adds	r3, #1
 800a71e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	4413      	add	r3, r2
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	3301      	adds	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a730:	7c3b      	ldrb	r3, [r7, #16]
 800a732:	b29b      	uxth	r3, r3
 800a734:	021b      	lsls	r3, r3, #8
 800a736:	b29a      	uxth	r2, r3
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	89ba      	ldrh	r2, [r7, #12]
 800a744:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a748:	e04d      	b.n	800a7e6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	4413      	add	r3, r2
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	743b      	strb	r3, [r7, #16]
				Index++;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	3301      	adds	r3, #1
 800a758:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	4413      	add	r3, r2
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	3301      	adds	r3, #1
 800a768:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a76a:	7c3b      	ldrb	r3, [r7, #16]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	b29a      	uxth	r2, r3
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	b29b      	uxth	r3, r3
 800a776:	4413      	add	r3, r2
 800a778:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	89ba      	ldrh	r2, [r7, #12]
 800a77e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a782:	e030      	b.n	800a7e6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a784:	23fc      	movs	r3, #252	; 0xfc
 800a786:	77fb      	strb	r3, [r7, #31]
 800a788:	e02d      	b.n	800a7e6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a78a:	7cfb      	ldrb	r3, [r7, #19]
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d828      	bhi.n	800a7e2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	4413      	add	r3, r2
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	3301      	adds	r3, #1
 800a79e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61bb      	str	r3, [r7, #24]
 800a7a4:	e00f      	b.n	800a7c6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	7819      	ldrb	r1, [r3, #0]
 800a7ae:	f107 0208 	add.w	r2, r7, #8
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	460a      	mov	r2, r1
 800a7b8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	61bb      	str	r3, [r7, #24]
 800a7c6:	7cfb      	ldrb	r3, [r7, #19]
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	dbeb      	blt.n	800a7a6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a7ce:	7cfb      	ldrb	r3, [r7, #19]
 800a7d0:	f107 0208 	add.w	r2, r7, #8
 800a7d4:	7cb9      	ldrb	r1, [r7, #18]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fdee 	bl	800b3b8 <VL53L0X_WriteMulti>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	77fb      	strb	r3, [r7, #31]
 800a7e0:	e001      	b.n	800a7e6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7e2:	23fc      	movs	r3, #252	; 0xfc
 800a7e4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <VL53L0X_load_tuning_settings+0x1b8>
 800a7f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f43f af2e 	beq.w	800a658 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a814:	2300      	movs	r3, #0
 800a816:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a81e:	f107 0313 	add.w	r3, r7, #19
 800a822:	4619      	mov	r1, r3
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7fc fd21 	bl	800726c <VL53L0X_GetXTalkCompensationEnable>
 800a82a:	4603      	mov	r3, r0
 800a82c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a82e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d111      	bne.n	800a85a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a836:	7cfb      	ldrb	r3, [r7, #19]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	8a9b      	ldrh	r3, [r3, #20]
 800a846:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	fb02 f303 	mul.w	r3, r2, r3
 800a84e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	3380      	adds	r3, #128	; 0x80
 800a854:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a85a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b086      	sub	sp, #24
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	60f8      	str	r0, [r7, #12]
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a872:	2300      	movs	r3, #0
 800a874:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a87e:	f107 0310 	add.w	r3, r7, #16
 800a882:	461a      	mov	r2, r3
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff ffbe 	bl	800a808 <VL53L0X_get_total_xtalk_rate>
 800a88c:	4603      	mov	r3, r0
 800a88e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d105      	bne.n	800a8a4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	441a      	add	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]

	return Status;
 800a8a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b09a      	sub	sp, #104	; 0x68
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a8be:	2312      	movs	r3, #18
 800a8c0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a8c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a8c6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a8c8:	2342      	movs	r3, #66	; 0x42
 800a8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a8cc:	2306      	movs	r3, #6
 800a8ce:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a8d0:	2307      	movs	r3, #7
 800a8d2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a8e0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a8e8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ee:	fb02 f303 	mul.w	r3, r2, r3
 800a8f2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	3380      	adds	r3, #128	; 0x80
 800a8f8:	0a1b      	lsrs	r3, r3, #8
 800a8fa:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a900:	fb02 f303 	mul.w	r3, r2, r3
 800a904:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01a      	beq.n	800a946 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	029b      	lsls	r3, r3, #10
 800a914:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a91c:	4413      	add	r3, r2
 800a91e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a920:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	fbb2 f3f3 	udiv	r3, r2, r3
 800a928:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a92a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a92c:	4613      	mov	r3, r2
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	4413      	add	r3, r2
 800a932:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a936:	fb03 f303 	mul.w	r3, r3, r3
 800a93a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a93c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a93e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a942:	0c1b      	lsrs	r3, r3, #16
 800a944:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a94a:	fb02 f303 	mul.w	r3, r2, r3
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a956:	0c1b      	lsrs	r3, r3, #16
 800a958:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	fb03 f303 	mul.w	r3, r3, r3
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a964:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a968:	0c1b      	lsrs	r3, r3, #16
 800a96a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a96e:	085a      	lsrs	r2, r3, #1
 800a970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a972:	441a      	add	r2, r3
 800a974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a976:	fbb2 f3f3 	udiv	r3, r2, r3
 800a97a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a980:	fb02 f303 	mul.w	r3, r2, r3
 800a984:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a98c:	d302      	bcc.n	800a994 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a98e:	4b54      	ldr	r3, [pc, #336]	; (800aae0 <VL53L0X_calc_dmax+0x230>)
 800a990:	663b      	str	r3, [r7, #96]	; 0x60
 800a992:	e015      	b.n	800a9c0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a996:	085a      	lsrs	r2, r3, #1
 800a998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a99a:	441a      	add	r2, r3
 800a99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a99e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9a8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ac:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a9b4:	0c1b      	lsrs	r3, r3, #16
 800a9b6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a9b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9ba:	fb03 f303 	mul.w	r3, r3, r3
 800a9be:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a9c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9c2:	039b      	lsls	r3, r3, #14
 800a9c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a9c8:	4a46      	ldr	r2, [pc, #280]	; (800aae4 <VL53L0X_calc_dmax+0x234>)
 800a9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ce:	099b      	lsrs	r3, r3, #6
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	fb03 f303 	mul.w	r3, r3, r3
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9dc:	fb03 f303 	mul.w	r3, r3, r3
 800a9e0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	091b      	lsrs	r3, r3, #4
 800a9e8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a9f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	005b      	lsls	r3, r3, #1
 800a9f8:	4413      	add	r3, r2
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800aa04:	0b9b      	lsrs	r3, r3, #14
 800aa06:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800aa08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa0c:	4413      	add	r3, r2
 800aa0e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800aa10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa12:	085b      	lsrs	r3, r3, #1
 800aa14:	69ba      	ldr	r2, [r7, #24]
 800aa16:	4413      	add	r3, r2
 800aa18:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa22:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	039b      	lsls	r3, r3, #14
 800aa28:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	085b      	lsrs	r3, r3, #1
 800aa2e:	69ba      	ldr	r2, [r7, #24]
 800aa30:	4413      	add	r3, r2
 800aa32:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa3c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa42:	fb02 f303 	mul.w	r3, r2, r3
 800aa46:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aa4e:	4a25      	ldr	r2, [pc, #148]	; (800aae4 <VL53L0X_calc_dmax+0x234>)
 800aa50:	fba2 2303 	umull	r2, r3, r2, r3
 800aa54:	099b      	lsrs	r3, r3, #6
 800aa56:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	011b      	lsls	r3, r3, #4
 800aa5c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aa64:	4a1f      	ldr	r2, [pc, #124]	; (800aae4 <VL53L0X_calc_dmax+0x234>)
 800aa66:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6a:	099b      	lsrs	r3, r3, #6
 800aa6c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800aa6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa70:	3380      	adds	r3, #128	; 0x80
 800aa72:	0a1b      	lsrs	r3, r3, #8
 800aa74:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d008      	beq.n	800aa8e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	085a      	lsrs	r2, r3, #1
 800aa80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa82:	441a      	add	r2, r3
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa8c:	e001      	b.n	800aa92 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800aa92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aa94:	f7fe f9ba 	bl	8008e0c <VL53L0X_isqrt>
 800aa98:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d008      	beq.n	800aab2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	085a      	lsrs	r2, r3, #1
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	441a      	add	r2, r3
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aab0:	e001      	b.n	800aab6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800aab6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800aab8:	f7fe f9a8 	bl	8008e0c <VL53L0X_isqrt>
 800aabc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800aabe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d902      	bls.n	800aad2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800aacc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aace:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aad0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800aad2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3768      	adds	r7, #104	; 0x68
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	fff00000 	.word	0xfff00000
 800aae4:	10624dd3 	.word	0x10624dd3

0800aae8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b0b4      	sub	sp, #208	; 0xd0
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800aaf6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800aafa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800aafe:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ab02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ab06:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800ab0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ab0e:	f241 235c 	movw	r3, #4700	; 0x125c
 800ab12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ab16:	4b9e      	ldr	r3, [pc, #632]	; (800ad90 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800ab18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800ab1c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ab20:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800ab22:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800ab26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800ab30:	4b98      	ldr	r3, [pc, #608]	; (800ad94 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800ab32:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800ab34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab38:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800ab3a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800ab3e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800ab40:	f240 6377 	movw	r3, #1655	; 0x677
 800ab44:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab5a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800ab5e:	0c1b      	lsrs	r3, r3, #16
 800ab60:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800ab68:	f107 0310 	add.w	r3, r7, #16
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7ff fe78 	bl	800a866 <VL53L0X_get_total_signal_rate>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800ab7c:	f107 0314 	add.w	r3, r7, #20
 800ab80:	461a      	mov	r2, r3
 800ab82:	68b9      	ldr	r1, [r7, #8]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f7ff fe3f 	bl	800a808 <VL53L0X_get_total_xtalk_rate>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab96:	fb02 f303 	mul.w	r3, r2, r3
 800ab9a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800ab9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aba2:	0c1b      	lsrs	r3, r3, #16
 800aba4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800abac:	fb02 f303 	mul.w	r3, r2, r3
 800abb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800abb4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800abb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abba:	429a      	cmp	r2, r3
 800abbc:	d902      	bls.n	800abc4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800abbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800abc4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d168      	bne.n	800ac9e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800abd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800abdc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800abe0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800abe4:	461a      	mov	r2, r3
 800abe6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7fe feb2 	bl	8009954 <VL53L0X_calc_timeout_mclks>
 800abf0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800abf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800ac02:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ac06:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7fe fe9f 	bl	8009954 <VL53L0X_calc_timeout_mclks>
 800ac16:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800ac1e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ac22:	2b08      	cmp	r3, #8
 800ac24:	d102      	bne.n	800ac2c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800ac26:	2302      	movs	r3, #2
 800ac28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800ac2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac30:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800ac32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ac36:	fb02 f303 	mul.w	r3, r2, r3
 800ac3a:	02db      	lsls	r3, r3, #11
 800ac3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ac40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac48:	4a53      	ldr	r2, [pc, #332]	; (800ad98 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ac4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4e:	099b      	lsrs	r3, r3, #6
 800ac50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800ac54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac5a:	fb02 f303 	mul.w	r3, r2, r3
 800ac5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ac62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac6a:	4a4b      	ldr	r2, [pc, #300]	; (800ad98 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ac6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac70:	099b      	lsrs	r3, r3, #6
 800ac72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	3380      	adds	r3, #128	; 0x80
 800ac7a:	0a1b      	lsrs	r3, r3, #8
 800ac7c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac84:	fb02 f303 	mul.w	r3, r2, r3
 800ac88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ac8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac90:	3380      	adds	r3, #128	; 0x80
 800ac92:	0a1b      	lsrs	r3, r3, #8
 800ac94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	021b      	lsls	r3, r3, #8
 800ac9c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ac9e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800aca6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800acaa:	e15e      	b.n	800af6a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800acac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10c      	bne.n	800accc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acb8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acc0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	e14c      	b.n	800af66 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800accc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800acd4:	2301      	movs	r3, #1
 800acd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800acda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acde:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ace0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ace2:	041a      	lsls	r2, r3, #16
 800ace4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ace6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800acee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800acf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d902      	bls.n	800acfe <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800acf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800acfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad02:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ad06:	fb02 f303 	mul.w	r3, r2, r3
 800ad0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ad0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ad12:	4613      	mov	r3, r2
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe f876 	bl	8008e0c <VL53L0X_isqrt>
 800ad20:	4603      	mov	r3, r0
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	891b      	ldrh	r3, [r3, #8]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad2e:	fb02 f303 	mul.w	r3, r2, r3
 800ad32:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ad34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad36:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ad38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad3c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ad3e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ad40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ad44:	4a14      	ldr	r2, [pc, #80]	; (800ad98 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ad46:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4a:	099b      	lsrs	r3, r3, #6
 800ad4c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ad4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad50:	041b      	lsls	r3, r3, #16
 800ad52:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad56:	4a10      	ldr	r2, [pc, #64]	; (800ad98 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ad58:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5c:	099b      	lsrs	r3, r3, #6
 800ad5e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800ad60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ad66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfb8      	it	lt
 800ad72:	425b      	neglt	r3, r3
 800ad74:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ad76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	7e1b      	ldrb	r3, [r3, #24]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800ad84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad8c:	e033      	b.n	800adf6 <VL53L0X_calc_sigma_estimate+0x30e>
 800ad8e:	bf00      	nop
 800ad90:	028f87ae 	.word	0x028f87ae
 800ad94:	0006999a 	.word	0x0006999a
 800ad98:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ad9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ada2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800adaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adac:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800adb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adb4:	fb02 f303 	mul.w	r3, r2, r3
 800adb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800adbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800adc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adc2:	4413      	add	r3, r2
 800adc4:	0c1b      	lsrs	r3, r3, #16
 800adc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800adca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800add2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800add6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adda:	085b      	lsrs	r3, r3, #1
 800addc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ade0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ade4:	fb03 f303 	mul.w	r3, r3, r3
 800ade8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800adec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adf0:	0b9b      	lsrs	r3, r3, #14
 800adf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800adf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae08:	0c1b      	lsrs	r3, r3, #16
 800ae0a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	fb03 f303 	mul.w	r3, r3, r3
 800ae12:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ae14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ae18:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ae1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ae20:	0c1b      	lsrs	r3, r3, #16
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	fb03 f303 	mul.w	r3, r3, r3
 800ae2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	4413      	add	r3, r2
 800ae32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ae34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae36:	f7fd ffe9 	bl	8008e0c <VL53L0X_isqrt>
 800ae3a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	041b      	lsls	r3, r3, #16
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	3332      	adds	r3, #50	; 0x32
 800ae46:	4a4b      	ldr	r2, [pc, #300]	; (800af74 <VL53L0X_calc_sigma_estimate+0x48c>)
 800ae48:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4c:	095a      	lsrs	r2, r3, #5
 800ae4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800ae58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae5c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800ae60:	fb02 f303 	mul.w	r3, r2, r3
 800ae64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ae68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae6c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ae70:	3308      	adds	r3, #8
 800ae72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800ae76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae7a:	4a3f      	ldr	r2, [pc, #252]	; (800af78 <VL53L0X_calc_sigma_estimate+0x490>)
 800ae7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae80:	0b5b      	lsrs	r3, r3, #13
 800ae82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ae86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d902      	bls.n	800ae96 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800ae90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800ae96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800aea4:	4a35      	ldr	r2, [pc, #212]	; (800af7c <VL53L0X_calc_sigma_estimate+0x494>)
 800aea6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeaa:	099b      	lsrs	r3, r3, #6
 800aeac:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800aeb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aeb6:	441a      	add	r2, r3
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fd ffa4 	bl	8008e0c <VL53L0X_isqrt>
 800aec4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	021b      	lsls	r3, r3, #8
 800aeca:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aed2:	4a2a      	ldr	r2, [pc, #168]	; (800af7c <VL53L0X_calc_sigma_estimate+0x494>)
 800aed4:	fba2 2303 	umull	r2, r3, r2, r3
 800aed8:	099b      	lsrs	r3, r3, #6
 800aeda:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800aedc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aee0:	fb03 f303 	mul.w	r3, r3, r3
 800aee4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	fb03 f303 	mul.w	r3, r3, r3
 800aeec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800aeee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	4413      	add	r3, r2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fd ff89 	bl	8008e0c <VL53L0X_isqrt>
 800aefa:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af02:	fb02 f303 	mul.w	r3, r2, r3
 800af06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800af0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <VL53L0X_calc_sigma_estimate+0x43c>
 800af10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <VL53L0X_calc_sigma_estimate+0x43c>
 800af18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800af1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af20:	429a      	cmp	r2, r3
 800af22:	d903      	bls.n	800af2c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800af24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800af32:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800af3e:	6939      	ldr	r1, [r7, #16]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af48:	9302      	str	r3, [sp, #8]
 800af4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7ff fca8 	bl	800a8b0 <VL53L0X_calc_dmax>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af66:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	37c0      	adds	r7, #192	; 0xc0
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	51eb851f 	.word	0x51eb851f
 800af78:	d1b71759 	.word	0xd1b71759
 800af7c:	10624dd3 	.word	0x10624dd3

0800af80 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b090      	sub	sp, #64	; 0x40
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	607a      	str	r2, [r7, #4]
 800af8a:	461a      	mov	r2, r3
 800af8c:	460b      	mov	r3, r1
 800af8e:	72fb      	strb	r3, [r7, #11]
 800af90:	4613      	mov	r3, r2
 800af92:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af94:	2300      	movs	r3, #0
 800af96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800afd2:	7afb      	ldrb	r3, [r7, #11]
 800afd4:	10db      	asrs	r3, r3, #3
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800afe0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d017      	beq.n	800b018 <VL53L0X_get_pal_range_status+0x98>
 800afe8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800afec:	2b05      	cmp	r3, #5
 800afee:	d013      	beq.n	800b018 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800aff0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800aff4:	2b07      	cmp	r3, #7
 800aff6:	d00f      	beq.n	800b018 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800aff8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800affc:	2b0c      	cmp	r3, #12
 800affe:	d00b      	beq.n	800b018 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b000:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b004:	2b0d      	cmp	r3, #13
 800b006:	d007      	beq.n	800b018 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b008:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b00c:	2b0e      	cmp	r3, #14
 800b00e:	d003      	beq.n	800b018 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b010:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b014:	2b0f      	cmp	r3, #15
 800b016:	d103      	bne.n	800b020 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b018:	2301      	movs	r3, #1
 800b01a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b01e:	e002      	b.n	800b026 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b026:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d109      	bne.n	800b042 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b02e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b032:	461a      	mov	r2, r3
 800b034:	2100      	movs	r1, #0
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7fc f9ec 	bl	8007414 <VL53L0X_GetLimitCheckEnable>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b046:	2b00      	cmp	r3, #0
 800b048:	d02e      	beq.n	800b0a8 <VL53L0X_get_pal_range_status+0x128>
 800b04a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d12a      	bne.n	800b0a8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b052:	f107 0310 	add.w	r3, r7, #16
 800b056:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b05a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff fd43 	bl	800aae8 <VL53L0X_calc_sigma_estimate>
 800b062:	4603      	mov	r3, r0
 800b064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b068:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d103      	bne.n	800b078 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	b29a      	uxth	r2, r3
 800b074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b076:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b078:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d113      	bne.n	800b0a8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b080:	f107 0320 	add.w	r3, r7, #32
 800b084:	461a      	mov	r2, r3
 800b086:	2100      	movs	r1, #0
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f7fc fa49 	bl	8007520 <VL53L0X_GetLimitCheckValue>
 800b08e:	4603      	mov	r3, r0
 800b090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d006      	beq.n	800b0a8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d902      	bls.n	800b0a8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b0a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d109      	bne.n	800b0c4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b0b0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	2102      	movs	r1, #2
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7fc f9ab 	bl	8007414 <VL53L0X_GetLimitCheckEnable>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b0c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d044      	beq.n	800b156 <VL53L0X_get_pal_range_status+0x1d6>
 800b0cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d140      	bne.n	800b156 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b0d4:	f107 031c 	add.w	r3, r7, #28
 800b0d8:	461a      	mov	r2, r3
 800b0da:	2102      	movs	r1, #2
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7fc fa1f 	bl	8007520 <VL53L0X_GetLimitCheckValue>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b0e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d107      	bne.n	800b100 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	21ff      	movs	r1, #255	; 0xff
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 f9bb 	bl	800b470 <VL53L0X_WrByte>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b100:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b104:	2b00      	cmp	r3, #0
 800b106:	d109      	bne.n	800b11c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b108:	f107 0316 	add.w	r3, r7, #22
 800b10c:	461a      	mov	r2, r3
 800b10e:	21b6      	movs	r1, #182	; 0xb6
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 fa59 	bl	800b5c8 <VL53L0X_RdWord>
 800b116:	4603      	mov	r3, r0
 800b118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b11c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b120:	2b00      	cmp	r3, #0
 800b122:	d107      	bne.n	800b134 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b124:	2200      	movs	r2, #0
 800b126:	21ff      	movs	r1, #255	; 0xff
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 f9a1 	bl	800b470 <VL53L0X_WrByte>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b134:	8afb      	ldrh	r3, [r7, #22]
 800b136:	025b      	lsls	r3, r3, #9
 800b138:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b13e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d006      	beq.n	800b156 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b148:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d902      	bls.n	800b156 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b150:	2301      	movs	r3, #1
 800b152:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b156:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b15e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b162:	461a      	mov	r2, r3
 800b164:	2103      	movs	r1, #3
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7fc f954 	bl	8007414 <VL53L0X_GetLimitCheckEnable>
 800b16c:	4603      	mov	r3, r0
 800b16e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b172:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b176:	2b00      	cmp	r3, #0
 800b178:	d023      	beq.n	800b1c2 <VL53L0X_get_pal_range_status+0x242>
 800b17a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11f      	bne.n	800b1c2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b182:	893b      	ldrh	r3, [r7, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	637b      	str	r3, [r7, #52]	; 0x34
 800b18c:	e005      	b.n	800b19a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	021a      	lsls	r2, r3, #8
 800b192:	893b      	ldrh	r3, [r7, #8]
 800b194:	fbb2 f3f3 	udiv	r3, r2, r3
 800b198:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b19a:	f107 0318 	add.w	r3, r7, #24
 800b19e:	461a      	mov	r2, r3
 800b1a0:	2103      	movs	r1, #3
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f7fc f9bc 	bl	8007520 <VL53L0X_GetLimitCheckValue>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d006      	beq.n	800b1c2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b1b4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d202      	bcs.n	800b1c2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d14a      	bne.n	800b260 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b1ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d103      	bne.n	800b1da <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d4:	22ff      	movs	r2, #255	; 0xff
 800b1d6:	701a      	strb	r2, [r3, #0]
 800b1d8:	e042      	b.n	800b260 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b1da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d007      	beq.n	800b1f2 <VL53L0X_get_pal_range_status+0x272>
 800b1e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d003      	beq.n	800b1f2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b1ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d103      	bne.n	800b1fa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f4:	2205      	movs	r2, #5
 800b1f6:	701a      	strb	r2, [r3, #0]
 800b1f8:	e032      	b.n	800b260 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b1fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b1fe:	2b06      	cmp	r3, #6
 800b200:	d003      	beq.n	800b20a <VL53L0X_get_pal_range_status+0x28a>
 800b202:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b206:	2b09      	cmp	r3, #9
 800b208:	d103      	bne.n	800b212 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20c:	2204      	movs	r2, #4
 800b20e:	701a      	strb	r2, [r3, #0]
 800b210:	e026      	b.n	800b260 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b212:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b216:	2b08      	cmp	r3, #8
 800b218:	d007      	beq.n	800b22a <VL53L0X_get_pal_range_status+0x2aa>
 800b21a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b21e:	2b0a      	cmp	r3, #10
 800b220:	d003      	beq.n	800b22a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b222:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b226:	2b01      	cmp	r3, #1
 800b228:	d103      	bne.n	800b232 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22c:	2203      	movs	r2, #3
 800b22e:	701a      	strb	r2, [r3, #0]
 800b230:	e016      	b.n	800b260 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b232:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b236:	2b04      	cmp	r3, #4
 800b238:	d003      	beq.n	800b242 <VL53L0X_get_pal_range_status+0x2c2>
 800b23a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d103      	bne.n	800b24a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b244:	2202      	movs	r2, #2
 800b246:	701a      	strb	r2, [r3, #0]
 800b248:	e00a      	b.n	800b260 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b24a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d103      	bne.n	800b25a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b254:	2201      	movs	r2, #1
 800b256:	701a      	strb	r2, [r3, #0]
 800b258:	e002      	b.n	800b260 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d102      	bne.n	800b26e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b26a:	2200      	movs	r2, #0
 800b26c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b26e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b272:	461a      	mov	r2, r3
 800b274:	2101      	movs	r1, #1
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7fc f8cc 	bl	8007414 <VL53L0X_GetLimitCheckEnable>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b282:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b286:	2b00      	cmp	r3, #0
 800b288:	d14f      	bne.n	800b32a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b28a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <VL53L0X_get_pal_range_status+0x31a>
 800b292:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b296:	2b01      	cmp	r3, #1
 800b298:	d103      	bne.n	800b2a2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a0:	e002      	b.n	800b2a8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b2ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b2b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d003      	beq.n	800b2c2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b2ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d103      	bne.n	800b2ca <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c8:	e002      	b.n	800b2d0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b2d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b2da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <VL53L0X_get_pal_range_status+0x36a>
 800b2e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d103      	bne.n	800b2f2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f0:	e002      	b.n	800b2f8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b2fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <VL53L0X_get_pal_range_status+0x392>
 800b30a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d103      	bne.n	800b31a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b312:	2301      	movs	r3, #1
 800b314:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b318:	e002      	b.n	800b320 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b326:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b32a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b32e:	4618      	mov	r0, r3
 800b330:	3740      	adds	r7, #64	; 0x40
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b336:	b580      	push	{r7, lr}
 800b338:	b088      	sub	sp, #32
 800b33a:	af02      	add	r7, sp, #8
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	330a      	adds	r3, #10
 800b346:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b354:	b299      	uxth	r1, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	b29a      	uxth	r2, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	4613      	mov	r3, r2
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	f7f6 fde1 	bl	8001f28 <HAL_I2C_Master_Transmit>
 800b366:	4603      	mov	r3, r0
 800b368:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b36a:	693b      	ldr	r3, [r7, #16]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af02      	add	r7, sp, #8
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	330a      	adds	r3, #10
 800b384:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b392:	f043 0301 	orr.w	r3, r3, #1
 800b396:	b2db      	uxtb	r3, r3
 800b398:	b299      	uxth	r1, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	f7f6 feb3 	bl	8002110 <HAL_I2C_Master_Receive>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b3ae:	693b      	ldr	r3, [r7, #16]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	2b3f      	cmp	r3, #63	; 0x3f
 800b3d0:	d902      	bls.n	800b3d8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b3d2:	f06f 0303 	mvn.w	r3, #3
 800b3d6:	e016      	b.n	800b406 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b3d8:	4a0d      	ldr	r2, [pc, #52]	; (800b410 <VL53L0X_WriteMulti+0x58>)
 800b3da:	7afb      	ldrb	r3, [r7, #11]
 800b3dc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	6879      	ldr	r1, [r7, #4]
 800b3e2:	480c      	ldr	r0, [pc, #48]	; (800b414 <VL53L0X_WriteMulti+0x5c>)
 800b3e4:	f000 f99e 	bl	800b724 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4908      	ldr	r1, [pc, #32]	; (800b410 <VL53L0X_WriteMulti+0x58>)
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f7ff ffa0 	bl	800b336 <_I2CWrite>
 800b3f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b3fe:	23ec      	movs	r3, #236	; 0xec
 800b400:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b402:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	20000820 	.word	0x20000820
 800b414:	20000821 	.word	0x20000821

0800b418 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	607a      	str	r2, [r7, #4]
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	460b      	mov	r3, r1
 800b426:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b428:	2300      	movs	r3, #0
 800b42a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b42c:	f107 030b 	add.w	r3, r7, #11
 800b430:	2201      	movs	r2, #1
 800b432:	4619      	mov	r1, r3
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f7ff ff7e 	bl	800b336 <_I2CWrite>
 800b43a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b442:	23ec      	movs	r3, #236	; 0xec
 800b444:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b446:	e00c      	b.n	800b462 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7ff ff91 	bl	800b374 <_I2CRead>
 800b452:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b45a:	23ec      	movs	r3, #236	; 0xec
 800b45c:	75fb      	strb	r3, [r7, #23]
 800b45e:	e000      	b.n	800b462 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b460:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
 800b47c:	4613      	mov	r3, r2
 800b47e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b484:	4a0b      	ldr	r2, [pc, #44]	; (800b4b4 <VL53L0X_WrByte+0x44>)
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b48a:	4a0a      	ldr	r2, [pc, #40]	; (800b4b4 <VL53L0X_WrByte+0x44>)
 800b48c:	78bb      	ldrb	r3, [r7, #2]
 800b48e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b490:	2202      	movs	r2, #2
 800b492:	4908      	ldr	r1, [pc, #32]	; (800b4b4 <VL53L0X_WrByte+0x44>)
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff ff4e 	bl	800b336 <_I2CWrite>
 800b49a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b4a2:	23ec      	movs	r3, #236	; 0xec
 800b4a4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000820 	.word	0x20000820

0800b4b8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b4cc:	4a0e      	ldr	r2, [pc, #56]	; (800b508 <VL53L0X_WrWord+0x50>)
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b4d2:	883b      	ldrh	r3, [r7, #0]
 800b4d4:	0a1b      	lsrs	r3, r3, #8
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <VL53L0X_WrWord+0x50>)
 800b4dc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b4de:	883b      	ldrh	r3, [r7, #0]
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	4b09      	ldr	r3, [pc, #36]	; (800b508 <VL53L0X_WrWord+0x50>)
 800b4e4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b4e6:	2203      	movs	r2, #3
 800b4e8:	4907      	ldr	r1, [pc, #28]	; (800b508 <VL53L0X_WrWord+0x50>)
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7ff ff23 	bl	800b336 <_I2CWrite>
 800b4f0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b4f8:	23ec      	movs	r3, #236	; 0xec
 800b4fa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20000820 	.word	0x20000820

0800b50c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	4608      	mov	r0, r1
 800b516:	4611      	mov	r1, r2
 800b518:	461a      	mov	r2, r3
 800b51a:	4603      	mov	r3, r0
 800b51c:	70fb      	strb	r3, [r7, #3]
 800b51e:	460b      	mov	r3, r1
 800b520:	70bb      	strb	r3, [r7, #2]
 800b522:	4613      	mov	r3, r2
 800b524:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b52a:	f107 020e 	add.w	r2, r7, #14
 800b52e:	78fb      	ldrb	r3, [r7, #3]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f81e 	bl	800b574 <VL53L0X_RdByte>
 800b538:	4603      	mov	r3, r0
 800b53a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b53c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d110      	bne.n	800b566 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b544:	7bba      	ldrb	r2, [r7, #14]
 800b546:	78bb      	ldrb	r3, [r7, #2]
 800b548:	4013      	ands	r3, r2
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	787b      	ldrb	r3, [r7, #1]
 800b54e:	4313      	orrs	r3, r2
 800b550:	b2db      	uxtb	r3, r3
 800b552:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b554:	7bba      	ldrb	r2, [r7, #14]
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff ff88 	bl	800b470 <VL53L0X_WrByte>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]
 800b564:	e000      	b.n	800b568 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b566:	bf00      	nop
done:
    return Status;
 800b568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	460b      	mov	r3, r1
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b586:	f107 030b 	add.w	r3, r7, #11
 800b58a:	2201      	movs	r2, #1
 800b58c:	4619      	mov	r1, r3
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f7ff fed1 	bl	800b336 <_I2CWrite>
 800b594:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b59c:	23ec      	movs	r3, #236	; 0xec
 800b59e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b5a0:	e00c      	b.n	800b5bc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fee4 	bl	800b374 <_I2CRead>
 800b5ac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5b4:	23ec      	movs	r3, #236	; 0xec
 800b5b6:	75fb      	strb	r3, [r7, #23]
 800b5b8:	e000      	b.n	800b5bc <VL53L0X_RdByte+0x48>
    }
done:
 800b5ba:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b5bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b5da:	f107 030b 	add.w	r3, r7, #11
 800b5de:	2201      	movs	r2, #1
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7ff fea7 	bl	800b336 <_I2CWrite>
 800b5e8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5f0:	23ec      	movs	r3, #236	; 0xec
 800b5f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b5f4:	e017      	b.n	800b626 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	490e      	ldr	r1, [pc, #56]	; (800b634 <VL53L0X_RdWord+0x6c>)
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7ff feba 	bl	800b374 <_I2CRead>
 800b600:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b608:	23ec      	movs	r3, #236	; 0xec
 800b60a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b60c:	e00b      	b.n	800b626 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <VL53L0X_RdWord+0x6c>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	b29b      	uxth	r3, r3
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	b29a      	uxth	r2, r3
 800b618:	4b06      	ldr	r3, [pc, #24]	; (800b634 <VL53L0X_RdWord+0x6c>)
 800b61a:	785b      	ldrb	r3, [r3, #1]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	4413      	add	r3, r2
 800b620:	b29a      	uxth	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b626:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20000820 	.word	0x20000820

0800b638 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	460b      	mov	r3, r1
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b646:	2300      	movs	r3, #0
 800b648:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b64a:	f107 030b 	add.w	r3, r7, #11
 800b64e:	2201      	movs	r2, #1
 800b650:	4619      	mov	r1, r3
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f7ff fe6f 	bl	800b336 <_I2CWrite>
 800b658:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b660:	23ec      	movs	r3, #236	; 0xec
 800b662:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b664:	e01b      	b.n	800b69e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b666:	2204      	movs	r2, #4
 800b668:	4910      	ldr	r1, [pc, #64]	; (800b6ac <VL53L0X_RdDWord+0x74>)
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7ff fe82 	bl	800b374 <_I2CRead>
 800b670:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b678:	23ec      	movs	r3, #236	; 0xec
 800b67a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b67c:	e00f      	b.n	800b69e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b67e:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <VL53L0X_RdDWord+0x74>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	061a      	lsls	r2, r3, #24
 800b684:	4b09      	ldr	r3, [pc, #36]	; (800b6ac <VL53L0X_RdDWord+0x74>)
 800b686:	785b      	ldrb	r3, [r3, #1]
 800b688:	041b      	lsls	r3, r3, #16
 800b68a:	441a      	add	r2, r3
 800b68c:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <VL53L0X_RdDWord+0x74>)
 800b68e:	789b      	ldrb	r3, [r3, #2]
 800b690:	021b      	lsls	r3, r3, #8
 800b692:	4413      	add	r3, r2
 800b694:	4a05      	ldr	r2, [pc, #20]	; (800b6ac <VL53L0X_RdDWord+0x74>)
 800b696:	78d2      	ldrb	r2, [r2, #3]
 800b698:	441a      	add	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20000820 	.word	0x20000820

0800b6b0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b6bc:	2002      	movs	r0, #2
 800b6be:	f7f6 f8c3 	bl	8001848 <HAL_Delay>
    return status;
 800b6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <__errno>:
 800b6d0:	4b01      	ldr	r3, [pc, #4]	; (800b6d8 <__errno+0x8>)
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	200002cc 	.word	0x200002cc

0800b6dc <__libc_init_array>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	4d0d      	ldr	r5, [pc, #52]	; (800b714 <__libc_init_array+0x38>)
 800b6e0:	4c0d      	ldr	r4, [pc, #52]	; (800b718 <__libc_init_array+0x3c>)
 800b6e2:	1b64      	subs	r4, r4, r5
 800b6e4:	10a4      	asrs	r4, r4, #2
 800b6e6:	2600      	movs	r6, #0
 800b6e8:	42a6      	cmp	r6, r4
 800b6ea:	d109      	bne.n	800b700 <__libc_init_array+0x24>
 800b6ec:	4d0b      	ldr	r5, [pc, #44]	; (800b71c <__libc_init_array+0x40>)
 800b6ee:	4c0c      	ldr	r4, [pc, #48]	; (800b720 <__libc_init_array+0x44>)
 800b6f0:	f000 fc96 	bl	800c020 <_init>
 800b6f4:	1b64      	subs	r4, r4, r5
 800b6f6:	10a4      	asrs	r4, r4, #2
 800b6f8:	2600      	movs	r6, #0
 800b6fa:	42a6      	cmp	r6, r4
 800b6fc:	d105      	bne.n	800b70a <__libc_init_array+0x2e>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	f855 3b04 	ldr.w	r3, [r5], #4
 800b704:	4798      	blx	r3
 800b706:	3601      	adds	r6, #1
 800b708:	e7ee      	b.n	800b6e8 <__libc_init_array+0xc>
 800b70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b70e:	4798      	blx	r3
 800b710:	3601      	adds	r6, #1
 800b712:	e7f2      	b.n	800b6fa <__libc_init_array+0x1e>
 800b714:	0800c104 	.word	0x0800c104
 800b718:	0800c104 	.word	0x0800c104
 800b71c:	0800c104 	.word	0x0800c104
 800b720:	0800c108 	.word	0x0800c108

0800b724 <memcpy>:
 800b724:	440a      	add	r2, r1
 800b726:	4291      	cmp	r1, r2
 800b728:	f100 33ff 	add.w	r3, r0, #4294967295
 800b72c:	d100      	bne.n	800b730 <memcpy+0xc>
 800b72e:	4770      	bx	lr
 800b730:	b510      	push	{r4, lr}
 800b732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b73a:	4291      	cmp	r1, r2
 800b73c:	d1f9      	bne.n	800b732 <memcpy+0xe>
 800b73e:	bd10      	pop	{r4, pc}

0800b740 <memset>:
 800b740:	4402      	add	r2, r0
 800b742:	4603      	mov	r3, r0
 800b744:	4293      	cmp	r3, r2
 800b746:	d100      	bne.n	800b74a <memset+0xa>
 800b748:	4770      	bx	lr
 800b74a:	f803 1b01 	strb.w	r1, [r3], #1
 800b74e:	e7f9      	b.n	800b744 <memset+0x4>

0800b750 <siprintf>:
 800b750:	b40e      	push	{r1, r2, r3}
 800b752:	b500      	push	{lr}
 800b754:	b09c      	sub	sp, #112	; 0x70
 800b756:	ab1d      	add	r3, sp, #116	; 0x74
 800b758:	9002      	str	r0, [sp, #8]
 800b75a:	9006      	str	r0, [sp, #24]
 800b75c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b760:	4809      	ldr	r0, [pc, #36]	; (800b788 <siprintf+0x38>)
 800b762:	9107      	str	r1, [sp, #28]
 800b764:	9104      	str	r1, [sp, #16]
 800b766:	4909      	ldr	r1, [pc, #36]	; (800b78c <siprintf+0x3c>)
 800b768:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76c:	9105      	str	r1, [sp, #20]
 800b76e:	6800      	ldr	r0, [r0, #0]
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	a902      	add	r1, sp, #8
 800b774:	f000 f870 	bl	800b858 <_svfiprintf_r>
 800b778:	9b02      	ldr	r3, [sp, #8]
 800b77a:	2200      	movs	r2, #0
 800b77c:	701a      	strb	r2, [r3, #0]
 800b77e:	b01c      	add	sp, #112	; 0x70
 800b780:	f85d eb04 	ldr.w	lr, [sp], #4
 800b784:	b003      	add	sp, #12
 800b786:	4770      	bx	lr
 800b788:	200002cc 	.word	0x200002cc
 800b78c:	ffff0208 	.word	0xffff0208

0800b790 <strcpy>:
 800b790:	4603      	mov	r3, r0
 800b792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b796:	f803 2b01 	strb.w	r2, [r3], #1
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	d1f9      	bne.n	800b792 <strcpy+0x2>
 800b79e:	4770      	bx	lr

0800b7a0 <__ssputs_r>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	688e      	ldr	r6, [r1, #8]
 800b7a6:	429e      	cmp	r6, r3
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	4690      	mov	r8, r2
 800b7ae:	461f      	mov	r7, r3
 800b7b0:	d838      	bhi.n	800b824 <__ssputs_r+0x84>
 800b7b2:	898a      	ldrh	r2, [r1, #12]
 800b7b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7b8:	d032      	beq.n	800b820 <__ssputs_r+0x80>
 800b7ba:	6825      	ldr	r5, [r4, #0]
 800b7bc:	6909      	ldr	r1, [r1, #16]
 800b7be:	eba5 0901 	sub.w	r9, r5, r1
 800b7c2:	6965      	ldr	r5, [r4, #20]
 800b7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	444b      	add	r3, r9
 800b7d0:	106d      	asrs	r5, r5, #1
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	bf38      	it	cc
 800b7d6:	461d      	movcc	r5, r3
 800b7d8:	0553      	lsls	r3, r2, #21
 800b7da:	d531      	bpl.n	800b840 <__ssputs_r+0xa0>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f000 fb55 	bl	800be8c <_malloc_r>
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	b950      	cbnz	r0, 800b7fc <__ssputs_r+0x5c>
 800b7e6:	230c      	movs	r3, #12
 800b7e8:	f8ca 3000 	str.w	r3, [sl]
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fc:	6921      	ldr	r1, [r4, #16]
 800b7fe:	464a      	mov	r2, r9
 800b800:	f7ff ff90 	bl	800b724 <memcpy>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	6126      	str	r6, [r4, #16]
 800b812:	6165      	str	r5, [r4, #20]
 800b814:	444e      	add	r6, r9
 800b816:	eba5 0509 	sub.w	r5, r5, r9
 800b81a:	6026      	str	r6, [r4, #0]
 800b81c:	60a5      	str	r5, [r4, #8]
 800b81e:	463e      	mov	r6, r7
 800b820:	42be      	cmp	r6, r7
 800b822:	d900      	bls.n	800b826 <__ssputs_r+0x86>
 800b824:	463e      	mov	r6, r7
 800b826:	6820      	ldr	r0, [r4, #0]
 800b828:	4632      	mov	r2, r6
 800b82a:	4641      	mov	r1, r8
 800b82c:	f000 faa8 	bl	800bd80 <memmove>
 800b830:	68a3      	ldr	r3, [r4, #8]
 800b832:	1b9b      	subs	r3, r3, r6
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	4433      	add	r3, r6
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7db      	b.n	800b7f8 <__ssputs_r+0x58>
 800b840:	462a      	mov	r2, r5
 800b842:	f000 fb97 	bl	800bf74 <_realloc_r>
 800b846:	4606      	mov	r6, r0
 800b848:	2800      	cmp	r0, #0
 800b84a:	d1e1      	bne.n	800b810 <__ssputs_r+0x70>
 800b84c:	6921      	ldr	r1, [r4, #16]
 800b84e:	4650      	mov	r0, sl
 800b850:	f000 fab0 	bl	800bdb4 <_free_r>
 800b854:	e7c7      	b.n	800b7e6 <__ssputs_r+0x46>
	...

0800b858 <_svfiprintf_r>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	4698      	mov	r8, r3
 800b85e:	898b      	ldrh	r3, [r1, #12]
 800b860:	061b      	lsls	r3, r3, #24
 800b862:	b09d      	sub	sp, #116	; 0x74
 800b864:	4607      	mov	r7, r0
 800b866:	460d      	mov	r5, r1
 800b868:	4614      	mov	r4, r2
 800b86a:	d50e      	bpl.n	800b88a <_svfiprintf_r+0x32>
 800b86c:	690b      	ldr	r3, [r1, #16]
 800b86e:	b963      	cbnz	r3, 800b88a <_svfiprintf_r+0x32>
 800b870:	2140      	movs	r1, #64	; 0x40
 800b872:	f000 fb0b 	bl	800be8c <_malloc_r>
 800b876:	6028      	str	r0, [r5, #0]
 800b878:	6128      	str	r0, [r5, #16]
 800b87a:	b920      	cbnz	r0, 800b886 <_svfiprintf_r+0x2e>
 800b87c:	230c      	movs	r3, #12
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	f04f 30ff 	mov.w	r0, #4294967295
 800b884:	e0d1      	b.n	800ba2a <_svfiprintf_r+0x1d2>
 800b886:	2340      	movs	r3, #64	; 0x40
 800b888:	616b      	str	r3, [r5, #20]
 800b88a:	2300      	movs	r3, #0
 800b88c:	9309      	str	r3, [sp, #36]	; 0x24
 800b88e:	2320      	movs	r3, #32
 800b890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b894:	f8cd 800c 	str.w	r8, [sp, #12]
 800b898:	2330      	movs	r3, #48	; 0x30
 800b89a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba44 <_svfiprintf_r+0x1ec>
 800b89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8a2:	f04f 0901 	mov.w	r9, #1
 800b8a6:	4623      	mov	r3, r4
 800b8a8:	469a      	mov	sl, r3
 800b8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ae:	b10a      	cbz	r2, 800b8b4 <_svfiprintf_r+0x5c>
 800b8b0:	2a25      	cmp	r2, #37	; 0x25
 800b8b2:	d1f9      	bne.n	800b8a8 <_svfiprintf_r+0x50>
 800b8b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b8b8:	d00b      	beq.n	800b8d2 <_svfiprintf_r+0x7a>
 800b8ba:	465b      	mov	r3, fp
 800b8bc:	4622      	mov	r2, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f7ff ff6d 	bl	800b7a0 <__ssputs_r>
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	f000 80aa 	beq.w	800ba20 <_svfiprintf_r+0x1c8>
 800b8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ce:	445a      	add	r2, fp
 800b8d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 80a2 	beq.w	800ba20 <_svfiprintf_r+0x1c8>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8e6:	f10a 0a01 	add.w	sl, sl, #1
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	9307      	str	r3, [sp, #28]
 800b8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b8f4:	4654      	mov	r4, sl
 800b8f6:	2205      	movs	r2, #5
 800b8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fc:	4851      	ldr	r0, [pc, #324]	; (800ba44 <_svfiprintf_r+0x1ec>)
 800b8fe:	f7f4 fc7f 	bl	8000200 <memchr>
 800b902:	9a04      	ldr	r2, [sp, #16]
 800b904:	b9d8      	cbnz	r0, 800b93e <_svfiprintf_r+0xe6>
 800b906:	06d0      	lsls	r0, r2, #27
 800b908:	bf44      	itt	mi
 800b90a:	2320      	movmi	r3, #32
 800b90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b910:	0711      	lsls	r1, r2, #28
 800b912:	bf44      	itt	mi
 800b914:	232b      	movmi	r3, #43	; 0x2b
 800b916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b91a:	f89a 3000 	ldrb.w	r3, [sl]
 800b91e:	2b2a      	cmp	r3, #42	; 0x2a
 800b920:	d015      	beq.n	800b94e <_svfiprintf_r+0xf6>
 800b922:	9a07      	ldr	r2, [sp, #28]
 800b924:	4654      	mov	r4, sl
 800b926:	2000      	movs	r0, #0
 800b928:	f04f 0c0a 	mov.w	ip, #10
 800b92c:	4621      	mov	r1, r4
 800b92e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b932:	3b30      	subs	r3, #48	; 0x30
 800b934:	2b09      	cmp	r3, #9
 800b936:	d94e      	bls.n	800b9d6 <_svfiprintf_r+0x17e>
 800b938:	b1b0      	cbz	r0, 800b968 <_svfiprintf_r+0x110>
 800b93a:	9207      	str	r2, [sp, #28]
 800b93c:	e014      	b.n	800b968 <_svfiprintf_r+0x110>
 800b93e:	eba0 0308 	sub.w	r3, r0, r8
 800b942:	fa09 f303 	lsl.w	r3, r9, r3
 800b946:	4313      	orrs	r3, r2
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	46a2      	mov	sl, r4
 800b94c:	e7d2      	b.n	800b8f4 <_svfiprintf_r+0x9c>
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	1d19      	adds	r1, r3, #4
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	9103      	str	r1, [sp, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	bfbb      	ittet	lt
 800b95a:	425b      	neglt	r3, r3
 800b95c:	f042 0202 	orrlt.w	r2, r2, #2
 800b960:	9307      	strge	r3, [sp, #28]
 800b962:	9307      	strlt	r3, [sp, #28]
 800b964:	bfb8      	it	lt
 800b966:	9204      	strlt	r2, [sp, #16]
 800b968:	7823      	ldrb	r3, [r4, #0]
 800b96a:	2b2e      	cmp	r3, #46	; 0x2e
 800b96c:	d10c      	bne.n	800b988 <_svfiprintf_r+0x130>
 800b96e:	7863      	ldrb	r3, [r4, #1]
 800b970:	2b2a      	cmp	r3, #42	; 0x2a
 800b972:	d135      	bne.n	800b9e0 <_svfiprintf_r+0x188>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	1d1a      	adds	r2, r3, #4
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	9203      	str	r2, [sp, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	bfb8      	it	lt
 800b980:	f04f 33ff 	movlt.w	r3, #4294967295
 800b984:	3402      	adds	r4, #2
 800b986:	9305      	str	r3, [sp, #20]
 800b988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba54 <_svfiprintf_r+0x1fc>
 800b98c:	7821      	ldrb	r1, [r4, #0]
 800b98e:	2203      	movs	r2, #3
 800b990:	4650      	mov	r0, sl
 800b992:	f7f4 fc35 	bl	8000200 <memchr>
 800b996:	b140      	cbz	r0, 800b9aa <_svfiprintf_r+0x152>
 800b998:	2340      	movs	r3, #64	; 0x40
 800b99a:	eba0 000a 	sub.w	r0, r0, sl
 800b99e:	fa03 f000 	lsl.w	r0, r3, r0
 800b9a2:	9b04      	ldr	r3, [sp, #16]
 800b9a4:	4303      	orrs	r3, r0
 800b9a6:	3401      	adds	r4, #1
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ae:	4826      	ldr	r0, [pc, #152]	; (800ba48 <_svfiprintf_r+0x1f0>)
 800b9b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9b4:	2206      	movs	r2, #6
 800b9b6:	f7f4 fc23 	bl	8000200 <memchr>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d038      	beq.n	800ba30 <_svfiprintf_r+0x1d8>
 800b9be:	4b23      	ldr	r3, [pc, #140]	; (800ba4c <_svfiprintf_r+0x1f4>)
 800b9c0:	bb1b      	cbnz	r3, 800ba0a <_svfiprintf_r+0x1b2>
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	3307      	adds	r3, #7
 800b9c6:	f023 0307 	bic.w	r3, r3, #7
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	9303      	str	r3, [sp, #12]
 800b9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d0:	4433      	add	r3, r6
 800b9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d4:	e767      	b.n	800b8a6 <_svfiprintf_r+0x4e>
 800b9d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9da:	460c      	mov	r4, r1
 800b9dc:	2001      	movs	r0, #1
 800b9de:	e7a5      	b.n	800b92c <_svfiprintf_r+0xd4>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	3401      	adds	r4, #1
 800b9e4:	9305      	str	r3, [sp, #20]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	f04f 0c0a 	mov.w	ip, #10
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9f2:	3a30      	subs	r2, #48	; 0x30
 800b9f4:	2a09      	cmp	r2, #9
 800b9f6:	d903      	bls.n	800ba00 <_svfiprintf_r+0x1a8>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d0c5      	beq.n	800b988 <_svfiprintf_r+0x130>
 800b9fc:	9105      	str	r1, [sp, #20]
 800b9fe:	e7c3      	b.n	800b988 <_svfiprintf_r+0x130>
 800ba00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba04:	4604      	mov	r4, r0
 800ba06:	2301      	movs	r3, #1
 800ba08:	e7f0      	b.n	800b9ec <_svfiprintf_r+0x194>
 800ba0a:	ab03      	add	r3, sp, #12
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	462a      	mov	r2, r5
 800ba10:	4b0f      	ldr	r3, [pc, #60]	; (800ba50 <_svfiprintf_r+0x1f8>)
 800ba12:	a904      	add	r1, sp, #16
 800ba14:	4638      	mov	r0, r7
 800ba16:	f3af 8000 	nop.w
 800ba1a:	1c42      	adds	r2, r0, #1
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	d1d6      	bne.n	800b9ce <_svfiprintf_r+0x176>
 800ba20:	89ab      	ldrh	r3, [r5, #12]
 800ba22:	065b      	lsls	r3, r3, #25
 800ba24:	f53f af2c 	bmi.w	800b880 <_svfiprintf_r+0x28>
 800ba28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba2a:	b01d      	add	sp, #116	; 0x74
 800ba2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba30:	ab03      	add	r3, sp, #12
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	462a      	mov	r2, r5
 800ba36:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <_svfiprintf_r+0x1f8>)
 800ba38:	a904      	add	r1, sp, #16
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	f000 f87a 	bl	800bb34 <_printf_i>
 800ba40:	e7eb      	b.n	800ba1a <_svfiprintf_r+0x1c2>
 800ba42:	bf00      	nop
 800ba44:	0800c0c8 	.word	0x0800c0c8
 800ba48:	0800c0d2 	.word	0x0800c0d2
 800ba4c:	00000000 	.word	0x00000000
 800ba50:	0800b7a1 	.word	0x0800b7a1
 800ba54:	0800c0ce 	.word	0x0800c0ce

0800ba58 <_printf_common>:
 800ba58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba5c:	4616      	mov	r6, r2
 800ba5e:	4699      	mov	r9, r3
 800ba60:	688a      	ldr	r2, [r1, #8]
 800ba62:	690b      	ldr	r3, [r1, #16]
 800ba64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	bfb8      	it	lt
 800ba6c:	4613      	movlt	r3, r2
 800ba6e:	6033      	str	r3, [r6, #0]
 800ba70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba74:	4607      	mov	r7, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	b10a      	cbz	r2, 800ba7e <_printf_common+0x26>
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	6033      	str	r3, [r6, #0]
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	0699      	lsls	r1, r3, #26
 800ba82:	bf42      	ittt	mi
 800ba84:	6833      	ldrmi	r3, [r6, #0]
 800ba86:	3302      	addmi	r3, #2
 800ba88:	6033      	strmi	r3, [r6, #0]
 800ba8a:	6825      	ldr	r5, [r4, #0]
 800ba8c:	f015 0506 	ands.w	r5, r5, #6
 800ba90:	d106      	bne.n	800baa0 <_printf_common+0x48>
 800ba92:	f104 0a19 	add.w	sl, r4, #25
 800ba96:	68e3      	ldr	r3, [r4, #12]
 800ba98:	6832      	ldr	r2, [r6, #0]
 800ba9a:	1a9b      	subs	r3, r3, r2
 800ba9c:	42ab      	cmp	r3, r5
 800ba9e:	dc26      	bgt.n	800baee <_printf_common+0x96>
 800baa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800baa4:	1e13      	subs	r3, r2, #0
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	bf18      	it	ne
 800baaa:	2301      	movne	r3, #1
 800baac:	0692      	lsls	r2, r2, #26
 800baae:	d42b      	bmi.n	800bb08 <_printf_common+0xb0>
 800bab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bab4:	4649      	mov	r1, r9
 800bab6:	4638      	mov	r0, r7
 800bab8:	47c0      	blx	r8
 800baba:	3001      	adds	r0, #1
 800babc:	d01e      	beq.n	800bafc <_printf_common+0xa4>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	68e5      	ldr	r5, [r4, #12]
 800bac2:	6832      	ldr	r2, [r6, #0]
 800bac4:	f003 0306 	and.w	r3, r3, #6
 800bac8:	2b04      	cmp	r3, #4
 800baca:	bf08      	it	eq
 800bacc:	1aad      	subeq	r5, r5, r2
 800bace:	68a3      	ldr	r3, [r4, #8]
 800bad0:	6922      	ldr	r2, [r4, #16]
 800bad2:	bf0c      	ite	eq
 800bad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bad8:	2500      	movne	r5, #0
 800bada:	4293      	cmp	r3, r2
 800badc:	bfc4      	itt	gt
 800bade:	1a9b      	subgt	r3, r3, r2
 800bae0:	18ed      	addgt	r5, r5, r3
 800bae2:	2600      	movs	r6, #0
 800bae4:	341a      	adds	r4, #26
 800bae6:	42b5      	cmp	r5, r6
 800bae8:	d11a      	bne.n	800bb20 <_printf_common+0xc8>
 800baea:	2000      	movs	r0, #0
 800baec:	e008      	b.n	800bb00 <_printf_common+0xa8>
 800baee:	2301      	movs	r3, #1
 800baf0:	4652      	mov	r2, sl
 800baf2:	4649      	mov	r1, r9
 800baf4:	4638      	mov	r0, r7
 800baf6:	47c0      	blx	r8
 800baf8:	3001      	adds	r0, #1
 800bafa:	d103      	bne.n	800bb04 <_printf_common+0xac>
 800bafc:	f04f 30ff 	mov.w	r0, #4294967295
 800bb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb04:	3501      	adds	r5, #1
 800bb06:	e7c6      	b.n	800ba96 <_printf_common+0x3e>
 800bb08:	18e1      	adds	r1, r4, r3
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	2030      	movs	r0, #48	; 0x30
 800bb0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb12:	4422      	add	r2, r4
 800bb14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb1c:	3302      	adds	r3, #2
 800bb1e:	e7c7      	b.n	800bab0 <_printf_common+0x58>
 800bb20:	2301      	movs	r3, #1
 800bb22:	4622      	mov	r2, r4
 800bb24:	4649      	mov	r1, r9
 800bb26:	4638      	mov	r0, r7
 800bb28:	47c0      	blx	r8
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	d0e6      	beq.n	800bafc <_printf_common+0xa4>
 800bb2e:	3601      	adds	r6, #1
 800bb30:	e7d9      	b.n	800bae6 <_printf_common+0x8e>
	...

0800bb34 <_printf_i>:
 800bb34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb38:	7e0f      	ldrb	r7, [r1, #24]
 800bb3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb3c:	2f78      	cmp	r7, #120	; 0x78
 800bb3e:	4691      	mov	r9, r2
 800bb40:	4680      	mov	r8, r0
 800bb42:	460c      	mov	r4, r1
 800bb44:	469a      	mov	sl, r3
 800bb46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb4a:	d807      	bhi.n	800bb5c <_printf_i+0x28>
 800bb4c:	2f62      	cmp	r7, #98	; 0x62
 800bb4e:	d80a      	bhi.n	800bb66 <_printf_i+0x32>
 800bb50:	2f00      	cmp	r7, #0
 800bb52:	f000 80d8 	beq.w	800bd06 <_printf_i+0x1d2>
 800bb56:	2f58      	cmp	r7, #88	; 0x58
 800bb58:	f000 80a3 	beq.w	800bca2 <_printf_i+0x16e>
 800bb5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb64:	e03a      	b.n	800bbdc <_printf_i+0xa8>
 800bb66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb6a:	2b15      	cmp	r3, #21
 800bb6c:	d8f6      	bhi.n	800bb5c <_printf_i+0x28>
 800bb6e:	a101      	add	r1, pc, #4	; (adr r1, 800bb74 <_printf_i+0x40>)
 800bb70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb74:	0800bbcd 	.word	0x0800bbcd
 800bb78:	0800bbe1 	.word	0x0800bbe1
 800bb7c:	0800bb5d 	.word	0x0800bb5d
 800bb80:	0800bb5d 	.word	0x0800bb5d
 800bb84:	0800bb5d 	.word	0x0800bb5d
 800bb88:	0800bb5d 	.word	0x0800bb5d
 800bb8c:	0800bbe1 	.word	0x0800bbe1
 800bb90:	0800bb5d 	.word	0x0800bb5d
 800bb94:	0800bb5d 	.word	0x0800bb5d
 800bb98:	0800bb5d 	.word	0x0800bb5d
 800bb9c:	0800bb5d 	.word	0x0800bb5d
 800bba0:	0800bced 	.word	0x0800bced
 800bba4:	0800bc11 	.word	0x0800bc11
 800bba8:	0800bccf 	.word	0x0800bccf
 800bbac:	0800bb5d 	.word	0x0800bb5d
 800bbb0:	0800bb5d 	.word	0x0800bb5d
 800bbb4:	0800bd0f 	.word	0x0800bd0f
 800bbb8:	0800bb5d 	.word	0x0800bb5d
 800bbbc:	0800bc11 	.word	0x0800bc11
 800bbc0:	0800bb5d 	.word	0x0800bb5d
 800bbc4:	0800bb5d 	.word	0x0800bb5d
 800bbc8:	0800bcd7 	.word	0x0800bcd7
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	1d1a      	adds	r2, r3, #4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	602a      	str	r2, [r5, #0]
 800bbd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e0a3      	b.n	800bd28 <_printf_i+0x1f4>
 800bbe0:	6820      	ldr	r0, [r4, #0]
 800bbe2:	6829      	ldr	r1, [r5, #0]
 800bbe4:	0606      	lsls	r6, r0, #24
 800bbe6:	f101 0304 	add.w	r3, r1, #4
 800bbea:	d50a      	bpl.n	800bc02 <_printf_i+0xce>
 800bbec:	680e      	ldr	r6, [r1, #0]
 800bbee:	602b      	str	r3, [r5, #0]
 800bbf0:	2e00      	cmp	r6, #0
 800bbf2:	da03      	bge.n	800bbfc <_printf_i+0xc8>
 800bbf4:	232d      	movs	r3, #45	; 0x2d
 800bbf6:	4276      	negs	r6, r6
 800bbf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbfc:	485e      	ldr	r0, [pc, #376]	; (800bd78 <_printf_i+0x244>)
 800bbfe:	230a      	movs	r3, #10
 800bc00:	e019      	b.n	800bc36 <_printf_i+0x102>
 800bc02:	680e      	ldr	r6, [r1, #0]
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc0a:	bf18      	it	ne
 800bc0c:	b236      	sxthne	r6, r6
 800bc0e:	e7ef      	b.n	800bbf0 <_printf_i+0xbc>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	6820      	ldr	r0, [r4, #0]
 800bc14:	1d19      	adds	r1, r3, #4
 800bc16:	6029      	str	r1, [r5, #0]
 800bc18:	0601      	lsls	r1, r0, #24
 800bc1a:	d501      	bpl.n	800bc20 <_printf_i+0xec>
 800bc1c:	681e      	ldr	r6, [r3, #0]
 800bc1e:	e002      	b.n	800bc26 <_printf_i+0xf2>
 800bc20:	0646      	lsls	r6, r0, #25
 800bc22:	d5fb      	bpl.n	800bc1c <_printf_i+0xe8>
 800bc24:	881e      	ldrh	r6, [r3, #0]
 800bc26:	4854      	ldr	r0, [pc, #336]	; (800bd78 <_printf_i+0x244>)
 800bc28:	2f6f      	cmp	r7, #111	; 0x6f
 800bc2a:	bf0c      	ite	eq
 800bc2c:	2308      	moveq	r3, #8
 800bc2e:	230a      	movne	r3, #10
 800bc30:	2100      	movs	r1, #0
 800bc32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc36:	6865      	ldr	r5, [r4, #4]
 800bc38:	60a5      	str	r5, [r4, #8]
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	bfa2      	ittt	ge
 800bc3e:	6821      	ldrge	r1, [r4, #0]
 800bc40:	f021 0104 	bicge.w	r1, r1, #4
 800bc44:	6021      	strge	r1, [r4, #0]
 800bc46:	b90e      	cbnz	r6, 800bc4c <_printf_i+0x118>
 800bc48:	2d00      	cmp	r5, #0
 800bc4a:	d04d      	beq.n	800bce8 <_printf_i+0x1b4>
 800bc4c:	4615      	mov	r5, r2
 800bc4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc52:	fb03 6711 	mls	r7, r3, r1, r6
 800bc56:	5dc7      	ldrb	r7, [r0, r7]
 800bc58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc5c:	4637      	mov	r7, r6
 800bc5e:	42bb      	cmp	r3, r7
 800bc60:	460e      	mov	r6, r1
 800bc62:	d9f4      	bls.n	800bc4e <_printf_i+0x11a>
 800bc64:	2b08      	cmp	r3, #8
 800bc66:	d10b      	bne.n	800bc80 <_printf_i+0x14c>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	07de      	lsls	r6, r3, #31
 800bc6c:	d508      	bpl.n	800bc80 <_printf_i+0x14c>
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	6861      	ldr	r1, [r4, #4]
 800bc72:	4299      	cmp	r1, r3
 800bc74:	bfde      	ittt	le
 800bc76:	2330      	movle	r3, #48	; 0x30
 800bc78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc80:	1b52      	subs	r2, r2, r5
 800bc82:	6122      	str	r2, [r4, #16]
 800bc84:	f8cd a000 	str.w	sl, [sp]
 800bc88:	464b      	mov	r3, r9
 800bc8a:	aa03      	add	r2, sp, #12
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4640      	mov	r0, r8
 800bc90:	f7ff fee2 	bl	800ba58 <_printf_common>
 800bc94:	3001      	adds	r0, #1
 800bc96:	d14c      	bne.n	800bd32 <_printf_i+0x1fe>
 800bc98:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9c:	b004      	add	sp, #16
 800bc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca2:	4835      	ldr	r0, [pc, #212]	; (800bd78 <_printf_i+0x244>)
 800bca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bca8:	6829      	ldr	r1, [r5, #0]
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcb0:	6029      	str	r1, [r5, #0]
 800bcb2:	061d      	lsls	r5, r3, #24
 800bcb4:	d514      	bpl.n	800bce0 <_printf_i+0x1ac>
 800bcb6:	07df      	lsls	r7, r3, #31
 800bcb8:	bf44      	itt	mi
 800bcba:	f043 0320 	orrmi.w	r3, r3, #32
 800bcbe:	6023      	strmi	r3, [r4, #0]
 800bcc0:	b91e      	cbnz	r6, 800bcca <_printf_i+0x196>
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	f023 0320 	bic.w	r3, r3, #32
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	2310      	movs	r3, #16
 800bccc:	e7b0      	b.n	800bc30 <_printf_i+0xfc>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	f043 0320 	orr.w	r3, r3, #32
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	2378      	movs	r3, #120	; 0x78
 800bcd8:	4828      	ldr	r0, [pc, #160]	; (800bd7c <_printf_i+0x248>)
 800bcda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcde:	e7e3      	b.n	800bca8 <_printf_i+0x174>
 800bce0:	0659      	lsls	r1, r3, #25
 800bce2:	bf48      	it	mi
 800bce4:	b2b6      	uxthmi	r6, r6
 800bce6:	e7e6      	b.n	800bcb6 <_printf_i+0x182>
 800bce8:	4615      	mov	r5, r2
 800bcea:	e7bb      	b.n	800bc64 <_printf_i+0x130>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	6826      	ldr	r6, [r4, #0]
 800bcf0:	6961      	ldr	r1, [r4, #20]
 800bcf2:	1d18      	adds	r0, r3, #4
 800bcf4:	6028      	str	r0, [r5, #0]
 800bcf6:	0635      	lsls	r5, r6, #24
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	d501      	bpl.n	800bd00 <_printf_i+0x1cc>
 800bcfc:	6019      	str	r1, [r3, #0]
 800bcfe:	e002      	b.n	800bd06 <_printf_i+0x1d2>
 800bd00:	0670      	lsls	r0, r6, #25
 800bd02:	d5fb      	bpl.n	800bcfc <_printf_i+0x1c8>
 800bd04:	8019      	strh	r1, [r3, #0]
 800bd06:	2300      	movs	r3, #0
 800bd08:	6123      	str	r3, [r4, #16]
 800bd0a:	4615      	mov	r5, r2
 800bd0c:	e7ba      	b.n	800bc84 <_printf_i+0x150>
 800bd0e:	682b      	ldr	r3, [r5, #0]
 800bd10:	1d1a      	adds	r2, r3, #4
 800bd12:	602a      	str	r2, [r5, #0]
 800bd14:	681d      	ldr	r5, [r3, #0]
 800bd16:	6862      	ldr	r2, [r4, #4]
 800bd18:	2100      	movs	r1, #0
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f7f4 fa70 	bl	8000200 <memchr>
 800bd20:	b108      	cbz	r0, 800bd26 <_printf_i+0x1f2>
 800bd22:	1b40      	subs	r0, r0, r5
 800bd24:	6060      	str	r0, [r4, #4]
 800bd26:	6863      	ldr	r3, [r4, #4]
 800bd28:	6123      	str	r3, [r4, #16]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd30:	e7a8      	b.n	800bc84 <_printf_i+0x150>
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	462a      	mov	r2, r5
 800bd36:	4649      	mov	r1, r9
 800bd38:	4640      	mov	r0, r8
 800bd3a:	47d0      	blx	sl
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	d0ab      	beq.n	800bc98 <_printf_i+0x164>
 800bd40:	6823      	ldr	r3, [r4, #0]
 800bd42:	079b      	lsls	r3, r3, #30
 800bd44:	d413      	bmi.n	800bd6e <_printf_i+0x23a>
 800bd46:	68e0      	ldr	r0, [r4, #12]
 800bd48:	9b03      	ldr	r3, [sp, #12]
 800bd4a:	4298      	cmp	r0, r3
 800bd4c:	bfb8      	it	lt
 800bd4e:	4618      	movlt	r0, r3
 800bd50:	e7a4      	b.n	800bc9c <_printf_i+0x168>
 800bd52:	2301      	movs	r3, #1
 800bd54:	4632      	mov	r2, r6
 800bd56:	4649      	mov	r1, r9
 800bd58:	4640      	mov	r0, r8
 800bd5a:	47d0      	blx	sl
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d09b      	beq.n	800bc98 <_printf_i+0x164>
 800bd60:	3501      	adds	r5, #1
 800bd62:	68e3      	ldr	r3, [r4, #12]
 800bd64:	9903      	ldr	r1, [sp, #12]
 800bd66:	1a5b      	subs	r3, r3, r1
 800bd68:	42ab      	cmp	r3, r5
 800bd6a:	dcf2      	bgt.n	800bd52 <_printf_i+0x21e>
 800bd6c:	e7eb      	b.n	800bd46 <_printf_i+0x212>
 800bd6e:	2500      	movs	r5, #0
 800bd70:	f104 0619 	add.w	r6, r4, #25
 800bd74:	e7f5      	b.n	800bd62 <_printf_i+0x22e>
 800bd76:	bf00      	nop
 800bd78:	0800c0d9 	.word	0x0800c0d9
 800bd7c:	0800c0ea 	.word	0x0800c0ea

0800bd80 <memmove>:
 800bd80:	4288      	cmp	r0, r1
 800bd82:	b510      	push	{r4, lr}
 800bd84:	eb01 0402 	add.w	r4, r1, r2
 800bd88:	d902      	bls.n	800bd90 <memmove+0x10>
 800bd8a:	4284      	cmp	r4, r0
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	d807      	bhi.n	800bda0 <memmove+0x20>
 800bd90:	1e43      	subs	r3, r0, #1
 800bd92:	42a1      	cmp	r1, r4
 800bd94:	d008      	beq.n	800bda8 <memmove+0x28>
 800bd96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd9e:	e7f8      	b.n	800bd92 <memmove+0x12>
 800bda0:	4402      	add	r2, r0
 800bda2:	4601      	mov	r1, r0
 800bda4:	428a      	cmp	r2, r1
 800bda6:	d100      	bne.n	800bdaa <memmove+0x2a>
 800bda8:	bd10      	pop	{r4, pc}
 800bdaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdb2:	e7f7      	b.n	800bda4 <memmove+0x24>

0800bdb4 <_free_r>:
 800bdb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdb6:	2900      	cmp	r1, #0
 800bdb8:	d044      	beq.n	800be44 <_free_r+0x90>
 800bdba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdbe:	9001      	str	r0, [sp, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f1a1 0404 	sub.w	r4, r1, #4
 800bdc6:	bfb8      	it	lt
 800bdc8:	18e4      	addlt	r4, r4, r3
 800bdca:	f000 f913 	bl	800bff4 <__malloc_lock>
 800bdce:	4a1e      	ldr	r2, [pc, #120]	; (800be48 <_free_r+0x94>)
 800bdd0:	9801      	ldr	r0, [sp, #4]
 800bdd2:	6813      	ldr	r3, [r2, #0]
 800bdd4:	b933      	cbnz	r3, 800bde4 <_free_r+0x30>
 800bdd6:	6063      	str	r3, [r4, #4]
 800bdd8:	6014      	str	r4, [r2, #0]
 800bdda:	b003      	add	sp, #12
 800bddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bde0:	f000 b90e 	b.w	800c000 <__malloc_unlock>
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	d908      	bls.n	800bdfa <_free_r+0x46>
 800bde8:	6825      	ldr	r5, [r4, #0]
 800bdea:	1961      	adds	r1, r4, r5
 800bdec:	428b      	cmp	r3, r1
 800bdee:	bf01      	itttt	eq
 800bdf0:	6819      	ldreq	r1, [r3, #0]
 800bdf2:	685b      	ldreq	r3, [r3, #4]
 800bdf4:	1949      	addeq	r1, r1, r5
 800bdf6:	6021      	streq	r1, [r4, #0]
 800bdf8:	e7ed      	b.n	800bdd6 <_free_r+0x22>
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	b10b      	cbz	r3, 800be04 <_free_r+0x50>
 800be00:	42a3      	cmp	r3, r4
 800be02:	d9fa      	bls.n	800bdfa <_free_r+0x46>
 800be04:	6811      	ldr	r1, [r2, #0]
 800be06:	1855      	adds	r5, r2, r1
 800be08:	42a5      	cmp	r5, r4
 800be0a:	d10b      	bne.n	800be24 <_free_r+0x70>
 800be0c:	6824      	ldr	r4, [r4, #0]
 800be0e:	4421      	add	r1, r4
 800be10:	1854      	adds	r4, r2, r1
 800be12:	42a3      	cmp	r3, r4
 800be14:	6011      	str	r1, [r2, #0]
 800be16:	d1e0      	bne.n	800bdda <_free_r+0x26>
 800be18:	681c      	ldr	r4, [r3, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	6053      	str	r3, [r2, #4]
 800be1e:	4421      	add	r1, r4
 800be20:	6011      	str	r1, [r2, #0]
 800be22:	e7da      	b.n	800bdda <_free_r+0x26>
 800be24:	d902      	bls.n	800be2c <_free_r+0x78>
 800be26:	230c      	movs	r3, #12
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	e7d6      	b.n	800bdda <_free_r+0x26>
 800be2c:	6825      	ldr	r5, [r4, #0]
 800be2e:	1961      	adds	r1, r4, r5
 800be30:	428b      	cmp	r3, r1
 800be32:	bf04      	itt	eq
 800be34:	6819      	ldreq	r1, [r3, #0]
 800be36:	685b      	ldreq	r3, [r3, #4]
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	bf04      	itt	eq
 800be3c:	1949      	addeq	r1, r1, r5
 800be3e:	6021      	streq	r1, [r4, #0]
 800be40:	6054      	str	r4, [r2, #4]
 800be42:	e7ca      	b.n	800bdda <_free_r+0x26>
 800be44:	b003      	add	sp, #12
 800be46:	bd30      	pop	{r4, r5, pc}
 800be48:	20000860 	.word	0x20000860

0800be4c <sbrk_aligned>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	4e0e      	ldr	r6, [pc, #56]	; (800be88 <sbrk_aligned+0x3c>)
 800be50:	460c      	mov	r4, r1
 800be52:	6831      	ldr	r1, [r6, #0]
 800be54:	4605      	mov	r5, r0
 800be56:	b911      	cbnz	r1, 800be5e <sbrk_aligned+0x12>
 800be58:	f000 f8bc 	bl	800bfd4 <_sbrk_r>
 800be5c:	6030      	str	r0, [r6, #0]
 800be5e:	4621      	mov	r1, r4
 800be60:	4628      	mov	r0, r5
 800be62:	f000 f8b7 	bl	800bfd4 <_sbrk_r>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	d00a      	beq.n	800be80 <sbrk_aligned+0x34>
 800be6a:	1cc4      	adds	r4, r0, #3
 800be6c:	f024 0403 	bic.w	r4, r4, #3
 800be70:	42a0      	cmp	r0, r4
 800be72:	d007      	beq.n	800be84 <sbrk_aligned+0x38>
 800be74:	1a21      	subs	r1, r4, r0
 800be76:	4628      	mov	r0, r5
 800be78:	f000 f8ac 	bl	800bfd4 <_sbrk_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	d101      	bne.n	800be84 <sbrk_aligned+0x38>
 800be80:	f04f 34ff 	mov.w	r4, #4294967295
 800be84:	4620      	mov	r0, r4
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	20000864 	.word	0x20000864

0800be8c <_malloc_r>:
 800be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be90:	1ccd      	adds	r5, r1, #3
 800be92:	f025 0503 	bic.w	r5, r5, #3
 800be96:	3508      	adds	r5, #8
 800be98:	2d0c      	cmp	r5, #12
 800be9a:	bf38      	it	cc
 800be9c:	250c      	movcc	r5, #12
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	4607      	mov	r7, r0
 800bea2:	db01      	blt.n	800bea8 <_malloc_r+0x1c>
 800bea4:	42a9      	cmp	r1, r5
 800bea6:	d905      	bls.n	800beb4 <_malloc_r+0x28>
 800bea8:	230c      	movs	r3, #12
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	2600      	movs	r6, #0
 800beae:	4630      	mov	r0, r6
 800beb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb4:	4e2e      	ldr	r6, [pc, #184]	; (800bf70 <_malloc_r+0xe4>)
 800beb6:	f000 f89d 	bl	800bff4 <__malloc_lock>
 800beba:	6833      	ldr	r3, [r6, #0]
 800bebc:	461c      	mov	r4, r3
 800bebe:	bb34      	cbnz	r4, 800bf0e <_malloc_r+0x82>
 800bec0:	4629      	mov	r1, r5
 800bec2:	4638      	mov	r0, r7
 800bec4:	f7ff ffc2 	bl	800be4c <sbrk_aligned>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	4604      	mov	r4, r0
 800becc:	d14d      	bne.n	800bf6a <_malloc_r+0xde>
 800bece:	6834      	ldr	r4, [r6, #0]
 800bed0:	4626      	mov	r6, r4
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	d140      	bne.n	800bf58 <_malloc_r+0xcc>
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	4631      	mov	r1, r6
 800beda:	4638      	mov	r0, r7
 800bedc:	eb04 0803 	add.w	r8, r4, r3
 800bee0:	f000 f878 	bl	800bfd4 <_sbrk_r>
 800bee4:	4580      	cmp	r8, r0
 800bee6:	d13a      	bne.n	800bf5e <_malloc_r+0xd2>
 800bee8:	6821      	ldr	r1, [r4, #0]
 800beea:	3503      	adds	r5, #3
 800beec:	1a6d      	subs	r5, r5, r1
 800beee:	f025 0503 	bic.w	r5, r5, #3
 800bef2:	3508      	adds	r5, #8
 800bef4:	2d0c      	cmp	r5, #12
 800bef6:	bf38      	it	cc
 800bef8:	250c      	movcc	r5, #12
 800befa:	4629      	mov	r1, r5
 800befc:	4638      	mov	r0, r7
 800befe:	f7ff ffa5 	bl	800be4c <sbrk_aligned>
 800bf02:	3001      	adds	r0, #1
 800bf04:	d02b      	beq.n	800bf5e <_malloc_r+0xd2>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	442b      	add	r3, r5
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	e00e      	b.n	800bf2c <_malloc_r+0xa0>
 800bf0e:	6822      	ldr	r2, [r4, #0]
 800bf10:	1b52      	subs	r2, r2, r5
 800bf12:	d41e      	bmi.n	800bf52 <_malloc_r+0xc6>
 800bf14:	2a0b      	cmp	r2, #11
 800bf16:	d916      	bls.n	800bf46 <_malloc_r+0xba>
 800bf18:	1961      	adds	r1, r4, r5
 800bf1a:	42a3      	cmp	r3, r4
 800bf1c:	6025      	str	r5, [r4, #0]
 800bf1e:	bf18      	it	ne
 800bf20:	6059      	strne	r1, [r3, #4]
 800bf22:	6863      	ldr	r3, [r4, #4]
 800bf24:	bf08      	it	eq
 800bf26:	6031      	streq	r1, [r6, #0]
 800bf28:	5162      	str	r2, [r4, r5]
 800bf2a:	604b      	str	r3, [r1, #4]
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	f104 060b 	add.w	r6, r4, #11
 800bf32:	f000 f865 	bl	800c000 <__malloc_unlock>
 800bf36:	f026 0607 	bic.w	r6, r6, #7
 800bf3a:	1d23      	adds	r3, r4, #4
 800bf3c:	1af2      	subs	r2, r6, r3
 800bf3e:	d0b6      	beq.n	800beae <_malloc_r+0x22>
 800bf40:	1b9b      	subs	r3, r3, r6
 800bf42:	50a3      	str	r3, [r4, r2]
 800bf44:	e7b3      	b.n	800beae <_malloc_r+0x22>
 800bf46:	6862      	ldr	r2, [r4, #4]
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	bf0c      	ite	eq
 800bf4c:	6032      	streq	r2, [r6, #0]
 800bf4e:	605a      	strne	r2, [r3, #4]
 800bf50:	e7ec      	b.n	800bf2c <_malloc_r+0xa0>
 800bf52:	4623      	mov	r3, r4
 800bf54:	6864      	ldr	r4, [r4, #4]
 800bf56:	e7b2      	b.n	800bebe <_malloc_r+0x32>
 800bf58:	4634      	mov	r4, r6
 800bf5a:	6876      	ldr	r6, [r6, #4]
 800bf5c:	e7b9      	b.n	800bed2 <_malloc_r+0x46>
 800bf5e:	230c      	movs	r3, #12
 800bf60:	603b      	str	r3, [r7, #0]
 800bf62:	4638      	mov	r0, r7
 800bf64:	f000 f84c 	bl	800c000 <__malloc_unlock>
 800bf68:	e7a1      	b.n	800beae <_malloc_r+0x22>
 800bf6a:	6025      	str	r5, [r4, #0]
 800bf6c:	e7de      	b.n	800bf2c <_malloc_r+0xa0>
 800bf6e:	bf00      	nop
 800bf70:	20000860 	.word	0x20000860

0800bf74 <_realloc_r>:
 800bf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf78:	4680      	mov	r8, r0
 800bf7a:	4614      	mov	r4, r2
 800bf7c:	460e      	mov	r6, r1
 800bf7e:	b921      	cbnz	r1, 800bf8a <_realloc_r+0x16>
 800bf80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf84:	4611      	mov	r1, r2
 800bf86:	f7ff bf81 	b.w	800be8c <_malloc_r>
 800bf8a:	b92a      	cbnz	r2, 800bf98 <_realloc_r+0x24>
 800bf8c:	f7ff ff12 	bl	800bdb4 <_free_r>
 800bf90:	4625      	mov	r5, r4
 800bf92:	4628      	mov	r0, r5
 800bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf98:	f000 f838 	bl	800c00c <_malloc_usable_size_r>
 800bf9c:	4284      	cmp	r4, r0
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	d802      	bhi.n	800bfa8 <_realloc_r+0x34>
 800bfa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfa6:	d812      	bhi.n	800bfce <_realloc_r+0x5a>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4640      	mov	r0, r8
 800bfac:	f7ff ff6e 	bl	800be8c <_malloc_r>
 800bfb0:	4605      	mov	r5, r0
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d0ed      	beq.n	800bf92 <_realloc_r+0x1e>
 800bfb6:	42bc      	cmp	r4, r7
 800bfb8:	4622      	mov	r2, r4
 800bfba:	4631      	mov	r1, r6
 800bfbc:	bf28      	it	cs
 800bfbe:	463a      	movcs	r2, r7
 800bfc0:	f7ff fbb0 	bl	800b724 <memcpy>
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4640      	mov	r0, r8
 800bfc8:	f7ff fef4 	bl	800bdb4 <_free_r>
 800bfcc:	e7e1      	b.n	800bf92 <_realloc_r+0x1e>
 800bfce:	4635      	mov	r5, r6
 800bfd0:	e7df      	b.n	800bf92 <_realloc_r+0x1e>
	...

0800bfd4 <_sbrk_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4d06      	ldr	r5, [pc, #24]	; (800bff0 <_sbrk_r+0x1c>)
 800bfd8:	2300      	movs	r3, #0
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	602b      	str	r3, [r5, #0]
 800bfe0:	f7f5 fb4c 	bl	800167c <_sbrk>
 800bfe4:	1c43      	adds	r3, r0, #1
 800bfe6:	d102      	bne.n	800bfee <_sbrk_r+0x1a>
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	b103      	cbz	r3, 800bfee <_sbrk_r+0x1a>
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
 800bff0:	20000868 	.word	0x20000868

0800bff4 <__malloc_lock>:
 800bff4:	4801      	ldr	r0, [pc, #4]	; (800bffc <__malloc_lock+0x8>)
 800bff6:	f000 b811 	b.w	800c01c <__retarget_lock_acquire_recursive>
 800bffa:	bf00      	nop
 800bffc:	2000086c 	.word	0x2000086c

0800c000 <__malloc_unlock>:
 800c000:	4801      	ldr	r0, [pc, #4]	; (800c008 <__malloc_unlock+0x8>)
 800c002:	f000 b80c 	b.w	800c01e <__retarget_lock_release_recursive>
 800c006:	bf00      	nop
 800c008:	2000086c 	.word	0x2000086c

0800c00c <_malloc_usable_size_r>:
 800c00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c010:	1f18      	subs	r0, r3, #4
 800c012:	2b00      	cmp	r3, #0
 800c014:	bfbc      	itt	lt
 800c016:	580b      	ldrlt	r3, [r1, r0]
 800c018:	18c0      	addlt	r0, r0, r3
 800c01a:	4770      	bx	lr

0800c01c <__retarget_lock_acquire_recursive>:
 800c01c:	4770      	bx	lr

0800c01e <__retarget_lock_release_recursive>:
 800c01e:	4770      	bx	lr

0800c020 <_init>:
 800c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c022:	bf00      	nop
 800c024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c026:	bc08      	pop	{r3}
 800c028:	469e      	mov	lr, r3
 800c02a:	4770      	bx	lr

0800c02c <_fini>:
 800c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02e:	bf00      	nop
 800c030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c032:	bc08      	pop	{r3}
 800c034:	469e      	mov	lr, r3
 800c036:	4770      	bx	lr
